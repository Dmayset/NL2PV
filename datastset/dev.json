[
  {
    "db_id": "game_1",
    "question": "Show all sport name and the number of students in a bar chart , and list by the y-axis in ascending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nSportsinfo.columns = Sportsinfo.columns.str.lower()\n\n# Grouping the data by sportname and counting the occurrences\nsport_counts = Sportsinfo.groupby('sportname').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nsport_counts = sport_counts.sort_values('count')\n\n# Creating the bar plot\nplt.bar(sport_counts['sportname'], sport_counts['count'])\nplt.xlabel('Sport Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Sport Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "riding_club",
    "question": "Visualize a bar chart that X-axis is the gender and compute the number of players in each gender as a Y-axis .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nplayer.columns = player.columns.str.lower()\n\n# Grouping the data by gender and counting the occurrences\ngender_count = player.groupby('gender').size()\n\n# Creating a bar plot\nplt.bar(gender_count.index, gender_count.values)\n\n# Adding labels and title\nplt.xlabel('Gender')\nplt.ylabel('Count')\nplt.title('Gender Distribution')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "what are the different template type codes, and how many documents use each type?, and I want to list by the Y-axis in desc.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Templates table\ntemplates = pd.read_sql(\"SELECT * FROM Templates\", conn)\n\n# Read the Documents table\ndocuments = pd.read_sql(\"SELECT * FROM Documents\", conn)\n\n# Convert column names to lowercase\ntemplates.columns = templates.columns.str.lower()\ndocuments.columns = documents.columns.str.lower()\n\n# merge the templates and documents tables on template_id\nmerged_data = pd.merge(templates, documents, on=\"template_id\")\n\n# group by template_type_code and count the number of occurrences\ngrouped_data = merged_data.groupby(\"template_type_code\").size().reset_index(name=\"count\")\n\n# sort the data by count in descending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=False)\n\n# plot the bar chart\nplt.bar(sorted_data[\"template_type_code\"], sorted_data[\"count\"])\nplt.xlabel(\"Template Type Code\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Templates by Template Type Code\")\nplt.show()\n"
  },
  {
    "db_id": "journal_committee",
    "question": "Group and count the name attribute for visualizing a bar chart , and display total number in asc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\neditor.columns = editor.columns.str.lower()\n\n# Assuming the table data is stored in a DataFrame called 'editor'\nresult = editor.groupby('name').size().reset_index(name='count').sort_values('count')\n\nplt.bar(result['name'], result['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Count of Names')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Show the number of different competition types with a bar graph , sort the number of competition type from high to low order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort by count in descending order\ncompetition_counts = competition_counts.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Competition Type Counts')\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "How many musicals has each nominee been nominated for . Show a pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Assuming the data is already loaded into a dataframe called 'musical'\n\n# Grouping the data by 'nominee' and counting the occurrences\ngrouped_data = musical.groupby('nominee').size().reset_index(name='count')\n\n# Creating a pie chart\nplt.pie(grouped_data['count'], labels=grouped_data['nominee'], autopct='%1.1f%%')\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the relationship between document id and the number of paragraphs in each document? Visualize with a scatter chart.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the 'Paragraphs' table\nparagraphs = pd.read_sql(\"SELECT * FROM paragraphs\", conn)\n\n# Read the 'Documents' table\ndocuments = pd.read_sql(\"SELECT * FROM documents\", conn)\n\n# Convert column names to lowercase\nparagraphs.columns = paragraphs.columns.str.lower()\ndocuments.columns = documents.columns.str.lower()\n\n# merge the two tables on 'document_id'\nmerged_data = pd.merge(paragraphs, documents, on='document_id')\n\n# group by 'document_id' and count the number of rows\ngrouped_data = merged_data.groupby('document_id').size().reset_index(name='count')\n\n# scatter plot\nplt.scatter(grouped_data['document_id'], grouped_data['count'])\nplt.xlabel('Document ID')\nplt.ylabel('Count')\nplt.title('Number of Paragraphs per Document')\nplt.show()\n"
  },
  {
    "db_id": "entrepreneur",
    "question": "Return a pie on what are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor?",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the entrepreneur table\nentrepreneur_df = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\n\n# Convert column names to lowercase\nentrepreneur_df.columns = entrepreneur_df.columns.str.lower()\n\n# Perform the SQL query\nresult = entrepreneur_df.groupby('investor').size()\n\n# Plot the pie chart\nplt.pie(result, labels=result.index, autopct='%1.1f%%')\nplt.title('Investor Distribution')\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "How many players are actively engaged in playing the games \"Call of Destiny\" and \"Works of Widenius\" according to a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nVideo_games = pd.read_sql(\"SELECT * FROM Video_games\", conn)\nPlays_games = pd.read_sql(\"SELECT * FROM Plays_games\", conn)\nVideo_games.columns = Video_games.columns.str.lower()\nPlays_games.columns = Plays_games.columns.str.lower()\n\n# Merge the two dataframes on gameid\nmerged_df = pd.merge(Video_games, Plays_games, on='gameid')\n\n# Filter the merged dataframe for the specified game names\nfiltered_df = merged_df[merged_df['gname'].isin(['Call of Destiny', 'Works of Widenius'])]\n\n# Group by gname and count the number of occurrences\ngrouped_df = filtered_df.groupby('gname').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['gname'], grouped_df['count'])\nplt.xlabel('Game Name')\nplt.ylabel('Count')\nplt.title('Number of Plays for Selected Games')\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Compare the prices of furnitures which some companies are manufacturing by each name using a bar chart, display in desc by the Name.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the furniture table\nfurniture = pd.read_sql(\"SELECT * FROM furniture\", conn)\nfurniture.columns = map(str.lower, furniture.columns)\n\n# Read the furniture_manufacte table\nfurniture_manufacte = pd.read_sql(\"SELECT * FROM furniture_manufacte\", conn)\nfurniture_manufacte.columns = map(str.lower, furniture_manufacte.columns)\n\n# Merge the two tables on Furniture_ID\nmerged_data = pd.merge(furniture, furniture_manufacte, on=\"furniture_id\")\n\n# Sort the merged data by Name in descending order\nsorted_data = merged_data.sort_values(by=\"name\", ascending=False)\n\n# Extract the required columns\nname = sorted_data[\"name\"]\nprice_in_dollar = sorted_data[\"price_in_dollar\"]\n\n# Create a bar plot\nplt.bar(name, price_in_dollar)\nplt.xlabel(\"Name\")\nplt.ylabel(\"Price in Dollar\")\nplt.title(\"Furniture Prices\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Show me the number of country by country in a bar , sort by the bar in asc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by country and count the occurrences\ncountry_counts = competition.groupby('country').size().reset_index(name='count')\n\n# Sort by country in ascending order\ncountry_counts = country_counts.sort_values('country')\n\n# Create bar plot\nplt.bar(country_counts['country'], country_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "Can you create a bar chart to display the average amount of transactions for different lots, ordered by the average amount of transactions?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nTRANSACTIONS = pd.read_sql(\"SELECT * FROM TRANSACTIONS\", conn)\nTransactions_Lots = pd.read_sql(\"SELECT * FROM Transactions_Lots\", conn)\nTRANSACTIONS.columns = TRANSACTIONS.columns.str.lower()\nTransactions_Lots.columns = Transactions_Lots.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(TRANSACTIONS, Transactions_Lots, on='transaction_id')\n\n# Calculate the average amount of transaction for each lot_id\navg_amount_by_lot = merged_df.groupby('lot_id')['amount_of_transaction'].mean().reset_index()\n\n# Sort the dataframe by average amount of transaction\nsorted_avg_amount_by_lot = avg_amount_by_lot.sort_values('amount_of_transaction')\n\n# Plot the bar chart\nplt.bar(sorted_avg_amount_by_lot['lot_id'], sorted_avg_amount_by_lot['amount_of_transaction'])\nplt.xlabel('Lot ID')\nplt.ylabel('Average Amount of Transaction')\nplt.title('Average Amount of Transaction by Lot ID')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Show me a line chart representing the count of movies that received a rating of 4 or 5 for each year, sorted in descending order of the count.",
    "chart": "Line",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nMovie = pd.read_sql(\"SELECT * FROM Movie\", conn)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nMovie.columns = Movie.columns.str.lower()\nRating.columns = Rating.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(Movie, Rating, on='mid')\n\n# Filtering the data\nfiltered_df = merged_df[merged_df['stars'] >= 4]\n\n# Grouping and counting by year\ngrouped_df = filtered_df.groupby('year').size().reset_index(name='count')\n\n# Sorting by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plotting the line chart\nplt.plot(sorted_df['year'], sorted_df['count'])\nplt.xlabel('Year')\nplt.ylabel('Count')\nplt.title('Number of Movies with Rating >= 4 by Year')\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "Show me a bar chart displaying the purchase details of transactions with amounts greater than 10000, and include the frequency of each purchase detail in the chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nPURCHASES = pd.read_sql(\"SELECT * FROM PURCHASES\", conn)\nTRANSACTIONS = pd.read_sql(\"SELECT * FROM TRANSACTIONS\", conn)\nPURCHASES.columns = PURCHASES.columns.str.lower()\nTRANSACTIONS.columns = TRANSACTIONS.columns.str.lower()\n\n# Merge the PURCHASES and TRANSACTIONS dataframes\nmerged_df = pd.merge(PURCHASES, TRANSACTIONS, left_on='purchase_transaction_id', right_on='transaction_id')\n\n# Filter the merged dataframe based on the condition\nfiltered_df = merged_df[merged_df['amount_of_transaction'] > 10000]\n\n# Group by 'purchase_details' and count the number of occurrences\ngrouped_df = filtered_df.groupby('purchase_details').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['purchase_details'], grouped_df['count'])\nplt.xlabel('Purchase Details')\nplt.ylabel('Count')\nplt.title('Number of Purchases by Details')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "Show the number of competitions held in each city with a bar chart, and rank x axis in ascending order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the city and farm_competition tables\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\nfarm_competition = pd.read_sql(\"SELECT * FROM farm_competition\", conn)\n\n# Convert column names to lowercase\ncity.columns = city.columns.str.lower()\nfarm_competition.columns = farm_competition.columns.str.lower()\n\n# Merge the city and farm_competition tables on City_ID and Host_city_ID columns\nmerged_data = pd.merge(city, farm_competition, left_on=\"city_id\", right_on=\"host_city_id\")\n\n# Perform the SQL query and group by Official_Name, count the occurrences\nresult = merged_data.groupby(\"official_name\").size().reset_index(name=\"count\")\n\n# Sort the result by Official_Name in ascending order\nresult = result.sort_values(\"official_name\", ascending=True)\n\n# Plot the bar chart\nplt.bar(result[\"official_name\"], result[\"count\"])\nplt.xlabel(\"Official Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Farm Competitions by Official Name\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "car_1",
    "question": "What are the names and ids of all makers with more than 3 models, could you rank y-axis in desc order?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read data from the CAR_MAKERS table\ncar_makers = pd.read_sql(\"SELECT * FROM CAR_MAKERS\", conn)\ncar_makers.columns = map(str.lower, car_makers.columns)\n\n# Read data from the MODEL_LIST table\nmodel_list = pd.read_sql(\"SELECT * FROM MODEL_LIST\", conn)\nmodel_list.columns = map(str.lower, model_list.columns)\n\n# Merge the two tables on the 'id' column\nmerged_data = pd.merge(car_makers, model_list, left_on='id', right_on='maker')\n\n# Sort the merged data by 'id' in descending order\nsorted_data = merged_data.sort_values('id', ascending=False)\n\n# Extract the 'fullname' and 'id' columns\nfullname = sorted_data['fullname']\nid = sorted_data['id']\n\n# Create a bar plot\nplt.bar(fullname, id)\nplt.xlabel('Full Name')\nplt.ylabel('ID')\nplt.title('Car Makers and IDs')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "A bar chart about how many hosts does each nationality have ? List the nationality and the count , and display by the Y in ascending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nHOST = pd.read_sql(\"SELECT * FROM HOST\", conn)\nHOST.columns = HOST.columns.str.lower()\n\n# Grouping the data by nationality and counting the occurrences\nnationality_counts = HOST.groupby('nationality').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nnationality_counts = nationality_counts.sort_values('count')\n\n# Creating the bar plot\nplt.bar(nationality_counts['nationality'], nationality_counts['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Hosts by Nationality')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "Give me a bar showing the famous titles and ages of each artist with the age in descending order .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Assuming the data is already loaded into the 'artist' dataframe\n\n# Sort the dataframe by age in descending order\nsorted_artist = artist.sort_values(by='age', ascending=False)\n\n# Extract the 'famous_title' and 'age' columns\nfamous_title = sorted_artist['famous_title']\nage = sorted_artist['age']\n\n# Create a bar plot\nplt.bar(famous_title, age)\n\n# Set the x-axis label\nplt.xlabel('Famous Title')\n\n# Set the y-axis label\nplt.ylabel('Age')\n\n# Set the title of the plot\nplt.title('Age of Artists by Famous Title')\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "How many hosts does each nationality have ? List the nationality and the count Visualize by bar chart , and could you sort by the x axis in ascending ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nHOST = pd.read_sql(\"SELECT * FROM HOST\", conn)\nHOST.columns = HOST.columns.str.lower()\n\n# Grouping the data by nationality and counting the occurrences\nnationality_counts = HOST.groupby('nationality').size().reset_index(name='count')\n\n# Sorting the data by nationality in ascending order\nnationality_counts = nationality_counts.sort_values('nationality')\n\n# Creating the bar plot\nplt.bar(nationality_counts['nationality'], nationality_counts['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Hosts by Nationality')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "What is the breakdown of result descriptions for the project with the detail 'sint', and how many occurrences are there for each description? Show me a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nResearch_outcomes = pd.read_sql(\"SELECT * FROM Research_outcomes\", conn)\nProject_outcomes = pd.read_sql(\"SELECT * FROM Project_outcomes\", conn)\nProjects = pd.read_sql(\"SELECT * FROM Projects\", conn)\nResearch_outcomes.columns = Research_outcomes.columns.str.lower()\nProject_outcomes.columns = Project_outcomes.columns.str.lower()\nProjects.columns = Projects.columns.str.lower()\n\n# Merge the tables\nmerged_df = pd.merge(Research_outcomes, Project_outcomes, on='outcome_code')\nmerged_df = pd.merge(merged_df, Projects, on='project_id')\n\n# Filter the data\nfiltered_df = merged_df[merged_df['project_details'] == 'sint']\n\n# Group by outcome_description and count the occurrences\ngrouped_df = filtered_df.groupby('outcome_description').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['outcome_description'], grouped_df['count'])\nplt.xlabel('Outcome Description')\nplt.ylabel('Count')\nplt.title('Research Outcome Counts for Projects with Project Details \"sint\"')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "What is the count of organizations with each type description whose detail is listed as 'quo' shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\norganisation_Types = pd.read_sql(\"SELECT * FROM organisation_Types\", conn)\nOrganisations = pd.read_sql(\"SELECT * FROM Organisations\", conn)\norganisation_Types.columns = organisation_Types.columns.str.lower()\nOrganisations.columns = Organisations.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(organisation_Types, Organisations, left_on='organisation_type', right_on='organisation_type')\n\n# Filter the data based on organisation_details\nfiltered_df = merged_df[merged_df['organisation_details'] == 'quo']\n\n# Group by organisation_type_description and count the occurrences\ngrouped_df = filtered_df.groupby('organisation_type_description').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['organisation_type_description'], grouped_df['count'])\nplt.xlabel('Organisation Type Description')\nplt.ylabel('Count')\nplt.title('Number of Organisations by Type Description')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "Show the average of population from each status , rank from low to high by the X .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncity.columns = city.columns.str.lower()\n\n# Group by status and calculate average population\ngrouped_city = city.groupby('status')['population'].mean()\n\n# Sort by status in ascending order\ngrouped_city = grouped_city.sort_index()\n\n# Create bar plot\nplt.bar(grouped_city.index, grouped_city.values)\n\n# Set labels and title\nplt.xlabel('Status')\nplt.ylabel('Average Population')\nplt.title('Average Population by Status')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "Just show the id and name of each editor using a bar chart, and could you show in desc by the Editor_ID?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the editor table\neditor_df = pd.read_sql(\"SELECT * FROM editor\", conn)\neditor_df.columns = map(str.lower, editor_df.columns)\n\n# Read the journal_committee table\njournal_committee_df = pd.read_sql(\"SELECT * FROM journal_committee\", conn)\njournal_committee_df.columns = map(str.lower, journal_committee_df.columns)\n\n# Merge the two tables on Editor_ID\nmerged_df = pd.merge(editor_df, journal_committee_df, on=\"editor_id\")\n\n# Sort the merged dataframe by Editor_ID in descending order\nsorted_df = merged_df.sort_values(by=\"editor_id\", ascending=False)\n\n# Create a bar plot\nplt.bar(sorted_df[\"name\"], sorted_df[\"editor_id\"])\n\n# Set the x-axis label\nplt.xlabel(\"Editor Name\")\n\n# Set the y-axis label\nplt.ylabel(\"Editor ID\")\n\n# Set the title of the plot\nplt.title(\"Editor ID vs. Editor Name\")\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "Show different nationalities along with the number of hosts of each nationality in a bar chart , order by the names from high to low .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nHOST = pd.read_sql(\"SELECT * FROM HOST\", conn)\nHOST.columns = HOST.columns.str.lower()\n\n# Grouping the data by nationality and counting the occurrences\nnationality_counts = HOST.groupby('nationality').size().reset_index(name='count')\n\n# Sorting the data by nationality in descending order\nnationality_counts = nationality_counts.sort_values(by='nationality', ascending=False)\n\n# Creating the bar plot\nplt.bar(nationality_counts['nationality'], nationality_counts['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Hosts by Nationality')\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "What is the total number of captains with different classes ?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\ncaptain.columns = captain.columns.str.lower()\n\n# Group by 'class' and count the occurrences\nclass_counts = captain.groupby('class').size()\n\n# Create a bar plot\nplt.bar(class_counts.index, class_counts.values)\n\n# Set the labels and title\nplt.xlabel('Class')\nplt.ylabel('Count')\nplt.title('Count of Class')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "county_public_safety",
    "question": "Show white percentages of cities and the crime rates of counties they are in with a scatter chart.",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the city table\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncity.columns = map(str.lower, city.columns)\n\n# Read the county_public_safety table\ncounty_public_safety = pd.read_sql(\"SELECT * FROM county_public_safety\", conn)\ncounty_public_safety.columns = map(str.lower, county_public_safety.columns)\n\n# Merge the city and county_public_safety tables on County_ID\nmerged_data = pd.merge(city, county_public_safety, on='county_id')\n\n# Create a scatter plot\nplt.scatter(merged_data['white'], merged_data['crime_rate'])\nplt.xlabel('White')\nplt.ylabel('Crime Rate')\nplt.title('Scatter Plot of White vs Crime Rate')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Please tell me the total star ratings of each movie title using a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating and Movie tables\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\n\n# Convert column names to lowercase\nrating_df.columns = rating_df.columns.str.lower()\nmovie_df.columns = movie_df.columns.str.lower()\n\n# Merge the Rating and Movie tables on mID column\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Group by title and calculate the sum of stars\ngrouped_df = merged_df.groupby(\"title\")[\"stars\"].sum().reset_index()\n\n# Plot the pie chart\nplt.pie(grouped_df[\"stars\"], labels=grouped_df[\"title\"], autopct=\"%1.1f%%\")\nplt.axis(\"equal\")\nplt.title(\"Total Stars by Movie Title\")\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "How many musicals has each nominee been nominated for Plot them as bar chart , and display from low to high by the x axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Group by nominee and count the occurrences\ngrouped = musical.groupby('nominee').size().reset_index(name='count')\n\n# Sort by nominee in ascending order\ngrouped = grouped.sort_values('nominee')\n\n# Create bar plot\nplt.bar(grouped['nominee'], grouped['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "riding_club",
    "question": "Visualize a bar chart that X-axis is the gender and compute the number of players in each gender as a Y-axis, show from low to high by the X.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the player table\nplayer_df = pd.read_sql(\"SELECT * FROM player\", conn)\n\n# Convert column names to lowercase\nplayer_df.columns = player_df.columns.str.lower()\n\n# Perform the SQL query\ngender_count = player_df.groupby('gender').size().reset_index(name='count').sort_values('gender')\n\n# Generate the bar plot\nplt.bar(gender_count['gender'], gender_count['count'])\nplt.xlabel('Gender')\nplt.ylabel('Count')\nplt.title('Gender Distribution')\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "What is the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes' in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\nmanagement = pd.read_sql(\"SELECT * FROM management\", conn)\ndepartment.columns = department.columns.str.lower()\nmanagement.columns = management.columns.str.lower()\n\n# Perform the join operation\ndf = pd.merge(department, management, on='department_id')\n\n# Filter the data based on the condition\ndf_filtered = df[df['temporary_acting'] == 'Yes']\n\n# Group by department name and count the number of employees\ndf_grouped = df_filtered.groupby('name').size().reset_index(name='num_employees')\n\n# Plot the bar chart\nplt.bar(df_grouped['name'], df_grouped['num_employees'])\nplt.xlabel('Department')\nplt.ylabel('Number of Employees')\nplt.title('Number of Employees in Each Department with Temporary Acting')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "What are the names and ages of editors ? Show me a bar chart , I want to list in desc by the x axis .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\neditor.columns = editor.columns.str.lower()\n\n# Assuming the data is already loaded into a dataframe called 'editor'\n\n# Sort the dataframe by name in descending order\nsorted_df = editor.sort_values(by='name', ascending=False)\n\n# Extract the name and age columns\nname = sorted_df['name']\nage = sorted_df['age']\n\n# Create a bar plot\nplt.bar(name, age)\n\n# Add labels and title\nplt.xlabel('Name')\nplt.ylabel('Age')\nplt.title('Age by Name')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Give me a bar for what are the types of competition and number of competitions for that type ?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the number of occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Create a bar plot\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Type')\nplt.show()"
  },
  {
    "db_id": "company_employee",
    "question": "Bar chart x axis headquarters y axis the total number",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompany = pd.read_sql(\"SELECT * FROM company\", conn)\ncompany.columns = company.columns.str.lower()\n\n# Group by headquarters and count the number of companies\nheadquarters_count = company.groupby('headquarters').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(headquarters_count['headquarters'], headquarters_count['count'])\nplt.xlabel('Headquarters')\nplt.ylabel('Count')\nplt.title('Number of Companies by Headquarters')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the paragraph texts for the document with the name 'Customer reviews', and count them by a pie chart",
    "chart": "Pie",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the Paragraphs table\nparagraphs = pd.read_sql(\"SELECT * FROM Paragraphs\", conn)\n\n# Read the data from the Documents table\ndocuments = pd.read_sql(\"SELECT * FROM Documents\", conn)\n\n# Convert column names to lowercase\nparagraphs.columns = paragraphs.columns.str.lower()\ndocuments.columns = documents.columns.str.lower()\n\n# merge the two tables on document_id\nmerged_data = pd.merge(paragraphs, documents, on=\"document_id\")\n\n# filter the merged data for \"customer reviews\" document_name\nfiltered_data = merged_data[merged_data[\"document_name\"] == \"customer reviews\"]\n\n# group by paragraph_text and count the occurrences\ngrouped_data = filtered_data.groupby(\"paragraph_text\").size().reset_index(name=\"count\")\n\n# plot the pie chart\nplt.pie(grouped_data[\"count\"], labels=grouped_data[\"paragraph_text\"], autopct=\"%1.1f%%\")\nplt.axis(\"equal\")\nplt.show()\n"
  },
  {
    "db_id": "sports_competition",
    "question": "List the position of players and the average number of points of players of each position Visualize by bar chart, and could you sort by the total number in ascending?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the player table\nplayer_df = pd.read_sql(\"SELECT * FROM player\", conn)\n\n# Convert column names to lowercase\nplayer_df.columns = player_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = player_df.groupby('position')['points'].mean().reset_index().sort_values('points')\n\n# Generate the bar plot\nplt.bar(result_df['position'], result_df['points'])\nplt.xlabel('Position')\nplt.ylabel('Average Points')\nplt.title('Average Points by Position')\nplt.show()"
  },
  {
    "db_id": "company_employee",
    "question": "Give me a pie to show how many industry from different industry .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompany = pd.read_sql(\"SELECT * FROM company\", conn)\ncompany.columns = company.columns.str.lower()\n\n# Group by industry and count the number of companies in each industry\nindustry_counts = company.groupby('industry').size().reset_index(name='count')\n\n# Plot a pie chart\nplt.pie(industry_counts['count'], labels=industry_counts['industry'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Show different nominees and the number of musicals they have been nominated in a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Group by nominee and count the number of occurrences\nnominee_counts = musical.groupby('nominee').size().reset_index(name='count')\n\n# Create a bar plot\nplt.bar(nominee_counts['nominee'], nominee_counts['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Find the number of funiture types produced by each manufacturer as well as the company names Show bar chart, and show by the Y-axis in ascending.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the manufacturer table\nmanufacturer = pd.read_sql(\"SELECT * FROM manufacturer\", conn)\nmanufacturer.columns = map(str.lower, manufacturer.columns)\n\n# Read the furniture_manufacte table\nfurniture_manufacte = pd.read_sql(\"SELECT * FROM furniture_manufacte\", conn)\nfurniture_manufacte.columns = map(str.lower, furniture_manufacte.columns)\n\n# Merge the two tables on manufacturer_id\nmerged_data = pd.merge(manufacturer, furniture_manufacte, on=\"manufacturer_id\")\n\n# Group by manufacturer_id and count the number of records\ngrouped_data = merged_data.groupby(\"manufacturer_id\").size().reset_index(name=\"count\")\n\n# Sort the data by count in ascending order\nsorted_data = grouped_data.sort_values(\"count\")\n\n# Plot the bar chart\nplt.bar(sorted_data[\"manufacturer_id\"], sorted_data[\"count\"])\nplt.xlabel(\"Manufacturer ID\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Furniture by Manufacturer\")\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "What is the distribution of total hours played for each game in the 'Plays_games' table, joined with the corresponding game name from the 'Video_games' table, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nPlays_games = pd.read_sql(\"SELECT * FROM Plays_games\", conn)\nVideo_games = pd.read_sql(\"SELECT * FROM Video_games\", conn)\nPlays_games.columns = Plays_games.columns.str.lower()\nVideo_games.columns = Video_games.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Plays_games, Video_games, on='gameid')\n\n# Group by game name and calculate the sum of hours played\ngrouped_df = merged_df.groupby('gname')['hours_played'].sum().reset_index()\n\n# Plot the pie chart\nplt.pie(grouped_df['hours_played'], labels=grouped_df['gname'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.title('Total Hours Played by Game')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Which reviewers, who have given ratings of 3 stars and 4 stars, have the highest number of ratings? Display the results using a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nReviewer = pd.read_sql(\"SELECT * FROM Reviewer\", conn)\nRating.columns = Rating.columns.str.lower()\nReviewer.columns = Reviewer.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Rating, Reviewer, on='rid')\n\n# Filter the data based on stars\nfiltered_df = merged_df[(merged_df['stars'] == 3) | (merged_df['stars'] == 4)]\n\n# Group by reviewer name and count the number of ratings\ngrouped_df = filtered_df.groupby('name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['name'], grouped_df['count'])\nplt.xlabel('Reviewer Name')\nplt.ylabel('Count')\nplt.title('Number of Ratings with 3 or 4 Stars by Reviewer')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Draw a bar chart to compare the stars of each movie by title, and sort in descending by the Y-axis.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\nmovie_df.columns = map(str.lower, movie_df.columns)\n\n# Merge the Rating and Movie tables on mID column\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Sort the merged dataframe by stars in descending order\nsorted_df = merged_df.sort_values(by=\"stars\", ascending=False)\n\n# Select the title and stars columns\nselected_df = sorted_df[[\"title\", \"stars\"]]\n\n# Plot the bar chart\nplt.bar(selected_df[\"title\"], selected_df[\"stars\"])\nplt.xlabel(\"Movie Title\")\nplt.ylabel(\"Stars\")\nplt.title(\"Top Rated Movies\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "What are the number of the titles of all movies that have between 3 and 5 stars?, rank Y-axis in asc order.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating and Movie tables\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\n\n# Convert column names to lowercase\nrating_df.columns = rating_df.columns.str.lower()\nmovie_df.columns = movie_df.columns.str.lower()\n\n# Merge the Rating and Movie tables on mID\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Filter the merged dataframe for stars between 3 and 5\nfiltered_df = merged_df[(merged_df[\"stars\"] >= 3) & (merged_df[\"stars\"] <= 5)]\n\n# Group by title and count the occurrences\ngrouped_df = filtered_df.groupby(\"title\").size().reset_index(name=\"count\")\n\n# Sort the dataframe by count in ascending order\nsorted_df = grouped_df.sort_values(\"count\", ascending=True)\n\n# Plot the bar chart\nplt.bar(sorted_df[\"title\"], sorted_df[\"count\"])\nplt.xlabel(\"Movie Title\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Ratings for Movies with Stars between 3 and 5\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "school_player",
    "question": "Which schools have a higher number of players? Show the school locations and player count in a bar chart, sorted in ascending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nschool = pd.read_sql(\"SELECT * FROM school\", conn)\nplayer.columns = player.columns.str.lower()\nschool.columns = school.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(player, school, on='school_id')\n\n# Group by location and count the number of players\ngrouped_df = merged_df.groupby('location').size().reset_index(name='count')\n\n# Filter the schools with count greater than 1\nfiltered_df = grouped_df[grouped_df['count'] > 1]\n\n# Sort the schools by count in ascending order\nsorted_df = filtered_df.sort_values('count')\n\n# Plot the bar chart\nplt.bar(sorted_df['location'], sorted_df['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Players in Schools with Count > 1')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "Just show the id and name of each editor using a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the editor table\neditor_df = pd.read_sql(\"SELECT * FROM editor\", conn)\n# Convert column names to lowercase\neditor_df.columns = editor_df.columns.str.lower()\n\n# Read the journal_committee table\njournal_committee_df = pd.read_sql(\"SELECT * FROM journal_committee\", conn)\n# Convert column names to lowercase\njournal_committee_df.columns = journal_committee_df.columns.str.lower()\n\n# Merge the two tables on the editor_id column\nmerged_df = pd.merge(editor_df, journal_committee_df, on='editor_id')\n\n# Create a bar plot\nplt.bar(merged_df['name'], merged_df['editor_id'])\nplt.xlabel('Editor Name')\nplt.ylabel('Editor ID')\nplt.title('Editor ID by Name')\nplt.show()\n\n# Close the database connection\nconn.close()"
  },
  {
    "db_id": "department_management",
    "question": "Show the number of heads of departments born in each state with a bar chart , and could you rank Y-axis in asc order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nhead = pd.read_sql(\"SELECT * FROM head\", conn)\nhead.columns = head.columns.str.lower()\n\nresult = head.groupby('born_state').size().reset_index(name='count').sort_values('count')\n\nplt.bar(result['born_state'], result['count'])\nplt.xlabel('born_state')\nplt.ylabel('count')\nplt.title('Count of born_state')\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Return a scatter chart showing the relationship between major id and minimum age.",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Student table\nstudent_df = pd.read_sql(\"SELECT * FROM Student\", conn)\n\n# Convert column names to lowercase\nstudent_df.columns = student_df.columns.str.lower()\n\n# Group by Major and calculate the minimum age\ngrouped_df = student_df.groupby('major')['age'].min().reset_index()\n\n# Scatter plot\nplt.scatter(grouped_df['major'], grouped_df['age'])\nplt.xlabel('Major')\nplt.ylabel('Minimum Age')\nplt.title('Minimum Age by Major')\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "How many hosts does each nationality have ? List the nationality and the count Visualize by bar chart , and sort X-axis from high to low order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nHOST = pd.read_sql(\"SELECT * FROM HOST\", conn)\nHOST.columns = HOST.columns.str.lower()\n\n# Grouping the data by nationality and counting the occurrences\nnationality_counts = HOST.groupby('nationality').size().reset_index(name='count')\n\n# Sorting the data by nationality in descending order\nnationality_counts = nationality_counts.sort_values(by='nationality', ascending=False)\n\n# Creating the bar plot\nplt.bar(nationality_counts['nationality'], nationality_counts['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Hosts by Nationality')\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "A bar chart for showing the number of the names of editors that are on the committee of journals with sales bigger than 3000, sort Name in asc order.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the tables\njournal_committee = pd.read_sql(\"SELECT * FROM journal_committee\", conn)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\njournal = pd.read_sql(\"SELECT * FROM journal\", conn)\n\n# Convert column names to lowercase\njournal_committee.columns = journal_committee.columns.str.lower()\neditor.columns = editor.columns.str.lower()\njournal.columns = journal.columns.str.lower()\n\n# Merge the tables\nmerged_data = pd.merge(journal_committee, editor, on=\"editor_id\")\nmerged_data = pd.merge(merged_data, journal, on=\"journal_id\")\n\n# Filter the data\nfiltered_data = merged_data[merged_data[\"sales\"] > 3000]\n\n# Group by Name and count occurrences\ngrouped_data = filtered_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# Sort the data by Name\nsorted_data = grouped_data.sort_values(\"name\")\n\n# Plot the bar chart\nplt.bar(sorted_data[\"name\"], sorted_data[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of Names with Sales > 3000\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "For each continent where the average life expectancy is shorter than 72, show their total population with a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the country table\ncountry_df = pd.read_sql(\"SELECT * FROM country\", conn)\n\n# Convert column names to lowercase\ncountry_df.columns = country_df.columns.str.lower()\n\n# Calculate the average life expectancy by continent\ncontinent_avg_life = country_df.groupby('continent')['lifeexpectancy'].mean()\n\n# Filter continents with average life expectancy less than 72\nfiltered_continents = continent_avg_life[continent_avg_life < 72]\n\n# Calculate the total population by continent\ncontinent_population = country_df.groupby('continent')['population'].sum()\n\n# Filter population for the filtered continents\nfiltered_population = continent_population.loc[filtered_continents.index]\n\n# Plot the bar chart\nplt.bar(filtered_population.index, filtered_population.values)\nplt.xlabel('Continent')\nplt.ylabel('Population')\nplt.title('Total Population by Continent with Average Life Expectancy < 72')\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "How many companies each investor has invested? Show me a bar chart, and could you sort in desc by the bar?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the entrepreneur table\nentrepreneur_df = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\n\n# Convert column names to lowercase\nentrepreneur_df.columns = entrepreneur_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = entrepreneur_df.groupby('investor').size().reset_index(name='count').sort_values('investor', ascending=False)\n\n# Generate the bar plot\nplt.bar(result_df['investor'], result_df['count'])\nplt.xlabel('Investor')\nplt.ylabel('Count')\nplt.title('Number of Entrepreneurs by Investor')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Bar chart x axis nominee y axis the total number , and display from low to high by the x axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Group by nominee and count the occurrences\ngrouped = musical.groupby('nominee').size().reset_index(name='count')\n\n# Sort by nominee in ascending order\ngrouped = grouped.sort_values('nominee')\n\n# Create bar plot\nplt.bar(grouped['nominee'], grouped['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "coffee_shop",
    "question": "A scatter chart showing the correlation between age and purchase time.",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the \"member\" table\nmember_df = pd.read_sql(\"SELECT * FROM member\", conn)\n\n# Convert column names to lowercase\nmember_df.columns = member_df.columns.str.lower()\n\n# Select the required columns\nscatter_df = member_df[['time_of_purchase', 'age']]\n\n# Plot the scatter plot\nplt.scatter(scatter_df['time_of_purchase'], scatter_df['age'])\nplt.xlabel('Time of Purchase')\nplt.ylabel('Age')\nplt.title('Scatter Plot of Time of Purchase vs Age')\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , and rank by the x-axis from low to high .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry.columns = country.columns.str.lower()\n\n# Group by governmentform and calculate the sum of population\ngrouped_data = country.groupby('governmentform')['population'].sum()\n\n# Sort the data by governmentform in ascending order\nsorted_data = grouped_data.sort_index()\n\n# Create a bar plot\nplt.bar(sorted_data.index, sorted_data.values)\n\n# Set the x-axis label\nplt.xlabel('Government Form')\n\n# Set the y-axis label\nplt.ylabel('Population')\n\n# Set the title of the plot\nplt.title('Population by Government Form')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Show all sport name and the number of students in a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nSportsinfo.columns = Sportsinfo.columns.str.lower()\n\n# Grouping the data by sportname and counting the occurrences\nsport_counts = Sportsinfo.groupby('sportname').size().reset_index(name='count')\n\n# Creating the bar plot\nplt.bar(sport_counts['sportname'], sport_counts['count'])\nplt.xlabel('Sport Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Sport')\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "Display a bar chart for what are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor?, rank in descending by the bar please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the entrepreneur table\nentrepreneur_df = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\n\n# Convert column names to lowercase\nentrepreneur_df.columns = entrepreneur_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = entrepreneur_df.groupby('investor').size().reset_index(name='count').sort_values('investor', ascending=False)\n\n# Generate the bar chart\nplt.bar(result_df['investor'], result_df['count'])\nplt.xlabel('Investor')\nplt.ylabel('Count')\nplt.title('Number of Entrepreneurs by Investor')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Show me mean age by born state in a bar",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nhead = pd.read_sql(\"SELECT * FROM head\", conn)\nhead.columns = head.columns.str.lower()\n\n# Calculate the average age by born_state\navg_age_by_state = head.groupby('born_state')['age'].mean()\n\n# Create a bar plot\nplt.bar(avg_age_by_state.index, avg_age_by_state.values)\n\n# Set the labels and title\nplt.xlabel('Born State')\nplt.ylabel('Average Age')\nplt.title('Average Age by Born State')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "How many songs does each artist, who is at least 32 years old, have in volumes? Show the results in a bar chart.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nvolume = pd.read_sql(\"SELECT * FROM volume\", conn)\nartist.columns = artist.columns.str.lower()\nvolume.columns = volume.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(artist, volume, on='artist_id')\n\n# Filter the data based on age condition\nfiltered_df = merged_df[merged_df['age'] >= 32]\n\n# Group by artist and count the number of occurrences\ngrouped_df = filtered_df.groupby('artist').size().reset_index(name='count')\n\n# Sort the data by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['artist'], sorted_df['count'])\nplt.xlabel('Artist')\nplt.ylabel('Count')\nplt.title('Number of volumes by artist (age >= 32)')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "school_player",
    "question": "How many players are there in each school location, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nschool = pd.read_sql(\"SELECT * FROM school\", conn)\nplayer.columns = player.columns.str.lower()\nschool.columns = school.columns.str.lower()\n\n# Perform the join operation\nmerged_data = pd.merge(player, school, on='school_id')\n\n# Group by location and count the number of players in each location\nlocation_counts = merged_data['location'].value_counts()\n\n# Plot the pie chart\nplt.pie(location_counts, labels=location_counts.index, autopct='%1.1f%%')\nplt.title('Distribution of Players by Location')\nplt.show()"
  },
  {
    "db_id": "coffee_shop",
    "question": "Find the number of members living in each address . Plot them as pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmember = pd.read_sql(\"SELECT * FROM member\", conn)\nmember.columns = member.columns.str.lower()\n\n# Grouping the data by address and counting the occurrences\naddress_counts = member.groupby('address').size().reset_index(name='count')\n\n# Creating a pie chart\nplt.pie(address_counts['count'], labels=address_counts['address'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Displaying the chart\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Give me a bar chart for mean points of each position , and rank by the Y-axis in asc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nplayer.columns = player.columns.str.lower()\n\n# Group by position and calculate average points\navg_points = player.groupby('position')['points'].mean()\n\n# Sort the average points in ascending order\navg_points_sorted = avg_points.sort_values()\n\n# Create a bar plot\nplt.bar(avg_points_sorted.index, avg_points_sorted.values)\n\n# Set the labels and title\nplt.xlabel('Position')\nplt.ylabel('Average Points')\nplt.title('Average Points by Position')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Compare the total number of different ranks using a bar graph , and order from high to low by the how many rank .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\ncaptain.columns = captain.columns.str.lower()\n\n# Group by rank and count the occurrences\nrank_counts = captain.groupby('rank').size().reset_index(name='count')\n\n# Sort by count in descending order\nrank_counts = rank_counts.sort_values('count', ascending=False)\n\n# Create bar plot\nplt.bar(rank_counts['rank'], rank_counts['count'])\nplt.xlabel('Rank')\nplt.ylabel('Count')\nplt.title('Rank Counts')\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Show me a bar chart comparing the total number of captains in each rank , and list how many rank in asc order please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\ncaptain.columns = captain.columns.str.lower()\n\n# Group by rank and count the occurrences\nrank_counts = captain.groupby('rank').size().reset_index(name='count')\n\n# Sort the counts in ascending order\nrank_counts = rank_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(rank_counts['rank'], rank_counts['count'])\nplt.xlabel('Rank')\nplt.ylabel('Count')\nplt.title('Count of Captains by Rank')\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Visualize the name and their component amounts with a bar chart for all furnitures that have more than 10 components, could you order by the bar in ascending?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the furniture table into a DataFrame\nfurniture_df = pd.read_sql(\"SELECT * FROM furniture\", conn)\n\n# Convert column names to lowercase\nfurniture_df.columns = furniture_df.columns.str.lower()\n\n# Filter the DataFrame for Num_of_Component > 10\nfiltered_df = furniture_df[furniture_df['num_of_component'] > 10]\n\n# Sort the filtered DataFrame by Name in ascending order\nsorted_df = filtered_df.sort_values('name', ascending=True)\n\n# Create a bar plot\nplt.bar(sorted_df['name'], sorted_df['num_of_component'])\nplt.xlabel('Name')\nplt.ylabel('Num_of_Component')\nplt.title('Furniture with Num_of_Component > 10')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Return a bar chart on how many musicals has each nominee been nominated for?, and could you order by the X in asc?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the musical table\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\n\n# Convert column names to lowercase\nmusical.columns = musical.columns.str.lower()\n\n# Perform the SQL query\nresult = musical.groupby('nominee').size().reset_index(name='count').sort_values('nominee')\n\n# Generate the bar chart\nplt.bar(result['nominee'], result['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Musicals by Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Bar chart x axis location y axis how many location, and rank by the bars in asc.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the performance table\nperformance_df = pd.read_sql(\"SELECT * FROM performance\", conn)\n\n# Convert column names to lowercase\nperformance_df.columns = performance_df.columns.str.lower()\n\n# Perform the SQL query\nresult = performance_df.groupby('location').size().reset_index(name='count').sort_values('location')\n\n# Generate the bar plot\nplt.bar(result['location'], result['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Performances by Location')\nplt.show()"
  },
  {
    "db_id": "scientist_1",
    "question": "Find the name of the project for which a scientist whose name contains \u2018Smith\u2019 is assigned to, and count them by a bar chart",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the assignedto table\nassignedto = pd.read_sql(\"SELECT * FROM assignedto\", conn)\n\n# Read the data from the projects table\nprojects = pd.read_sql(\"SELECT * FROM projects\", conn)\n\n# Read the data from the scientists table\nscientists = pd.read_sql(\"SELECT * FROM scientists\", conn)\n\n# Convert column names to lowercase\nassignedto.columns = assignedto.columns.str.lower()\nprojects.columns = projects.columns.str.lower()\nscientists.columns = scientists.columns.str.lower()\n\n# Merge the assignedto, projects, and scientists tables\nmerged_data = pd.merge(assignedto, projects, left_on=\"project\", right_on=\"code\")\nmerged_data = pd.merge(merged_data, scientists, left_on=\"scientist\", right_on=\"ssn\")\n\n# Filter the data for scientists with name containing 'Smith'\nfiltered_data = merged_data[merged_data[\"name_x\"].str.contains(\"Smith\")]\n\n# Group the data by project name and count the occurrences\ngrouped_data = filtered_data.groupby(\"name_y\").size().reset_index(name=\"count\")\n\n# Plot the bar chart\nplt.bar(grouped_data[\"name_y\"], grouped_data[\"count\"])\nplt.xlabel(\"Project Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Assignments for Projects with Scientists Named Smith\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "department_management",
    "question": "Can you draw the trend of sum budget in billions over the creation ? , I want to rank x axis in descending order .",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = department.columns.str.lower()\n\n# Assuming 'department' is a DataFrame containing the table data\n\n# Grouping the data by 'creation' and calculating the sum of 'budget_in_billions'\ngrouped_data = department.groupby('creation')['budget_in_billions'].sum()\n\n# Sorting the data by 'creation' in descending order\nsorted_data = grouped_data.sort_index(ascending=False)\n\n# Creating a line plot\nplt.plot(sorted_data.index, sorted_data.values)\n\n# Adding labels and title\nplt.xlabel('Creation')\nplt.ylabel('Sum of Budget (in billions)')\nplt.title('Line Plot of Sum of Budget by Creation')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "List the number of the description of the outcomes for all projects, and list in desc by the the number of outcome description.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Research_outcomes table\nresearch_outcomes = pd.read_sql(\"SELECT * FROM Research_outcomes\", conn)\n\n# Read the Project_outcomes table\nproject_outcomes = pd.read_sql(\"SELECT * FROM Project_outcomes\", conn)\n\n# Convert column names to lowercase\nresearch_outcomes.columns = research_outcomes.columns.str.lower()\nproject_outcomes.columns = project_outcomes.columns.str.lower()\n\n# merge the two tables on outcome_code\nmerged_data = pd.merge(research_outcomes, project_outcomes, on=\"outcome_code\")\n\n# group by outcome_description and count the occurrences\ngrouped_data = merged_data.groupby(\"outcome_description\").size().reset_index(name=\"count\")\n\n# sort the data by count in descending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=False)\n\n# plot the bar chart\nplt.bar(sorted_data[\"outcome_description\"], sorted_data[\"count\"])\nplt.xlabel(\"Outcome Description\")\nplt.ylabel(\"Count\")\nplt.title(\"Bar Chart of Outcome Descriptions\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "farm",
    "question": "How many competitions are held in each city? Draw a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the city and farm_competition tables\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\nfarm_competition = pd.read_sql(\"SELECT * FROM farm_competition\", conn)\n\n# Convert column names to lowercase\ncity.columns = city.columns.str.lower()\nfarm_competition.columns = farm_competition.columns.str.lower()\n\n# Merge the city and farm_competition tables on City_ID and Host_city_ID columns\nmerged_data = pd.merge(city, farm_competition, left_on=\"city_id\", right_on=\"host_city_id\")\n\n# Perform the group by and count operation\ngrouped_data = merged_data.groupby(\"official_name\").size().reset_index(name=\"count\")\n\n# Plot the pie chart\nplt.pie(grouped_data[\"count\"], labels=grouped_data[\"official_name\"], autopct=\"%1.1f%%\")\nplt.axis(\"equal\")\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "Plot how many party by grouped by party as a bar graph, could you rank by the total number from low to high?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the representative table\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\n\n# Convert column names to lowercase\nrepresentative.columns = representative.columns.str.lower()\n\n# Perform the SQL query\nparty_counts = representative.groupby('party').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(party_counts['party'], party_counts['count'])\nplt.xlabel('Party')\nplt.ylabel('Count')\nplt.title('Number of Representatives by Party')\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "How many students play each sport Show bar chart , and sort bar in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nSportsinfo.columns = Sportsinfo.columns.str.lower()\n\n# Grouping the data by sportname and counting the occurrences\nsport_counts = Sportsinfo.groupby('sportname').size().reset_index(name='count')\n\n# Sorting the data by sportname in ascending order\nsport_counts = sport_counts.sort_values('sportname')\n\n# Creating the bar plot\nplt.bar(sport_counts['sportname'], sport_counts['count'])\nplt.xlabel('Sport Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Sport Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Show average of budget in different year and group by department creation time with a line chart , and order by the X-axis in descending .",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = department.columns.str.lower()\n\n# Assuming 'department' is a DataFrame containing the table data\n\n# Grouping the data by 'creation' and calculating the average of 'budget_in_billions'\ngrouped_data = department.groupby('creation')['budget_in_billions'].mean()\n\n# Sorting the data by 'creation' in descending order\nsorted_data = grouped_data.sort_index(ascending=False)\n\n# Creating a line plot\nplt.plot(sorted_data.index, sorted_data.values)\n\n# Adding labels and title\nplt.xlabel('Creation')\nplt.ylabel('Average Budget (in billions)')\nplt.title('Average Budget by Creation')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Show me a bar chart displaying the number of performances attended by each member, sorted in ascending order by count.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmember_attendance = pd.read_sql(\"SELECT * FROM member_attendance\", conn)\nmember = pd.read_sql(\"SELECT * FROM member\", conn)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\nmember_attendance.columns = member_attendance.columns.str.lower()\nmember.columns = member.columns.str.lower()\nperformance.columns = performance.columns.str.lower()\n\n# Perform the join operation\ndf = pd.merge(member_attendance, member, on='member_id')\ndf = pd.merge(df, performance, on='performance_id')\n\n# Group by member name and count the number of attendances\ndf_grouped = df.groupby('name').size().reset_index(name='count')\n\n# Sort the dataframe by count in ascending order\ndf_sorted = df_grouped.sort_values('count')\n\n# Plot the bar chart\nplt.bar(df_sorted['name'], df_sorted['count'])\nplt.xlabel('Member Name')\nplt.ylabel('Attendance Count')\nplt.title('Attendance Count by Member')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Bar graph to show the number of rank from different rank",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\ncaptain.columns = captain.columns.str.lower()\n\n# Grouping the data by rank and counting the occurrences\nrank_counts = captain.groupby('rank').size().reset_index(name='count')\n\n# Creating the bar plot\nplt.bar(rank_counts['rank'], rank_counts['count'])\nplt.xlabel('Rank')\nplt.ylabel('Count')\nplt.title('Count of Captains by Rank')\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "Bar graph to show total number of population from different governmentform , and order in desc by the X-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry.columns = country.columns.str.lower()\n\n# Group by governmentform and calculate the sum of population\ngrouped_data = country.groupby('governmentform')['population'].sum()\n\n# Sort the data by governmentform in descending order\nsorted_data = grouped_data.sort_index(ascending=False)\n\n# Create a bar plot\nplt.bar(sorted_data.index, sorted_data.values)\n\n# Set the x-axis labels\nplt.xlabel('Government Form')\n\n# Set the y-axis label\nplt.ylabel('Population')\n\n# Set the title of the plot\nplt.title('Population by Government Form')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "local_govt_mdm",
    "question": "What is the count of benefits and overpayments for each council tax ID? Show the count for each council tax ID in a line chart, ordered by council tax ID in ascending order.",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nCMI_Cross_References = pd.read_sql(\"SELECT * FROM CMI_Cross_References\", conn)\nBenefits_Overpayments = pd.read_sql(\"SELECT * FROM Benefits_Overpayments\", conn)\nCMI_Cross_References.columns = CMI_Cross_References.columns.str.lower()\nBenefits_Overpayments.columns = Benefits_Overpayments.columns.str.lower()\n\n# Perform the join operation\ndf = pd.merge(CMI_Cross_References, Benefits_Overpayments, on='cmi_cross_ref_id')\n\n# Group by council_tax_id and count the occurrences\ngrouped_df = df.groupby('council_tax_id').size().reset_index(name='count')\n\n# Sort the dataframe by council_tax_id\nsorted_df = grouped_df.sort_values('council_tax_id')\n\n# Plot the line chart\nplt.plot(sorted_df['council_tax_id'], sorted_df['count'])\nplt.xlabel('Council Tax ID')\nplt.ylabel('Count')\nplt.title('Count of Cross References by Council Tax ID')\nplt.show()"
  },
  {
    "db_id": "scientist_1",
    "question": "How many projects are assigned to scientists whose name contains 'Smith' in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nassignedto = pd.read_sql(\"SELECT * FROM assignedto\", conn)\nscientists = pd.read_sql(\"SELECT * FROM scientists\", conn)\nassignedto.columns = assignedto.columns.str.lower()\nscientists.columns = scientists.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(assignedto, scientists, left_on='scientist', right_on='ssn')\n\n# Filter the data based on the name condition\nfiltered_df = merged_df[merged_df['name'].str.contains('smith', case=False)]\n\n# Group the data by name and count the occurrences\ngrouped_df = filtered_df.groupby('name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['name'], grouped_df['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Number of Assignments for Scientists with \"Smith\" in their Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "riding_club",
    "question": "Please give me a pie chart to show the proportion of all players' genders .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nplayer.columns = player.columns.str.lower()\n\n# Grouping the data by gender and counting the occurrences\ngender_count = player.groupby('gender').size()\n\n# Creating a pie chart\nplt.pie(gender_count, labels=gender_count.index, autopct='%1.1f%%')\nplt.title('Gender Distribution')\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry.columns = country.columns.str.lower()\n\n# Group by governmentform and calculate the sum of population\ngrouped_data = country.groupby('governmentform')['population'].sum()\n\n# Convert the grouped data into a dataframe\ndf = pd.DataFrame(grouped_data).reset_index()\n\n# Plot the bar chart\nplt.bar(df['governmentform'], df['population'])\nplt.xlabel('Government Form')\nplt.ylabel('Population')\nplt.title('Population by Government Form')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "A bar chart for showing the number of the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the musical table\nmusical_df = pd.read_sql(\"SELECT * FROM musical\", conn)\n\n# Convert column names to lowercase\nmusical_df.columns = musical_df.columns.str.lower()\n\n# Filter the data based on the conditions\nfiltered_df = musical_df[(musical_df['award'] == \"Tony Award\") | (musical_df['award'] == \"Cleavant Derricks\")]\n\n# Group by nominee and count the occurrences\ngrouped_df = filtered_df.groupby('nominee').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['nominee'], grouped_df['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Nominee Count for Tony Award and Cleavant Derricks')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "riding_club",
    "question": "Draw a bar chart of gender versus the number of gender",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nplayer.columns = player.columns.str.lower()\n\n# Grouping the data by gender and counting the occurrences\ngender_count = player.groupby('gender').size()\n\n# Creating a bar plot\nplt.bar(gender_count.index, gender_count.values)\n\n# Adding labels and title\nplt.xlabel('Gender')\nplt.ylabel('Count')\nplt.title('Gender Distribution')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "Show me a bar chart of the weight of the entrepreneurs, with the bars ordered in descending order by the amount of money requested.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Perform the join operation\ndf = pd.merge(entrepreneur, people, on='people_id')\n\n# Sort the dataframe by money_requested in descending order\ndf_sorted = df.sort_values('money_requested', ascending=False)\n\n# Create the bar plot\nplt.bar(df_sorted['weight'], df_sorted['money_requested'])\nplt.xlabel('Weight')\nplt.ylabel('Money Requested')\nplt.title('Money Requested vs Weight')\nplt.show()"
  },
  {
    "db_id": "local_govt_mdm",
    "question": "What is the count of benefits and overpayments for each tax source system code? Show a bar chart displaying the source system code and the count, ordered by the source system code in ascending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nCMI_Cross_References = pd.read_sql(\"SELECT * FROM CMI_Cross_References\", conn)\nBenefits_Overpayments = pd.read_sql(\"SELECT * FROM Benefits_Overpayments\", conn)\nCMI_Cross_References.columns = CMI_Cross_References.columns.str.lower()\nBenefits_Overpayments.columns = Benefits_Overpayments.columns.str.lower()\n\n# Merge the two dataframes on cmi_cross_ref_id\nmerged_df = pd.merge(CMI_Cross_References, Benefits_Overpayments, on='cmi_cross_ref_id')\n\n# Group by source_system_code and count the occurrences\ngrouped_df = merged_df.groupby('source_system_code').size().reset_index(name='count')\n\n# Sort the dataframe by source_system_code\nsorted_df = grouped_df.sort_values('source_system_code')\n\n# Plot the bar chart\nplt.bar(sorted_df['source_system_code'], sorted_df['count'])\nplt.xlabel('Source System Code')\nplt.ylabel('Count')\nplt.title('Count of Cross References by Source System Code')\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Visualize a bar chart for how many students play each sport?, and show total number from low to high order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Sportsinfo table\nsportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\n\n# Convert column names to lowercase\nsportsinfo.columns = map(str.lower, sportsinfo.columns)\n\n# Perform the SQL query\nresult = sportsinfo.groupby('sportname').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result['sportname'], result['count'])\nplt.xlabel('Sport Name')\nplt.ylabel('Count')\nplt.title('Number of Participants in Each Sport')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Bar chart x axis sportname y axis the total number , rank X-axis from high to low order please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nSportsinfo.columns = Sportsinfo.columns.str.lower()\n\n# Grouping the data by sportname and counting the occurrences\nsport_counts = Sportsinfo.groupby('sportname').size().reset_index(name='count')\n\n# Sorting the data by sportname in descending order\nsport_counts = sport_counts.sort_values('sportname', ascending=False)\n\n# Creating the bar plot\nplt.bar(sport_counts['sportname'], sport_counts['count'])\nplt.xlabel('Sport Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Sport Name')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Plot the total number by grouped by competition type as a bar graph , and I want to show from low to high by the the total number .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the number of occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort the counts in ascending order\ncompetition_counts = competition_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Type')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "A bar chart for how many competitions for each country .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by country and count the occurrences\ncountry_counts = competition.groupby('country').size().reset_index(name='count')\n\n# Create a bar plot\nplt.bar(country_counts['country'], country_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Country')\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Show different nominees and the number of musicals they have been nominated Plot them as bar chart , and display from low to high by the x axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Group by nominee and count the occurrences\ngrouped = musical.groupby('nominee').size().reset_index(name='count')\n\n# Sort by nominee in ascending order\ngrouped = grouped.sort_values('nominee')\n\n# Create bar plot\nplt.bar(grouped['nominee'], grouped['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "For all organizations that have grants of more than 6000 dollars, show me the proportion of details of the organizations with a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Grants table\ngrants = pd.read_sql(\"SELECT * FROM Grants\", conn)\n\n# Read the Organisations table\norganisations = pd.read_sql(\"SELECT * FROM Organisations\", conn)\n\n# Convert column names to lowercase\ngrants.columns = grants.columns.str.lower()\norganisations.columns = organisations.columns.str.lower()\n\n# merge the grants and organisations tables on organisation_id\nmerged_data = pd.merge(grants, organisations, on=\"organisation_id\")\n\n# group by organisation_details and count the occurrences\ngrouped_data = merged_data.groupby(\"organisation_details\").size().reset_index(name=\"count\")\n\n# plot the pie chart\nplt.pie(grouped_data[\"count\"], labels=grouped_data[\"organisation_details\"], autopct=\"%1.1f%%\")\nplt.axis(\"equal\")\nplt.show()\n"
  },
  {
    "db_id": "journal_committee",
    "question": "Show the name of each editor and the number of journal committees they are on using a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the editor and journal_committee tables\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\njournal_committee = pd.read_sql(\"SELECT * FROM journal_committee\", conn)\n\n# Convert column names to lowercase\neditor.columns = editor.columns.str.lower()\njournal_committee.columns = journal_committee.columns.str.lower()\n\n# merge the editor and journal_committee tables on editor_id\nmerged_data = pd.merge(editor, journal_committee, on=\"editor_id\")\n\n# group by editor_id and count the number of occurrences\ngrouped_data = merged_data.groupby(\"editor_id\").size().reset_index(name=\"count\")\n\n# plot the bar chart\nplt.bar(grouped_data[\"editor_id\"], grouped_data[\"count\"])\nplt.xlabel(\"Editor ID\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of occurrences per Editor ID\")\nplt.show()\n"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "Show the number of transactions for different investors with a scatter chart .",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nTRANSACTIONS = pd.read_sql(\"SELECT * FROM TRANSACTIONS\", conn)\nTRANSACTIONS.columns = TRANSACTIONS.columns.str.lower()\n\n# Grouping the transactions by investor_id and counting the number of transactions\ntransaction_counts = TRANSACTIONS.groupby('investor_id').size().reset_index(name='count')\n\n# Creating a scatter plot\nplt.scatter(transaction_counts['investor_id'], transaction_counts['count'])\nplt.xlabel('Investor ID')\nplt.ylabel('Transaction Count')\nplt.title('Number of Transactions per Investor')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all template type codes and the number of documents using each type with a bar chart, rank by the the total number in desc.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Templates table\ntemplates = pd.read_sql(\"SELECT * FROM Templates\", conn)\n\n# Read the Documents table\ndocuments = pd.read_sql(\"SELECT * FROM Documents\", conn)\n\n# Convert column names to lowercase\ntemplates.columns = templates.columns.str.lower()\ndocuments.columns = documents.columns.str.lower()\n\n# merge the templates and documents tables on template_id\nmerged_data = pd.merge(templates, documents, on=\"template_id\")\n\n# group by template_type_code and count the number of occurrences\ngrouped_data = merged_data.groupby(\"template_type_code\").size().reset_index(name=\"count\")\n\n# sort the data by count in descending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=False)\n\n# plot the bar chart\nplt.bar(sorted_data[\"template_type_code\"], sorted_data[\"count\"])\nplt.xlabel(\"Template Type Code\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Templates by Template Type Code\")\nplt.show()\n"
  },
  {
    "db_id": "coffee_shop",
    "question": "Bar graph to show the total number from different address , show in desc by the Y-axis please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmember = pd.read_sql(\"SELECT * FROM member\", conn)\nmember.columns = member.columns.str.lower()\n\n# Group by address and count the number of occurrences\naddress_counts = member.groupby('address').size().reset_index(name='count')\n\n# Sort the counts in descending order\naddress_counts = address_counts.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(address_counts['address'], address_counts['count'])\nplt.xlabel('Address')\nplt.ylabel('Count')\nplt.title('Number of Members by Address')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "school_player",
    "question": "For each denomination , return the denomination and the count of schools with that denomination . Visualize by bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nschool = pd.read_sql(\"SELECT * FROM school\", conn)\nschool.columns = school.columns.str.lower()\n\n# Grouping the data by denomination and counting the number of occurrences\ndenomination_counts = school.groupby('denomination').size()\n\n# Creating a bar plot\nplt.bar(denomination_counts.index, denomination_counts.values)\n\n# Adding labels and title\nplt.xlabel('Denomination')\nplt.ylabel('Count')\nplt.title('Number of Schools by Denomination')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Show the number of different competition types with a bar graph, list in asc by the Y please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the competition table\ncompetition_df = pd.read_sql(\"SELECT * FROM competition\", conn)\n\n# Convert column names to lowercase\ncompetition_df.columns = competition_df.columns.str.lower()\n\n# Group by competition_type and count the occurrences\ncompetition_count = competition_df.groupby('competition_type').size().reset_index(name='count')\n\n# Sort the counts in ascending order\ncompetition_count = competition_count.sort_values('count')\n\n# Create a bar plot\nplt.bar(competition_count['competition_type'], competition_count['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Competition Type Count')\nplt.show()"
  },
  {
    "db_id": "voter_2",
    "question": "Who are the students with vice president votes and are 18 years old, represented in a pie chart by their last names and count?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nStudent = pd.read_sql(\"SELECT * FROM Student\", conn)\nVoting_Record = pd.read_sql(\"SELECT * FROM Voting_Record\", conn)\nStudent.columns = Student.columns.str.lower()\nVoting_Record.columns = Voting_Record.columns.str.lower()\n\n# Merge the Student and Voting_Record dataframes\nmerged_df = pd.merge(Student, Voting_Record, left_on='stuid', right_on='stuid')\n\n# Filter the merged dataframe for age = 18\nfiltered_df = merged_df[merged_df['age'] == 18]\n\n# Group by lname and count the occurrences\ngrouped_df = filtered_df.groupby('lname').size().reset_index(name='count')\n\n# Create a pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['lname'], autopct='%1.1f%%')\nplt.title('Distribution of Vice President Votes by Last Name for Age 18')\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Compare the total number of locations in each location using a bar graph, and display x axis from high to low order please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the performance table\nperformance_df = pd.read_sql(\"SELECT * FROM performance\", conn)\n\n# Convert column names to lowercase\nperformance_df.columns = performance_df.columns.str.lower()\n\n# Perform the query\nresult = performance_df.groupby('location').size().reset_index(name='count').sort_values('location', ascending=False)\n\n# Create the bar plot\nplt.bar(result['location'], result['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Performances by Location')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "What is the number of types of competition ? , and could you rank Y-axis in asc order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort the counts in ascending order\ncompetition_counts = competition_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Competition Type Counts')\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Show all sport name and the number of students in a bar chart, display from low to high by the bar.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Sportsinfo table\nsportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\n\n# Convert column names to lowercase\nsportsinfo.columns = map(str.lower, sportsinfo.columns)\n\n# Perform the SQL query\nresult = sportsinfo.groupby('sportname').size().reset_index(name='count').sort_values('sportname')\n\n# Generate the bar chart\nplt.bar(result['sportname'], result['count'])\nplt.xlabel('Sport Name')\nplt.ylabel('Count')\nplt.title('Number of Participants in Each Sport')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "Bar chart x axis nationality y axis the total number , show by the X-axis from low to high .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nHOST = pd.read_sql(\"SELECT * FROM HOST\", conn)\nHOST.columns = HOST.columns.str.lower()\n\n# Grouping the data by nationality and counting the occurrences\nnationality_counts = HOST.groupby('nationality').size().reset_index(name='count')\n\n# Sorting the data by nationality in ascending order\nnationality_counts = nationality_counts.sort_values('nationality')\n\n# Creating the bar plot\nplt.bar(nationality_counts['nationality'], nationality_counts['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Hosts by Nationality')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "What is the total number of captains with different classes?, I want to rank from low to high by the the number of class.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the captain table\ncaptain_df = pd.read_sql(\"SELECT * FROM captain\", conn)\n\n# Convert column names to lowercase\ncaptain_df.columns = captain_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = captain_df.groupby('class').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result_df['class'], result_df['count'])\nplt.xlabel('Class')\nplt.ylabel('Count')\nplt.title('Count of Class')\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "How many committees are there for each theme of journal, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\njournal_committee = pd.read_sql(\"SELECT * FROM journal_committee\", conn)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\njournal = pd.read_sql(\"SELECT * FROM journal\", conn)\njournal_committee.columns = journal_committee.columns.str.lower()\neditor.columns = editor.columns.str.lower()\njournal.columns = journal.columns.str.lower()\n\n# Perform the join operation\ndf = pd.merge(pd.merge(journal_committee, editor, on='editor_id'), journal, on='journal_id')\n\n# Group by theme and count the number of occurrences\ntheme_counts = df.groupby('theme').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(theme_counts['count'], labels=theme_counts['theme'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all template type codes and the number of documents using each type in a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Templates table\ntemplates = pd.read_sql(\"SELECT * FROM Templates\", conn)\n\n# Read the Documents table\ndocuments = pd.read_sql(\"SELECT * FROM Documents\", conn)\n\n# Convert column names to lowercase\ntemplates.columns = templates.columns.str.lower()\ndocuments.columns = documents.columns.str.lower()\n\n# merge the templates and documents tables on template_id\nmerged_data = pd.merge(templates, documents, on=\"template_id\")\n\n# group by template_type_code and count the number of occurrences\ngrouped_data = merged_data.groupby(\"template_type_code\").size()\n\n# plot the pie chart\nplt.pie(grouped_data, labels=grouped_data.index, autopct=\"%1.1f%%\")\nplt.title(\"Template Type Distribution\")\nplt.show()\n"
  },
  {
    "db_id": "scientist_1",
    "question": "How many projects is each scientist working on and what are their names, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nscientists = pd.read_sql(\"SELECT * FROM scientists\", conn)\nassignedto = pd.read_sql(\"SELECT * FROM assignedto\", conn)\nscientists.columns = scientists.columns.str.lower()\nassignedto.columns = assignedto.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(scientists, assignedto, left_on='ssn', right_on='scientist')\n\n# Group by name and count the occurrences\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['name'], grouped_df['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Number of Assignments per Scientist')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "car_1",
    "question": "What are the names and ids of all makers with more than 3 models, I want to list Y in ascending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read data from the CAR_MAKERS table\ncar_makers = pd.read_sql(\"SELECT * FROM CAR_MAKERS\", conn)\ncar_makers.columns = map(str.lower, car_makers.columns)\n\n# Read data from the MODEL_LIST table\nmodel_list = pd.read_sql(\"SELECT * FROM MODEL_LIST\", conn)\nmodel_list.columns = map(str.lower, model_list.columns)\n\n# Merge the two tables on the 'id' column\nmerged_data = pd.merge(car_makers, model_list, left_on='id', right_on='maker')\n\n# Sort the merged data by 'id' in ascending order\nsorted_data = merged_data.sort_values('id')\n\n# Create a bar plot of 'fullname' and 'id'\nplt.bar(sorted_data['fullname'], sorted_data['id'])\nplt.xlabel('Car Maker')\nplt.ylabel('ID')\nplt.title('Car Makers and IDs')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "Plot the number of result by grouped by result as a bar graph, and sort by the Y in descending.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the music_festival table\nmusic_festival = pd.read_sql(\"SELECT * FROM music_festival\", conn)\n\n# Convert column names to lowercase\nmusic_festival.columns = music_festival.columns.str.lower()\n\n# Perform the SQL query\nresult_counts = music_festival.groupby('result').size().reset_index(name='count')\nresult_counts = result_counts.sort_values('count', ascending=False)\n\n# Generate the bar plot\nplt.bar(result_counts['result'], result_counts['count'])\nplt.xlabel('Result')\nplt.ylabel('Count')\nplt.title('Music Festival Results')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "List the positions of players whose average number of points scored by that position is larger than 20, compare the number of positions.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the player table\nplayer_df = pd.read_sql(\"SELECT * FROM player\", conn)\n\n# Convert column names to lowercase\nplayer_df.columns = player_df.columns.str.lower()\n\n# Filter the data based on the condition\nfiltered_df = player_df.groupby(\"position\").filter(lambda x: x[\"points\"].mean() >= 20)\n\n# Count the number of players for each position\nposition_counts = filtered_df[\"position\"].value_counts()\n\n# Plot the bar chart\nplt.bar(position_counts.index, position_counts.values)\nplt.xlabel(\"Position\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Players by Position\")\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "Plot how many party by grouped by party as a bar graph , rank by the y axis in descending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\nrepresentative.columns = representative.columns.str.lower()\n\n# Group by party and count the number of representatives in each party\nparty_counts = representative.groupby('party').size().reset_index(name='count')\n\n# Sort the parties by count in descending order\nparty_counts = party_counts.sort_values('count', ascending=False)\n\n# Create a bar plot\nplt.bar(party_counts['party'], party_counts['count'])\nplt.xlabel('Party')\nplt.ylabel('Count')\nplt.title('Number of Representatives by Party')\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "Plot how many party by grouped by party as a bar graph, list bar in asc order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the representative table\nrepresentative_df = pd.read_sql(\"SELECT * FROM representative\", conn)\n\n# Convert column names to lowercase\nrepresentative_df.columns = representative_df.columns.str.lower()\n\n# Perform the SQL query\nparty_count_df = representative_df.groupby('party').size().reset_index(name='count').sort_values('party')\n\n# Generate the bar chart\nplt.bar(party_count_df['party'], party_count_df['count'])\nplt.xlabel('Party')\nplt.ylabel('Count')\nplt.title('Number of Representatives by Party')\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "Return a pie chart on what are the statuses and average populations of each city?",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the city table\ncity_df = pd.read_sql(\"SELECT * FROM city\", conn)\n\n# Convert column names to lowercase\ncity_df.columns = city_df.columns.str.lower()\n\n# Group by Status and calculate average Population\ngrouped_df = city_df.groupby('status')['population'].mean().reset_index()\n\n# Plot the pie chart\nplt.pie(grouped_df['population'], labels=grouped_df['status'], autopct='%1.1f%%')\nplt.title('Average Population by Status')\nplt.show()"
  },
  {
    "db_id": "company_employee",
    "question": "Bar chart x axis headquarters y axis the total number , could you list x-axis in desc order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompany = pd.read_sql(\"SELECT * FROM company\", conn)\ncompany.columns = company.columns.str.lower()\n\n# Group by headquarters and count the number of companies\nheadquarters_count = company.groupby('headquarters').size().reset_index(name='count')\n\n# Sort the data by headquarters in descending order\nheadquarters_count = headquarters_count.sort_values('headquarters', ascending=False)\n\n# Create a bar plot\nplt.bar(headquarters_count['headquarters'], headquarters_count['count'])\nplt.xlabel('Headquarters')\nplt.ylabel('Count')\nplt.title('Number of Companies by Headquarters')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "For those ships that do not have a captain, tell me the total number of their classes using a pie chart, show how many class from low to high order please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ship table\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Read the captain table\ncaptain_df = pd.read_sql(\"SELECT * FROM captain\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\ncaptain_df.columns = captain_df.columns.str.lower()\n\n# filter ship table to exclude ship_id present in captain table\nfiltered_ship_df = ship_df[~ship_df['ship_id'].isin(captain_df['ship_id'])]\n\n# group by class and count the occurrences\ngrouped_ship_df = filtered_ship_df.groupby('class').size().reset_index(name='count')\n\n# sort the dataframe by count in ascending order\nsorted_ship_df = grouped_ship_df.sort_values('count')\n\n# plot the bar chart\nplt.bar(sorted_ship_df['class'], sorted_ship_df['count'])\nplt.xlabel('Class')\nplt.ylabel('Count')\nplt.title('Number of Ships by Class (excluding ships with captains)')\nplt.xticks(rotation=45)\nplt.show()\n"
  },
  {
    "db_id": "riding_club",
    "question": "What is the proportion of the gender of players?",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the player table\nplayer_df = pd.read_sql(\"SELECT * FROM player\", conn)\n\n# Convert column names to lowercase\nplayer_df.columns = player_df.columns.str.lower()\n\n# Perform the SQL query\ngender_count = player_df.groupby('gender').size()\n\n# Plot the pie chart\nplt.pie(gender_count, labels=gender_count.index, autopct='%1.1f%%')\nplt.title('Gender Distribution')\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "Show me a bar chart displaying the count of committees for each journal theme, sorted in descending order by the count.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\njournal_committee = pd.read_sql(\"SELECT * FROM journal_committee\", conn)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\njournal = pd.read_sql(\"SELECT * FROM journal\", conn)\njournal_committee.columns = journal_committee.columns.str.lower()\neditor.columns = editor.columns.str.lower()\njournal.columns = journal.columns.str.lower()\n\n# Perform the join operation\ndf = pd.merge(pd.merge(journal_committee, editor, on='editor_id'), journal, on='journal_id')\n\n# Group by theme and count the number of occurrences\ntheme_counts = df.groupby('theme').size().reset_index(name='count')\n\n# Sort the counts in descending order\ntheme_counts = theme_counts.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(theme_counts['theme'], theme_counts['count'])\nplt.xlabel('Theme')\nplt.ylabel('Count')\nplt.title('Number of Journals per Theme')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "List the position of players and the average number of points of players of each position by a bar chart , rank by the bars in desc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nplayer.columns = player.columns.str.lower()\n\n# Calculate average points by position\navg_points = player.groupby('position')['points'].mean()\n\n# Sort positions in descending order\navg_points = avg_points.sort_index(ascending=False)\n\n# Create bar plot\nplt.bar(avg_points.index, avg_points.values)\n\n# Set labels and title\nplt.xlabel('Position')\nplt.ylabel('Average Points')\nplt.title('Average Points by Position')\n\n# Show plot\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "A pie chart about how many musicals has each nominee been nominated for ?",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Assuming the data is already loaded into a dataframe called 'musical'\n\n# Grouping the data by 'nominee' and counting the occurrences\ngrouped_data = musical.groupby('nominee').size().reset_index(name='count')\n\n# Creating a pie chart\nplt.pie(grouped_data['count'], labels=grouped_data['nominee'], autopct='%1.1f%%')\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "What is the average amount of transactions for different lots, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nTRANSACTIONS = pd.read_sql(\"SELECT * FROM TRANSACTIONS\", conn)\nTransactions_Lots = pd.read_sql(\"SELECT * FROM Transactions_Lots\", conn)\nTRANSACTIONS.columns = TRANSACTIONS.columns.str.lower()\nTransactions_Lots.columns = Transactions_Lots.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(TRANSACTIONS, Transactions_Lots, on='transaction_id')\n\n# Calculate the average amount of transaction for each lot_id\navg_amount_by_lot = merged_df.groupby('lot_id')['amount_of_transaction'].mean()\n\n# Create a bar plot\nplt.bar(avg_amount_by_lot.index, avg_amount_by_lot.values)\nplt.xlabel('Lot ID')\nplt.ylabel('Average Amount of Transaction')\nplt.title('Average Amount of Transaction by Lot ID')\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "What is the distribution of the number of students and number of sports for each student in the Sportsinfo table, joined with the Student table, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nStudent = pd.read_sql(\"SELECT * FROM Student\", conn)\nSportsinfo.columns = Sportsinfo.columns.str.lower()\nStudent.columns = Student.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Sportsinfo, Student, on='stuid')\n\n# Group by stuid and count the number of students and sports for each stuid\ngrouped_df = merged_df.groupby('stuid').size().reset_index(name='number_of_students')\n\n# Count the number of sports for each stuid\ngrouped_df['number_of_sports'] = grouped_df['stuid'].map(merged_df.groupby('stuid').size())\n\n# Plot the pie chart\nplt.pie(grouped_df['number_of_students'], labels=grouped_df['stuid'], autopct='%1.1f%%')\nplt.title('Number of Students by stuid')\nplt.show()"
  },
  {
    "db_id": "coffee_shop",
    "question": "Bar graph to show the total number from different address, and rank x axis from high to low order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"member\" table\nmember_data = pd.read_sql(\"SELECT * FROM member\", conn)\n\n# Convert column names to lowercase\nmember_data.columns = member_data.columns.str.lower()\n\n# Perform the SQL query\nresult = member_data.groupby('address').size().reset_index(name='count').sort_values('address', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['address'], result['count'])\nplt.xlabel('Address')\nplt.ylabel('Count')\nplt.title('Number of Members by Address')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "How many musicals has each nominee been nominated for Plot them as bar chart , rank in descending by the total number .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Group by nominee and count the occurrences\ngrouped = musical.groupby('nominee').size().reset_index(name='count')\n\n# Sort by count in descending order\nsorted_grouped = grouped.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_grouped['nominee'], sorted_grouped['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "Give me the proportion about the location of each party with a pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nparty = pd.read_sql(\"SELECT * FROM party\", conn)\nparty.columns = party.columns.str.lower()\n\n# Group by location and count the occurrences\nlocation_counts = party.groupby('location').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(location_counts['count'], labels=location_counts['location'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "Show the ages of editors and the theme of journals for which they serve on committees by a bar chart, and list the bars in ascending alphabetical order of theme.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the data from the tables\njournal_committee = pd.read_sql(\"SELECT * FROM journal_committee\", conn)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\njournal = pd.read_sql(\"SELECT * FROM journal\", conn)\n\n# Convert column names to lowercase\njournal_committee.columns = journal_committee.columns.str.lower()\neditor.columns = editor.columns.str.lower()\njournal.columns = journal.columns.str.lower()\n\n# Merge the tables\nmerged_data = pd.merge(journal_committee, editor, on=\"editor_id\")\nmerged_data = pd.merge(merged_data, journal, on=\"journal_id\")\n\n# Sort the merged data by theme\nsorted_data = merged_data.sort_values(by=\"theme\")\n\n# Create a bar plot\nplt.bar(sorted_data[\"theme\"], sorted_data[\"age\"])\nplt.xlabel(\"Theme\")\nplt.ylabel(\"Age\")\nplt.title(\"Age Distribution by Theme\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "Which organization has the highest number of outcomes, and what is the count? Show it in a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nProjects = pd.read_sql(\"SELECT * FROM Projects\", conn)\nProject_outcomes = pd.read_sql(\"SELECT * FROM Project_outcomes\", conn)\nProjects.columns = Projects.columns.str.lower()\nProject_outcomes.columns = Project_outcomes.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Projects, Project_outcomes, on='project_id')\n\n# Group by organisation_id and count the number of occurrences\ngrouped_df = merged_df.groupby('organisation_id').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['organisation_id'], sorted_df['count'])\nplt.xlabel('Organisation ID')\nplt.ylabel('Count')\nplt.title('Number of Projects by Organisation')\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Show me a bar chart comparing the total number of captains in each rank , rank in ascending by the Rank .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\ncaptain.columns = captain.columns.str.lower()\n\n# Grouping and counting the ranks\nrank_counts = captain.groupby('rank').size().reset_index(name='count')\n\n# Sorting the ranks in ascending order\nrank_counts = rank_counts.sort_values('rank')\n\n# Creating the bar plot\nplt.bar(rank_counts['rank'], rank_counts['count'])\nplt.xlabel('Rank')\nplt.ylabel('Count')\nplt.title('Rank Distribution')\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "Group and count the name attribute for visualizing a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the editor table\neditor_df = pd.read_sql(\"SELECT * FROM editor\", conn)\n\n# Convert column names to lowercase\neditor_df.columns = editor_df.columns.str.lower()\n\n# Group by Name and count occurrences\nname_counts = editor_df.groupby('name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(name_counts['name'], name_counts['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Editor Name Counts')\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "Create a bar chart showing sum population across continent, could you display y-axis from high to low order?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the country table\ncountry_df = pd.read_sql(\"SELECT * FROM country\", conn)\n\n# Convert column names to lowercase\ncountry_df.columns = country_df.columns.str.lower()\n\n# Calculate the sum of population by continent\npopulation_df = country_df.groupby(\"continent\")[\"population\"].sum().reset_index()\n\n# Filter continents with average life expectancy less than 72\ncontinent_df = country_df.groupby(\"continent\")[\"lifeexpectancy\"].mean().reset_index()\ncontinent_df = continent_df[continent_df[\"lifeexpectancy\"] < 72]\n\n# Merge population and continent dataframes\nresult_df = pd.merge(population_df, continent_df, on=\"continent\")\n\n# Sort by sum of population in descending order\nresult_df = result_df.sort_values(\"population\", ascending=False)\n\n# Plot the bar chart\nplt.bar(result_df[\"continent\"], result_df[\"population\"])\nplt.xlabel(\"Continent\")\nplt.ylabel(\"Population\")\nplt.title(\"Population by Continent\")\nplt.show()"
  },
  {
    "db_id": "insurance_fnol",
    "question": "What is the distribution of policy types for the customer named \"Dayana Robel\" in a bar chart, and how many policies of each type does she have?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\ncustomers_policies = pd.read_sql(\"SELECT * FROM customers_policies\", conn)\navailable_policies = pd.read_sql(\"SELECT * FROM available_policies\", conn)\ncustomers.columns = customers.columns.str.lower()\ncustomers_policies.columns = customers_policies.columns.str.lower()\navailable_policies.columns = available_policies.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(customers, customers_policies, on='customer_id')\nmerged_df = pd.merge(merged_df, available_policies, on='policy_id')\n\n# Filter data for customer_name = 'dayana robel'\nfiltered_df = merged_df[merged_df['customer_name'] == 'Dayana Robel']\n\n# Group by policy_type_code and count occurrences\ngrouped_df = filtered_df.groupby('policy_type_code').size().reset_index(name='count')\n\n# Plot bar chart\nplt.bar(grouped_df['policy_type_code'], grouped_df['count'])\nplt.xlabel('Policy Type Code')\nplt.ylabel('Count')\nplt.title('Number of Policies by Type for dayana robel')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "What are the average star ratings of each movie title? Could you return me a bar chart?, and I want to show total number in asc order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\nmovie_df.columns = map(str.lower, movie_df.columns)\n\n# Merge the Rating and Movie tables on mID\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Calculate the average stars for each movie title\navg_stars_df = merged_df.groupby(\"title\")[\"stars\"].mean().reset_index()\navg_stars_df = avg_stars_df.sort_values(\"stars\", ascending=True)\n\n# Plot the bar chart\nplt.bar(avg_stars_df[\"title\"], avg_stars_df[\"stars\"])\nplt.xlabel(\"Movie Title\")\nplt.ylabel(\"Average Stars\")\nplt.title(\"Average Stars for Each Movie\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Visualize the name and their component amounts with a bar chart for all furnitures that have more than 10 components, order by the X in desc please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the furniture table into a DataFrame\nfurniture_df = pd.read_sql(\"SELECT * FROM furniture\", conn)\n\n# Convert column names to lowercase\nfurniture_df.columns = furniture_df.columns.str.lower()\n\n# Filter the DataFrame for rows where Num_of_Component > 10\nfiltered_df = furniture_df[furniture_df['num_of_component'] > 10]\n\n# Sort the filtered DataFrame by Name in descending order\nsorted_df = filtered_df.sort_values('name', ascending=False)\n\n# Create the bar plot\nplt.bar(sorted_df['name'], sorted_df['num_of_component'])\nplt.xlabel('Name')\nplt.ylabel('Num_of_Component')\nplt.title('Furniture with Num_of_Component > 10')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "What is the official language spoken in the country whose head of state is Beatrix, and count them by a bar chart",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the country table\ncountry_data = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry_data.columns = map(str.lower, country_data.columns)\n\n# Read the data from the countrylanguage table\ncountrylanguage_data = pd.read_sql(\"SELECT * FROM countrylanguage\", conn)\ncountrylanguage_data.columns = map(str.lower, countrylanguage_data.columns)\n\n# Merge the two tables on the CountryCode column\nmerged_data = pd.merge(country_data, countrylanguage_data, left_on=\"code\", right_on=\"countrycode\")\n\n# Filter the merged data based on the conditions\nfiltered_data = merged_data[(merged_data[\"headofstate\"] == \"Beatrix\") & (merged_data[\"isofficial\"] == \"T\")]\n\n# Group the filtered data by Language and count the occurrences\ngrouped_data = filtered_data.groupby(\"language\").size().reset_index(name=\"count\")\n\n# Plot the bar chart\nplt.bar(grouped_data[\"language\"], grouped_data[\"count\"])\nplt.xlabel(\"Language\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Countries with Official Language by Language\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Show all manufacturer names and ids with a bar chart , note that let manufacturer id as Y-axis .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmanufacturer = pd.read_sql(\"SELECT * FROM manufacturer\", conn)\nmanufacturer.columns = manufacturer.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called 'manufacturer'\n\n# Sort the DataFrame by open_year\nsorted_manufacturer = manufacturer.sort_values('open_year')\n\n# Extract the name and manufacturer_id columns\nname = sorted_manufacturer['name']\nmanufacturer_id = sorted_manufacturer['manufacturer_id']\n\n# Create a bar plot\nplt.bar(name, manufacturer_id)\n\n# Add labels and title\nplt.xlabel('Name')\nplt.ylabel('Manufacturer ID')\nplt.title('Manufacturer ID by Name')\n\n# Rotate x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "Please give me a bar chart to show the distribution of results of all music festival, I want to rank from high to low by the X.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the music_festival table\nmusic_festival = pd.read_sql(\"SELECT * FROM music_festival\", conn)\n\n# Convert column names to lowercase\nmusic_festival.columns = music_festival.columns.str.lower()\n\n# Perform the SQL query\nresult_counts = music_festival.groupby('result').size().reset_index(name='count')\nresult_counts = result_counts.sort_values('result', ascending=False)\n\n# Generate the bar plot\nplt.bar(result_counts['result'], result_counts['count'])\nplt.xlabel('Result')\nplt.ylabel('Count')\nplt.title('Music Festival Results')\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Find the number of funiture types produced by each manufacturer as well as the company names Show bar chart, and list in ascending by the names please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the manufacturer table\nmanufacturer = pd.read_sql(\"SELECT * FROM manufacturer\", conn)\nmanufacturer.columns = map(str.lower, manufacturer.columns)\n\n# Read the furniture_manufacte table\nfurniture_manufacte = pd.read_sql(\"SELECT * FROM furniture_manufacte\", conn)\nfurniture_manufacte.columns = map(str.lower, furniture_manufacte.columns)\n\n# Merge the two tables on manufacturer_id\nmerged_data = pd.merge(manufacturer, furniture_manufacte, on=\"manufacturer_id\")\n\n# Group by manufacturer_id and count the number of records for each manufacturer\ngrouped_data = merged_data.groupby(\"manufacturer_id\").size().reset_index(name=\"count\")\n\n# Add the 'Name' column to the grouped_data DataFrame\ngrouped_data = pd.merge(grouped_data, manufacturer[['manufacturer_id', 'name']], on='manufacturer_id')\n\n# Sort the data by manufacturer name in ascending order\nsorted_data = grouped_data.sort_values(\"name\", ascending=True)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"name\"], sorted_data[\"count\"])\nplt.xlabel(\"Manufacturer\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Furniture by Manufacturer\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "A bar chart groups the lot details , and computes the number of each lot details , could you rank bar from high to low order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nLOTS = pd.read_sql(\"SELECT * FROM LOTS\", conn)\nLOTS.columns = LOTS.columns.str.lower()\n\n# Grouping the data by 'lot_details' and counting the occurrences\ngrouped_data = LOTS.groupby('lot_details').size().reset_index(name='count')\n\n# Sorting the data by 'lot_details' in descending order\nsorted_data = grouped_data.sort_values('lot_details', ascending=False)\n\n# Creating the bar plot\nplt.bar(sorted_data['lot_details'], sorted_data['count'])\nplt.xlabel('Lot Details')\nplt.ylabel('Count')\nplt.title('Count of Lot Details')\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Give me the names and prices of furnitures which some companies are manufacturing with a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the furniture table\nfurniture = pd.read_sql(\"SELECT * FROM furniture\", conn)\nfurniture.columns = map(str.lower, furniture.columns)\n\n# Read the furniture_manufacte table\nfurniture_manufacte = pd.read_sql(\"SELECT * FROM furniture_manufacte\", conn)\nfurniture_manufacte.columns = map(str.lower, furniture_manufacte.columns)\n\n# Merge the two tables on Furniture_ID\nmerged_data = pd.merge(furniture, furniture_manufacte, on='furniture_id')\n\n# Create a pie chart\nplt.pie(merged_data['price_in_dollar'], labels=merged_data['name'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Visualize the name and their component amounts all furnitures that have more than 10 components .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nfurniture = pd.read_sql(\"SELECT * FROM furniture\", conn)\nfurniture.columns = furniture.columns.str.lower()\n\n# Assuming furniture is a DataFrame containing the table data\n\n# Filter the DataFrame to select rows where num_of_component > 10\nfiltered_df = furniture[furniture['num_of_component'] > 10]\n\n# Create a pie chart using the filtered DataFrame\nplt.pie(filtered_df['num_of_component'], labels=filtered_df['name'])\n\n# Display the pie chart\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "Can you create a bar chart displaying the project_id and the count of tasks for each project?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nProjects = pd.read_sql(\"SELECT * FROM Projects\", conn)\nTasks = pd.read_sql(\"SELECT * FROM Tasks\", conn)\nProjects.columns = Projects.columns.str.lower()\nTasks.columns = Tasks.columns.str.lower()\n\n# Joining the Projects and Tasks dataframes\nmerged_df = pd.merge(Projects, Tasks, on='project_id')\n\n# Grouping by project_id and counting the number of tasks\ngrouped_df = merged_df.groupby('project_id').size().reset_index(name='task_count')\n\n# Creating the bar plot\nplt.bar(grouped_df['project_id'], grouped_df['task_count'])\nplt.xlabel('Project ID')\nplt.ylabel('Task Count')\nplt.title('Number of Tasks per Project')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Return a bar on what is the average number of stars that each reviewer awards for a movie?, and I want to display x-axis in desc order please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Reviewer table\nreviewer_df = pd.read_sql(\"SELECT * FROM Reviewer\", conn)\nreviewer_df.columns = map(str.lower, reviewer_df.columns)\n\n# Merge the Rating and Reviewer tables on rID\nmerged_df = pd.merge(rating_df, reviewer_df, on=\"rid\")\n\n# Calculate the average stars for each reviewer\navg_stars_df = merged_df.groupby(\"name\").stars.mean().reset_index()\n\n# Sort the dataframe by name in descending order\navg_stars_df = avg_stars_df.sort_values(\"name\", ascending=False)\n\n# Plot the bar chart\nplt.bar(avg_stars_df[\"name\"], avg_stars_df[\"stars\"])\nplt.xlabel(\"Reviewer Name\")\nplt.ylabel(\"Average Stars\")\nplt.title(\"Average Stars by Reviewer\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "For each continent where the average life expectancy is shorter than 72, show their total population with a bar chart, and list by the X-axis from low to high.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the country table\ncountry_df = pd.read_sql(\"SELECT * FROM country\", conn)\n\n# Convert column names to lowercase\ncountry_df.columns = country_df.columns.str.lower()\n\n# Calculate the sum of population by continent\npopulation_df = country_df.groupby(\"continent\")[\"population\"].sum().reset_index()\n\n# Filter continents with average life expectancy less than 72\ncontinent_df = country_df.groupby(\"continent\")[\"lifeexpectancy\"].mean().reset_index()\ncontinent_df = continent_df[continent_df[\"lifeexpectancy\"] < 72]\n\n# Merge population and continent dataframes\nmerged_df = pd.merge(population_df, continent_df, on=\"continent\")\n\n# Sort by continent in ascending order\nmerged_df = merged_df.sort_values(\"continent\")\n\n# Plot the bar chart\nplt.bar(merged_df[\"continent\"], merged_df[\"population\"])\nplt.xlabel(\"Continent\")\nplt.ylabel(\"Population\")\nplt.title(\"Population by Continent\")\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "I want to see trend of the number of creation by creation, and I want to list from low to high by the Creation.",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the department table\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\n\n# Convert column names to lowercase\ndepartment.columns = department.columns.str.lower()\n\n# Perform the SQL query\nresult = department.groupby('creation').size().reset_index(name='count').sort_values('creation')\n\n# Plot the line chart\nplt.plot(result['creation'], result['count'])\nplt.xlabel('Creation')\nplt.ylabel('Count')\nplt.title('Department Creation')\nplt.show()"
  },
  {
    "db_id": "riding_club",
    "question": "Visualize a bar chart that X-axis is the gender and compute the number of players in each gender as a Y-axis, show total number in descending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the player table\nplayer_df = pd.read_sql(\"SELECT * FROM player\", conn)\n\n# Convert column names to lowercase\nplayer_df.columns = player_df.columns.str.lower()\n\n# Perform the SQL query\ngender_count = player_df.groupby('gender').size().reset_index(name='count').sort_values('count', ascending=False)\n\n# Generate the bar plot\nplt.bar(gender_count['gender'], gender_count['count'])\nplt.xlabel('Gender')\nplt.ylabel('Count')\nplt.title('Gender Distribution')\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Return a bar chart on what are the different ship flags, and how many ships have each?, order from high to low by the X.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ship table\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\n\n# Perform the SQL query\nresult = ship_df.groupby('flag').size().reset_index(name='count').sort_values('flag', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['flag'], result['count'])\nplt.xlabel('Flag')\nplt.ylabel('Count')\nplt.title('Number of Ships by Flag')\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "Bar chart x axis lot details y axis the number of lot details , rank in ascending by the total number .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nLOTS = pd.read_sql(\"SELECT * FROM LOTS\", conn)\nLOTS.columns = LOTS.columns.str.lower()\n\n# Grouping the data by 'lot_details' and counting the occurrences\ngrouped_data = LOTS.groupby('lot_details').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nsorted_data = grouped_data.sort_values('count')\n\n# Creating the bar plot\nplt.bar(sorted_data['lot_details'], sorted_data['count'])\nplt.xlabel('Lot Details')\nplt.ylabel('Count')\nplt.title('Count of Lot Details')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "voter_2",
    "question": "What is the trend in the average age of female students who have secretary votes in each election cycle, shown in a line chart?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nVOTING_RECORD = pd.read_sql(\"SELECT * FROM VOTING_RECORD\", conn)\nSTUDENT.columns = STUDENT.columns.str.lower()\nVOTING_RECORD.columns = VOTING_RECORD.columns.str.lower()\n\n# Perform the join operation\ndf = pd.merge(STUDENT, VOTING_RECORD, left_on='stuid', right_on='secretary_vote')\n\n# Filter the data for female students\ndf_female = df[df['sex'] == 'F']\n\n# Calculate the average age for each election cycle\ndf_avg_age = df_female.groupby('election_cycle')['age'].mean().reset_index()\n\n# Plot the line chart\nplt.plot(df_avg_age['election_cycle'], df_avg_age['age'])\nplt.xlabel('Election Cycle')\nplt.ylabel('Average Age')\nplt.title('Average Age of Female Students by Election Cycle')\nplt.show()"
  },
  {
    "db_id": "county_public_safety",
    "question": "Display a bar chart for how many counties correspond to each police force ? , show by the names in desc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncounty_public_safety = pd.read_sql(\"SELECT * FROM county_public_safety\", conn)\ncounty_public_safety.columns = county_public_safety.columns.str.lower()\n\n# Group by police_force and count the occurrences\ndf_grouped = county_public_safety.groupby('police_force').size().reset_index(name='count')\n\n# Sort by police_force in descending order\ndf_sorted = df_grouped.sort_values('police_force', ascending=False)\n\n# Create bar plot\nplt.bar(df_sorted['police_force'], df_sorted['count'])\nplt.xlabel('Police Force')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Police Force')\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes' with a bar chart, order from high to low by the names.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the department table\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = map(str.lower, department.columns)\n\n# Read the management table\nmanagement = pd.read_sql(\"SELECT * FROM management\", conn)\nmanagement.columns = map(str.lower, management.columns)\n\n# Merge the department and management tables\nmerged_data = pd.merge(department, management, on=\"department_id\")\n\n# Filter the merged data for temporary acting departments\nfiltered_data = merged_data[merged_data[\"temporary_acting\"] == \"Yes\"]\n\n# Group by department name and calculate the sum of num_employees\ngrouped_data = filtered_data.groupby(\"name\")[\"num_employees\"].sum().reset_index()\n\n# Sort the data by department name in descending order\nsorted_data = grouped_data.sort_values(\"name\", ascending=False)\n\n# Create a bar plot\nplt.bar(sorted_data[\"name\"], sorted_data[\"num_employees\"])\nplt.xlabel(\"Department Name\")\nplt.ylabel(\"Total Number of Employees\")\nplt.title(\"Total Number of Employees in Temporary Acting Departments\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show the number of documents for each document name in a bar chart, order by the Y-axis from high to low.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the Paragraphs table\nparagraphs = pd.read_sql(\"SELECT * FROM Paragraphs\", conn)\n\n# Read the data from the Documents table\ndocuments = pd.read_sql(\"SELECT * FROM Documents\", conn)\n\n# Convert column names to lowercase\nparagraphs.columns = paragraphs.columns.str.lower()\ndocuments.columns = documents.columns.str.lower()\n\n# merge the two tables on the document_id column\nmerged_data = pd.merge(paragraphs, documents, on=\"document_id\")\n\n# group by document_name and count the number of paragraphs\ngrouped_data = merged_data.groupby(\"document_name\").size().reset_index(name=\"count\")\n\n# sort the data by count in descending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=False)\n\n# plot the bar chart\nplt.bar(sorted_data[\"document_name\"], sorted_data[\"count\"])\nplt.xlabel(\"Document Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Paragraphs per Document\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "Show the average amount of transactions for different lots, ordered by average amount of transactions by a scatter chart.",
    "chart": "Scatter",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the TRANSACTIONS table\ntransactions = pd.read_sql(\"SELECT * FROM TRANSACTIONS\", conn)\n\n# Read the Transactions_Lots table\ntransactions_lots = pd.read_sql(\"SELECT * FROM Transactions_Lots\", conn)\n\n# Convert column names to lowercase\ntransactions.columns = transactions.columns.str.lower()\ntransactions_lots.columns = transactions_lots.columns.str.lower()\n\n# merge the two tables on transaction_id\nmerged_data = pd.merge(transactions, transactions_lots, on=\"transaction_id\")\n\n# calculate the average amount_of_transaction for each lot_id\navg_amount_by_lot = merged_data.groupby(\"lot_id\")[\"amount_of_transaction\"].mean().reset_index()\n\n# sort the data by average amount_of_transaction\nsorted_data = avg_amount_by_lot.sort_values(\"amount_of_transaction\")\n\n# create a scatter plot\nplt.scatter(sorted_data[\"lot_id\"], sorted_data[\"amount_of_transaction\"])\nplt.xlabel(\"Lot ID\")\nplt.ylabel(\"Average Amount of Transaction\")\nplt.title(\"Scatter Plot of Average Amount of Transaction by Lot ID\")\n\n# Show the plot\nplt.show()\n"
  },
  {
    "db_id": "journal_committee",
    "question": "What are the names and ages of editors ? Show me a bar chart , and I want to order by the x axis in ascending please .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\neditor.columns = editor.columns.str.lower()\n\n# Assuming the data is already loaded into a dataframe called 'editor'\ndf = editor[['name', 'age']].sort_values(by='name')\n\nplt.bar(df['name'], df['age'])\nplt.xlabel('Name')\nplt.ylabel('Age')\nplt.title('Age by Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "Draw a bar chart of investor versus the total number , I want to display by the bar in asc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\n\n# Grouping the data by 'investor' and counting the occurrences\ngrouped_data = entrepreneur.groupby('investor').size().reset_index(name='count')\n\n# Sorting the data by 'investor' in ascending order\nsorted_data = grouped_data.sort_values('investor')\n\n# Creating the bar plot\nplt.bar(sorted_data['investor'], sorted_data['count'])\nplt.xlabel('Investor')\nplt.ylabel('Count')\nplt.title('Number of Entrepreneurs by Investor')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\" displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Merge entrepreneur and people tables\nmerged_df = pd.merge(entrepreneur, people, on='people_id')\n\n# Filter data for specific investors\nfiltered_df = merged_df[(merged_df['investor'] == 'Simon Woodroffe') | (merged_df['investor'] == 'Peter Jones')]\n\n# Group by date_of_birth and count occurrences\ngrouped_df = filtered_df.groupby('date_of_birth').size().reset_index(name='count')\n\n# Sort by date_of_birth in ascending order\nsorted_df = grouped_df.sort_values('date_of_birth')\n\n# Plot the bar chart\nplt.bar(sorted_df['date_of_birth'], sorted_df['count'])\nplt.xlabel('Date of Birth')\nplt.ylabel('Count')\nplt.title('Number of Entrepreneurs by Date of Birth')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "Plot how many party by grouped by party as a bar graph, rank in desc by the bar.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the representative table\nrepresentative_df = pd.read_sql(\"SELECT * FROM representative\", conn)\n\n# Convert column names to lowercase\nrepresentative_df.columns = representative_df.columns.str.lower()\n\n# Perform the SQL query\nparty_count_df = representative_df.groupby('party').size().reset_index(name='count').sort_values('party', ascending=False)\n\n# Generate the bar chart\nplt.bar(party_count_df['party'], party_count_df['count'])\nplt.xlabel('Party')\nplt.ylabel('Count')\nplt.title('Number of Representatives by Party')\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Calculate the number of actors in each duration of actors using a bar chart , and I want to list by the total number in ascending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nactor = pd.read_sql(\"SELECT * FROM actor\", conn)\nactor.columns = actor.columns.str.lower()\n\n# Group by duration and count the occurrences\nduration_counts = actor.groupby('duration').size().reset_index(name='count')\n\n# Sort by count in ascending order\nduration_counts = duration_counts.sort_values('count')\n\n# Plot the bar chart\nplt.bar(duration_counts['duration'], duration_counts['count'])\nplt.xlabel('Duration')\nplt.ylabel('Count')\nplt.title('Count of Durations')\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "Bar graph to show total number of population from different governmentform , and list from high to low by the Y-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry.columns = country.columns.str.lower()\n\n# Group by governmentform and calculate the sum of population\ngrouped_data = country.groupby('governmentform')['population'].sum()\n\n# Sort the data in descending order\nsorted_data = grouped_data.sort_values(ascending=False)\n\n# Create a bar plot\nplt.bar(sorted_data.index, sorted_data.values)\n\n# Set the x-axis label\nplt.xlabel('Government Form')\n\n# Set the y-axis label\nplt.ylabel('Population')\n\n# Set the title of the plot\nplt.title('Population by Government Form')\n\n# Rotate the x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all template type codes and number of templates for each Visualize by bar chart , and I want to sort from low to high by the x axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nTemplates = pd.read_sql(\"SELECT * FROM Templates\", conn)\nTemplates.columns = Templates.columns.str.lower()\n\n# Grouping the data by template_type_code and counting the occurrences\ntemplate_counts = Templates.groupby('template_type_code').size().reset_index(name='count')\n\n# Sorting the data by template_type_code in ascending order\ntemplate_counts = template_counts.sort_values('template_type_code')\n\n# Creating the bar plot\nplt.bar(template_counts['template_type_code'], template_counts['count'])\nplt.xlabel('Template Type Code')\nplt.ylabel('Count')\nplt.title('Template Type Counts')\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "Return the results of all music festivals using a bar chart, and I want to rank x-axis from low to high order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the music_festival table\nmusic_festival = pd.read_sql(\"SELECT * FROM music_festival\", conn)\n\n# Convert column names to lowercase\nmusic_festival.columns = music_festival.columns.str.lower()\n\n# Perform the SQL query\nresult_counts = music_festival.groupby('result').size().reset_index(name='count')\nresult_counts = result_counts.sort_values('result')\n\n# Generate the bar plot\nplt.bar(result_counts['result'], result_counts['count'])\nplt.xlabel('Result')\nplt.ylabel('Count')\nplt.title('Music Festival Results')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "How many templates with version number later than 5 for each template type code ? Show me a bar chart , I want to sort by the bars in asc .",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nTemplates = pd.read_sql(\"SELECT * FROM Templates\", conn)\nTemplates.columns = Templates.columns.str.lower()\n\n# Filter the data\nfiltered_data = Templates[Templates['version_number'] > 5]\n\n# Group by template_type_code and count the occurrences\ngrouped_data = filtered_data.groupby('template_type_code').size().reset_index(name='count')\n\n# Sort the data by template_type_code\nsorted_data = grouped_data.sort_values('template_type_code')\n\n# Create the bar plot\nplt.bar(sorted_data['template_type_code'], sorted_data['count'])\nplt.xlabel('Template Type Code')\nplt.ylabel('Count')\nplt.title('Count of Templates by Template Type Code')\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Show average of budget in different year and group by department creation time with a line chart , order by the x-axis from low to high .",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = department.columns.str.lower()\n\n# Assuming 'department' is a DataFrame containing the table data\n\n# Grouping by 'creation' and calculating the average of 'budget_in_billions'\navg_budget = department.groupby('creation')['budget_in_billions'].mean()\n\n# Sorting the data by 'creation' in ascending order\navg_budget = avg_budget.sort_index()\n\n# Creating a line plot\nplt.plot(avg_budget.index, avg_budget.values)\n\n# Adding labels and title\nplt.xlabel('Creation')\nplt.ylabel('Average Budget (in billions)')\nplt.title('Average Budget by Creation')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "county_public_safety",
    "question": "How many cities are there in each county, visualized with a line chart, sorted by county name in ascending order?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncounty_public_safety = pd.read_sql(\"SELECT * FROM county_public_safety\", conn)\ncity.columns = city.columns.str.lower()\ncounty_public_safety.columns = county_public_safety.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(city, county_public_safety, on='county_id')\n\n# Group by county name and count the occurrences\ngrouped_df = merged_df.groupby('name_y').size().reset_index(name='count')\n\n# Sort the dataframe by county name\nsorted_df = grouped_df.sort_values('name_y')\n\n# Plot the line chart\nplt.plot(sorted_df['name_y'], sorted_df['count'])\nplt.xlabel('County Name')\nplt.ylabel('Count')\nplt.title('Count of Cities in Each County')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72, and sort names in ascending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the country table\ncountry_df = pd.read_sql(\"SELECT * FROM country\", conn)\n\n# Convert column names to lowercase\ncountry_df.columns = country_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = country_df.groupby('governmentform')['population'].sum().reset_index().sort_values('governmentform')\n\n# Generate the bar plot\nplt.bar(result_df['governmentform'], result_df['population'])\nplt.xlabel('Government Form')\nplt.ylabel('Population')\nplt.title('Population by Government Form')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "Please give me a bar chart to show the distribution of results of all music festival , and show by the x axis from low to high please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmusic_festival = pd.read_sql(\"SELECT * FROM music_festival\", conn)\nmusic_festival.columns = music_festival.columns.str.lower()\n\n# Group by 'result' and count the occurrences\nresult_counts = music_festival.groupby('result').size().reset_index(name='count')\n\n# Sort the result_counts by 'result' in ascending order\nresult_counts = result_counts.sort_values('result')\n\n# Create a bar plot\nplt.bar(result_counts['result'], result_counts['count'])\nplt.xlabel('Result')\nplt.ylabel('Count')\nplt.title('Music Festival Results')\nplt.show()"
  },
  {
    "db_id": "scientist_1",
    "question": "How many scientists are involved in each project that requires more than 300 hours, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nprojects = pd.read_sql(\"SELECT * FROM projects\", conn)\nassignedto = pd.read_sql(\"SELECT * FROM assignedto\", conn)\nprojects.columns = projects.columns.str.lower()\nassignedto.columns = assignedto.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(projects, assignedto, left_on='code', right_on='project')\n\n# Filter the data based on the condition\nfiltered_df = merged_df[merged_df['hours'] > 300]\n\n# Group by name and count the number of occurrences\ngrouped_df = filtered_df.groupby('name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['name'], grouped_df['count'])\nplt.xlabel('Project Name')\nplt.ylabel('Count')\nplt.title('Number of Projects with Hours > 300')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Return a scatter chart showing the relationship between major id and average age.",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Student table\nstudent_df = pd.read_sql(\"SELECT * FROM Student\", conn)\n\n# Convert column names to lowercase\nstudent_df.columns = student_df.columns.str.lower()\n\n# Calculate the average age by major\navg_age_by_major = student_df.groupby('major')['age'].mean().reset_index()\n\n# Scatter plot\nplt.scatter(avg_age_by_major['major'], avg_age_by_major['age'])\nplt.xlabel('Major')\nplt.ylabel('Average Age')\nplt.title('Average Age by Major')\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "Please give me a bar chart to show the distribution of results of all music festival.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the music_festival table\nmusic_festival = pd.read_sql(\"SELECT * FROM music_festival\", conn)\n\n# Convert column names to lowercase\nmusic_festival.columns = music_festival.columns.str.lower()\n\n# Perform the query and group by Result column\nresult_counts = music_festival.groupby('result').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(result_counts['result'], result_counts['count'])\nplt.xlabel('Result')\nplt.ylabel('Count')\nplt.title('Music Festival Results')\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 , and I want to order in ascending by the Y .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry.columns = country.columns.str.lower()\n\n# Group by governmentform and calculate the sum of population\ngrouped_data = country.groupby('governmentform')['population'].sum()\n\n# Sort the data in ascending order\nsorted_data = grouped_data.sort_values()\n\n# Create a bar plot\nplt.bar(sorted_data.index, sorted_data.values)\n\n# Set the x-axis label\nplt.xlabel('Government Form')\n\n# Set the y-axis label\nplt.ylabel('Population')\n\n# Set the title of the plot\nplt.title('Population by Government Form')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "Show different nationalities along with the number of hosts of each nationality in a bar chart , and could you list in ascending by the y axis ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nHOST = pd.read_sql(\"SELECT * FROM HOST\", conn)\nHOST.columns = HOST.columns.str.lower()\n\n# Grouping the data by nationality and counting the occurrences\nnationality_counts = HOST.groupby('nationality').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nnationality_counts = nationality_counts.sort_values('count')\n\n# Creating the bar plot\nplt.bar(nationality_counts['nationality'], nationality_counts['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Hosts by Nationality')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Give me a bar chart for mean points of each position , show X-axis in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nplayer.columns = player.columns.str.lower()\n\n# Calculate average points by position\navg_points_by_position = player.groupby('position')['points'].mean()\n\n# Sort positions in ascending order\navg_points_by_position = avg_points_by_position.sort_index()\n\n# Create bar plot\nplt.bar(avg_points_by_position.index, avg_points_by_position.values)\nplt.xlabel('Position')\nplt.ylabel('Average Points')\nplt.title('Average Points by Position')\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "I want to know the proportion of the total number for each nominee .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Assuming the data is already loaded into a dataframe called 'musical'\n\n# Grouping the data by 'nominee' and counting the occurrences\ngrouped_data = musical.groupby('nominee').size().reset_index(name='count')\n\n# Creating a pie chart\nplt.pie(grouped_data['count'], labels=grouped_data['nominee'], autopct='%1.1f%%')\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "Find the organisation ids and details of the organisations which are involved i. Plot them as bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Grants table\ngrants = pd.read_sql(\"SELECT * FROM Grants\", conn)\n\n# Read the Organisations table\norganisations = pd.read_sql(\"SELECT * FROM Organisations\", conn)\n\n# Convert column names to lowercase\ngrants.columns = grants.columns.str.lower()\norganisations.columns = organisations.columns.str.lower()\n\n# merge the grants and organisations tables on organisation_id\nmerged_data = pd.merge(grants, organisations, on='organisation_id')\n\n# group by organisation_details and count the number of grants\ngrouped_data = merged_data.groupby('organisation_details').size()\n\n# plot the bar chart\nplt.bar(grouped_data.index, grouped_data.values)\nplt.xlabel('Organisation Details')\nplt.ylabel('Number of Grants')\nplt.title('Number of Grants by Organisation Details')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "department_management",
    "question": "Show average of budget in different year and group by department creation time with a line chart .",
    "chart": "Line",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = department.columns.str.lower()\n\n# Assuming 'department' is a DataFrame containing the table data\n\n# Grouping the data by 'creation' and calculating the average of 'budget_in_billions'\navg_budget = department.groupby('creation')['budget_in_billions'].mean()\n\n# Creating a line plot\nplt.plot(avg_budget.index, avg_budget.values)\n\n# Adding labels and title\nplt.xlabel('Creation')\nplt.ylabel('Average Budget (in billions)')\nplt.title('Average Budget by Creation')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the different template type codes, and how many templates correspond to each Plot them as bar chart, could you rank in ascending by the Y-axis please?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Templates table\ntemplates = pd.read_sql(\"SELECT * FROM Templates\", conn)\n\n# Convert column names to lowercase\ntemplates.columns = templates.columns.str.lower()\n\n# Perform the SQL query\nresult = templates.groupby('template_type_code').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result['template_type_code'], result['count'])\nplt.xlabel('Template Type Code')\nplt.ylabel('Count')\nplt.title('Number of Templates by Template Type Code')\nplt.show()"
  },
  {
    "db_id": "local_govt_mdm",
    "question": "What is the count of renting arrears tax ids for each master customer id whose detail is not 'Schmidt, Kertzmann and Lubowitz' displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRent_Arrears = pd.read_sql(\"SELECT * FROM Rent_Arrears\", conn)\nCMI_Cross_References = pd.read_sql(\"SELECT * FROM CMI_Cross_References\", conn)\nCustomer_Master_Index = pd.read_sql(\"SELECT * FROM Customer_Master_Index\", conn)\nRent_Arrears.columns = Rent_Arrears.columns.str.lower()\nCMI_Cross_References.columns = CMI_Cross_References.columns.str.lower()\nCustomer_Master_Index.columns = Customer_Master_Index.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Rent_Arrears, CMI_Cross_References, on='cmi_cross_ref_id')\nmerged_df = pd.merge(merged_df, Customer_Master_Index, on='master_customer_id')\n\n# Filter the data\nfiltered_df = merged_df[merged_df['cmi_details'] != 'schmidt , kertzmann and lubowitz']\n\n# Group by master_customer_id and count the council_tax_id\ngrouped_df = filtered_df.groupby('master_customer_id').agg({'council_tax_id': 'count'}).reset_index()\n\n# Plot the bar chart\nplt.bar(grouped_df['master_customer_id'], grouped_df['council_tax_id'])\nplt.xlabel('Master Customer ID')\nplt.ylabel('Count')\nplt.title('Count of Council Tax IDs per Master Customer ID')\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "What are the names and ages of editors ? Show me a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\neditor.columns = editor.columns.str.lower()\n\n# Assuming the data is already loaded into a dataframe called 'editor'\n\n# Selecting the columns 'name' and 'age'\ndf = editor[['name', 'age']]\n\n# Plotting a bar chart\nplt.bar(df['name'], df['age'])\nplt.xlabel('Name')\nplt.ylabel('Age')\nplt.title('Bar Chart of Name vs Age')\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "Show me a bar chart displaying the number of hosts for each party location, grouped by the location of the party.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nparty_host = pd.read_sql(\"SELECT * FROM party_host\", conn)\nHOST = pd.read_sql(\"SELECT * FROM HOST\", conn)\nparty = pd.read_sql(\"SELECT * FROM party\", conn)\nparty_host.columns = party_host.columns.str.lower()\nHOST.columns = HOST.columns.str.lower()\nparty.columns = party.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(party_host, HOST, on='host_id')\nmerged_df = pd.merge(merged_df, party, on='party_id')\n\n# Grouping by location and counting\ngrouped_df = merged_df.groupby('location').size().reset_index(name='count')\n\n# Plotting the bar chart\nplt.bar(grouped_df['location'], grouped_df['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Parties by Location')\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "Show the average of population from each status , list by the the average of population in asc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncity.columns = city.columns.str.lower()\n\n# Group by status and calculate average population\ngrouped_city = city.groupby('status')['population'].mean()\n\n# Sort by average population in ascending order\nsorted_city = grouped_city.sort_values()\n\n# Create bar plot\nplt.bar(sorted_city.index, sorted_city.values)\n\n# Set labels and title\nplt.xlabel('Status')\nplt.ylabel('Average Population')\nplt.title('Average Population by Status')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "scientist_1",
    "question": "Show me a bar chart displaying the scientist's name and the number of projects they are working on, ranked in descending order of the number of projects.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nscientists = pd.read_sql(\"SELECT * FROM scientists\", conn)\nassignedto = pd.read_sql(\"SELECT * FROM assignedto\", conn)\nscientists.columns = scientists.columns.str.lower()\nassignedto.columns = assignedto.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(scientists, assignedto, left_on='ssn', right_on='scientist')\n\n# Perform the group by and count operation\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['name'], sorted_df['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Number of Assignments per Scientist')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "What are the types of competition and number of competitions for that type Show bar chart , and I want to order the total number from high to low order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the number of occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort the counts in descending order\ncompetition_counts = competition_counts.sort_values(by='count', ascending=False)\n\n# Create a bar plot\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Type')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "List the types of competition and the number of competitions of each type by a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the competition table\ncompetition_df = pd.read_sql(\"SELECT * FROM competition\", conn)\n\n# Convert column names to lowercase\ncompetition_df.columns = competition_df.columns.str.lower()\n\n# Perform the SQL query\nresult = competition_df.groupby('competition_type').size()\n\n# Plot the pie chart\nplt.pie(result, labels=result.index, autopct='%1.1f%%')\nplt.title('Competition Types')\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Find the component amounts and names of all furnitures that have more than 10 components , and could you order by the y axis from low to high ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nfurniture = pd.read_sql(\"SELECT * FROM furniture\", conn)\nfurniture.columns = furniture.columns.str.lower()\n\n# Filter the dataframe\nfiltered_df = furniture[furniture['num_of_component'] > 10]\n\n# Sort the dataframe\nsorted_df = filtered_df.sort_values('num_of_component')\n\n# Create the bar plot\nplt.bar(sorted_df['name'], sorted_df['num_of_component'])\n\n# Add labels and title\nplt.xlabel('Name')\nplt.ylabel('Number of Components')\nplt.title('Furniture with More than 10 Components')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "local_govt_mdm",
    "question": "Show me a bar chart displaying the number of parking fines associated with each tax source system code.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nCMI_Cross_References = pd.read_sql(\"SELECT * FROM CMI_Cross_References\", conn)\nParking_Fines = pd.read_sql(\"SELECT * FROM Parking_Fines\", conn)\nCMI_Cross_References.columns = CMI_Cross_References.columns.str.lower()\nParking_Fines.columns = Parking_Fines.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(CMI_Cross_References, Parking_Fines, on='cmi_cross_ref_id')\n\n# Group by source_system_code and count the number of occurrences\ngrouped_df = merged_df.groupby('source_system_code').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['source_system_code'], grouped_df['count'])\nplt.xlabel('Source System Code')\nplt.ylabel('Count')\nplt.title('Number of Parking Fines by Source System Code')\nplt.show()"
  },
  {
    "db_id": "coffee_shop",
    "question": "Find the number of members living in each address . Show bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmember = pd.read_sql(\"SELECT * FROM member\", conn)\nmember.columns = member.columns.str.lower()\n\n# Grouping the data by address and counting the number of occurrences\naddress_counts = member.groupby('address').size().reset_index(name='count')\n\n# Creating a bar plot\nplt.bar(address_counts['address'], address_counts['count'])\nplt.xlabel('Address')\nplt.ylabel('Count')\nplt.title('Number of Members by Address')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "scientist_1",
    "question": "What is the name of the project with the highest number of scientists assigned to it, where the scientists' names contain 'Smith', shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nassignedto = pd.read_sql(\"SELECT * FROM assignedto\", conn)\nprojects = pd.read_sql(\"SELECT * FROM projects\", conn)\nscientists = pd.read_sql(\"SELECT * FROM scientists\", conn)\nassignedto.columns = assignedto.columns.str.lower()\nprojects.columns = projects.columns.str.lower()\nscientists.columns = scientists.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(assignedto, projects, left_on='project', right_on='code')\nmerged_df = pd.merge(merged_df, scientists, left_on='scientist', right_on='ssn')\n\n# Filter the data based on scientist name\nfiltered_df = merged_df[merged_df['name_y'].str.contains('smith', case=False)]\n\n# Group by project name and count the number of occurrences\ngrouped_df = filtered_df.groupby('name_x').size().reset_index(name='count')\n\n# Sort the data by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['name_x'], sorted_df['count'])\nplt.xlabel('Project Name')\nplt.ylabel('Count')\nplt.title('Number of Assignments per Project for Scientists with \"Smith\" in their Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "How many musicals has each nominee been nominated for Plot them as bar chart , I want to order by the X in desc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Group by nominee and count the occurrences\ngrouped = musical.groupby('nominee').size().reset_index(name='count')\n\n# Sort by nominee in descending order\ngrouped = grouped.sort_values('nominee', ascending=False)\n\n# Create bar plot\nplt.bar(grouped['nominee'], grouped['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Bar graph to show the number of rank from different rank, I want to display bar in asc order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the captain table\ncaptain_df = pd.read_sql(\"SELECT * FROM captain\", conn)\n\n# Convert column names to lowercase\ncaptain_df.columns = captain_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = captain_df.groupby('rank').size().reset_index(name='count').sort_values('rank')\n\n# Generate the bar plot\nplt.bar(result_df['rank'], result_df['count'])\nplt.xlabel('Rank')\nplt.ylabel('Count')\nplt.title('Count of Ranks')\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "What is the scatter plot of the count of research staff for each organisation?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nOrganisations = pd.read_sql(\"SELECT * FROM Organisations\", conn)\nResearch_Staff = pd.read_sql(\"SELECT * FROM Research_Staff\", conn)\nOrganisations.columns = Organisations.columns.str.lower()\nResearch_Staff.columns = Research_Staff.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Organisations, Research_Staff, left_on='organisation_id', right_on='employer_organisation_id')\n\n# Group by organisation_details and count the number of occurrences\ngrouped_df = merged_df.groupby('organisation_details').size().reset_index(name='count')\n\n# Create scatter plot\nplt.scatter(grouped_df['organisation_details'], grouped_df['count'])\nplt.xlabel('Organisation Details')\nplt.ylabel('Count')\nplt.title('Number of Research Staff per Organisation')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Compare the total number of locations in each location using a bar graph, and order by the Y-axis from low to high.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the performance table\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\n\n# Convert column names to lowercase\nperformance.columns = performance.columns.str.lower()\n\n# Perform the SQL query\nresult = performance.groupby('location').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result['location'], result['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Performances by Location')\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "What is the official language spoken in the country whose head of state is Beatrix, and count them by a bar chart, and rank by the total number from high to low.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read data from the \"country\" table\ncountry_data = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry_data.columns = map(str.lower, country_data.columns)\n\n# Read data from the \"countrylanguage\" table\ncountrylanguage_data = pd.read_sql(\"SELECT * FROM countrylanguage\", conn)\ncountrylanguage_data.columns = map(str.lower, countrylanguage_data.columns)\n\n# Merge the two tables based on the common column \"code\"\nmerged_data = pd.merge(country_data, countrylanguage_data, left_on=\"code\", right_on=\"countrycode\")\n\n# Filter the merged data based on the conditions\nfiltered_data = merged_data[(merged_data[\"headofstate\"] == \"Beatrix\") & (merged_data[\"isofficial\"] == \"T\")]\n\n# Group the filtered data by language and count the occurrences\ngrouped_data = filtered_data.groupby(\"language\").size().reset_index(name=\"count\")\n\n# Sort the grouped data by count in descending order\nsorted_data = grouped_data.sort_values(by=\"count\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"language\"], sorted_data[\"count\"])\nplt.xlabel(\"Language\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Countries with Official Language by Language\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 Visualize by bar chart, I want to list x axis in desc order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the country table\ncountry_df = pd.read_sql(\"SELECT * FROM country\", conn)\n\n# Convert column names to lowercase\ncountry_df.columns = country_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = country_df.groupby('governmentform')['population'].sum().reset_index()\nresult_df = result_df.sort_values('governmentform', ascending=False)\n\n# Generate the bar plot\nplt.bar(result_df['governmentform'], result_df['population'])\nplt.xlabel('Government Form')\nplt.ylabel('Population')\nplt.title('Population by Government Form')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Return a bar chart on how many musicals has each nominee been nominated for?, order Y-axis in ascending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the musical table\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\n\n# Convert column names to lowercase\nmusical.columns = musical.columns.str.lower()\n\n# Perform the SQL query\nresult = musical.groupby('nominee').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result['nominee'], result['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Nominations by Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Visualize the name and their component amounts with a bar chart for all furnitures that have more than 10 components, sort from high to low by the total number please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the furniture table into a DataFrame\nfurniture_df = pd.read_sql(\"SELECT * FROM furniture\", conn)\n\n# Convert column names to lowercase\nfurniture_df.columns = furniture_df.columns.str.lower()\n\n# Filter the DataFrame for rows where Num_of_Component > 10\nfiltered_df = furniture_df[furniture_df['num_of_component'] > 10]\n\n# Sort the filtered DataFrame by Num_of_Component in descending order\nsorted_df = filtered_df.sort_values('num_of_component', ascending=False)\n\n# Create a bar plot of Name vs Num_of_Component\nplt.bar(sorted_df['name'], sorted_df['num_of_component'])\nplt.xlabel('Name')\nplt.ylabel('Num_of_Component')\nplt.title('Furniture with Num_of_Component > 10')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "Give me a bar for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , and order in desc by the X-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry.columns = country.columns.str.lower()\n\n# Group by governmentform and calculate the sum of population\ngrouped_data = country.groupby('governmentform')['population'].sum()\n\n# Sort the data by governmentform in descending order\nsorted_data = grouped_data.sort_index(ascending=False)\n\n# Create a bar plot\nplt.bar(sorted_data.index, sorted_data.values)\n\n# Set the x-axis labels\nplt.xlabel('Government Form')\n\n# Set the y-axis label\nplt.ylabel('Population')\n\n# Set the title of the plot\nplt.title('Population by Government Form')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "A bar chart for returning the number of the lot details of lots that belong to investors with details \"l\"?, and I want to list in ascending by the y axis.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the INVESTORS table\ninvestors = pd.read_sql(\"SELECT * FROM INVESTORS\", conn)\ninvestors.columns = map(str.lower, investors.columns)\n\n# Read the LOTS table\nlots = pd.read_sql(\"SELECT * FROM LOTS\", conn)\nlots.columns = map(str.lower, lots.columns)\n\n# Merge the INVESTORS and LOTS tables on investor_id\nmerged_data = pd.merge(investors, lots, on=\"investor_id\")\n\n# Filter the merged data based on Investor_details\nfiltered_data = merged_data[merged_data[\"investor_details\"] == \"l\"]\n\n# Group by lot_details and count the occurrences\ngrouped_data = filtered_data.groupby(\"lot_details\").size().reset_index(name=\"count\")\n\n# Sort the grouped data by count in ascending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=True)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"lot_details\"], sorted_data[\"count\"])\nplt.xlabel(\"Lot Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Bar Chart of Lot Details\")\nplt.show()"
  },
  {
    "db_id": "company_employee",
    "question": "Show the different headquarters and number of companies at each headquarter with a bar chart, sort X-axis in desc order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the company table\ncompany_df = pd.read_sql(\"SELECT * FROM company\", conn)\n\n# Convert column names to lowercase\ncompany_df.columns = company_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = company_df.groupby('headquarters').size().reset_index(name='count')\nresult_df = result_df.sort_values('headquarters', ascending=False)\n\n# Generate the bar chart\nplt.bar(result_df['headquarters'], result_df['count'])\nplt.xlabel('Headquarters')\nplt.ylabel('Count')\nplt.title('Number of Companies by Headquarters')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Show average of budget in different year and group by department creation time with a line chart, and order by the X-axis in descending.",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the department table\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\n\n# Convert column names to lowercase\ndepartment.columns = department.columns.str.lower()\n\n# Perform the SQL query\nresult = department.groupby(\"creation\")[\"budget_in_billions\"].mean().reset_index()\nresult = result.sort_values(\"creation\", ascending=False)\n\n# Plot the line chart\nplt.plot(result[\"creation\"], result[\"budget_in_billions\"])\nplt.xlabel(\"Creation\")\nplt.ylabel(\"Average Budget in Billions\")\nplt.title(\"Average Budget in Billions by Creation\")\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "What is the number of players who have points less than 30 for each position .",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nplayer.columns = player.columns.str.lower()\n\n# Filter the dataframe based on the condition\nfiltered_player = player[player['points'] < 30]\n\n# Group the filtered dataframe by position and count the number of occurrences\nposition_counts = filtered_player.groupby('position').size()\n\n# Create a pie chart\nplt.pie(position_counts, labels=position_counts.index, autopct='%1.1f%%')\nplt.title('Player Positions with Points < 30')\nplt.show()"
  },
  {
    "db_id": "riding_club",
    "question": "Show different occupations along with the number of players in each occupation with a bar chart, and could you list Y-axis in ascending order please?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the player table\nplayer_df = pd.read_sql(\"SELECT * FROM player\", conn)\n\n# Convert column names to lowercase\nplayer_df.columns = player_df.columns.str.lower()\n\n# Perform the SQL query\noccupation_count = player_df.groupby('occupation').size().reset_index(name='count')\noccupation_count = occupation_count.sort_values('count')\n\n# Generate the bar plot\nplt.bar(occupation_count['occupation'], occupation_count['count'])\nplt.xlabel('Occupation')\nplt.ylabel('Count')\nplt.title('Occupation Count')\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Show different locations and the number of performances at each location . Visualize by bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\nperformance.columns = performance.columns.str.lower()\n\n# Group by location and count the number of records\nlocation_counts = performance.groupby('location').size()\n\n# Create a bar plot\nplt.bar(location_counts.index, location_counts.values)\n\n# Set the labels and title\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Records by Location')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Show different nominees and the number of musicals they have been nominated in a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the musical table\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\n\n# Convert column names to lowercase\nmusical.columns = musical.columns.str.lower()\n\n# Perform the SQL query\nresult = musical.groupby('nominee').size().reset_index(name='count')\n\n# Generate the bar chart\nplt.bar(result['nominee'], result['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Musicals by Nominee')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Draw a bar chart for what is the average number of stars that each reviewer awards for a movie?, rank in ascending by the y-axis.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Reviewer table\nreviewer_df = pd.read_sql(\"SELECT * FROM Reviewer\", conn)\nreviewer_df.columns = map(str.lower, reviewer_df.columns)\n\n# Merge the Rating and Reviewer tables on rID\nmerged_df = pd.merge(rating_df, reviewer_df, on=\"rid\")\n\n# Calculate the average stars for each reviewer\navg_stars_df = merged_df.groupby(\"name\")[\"stars\"].mean().reset_index()\navg_stars_df = avg_stars_df.sort_values(\"stars\")\n\n# Plot the bar chart\nplt.bar(avg_stars_df[\"name\"], avg_stars_df[\"stars\"])\nplt.xlabel(\"Reviewer Name\")\nplt.ylabel(\"Average Stars\")\nplt.title(\"Average Stars by Reviewer\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the different template type codes, and how many documents use each type Plot them as bar chart, and could you order y axis from low to high order please?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Templates table\ntemplates = pd.read_sql(\"SELECT * FROM Templates\", conn)\n\n# Read the Documents table\ndocuments = pd.read_sql(\"SELECT * FROM Documents\", conn)\n\n# Convert column names to lowercase\ntemplates.columns = templates.columns.str.lower()\ndocuments.columns = documents.columns.str.lower()\n\n# merge the templates and documents tables on template_id\nmerged_data = pd.merge(templates, documents, on=\"template_id\")\n\n# group by template_type_code and count the number of occurrences\ngrouped_data = merged_data.groupby(\"template_type_code\").size().reset_index(name=\"count\")\n\n# sort the data by count in ascending order\nsorted_data = grouped_data.sort_values(\"count\")\n\n# plot the bar chart\nplt.bar(sorted_data[\"template_type_code\"], sorted_data[\"count\"])\nplt.xlabel(\"Template Type Code\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Templates by Template Type Code\")\nplt.show()\n"
  },
  {
    "db_id": "department_management",
    "question": "Plot the average of budget in billions over creation in a line chart",
    "chart": "Line",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = department.columns.str.lower()\n\n# Assuming 'department' is a DataFrame containing the table data\n\n# Grouping the data by 'creation' and calculating the average of 'budget_in_billions'\navg_budget = department.groupby('creation')['budget_in_billions'].mean()\n\n# Converting the result to a DataFrame\navg_budget_df = pd.DataFrame(avg_budget).reset_index()\n\n# Sorting the DataFrame by 'creation' column\navg_budget_df = avg_budget_df.sort_values('creation')\n\n# Plotting the line chart\nplt.plot(avg_budget_df['creation'], avg_budget_df['budget_in_billions'])\nplt.xlabel('Creation')\nplt.ylabel('Average Budget (in billions)')\nplt.title('Average Budget by Creation')\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "What are the investor IDs and the corresponding number of transactions for the top 3 investors with the highest number of transactions, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nINVESTORS = pd.read_sql(\"SELECT * FROM INVESTORS\", conn)\nTRANSACTIONS = pd.read_sql(\"SELECT * FROM TRANSACTIONS\", conn)\nINVESTORS.columns = INVESTORS.columns.str.lower()\nTRANSACTIONS.columns = TRANSACTIONS.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(INVESTORS, TRANSACTIONS, on='investor_id')\n\n# Group by investor_id and count the number of transactions\ngrouped_df = merged_df.groupby('investor_id').size().reset_index(name='count')\n\n# Sort by count in descending order and select the top 3\ntop_3_investors = grouped_df.sort_values('count', ascending=False).head(3)\n\n# Create the bar plot\nplt.bar(top_3_investors['investor_id'], top_3_investors['count'])\nplt.xlabel('Investor ID')\nplt.ylabel('Number of Transactions')\nplt.title('Top 3 Investors by Number of Transactions')\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "Plot a scatter chart , investor id by mean amount of transaction .",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nTRANSACTIONS = pd.read_sql(\"SELECT * FROM TRANSACTIONS\", conn)\nTRANSACTIONS.columns = TRANSACTIONS.columns.str.lower()\n\n# Group transactions by investor_id and calculate average amount_of_transaction\ngrouped_transactions = TRANSACTIONS.groupby('investor_id')['amount_of_transaction'].mean()\n\n# Convert the grouped transactions to a dataframe\ndf = pd.DataFrame(grouped_transactions).reset_index()\n\n# Scatter plot\nplt.scatter(df['investor_id'], df['amount_of_transaction'])\nplt.xlabel('Investor ID')\nplt.ylabel('Average Amount of Transaction')\nplt.title('Scatter Plot of Average Amount of Transaction by Investor ID')\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "What are the category of music festivals with result \"Awarded\", and count them by a bar chart",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the music_festival table\nmusic_festival = pd.read_sql(\"SELECT * FROM music_festival\", conn)\n\n# Convert column names to lowercase\nmusic_festival.columns = music_festival.columns.str.lower()\n\n# Filter the data for \"Awarded\" results\nawarded_data = music_festival[music_festival[\"result\"] == \"Awarded\"]\n\n# Group by category and count the occurrences\ncategory_counts = awarded_data.groupby(\"category\").size().reset_index(name=\"count\")\n\n# Plot the bar chart\nplt.bar(category_counts[\"category\"], category_counts[\"count\"])\nplt.xlabel(\"Category\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Awards by Category\")\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "How many furniture types are produced by each manufacturer, and what are the company names, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmanufacturer = pd.read_sql(\"SELECT * FROM manufacturer\", conn)\nfurniture_manufacte = pd.read_sql(\"SELECT * FROM furniture_manufacte\", conn)\nmanufacturer.columns = manufacturer.columns.str.lower()\nfurniture_manufacte.columns = furniture_manufacte.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(manufacturer, furniture_manufacte, on='manufacturer_id')\n\n# Group by manufacturer name and count the number of occurrences\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['name'], grouped_df['count'])\nplt.xlabel('Manufacturer')\nplt.ylabel('Count')\nplt.title('Number of Furniture by Manufacturer')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "How many representatives in each party ? Visualize with a pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\nrepresentative.columns = representative.columns.str.lower()\n\n# Group by party and count the number of representatives in each party\nparty_counts = representative.groupby('party').size()\n\n# Create a pie chart\nplt.pie(party_counts, labels=party_counts.index, autopct='%1.1f%%')\nplt.axis('equal')\n\n# Display the chart\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "How many templates for each template type code? Show me a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Templates table into a DataFrame\ntemplates_df = pd.read_sql(\"SELECT * FROM Templates\", conn)\n\n# Convert column names to lowercase\ntemplates_df.columns = templates_df.columns.str.lower()\n\n# Perform the SQL query and group by Template_Type_Code\ngrouped_df = templates_df.groupby('template_type_code').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['template_type_code'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Visualize the title and and the average star rating of the movie using a bar chart, list bars in desc order please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\nmovie_df.columns = map(str.lower, movie_df.columns)\n\n# Merge the Rating and Movie tables on mID column\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Calculate the average stars for each movie title\navg_stars_df = merged_df.groupby(\"title\")[\"stars\"].mean().reset_index()\n\n# Sort the dataframe by title in descending order\navg_stars_df = avg_stars_df.sort_values(\"title\", ascending=False)\n\n# Plot the bar chart\nplt.bar(avg_stars_df[\"title\"], avg_stars_df[\"stars\"])\nplt.xlabel(\"Movie Title\")\nplt.ylabel(\"Average Stars\")\nplt.title(\"Average Stars for Each Movie\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "Give me a bar for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , rank from high to low by the sum population .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry.columns = country.columns.str.lower()\n\n# Group by governmentform and calculate the sum of population\ngrouped_data = country.groupby('governmentform')['population'].sum()\n\n# Sort the data in descending order\nsorted_data = grouped_data.sort_values(ascending=False)\n\n# Create a bar plot\nplt.bar(sorted_data.index, sorted_data.values)\n\n# Set the x-axis label\nplt.xlabel('Government Form')\n\n# Set the y-axis label\nplt.ylabel('Population')\n\n# Set the title of the plot\nplt.title('Population by Government Form')\n\n# Rotate the x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "county_public_safety",
    "question": "Create a bar chart showing the total number across police force , show by the names in desc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncounty_public_safety = pd.read_sql(\"SELECT * FROM county_public_safety\", conn)\ncounty_public_safety.columns = county_public_safety.columns.str.lower()\n\n# Group by police_force and count the occurrences\ndf_grouped = county_public_safety.groupby('police_force').size().reset_index(name='count')\n\n# Sort by police_force in descending order\ndf_sorted = df_grouped.sort_values('police_force', ascending=False)\n\n# Create bar plot\nplt.bar(df_sorted['police_force'], df_sorted['count'])\nplt.xlabel('Police Force')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Police Force')\nplt.show()"
  },
  {
    "db_id": "coffee_shop",
    "question": "Bar graph to show the total number from different address , and rank x axis from high to low order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmember = pd.read_sql(\"SELECT * FROM member\", conn)\nmember.columns = member.columns.str.lower()\n\n# Grouping the data by address and counting the number of occurrences\naddress_counts = member.groupby('address').size().reset_index(name='count')\n\n# Sorting the data by address in descending order\naddress_counts = address_counts.sort_values('address', ascending=False)\n\n# Creating the bar plot\nplt.bar(address_counts['address'], address_counts['count'])\nplt.xlabel('Address')\nplt.ylabel('Count')\nplt.title('Number of Members by Address')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "For those ships that do not have a captain, tell me the proportion of their classes using a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ship table\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Read the captain table\ncaptain_df = pd.read_sql(\"SELECT * FROM captain\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\ncaptain_df.columns = captain_df.columns.str.lower()\n\n# filter ship table to exclude ship_id present in captain table\nfiltered_ship_df = ship_df[~ship_df['ship_id'].isin(captain_df['ship_id'])]\n\n# group by class and count the occurrences\ngrouped_df = filtered_ship_df.groupby('class').size().reset_index(name='count')\n\n# plot the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['class'], autopct='%1.1f%%')\nplt.title('Ship Classes without Captains')\nplt.show()\n"
  },
  {
    "db_id": "journal_committee",
    "question": "Draw a bar chart of name versus age",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\neditor.columns = editor.columns.str.lower()\n\n# Assuming the data is already loaded into a dataframe called 'editor'\n\n# Selecting the columns 'name' and 'age'\ndf = editor[['name', 'age']]\n\n# Plotting a bar chart\nplt.bar(df['name'], df['age'])\nplt.xlabel('Name')\nplt.ylabel('Age')\nplt.title('Bar Chart of Name vs Age')\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "Which party has the least number of representatives in the election, represented by a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nelection = pd.read_sql(\"SELECT * FROM election\", conn)\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\nelection.columns = election.columns.str.lower()\nrepresentative.columns = representative.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(election, representative, on='representative_id')\n\n# Group by party and count the number of occurrences\nparty_counts = merged_df.groupby('party').size().reset_index(name='count')\n\n# Sort the counts in ascending order\nsorted_counts = party_counts.sort_values('count')\n\n# Create the bar plot\nplt.bar(sorted_counts['party'], sorted_counts['count'])\nplt.xlabel('Party')\nplt.ylabel('Count')\nplt.title('Number of Representatives by Party')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "Bar graph to show the number of investor from different investor, rank by the bars from low to high.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the entrepreneur table\nentrepreneur_df = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\n\n# Convert column names to lowercase\nentrepreneur_df.columns = entrepreneur_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = entrepreneur_df.groupby('investor').size().reset_index(name='count').sort_values('investor')\n\n# Generate the bar plot\nplt.bar(result_df['investor'], result_df['count'])\nplt.xlabel('Investor')\nplt.ylabel('Count')\nplt.title('Number of Entrepreneurs per Investor')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "What are the start dates for grants that have descriptions of Regular and Initial Applications, visualized in a scatter plot?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nGrants = pd.read_sql(\"SELECT * FROM Grants\", conn)\nDocuments = pd.read_sql(\"SELECT * FROM Documents\", conn)\nDocument_Types = pd.read_sql(\"SELECT * FROM Document_Types\", conn)\nGrants.columns = Grants.columns.str.lower()\nDocuments.columns = Documents.columns.str.lower()\nDocument_Types.columns = Document_Types.columns.str.lower()\n\n# Merge the tables\nmerged_df = pd.merge(Grants, Documents, on='grant_id')\nmerged_df = pd.merge(merged_df, Document_Types, on='document_type_code')\n\n# Filter the data\nfiltered_df = merged_df[merged_df['document_description'].isin(['Regular', 'Initial Application'])]\n\n# Create the scatter plot\nplt.scatter(filtered_df['grant_start_date'], filtered_df['document_description'])\nplt.xlabel('Grant Start Date')\nplt.ylabel('Document Description')\nplt.title('Scatter Plot of Grant Start Date vs Document Description')\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Give me a bar chart showing the total number of ships' classes that do not have a captain, display from low to high by the bars please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ship table\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Read the captain table\ncaptain_df = pd.read_sql(\"SELECT * FROM captain\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\ncaptain_df.columns = captain_df.columns.str.lower()\n\n# filter ship table to exclude ship_id present in captain table\nfiltered_ship_df = ship_df[~ship_df['ship_id'].isin(captain_df['ship_id'])]\n\n# group by class and count the occurrences\ngrouped_ship_df = filtered_ship_df.groupby('class').size().reset_index(name='count')\n\n# sort by class in ascending order\nsorted_ship_df = grouped_ship_df.sort_values('class')\n\n# plot the bar chart\nplt.bar(sorted_ship_df['class'], sorted_ship_df['count'])\nplt.xlabel('Class')\nplt.ylabel('Count')\nplt.title('Number of Ships by Class')\nplt.show()\n"
  },
  {
    "db_id": "party_host",
    "question": "How many hosts does each nationality have ? List the nationality and the count Visualize by bar chart , could you list in ascending by the y axis ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nHOST = pd.read_sql(\"SELECT * FROM HOST\", conn)\nHOST.columns = HOST.columns.str.lower()\n\n# Grouping the data by nationality and counting the occurrences\nnationality_counts = HOST.groupby('nationality').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nnationality_counts = nationality_counts.sort_values('count')\n\n# Creating the bar plot\nplt.bar(nationality_counts['nationality'], nationality_counts['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Hosts by Nationality')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Show me a bar chart of the names of movies that are either made after 2000 or reviewed by Brittany Harris.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nMovie = pd.read_sql(\"SELECT * FROM Movie\", conn)\nReviewer = pd.read_sql(\"SELECT * FROM Reviewer\", conn)\nRating.columns = Rating.columns.str.lower()\nMovie.columns = Movie.columns.str.lower()\nReviewer.columns = Reviewer.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(pd.merge(Rating, Movie, on='mid'), Reviewer, on='rid')\n\n# Filter data\nfiltered_df = merged_df[(merged_df['name'] == 'brittany harris') | (merged_df['year'] > 2000)]\n\n# Group by title and count\ngrouped_df = filtered_df.groupby('title').size().reset_index(name='count')\n\n# Plot bar chart\nplt.bar(grouped_df['title'], grouped_df['count'])\nplt.xlabel('Movie Title')\nplt.ylabel('Count')\nplt.title('Number of Ratings for Movies')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Show me the proportion on what is the number of players who have points less than 30 for each position ?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nplayer.columns = player.columns.str.lower()\n\n# Filter the dataframe based on the condition\nfiltered_player = player[player['points'] < 30]\n\n# Group the filtered dataframe by position and count the number of occurrences\nposition_counts = filtered_player.groupby('position').size()\n\n# Create a pie chart\nplt.pie(position_counts, labels=position_counts.index, autopct='%1.1f%%')\nplt.title('Distribution of Players by Position (Points < 30)')\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "Display a bar chart for the names and the ages of editors , list by the bar from low to high .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\neditor.columns = editor.columns.str.lower()\n\n# Assuming the data is already loaded into a dataframe called 'editor'\n\n# Sort the dataframe by name in ascending order\nsorted_df = editor.sort_values(by='name')\n\n# Extract the name and age columns\nname = sorted_df['name']\nage = sorted_df['age']\n\n# Create a bar plot\nplt.bar(name, age)\n\n# Add labels and title\nplt.xlabel('Name')\nplt.ylabel('Age')\nplt.title('Age Distribution by Name')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "List the budget of each department in a bar chart, sort by the Y-axis from high to low please.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the department table\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\n\n# Convert column names to lowercase\ndepartment.columns = department.columns.str.lower()\n\n# Sort the department table by budget_in_billions in descending order\ndepartment_sorted = department.sort_values(by='budget_in_billions', ascending=False)\n\n# Create a bar plot\nplt.bar(department_sorted['name'], department_sorted['budget_in_billions'])\nplt.xlabel('Department Name')\nplt.ylabel('Budget in Billions')\nplt.title('Department Budgets')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Show the title and score of the movie with a bar chart, and rank in ascending by the Y-axis.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\nmovie_df.columns = map(str.lower, movie_df.columns)\n\n# Merge the Rating and Movie tables on mID column\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Sort the merged dataframe by stars in ascending order\nsorted_df = merged_df.sort_values(by=\"stars\")\n\n# Plot the bar chart\nplt.bar(sorted_df[\"title\"], sorted_df[\"stars\"])\nplt.xlabel(\"Movie Title\")\nplt.ylabel(\"Stars\")\nplt.title(\"Movie Ratings\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "school_player",
    "question": "How many players are there in each location for schools that have more than 1 player, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nschool = pd.read_sql(\"SELECT * FROM school\", conn)\nplayer.columns = player.columns.str.lower()\nschool.columns = school.columns.str.lower()\n\n# Perform the join operation\nmerged_data = pd.merge(player, school, on='school_id')\n\n# Group by location and count the number of players\ngrouped_data = merged_data.groupby('location').size().reset_index(name='count')\n\n# Filter locations with count greater than 1\nfiltered_data = grouped_data[grouped_data['count'] > 1]\n\n# Plot the bar chart\nplt.bar(filtered_data['location'], filtered_data['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Players by Location')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return a bar chart showing the number of templates with a version number greater than 5 for each template type code , and rank in ascending by the names .",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nTemplates = pd.read_sql(\"SELECT * FROM Templates\", conn)\nTemplates.columns = Templates.columns.str.lower()\n\n# Filter the data\nfiltered_data = Templates[Templates['version_number'] > 5]\n\n# Group by template_type_code and count the occurrences\ngrouped_data = filtered_data.groupby('template_type_code').size().reset_index(name='count')\n\n# Sort the data by template_type_code\nsorted_data = grouped_data.sort_values('template_type_code')\n\n# Create the bar plot\nplt.bar(sorted_data['template_type_code'], sorted_data['count'])\nplt.xlabel('Template Type Code')\nplt.ylabel('Count')\nplt.title('Count of Templates by Template Type Code')\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "What are the names and ages of editors ? Show me a bar chart , and sort Y-axis in ascending order please .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\neditor.columns = editor.columns.str.lower()\n\n# Assuming the data is already loaded into a dataframe called 'editor'\n\n# Sort the dataframe by age in ascending order\nsorted_df = editor.sort_values(by='age')\n\n# Extract the name and age columns\nname = sorted_df['name']\nage = sorted_df['age']\n\n# Create a bar plot\nplt.bar(name, age)\n\n# Add labels and title\nplt.xlabel('Name')\nplt.ylabel('Age')\nplt.title('Age Distribution')\n\n# Rotate x-axis labels if needed\nplt.xticks(rotation=90)\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "What are the renowned titles for artists with volumes that endured over 2 weeks on top, and what is the cumulative number of weeks on top for each title? Show the results in a bar chart.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nvolume = pd.read_sql(\"SELECT * FROM volume\", conn)\nartist.columns = artist.columns.str.lower()\nvolume.columns = volume.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(artist, volume, on='artist_id')\n\n# Filter the data\nfiltered_df = merged_df[merged_df['weeks_on_top'] > 2]\n\n# Group by famous_title and calculate the sum of weeks_on_top\ngrouped_df = filtered_df.groupby('famous_title')['weeks_on_top'].sum().reset_index()\n\n# Sort the data by sum of weeks_on_top in descending order\nsorted_df = grouped_df.sort_values('weeks_on_top', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['famous_title'], sorted_df['weeks_on_top'])\nplt.xlabel('Famous Title')\nplt.ylabel('Sum of Weeks on Top')\nplt.title('Sum of Weeks on Top by Famous Title')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "riding_club",
    "question": "I want to know the proportion of the total number for each gender .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nplayer.columns = player.columns.str.lower()\n\n# Grouping the data by gender and counting the occurrences\ngender_count = player.groupby('gender').size()\n\n# Creating a pie chart\nplt.pie(gender_count, labels=gender_count.index, autopct='%1.1f%%')\nplt.title('Gender Distribution')\nplt.show()"
  },
  {
    "db_id": "car_1",
    "question": "Visualize a bar chart for what are the countries having at least one car maker? List name and id.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the COUNTRIES table\ncountries = pd.read_sql(\"SELECT * FROM COUNTRIES\", conn)\ncountries.columns = map(str.lower, countries.columns)\n\n# Read the CAR_MAKERS table\ncar_makers = pd.read_sql(\"SELECT * FROM CAR_MAKERS\", conn)\ncar_makers.columns = map(str.lower, car_makers.columns)\n\n# Merge the two tables on CountryId\nmerged_data = pd.merge(countries, car_makers, left_on='countryid', right_on='country')\n\n# Group by CountryName and count the number of car makers\ncar_makers_count = merged_data.groupby('countryname').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(car_makers_count['countryname'], car_makers_count['count'])\nplt.xlabel('Country Name')\nplt.ylabel('Number of Car Makers')\nplt.title('Number of Car Makers by Country')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "department_management",
    "question": "List the age of each head of departments in a bar chart ordered by age .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nhead = pd.read_sql(\"SELECT * FROM head\", conn)\nhead.columns = head.columns.str.lower()\n\n# Sorting the dataframe by age\nsorted_df = head.sort_values(by='age')\n\n# Creating the bar plot\nplt.bar(sorted_df['name'], sorted_df['age'])\n\n# Adding labels and title\nplt.xlabel('Name')\nplt.ylabel('Age')\nplt.title('Age Distribution')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "How many ratings are there for each number of stars, where the director of the movie is the same as the name of the reviewer, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nMovie = pd.read_sql(\"SELECT * FROM Movie\", conn)\nReviewer = pd.read_sql(\"SELECT * FROM Reviewer\", conn)\nRating.columns = Rating.columns.str.lower()\nMovie.columns = Movie.columns.str.lower()\nReviewer.columns = Reviewer.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(pd.merge(Rating, Movie, on='mid'), Reviewer, on='rid')\n\n# Filter rows where director is the same as reviewer's name\nfiltered_df = merged_df[merged_df['director'] == merged_df['name']]\n\n# Group by stars and count\ngrouped_df = filtered_df.groupby('stars').size().reset_index(name='count')\n\n# Plot pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['stars'], autopct='%1.1f%%')\nplt.title('Distribution of Ratings by Stars')\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "For each continent where the average life expectancy is shorter than 72, shows the proportion of their total population with a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the data from the country table\ncountry_data = pd.read_sql(\"SELECT * FROM country\", conn)\n\n# Convert column names to lowercase\ncountry_data.columns = country_data.columns.str.lower()\n\n# Calculate the sum of population by continent\npopulation_by_continent = country_data.groupby('continent')['population'].sum()\n\n# Filter continents with average life expectancy less than 72\nfiltered_population = population_by_continent[country_data.groupby('continent')['lifeexpectancy'].mean() < 72]\n\n# Plot the pie chart\nplt.pie(filtered_population, labels=filtered_population.index, autopct='%1.1f%%')\nplt.title('Population by Continent (Average Life Expectancy < 72)')\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "What are the number of the last names for all scholarship students?, rank in desc by the X-axis please.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Sportsinfo table\nsportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\n\n# Read the Student table\nstudent = pd.read_sql(\"SELECT * FROM Student\", conn)\n\n# Convert column names to lowercase\nsportsinfo.columns = sportsinfo.columns.str.lower()\nstudent.columns = student.columns.str.lower()\n\n# merge the sportsinfo and student tables on stuid\nmerged_data = pd.merge(sportsinfo, student, on=\"stuid\")\n\n# filter the merged data for students on scholarship\nfiltered_data = merged_data[merged_data[\"onscholarship\"] == \"Y\"]\n\n# group by lname and count the occurrences\ngrouped_data = filtered_data.groupby(\"lname\").size().reset_index(name=\"count\")\n\n# sort the grouped data by lname in descending order\nsorted_data = grouped_data.sort_values(\"lname\", ascending=False)\n\n# plot the bar chart\nplt.bar(sorted_data[\"lname\"], sorted_data[\"count\"])\nplt.xlabel(\"Last Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Students on Scholarship by Last Name\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "musical",
    "question": "Group and count the durations for each actor with a bar graph .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nactor = pd.read_sql(\"SELECT * FROM actor\", conn)\nactor.columns = actor.columns.str.lower()\n\n# Group by duration and count the occurrences\nduration_counts = actor.groupby('duration').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(duration_counts['duration'], duration_counts['count'])\nplt.xlabel('Duration')\nplt.ylabel('Count')\nplt.title('Distribution of Duration')\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards, and count them by a bar chart, display by the y-axis in descending.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the musical table\nmusical_df = pd.read_sql(\"SELECT * FROM musical\", conn)\n\n# Convert column names to lowercase\nmusical_df.columns = musical_df.columns.str.lower()\n\n# Filter the data based on the conditions\nfiltered_df = musical_df[(musical_df['award'] == \"Tony Award\") | (musical_df['award'] == \"Cleavant Derricks\")]\n\n# Group by nominee and count the occurrences\ngrouped_df = filtered_df.groupby('nominee').size().reset_index(name='count')\n\n# Sort the data by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['nominee'], sorted_df['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Nominee Count for Tony Award and Cleavant Derricks')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "A bar chart for how many competitions for each country , and display bars from high to low order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by country and count the occurrences\ncountry_counts = competition.groupby('country').size().reset_index(name='count')\n\n# Sort by country in descending order\ncountry_counts = country_counts.sort_values('country', ascending=False)\n\n# Plot the bar chart\nplt.bar(country_counts['country'], country_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Country')\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "What are the famous titles and ages of each artist, listed in descending order by age using a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the artist table\nartist_df = pd.read_sql(\"SELECT * FROM artist\", conn)\n\n# Convert column names to lowercase\nartist_df.columns = artist_df.columns.str.lower()\n\n# Sort the dataframe by age in descending order\nartist_df = artist_df.sort_values(by='age', ascending=False)\n\n# Select the columns for visualization\ndata = artist_df[['famous_title', 'age']]\n\n# Plot the bar chart\nplt.bar(data['famous_title'], data['age'])\nplt.xlabel('Famous Title')\nplt.ylabel('Age')\nplt.title('Age of Artists')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Show average of budget in different year and group by department creation time with a line chart , and I want to sort in desc by the Creation .",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = department.columns.str.lower()\n\n# Assuming 'department' is a DataFrame containing the table data\n\n# Grouping the data by 'creation' and calculating the average of 'budget_in_billions'\ngrouped_data = department.groupby('creation')['budget_in_billions'].mean()\n\n# Sorting the data by 'creation' in descending order\nsorted_data = grouped_data.sort_index(ascending=False)\n\n# Creating a line plot\nplt.plot(sorted_data.index, sorted_data.values)\n\n# Adding labels and title\nplt.xlabel('Creation')\nplt.ylabel('Average Budget (in billions)')\nplt.title('Average Budget by Creation')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "voter_2",
    "question": "What is the trend in the count of votes for male students who have class senator votes during the fall election cycle, represented by a line chart?",
    "chart": "Line",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nVOTING_RECORD = pd.read_sql(\"SELECT * FROM VOTING_RECORD\", conn)\nSTUDENT.columns = STUDENT.columns.str.lower()\nVOTING_RECORD.columns = VOTING_RECORD.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(STUDENT, VOTING_RECORD, left_on='stuid', right_on='class_senator_vote')\n\n# Filter the data based on the conditions\nfiltered_df = merged_df[(merged_df['sex'] == 'M') & (merged_df['election_cycle'].str.startswith('Fall'))]\n\n# Group the data and count the votes\ngrouped_df = filtered_df.groupby('election_cycle').size().reset_index(name='Votes')\n\n# Sort the data by election_cycle\nsorted_df = grouped_df.sort_values('election_cycle')\n\n# Plot the line chart\nplt.plot(sorted_df['election_cycle'], sorted_df['Votes'])\nplt.xlabel('Election Cycle')\nplt.ylabel('Votes')\nplt.title('Number of Votes by Election Cycle')\nplt.show()"
  },
  {
    "db_id": "insurance_fnol",
    "question": "What is the timeline, represented by a line chart, displaying the open and close dates of all policies associated with the customer whose name contains \"Diana\"?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\ncustomers_policies = pd.read_sql(\"SELECT * FROM customers_policies\", conn)\ncustomers.columns = customers.columns.str.lower()\ncustomers_policies.columns = customers_policies.columns.str.lower()\n\n# Merge the customers and customers_policies dataframes\nmerged_df = pd.merge(customers, customers_policies, on='customer_id')\n\n# Filter the merged dataframe for customer_name containing 'diana'\nfiltered_df = merged_df[merged_df['customer_name'].str.contains('diana', case=False)]\n\n# Convert the date_opened and date_closed columns to datetime\nfiltered_df['date_opened'] = pd.to_datetime(filtered_df['date_opened'])\nfiltered_df['date_closed'] = pd.to_datetime(filtered_df['date_closed'])\n\n# Sort the dataframe by date_opened\nsorted_df = filtered_df.sort_values('date_opened')\n\n# Plot the line chart\nplt.plot(sorted_df['date_opened'], sorted_df['date_closed'])\nplt.xlabel('Date Opened')\nplt.ylabel('Date Closed')\nplt.title('Customer Policies - Date Opened vs Date Closed')\nplt.show()"
  },
  {
    "db_id": "coffee_shop",
    "question": "Find the address and staff number of the shops that do not have any happy hour. Visualize by bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the shop table\nshop_df = pd.read_sql(\"SELECT * FROM shop\", conn)\n\n# Read the happy_hour table\nhappy_hour_df = pd.read_sql(\"SELECT * FROM happy_hour\", conn)\n\n# Convert column names to lowercase\nshop_df.columns = shop_df.columns.str.lower()\nhappy_hour_df.columns = happy_hour_df.columns.str.lower()\n\n# filter the shop table to exclude shops with happy hour\nfiltered_shop_df = shop_df[~shop_df['shop_id'].isin(happy_hour_df['shop_id'])]\n\n# plot the bar chart\nplt.bar(filtered_shop_df['address'], filtered_shop_df['num_of_staff'])\nplt.xlabel('Address')\nplt.ylabel('Number of Staff')\nplt.title('Number of Staff per Shop (Excluding Happy Hour Shops)')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "insurance_fnol",
    "question": "Who is the customer with the highest number of policies listed, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\ncustomers_policies = pd.read_sql(\"SELECT * FROM customers_policies\", conn)\ncustomers.columns = customers.columns.str.lower()\ncustomers_policies.columns = customers_policies.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(customers, customers_policies, on='customer_id')\n\n# Group by customer_name and count the number of policies for each customer\ngrouped_df = merged_df.groupby('customer_name').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['customer_name'], sorted_df['count'])\nplt.xlabel('Customer Name')\nplt.ylabel('Count')\nplt.title('Number of Policies per Customer')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "Can you create a bar chart displaying the project_id and count of outcomes for each project in the Projects table, sorted in descending order by the count of outcomes?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nProjects = pd.read_sql(\"SELECT * FROM Projects\", conn)\nProject_outcomes = pd.read_sql(\"SELECT * FROM Project_outcomes\", conn)\nProjects.columns = Projects.columns.str.lower()\nProject_outcomes.columns = Project_outcomes.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Projects, Project_outcomes, on='project_id')\n\n# Group by project_id and count the number of occurrences\ngrouped_df = merged_df.groupby('project_id').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['project_id'], sorted_df['count'])\nplt.xlabel('Project ID')\nplt.ylabel('Count')\nplt.title('Number of Occurrences per Project ID')\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "How many entrepreneurs correspond to each investor , could you display Y in asc order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\n\n# Grouping the data by 'investor' and counting the occurrences\ngrouped_data = entrepreneur.groupby('investor').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nsorted_data = grouped_data.sort_values('count')\n\n# Creating the bar plot\nplt.bar(sorted_data['investor'], sorted_data['count'])\nplt.xlabel('Investor')\nplt.ylabel('Count')\nplt.title('Number of Entrepreneurs by Investor')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "voter_2",
    "question": "Show me a bar chart displaying the count of first names for students who are 18 years old and have vice president votes.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nStudent = pd.read_sql(\"SELECT * FROM Student\", conn)\nVoting_Record = pd.read_sql(\"SELECT * FROM Voting_Record\", conn)\nStudent.columns = Student.columns.str.lower()\nVoting_Record.columns = Voting_Record.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Student, Voting_Record, left_on='stuid', right_on='vice_president_vote')\n\n# Filter the data for age = 18\nfiltered_df = merged_df[merged_df['age'] == 18]\n\n# Group by fname and count the occurrences\ngrouped_df = filtered_df.groupby('fname').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['fname'], grouped_df['count'])\nplt.xlabel('First Name')\nplt.ylabel('Count')\nplt.title('Number of Students with Age 18 by First Name')\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "A bar chart for what are the number of the purchase details of transactions with amount bigger than 10000?, and I want to show by the X from high to low please.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the PURCHASES and TRANSACTIONS tables\npurchases = pd.read_sql(\"SELECT * FROM PURCHASES\", conn)\ntransactions = pd.read_sql(\"SELECT * FROM TRANSACTIONS\", conn)\n\n# Convert column names to lowercase\npurchases.columns = purchases.columns.str.lower()\ntransactions.columns = transactions.columns.str.lower()\n\n# Merge the PURCHASES and TRANSACTIONS tables on the common column\nmerged_data = pd.merge(purchases, transactions, left_on=\"purchase_transaction_id\", right_on=\"transaction_id\")\n\n# Filter the merged data based on the condition\nfiltered_data = merged_data[merged_data[\"amount_of_transaction\"] > 10000]\n\n# Group the filtered data by purchase_details and count the occurrences\ngrouped_data = filtered_data.groupby(\"purchase_details\").size().reset_index(name=\"count\")\n\n# Sort the grouped data by purchase_details in descending order\nsorted_data = grouped_data.sort_values(\"purchase_details\", ascending=False)\n\n# Generate the bar plot\nplt.bar(sorted_data[\"purchase_details\"], sorted_data[\"count\"])\nplt.xlabel(\"Purchase Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Bar Plot of Purchase Details\")\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Draw a bar chart for what is the average number of stars that each reviewer awards for a movie?, could you display in ascending by the X-axis?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Reviewer table\nreviewer_df = pd.read_sql(\"SELECT * FROM Reviewer\", conn)\nreviewer_df.columns = map(str.lower, reviewer_df.columns)\n\n# Merge the Rating and Reviewer tables on rID\nmerged_df = pd.merge(rating_df, reviewer_df, on=\"rid\")\n\n# Calculate the average stars for each reviewer\navg_stars_df = merged_df.groupby(\"name\")[\"stars\"].mean().reset_index()\navg_stars_df.columns = [\"name\", \"avg_stars\"]\n\n# Sort the dataframe by name in ascending order\navg_stars_df = avg_stars_df.sort_values(\"name\")\n\n# Plot the bar chart\nplt.bar(avg_stars_df[\"name\"], avg_stars_df[\"avg_stars\"])\nplt.xlabel(\"Reviewer Name\")\nplt.ylabel(\"Average Stars\")\nplt.title(\"Average Stars by Reviewer\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "voter_2",
    "question": "Can you create a pie chart to display the distribution of class president votes among the different last names of the students?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nVOTING_RECORD = pd.read_sql(\"SELECT * FROM VOTING_RECORD\", conn)\nSTUDENT.columns = STUDENT.columns.str.lower()\nVOTING_RECORD.columns = VOTING_RECORD.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(STUDENT, VOTING_RECORD, left_on='stuid', right_on='class_president_vote')\n\n# Group by lname and count the number of occurrences\ngrouped_df = merged_df.groupby('lname').size().reset_index(name='proportion')\n\n# Plot the pie chart\nplt.pie(grouped_df['proportion'], labels=grouped_df['lname'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "For each position , what is the average number of points for players in that position Plot them as bar chart , could you show y axis from low to high order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nplayer.columns = player.columns.str.lower()\n\n# Group by position and calculate average points\navg_points = player.groupby('position')['points'].mean()\n\n# Sort the average points in ascending order\navg_points_sorted = avg_points.sort_values()\n\n# Create a bar plot\nplt.bar(avg_points_sorted.index, avg_points_sorted.values)\n\n# Set the labels and title\nplt.xlabel('Position')\nplt.ylabel('Average Points')\nplt.title('Average Points by Position')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "What is the total number of stars for each year where a movie received a rating of 4 or higher, and can you display the results in a bar chart sorted by year?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nMovie = pd.read_sql(\"SELECT * FROM Movie\", conn)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nMovie.columns = Movie.columns.str.lower()\nRating.columns = Rating.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Movie, Rating, on='mid')\n\n# Filter the data based on the condition\nfiltered_df = merged_df[merged_df['stars'] >= 4]\n\n# Group the data by year and calculate the sum of stars\ngrouped_df = filtered_df.groupby('year')['stars'].sum().reset_index()\n\n# Sort the data by year\nsorted_df = grouped_df.sort_values('year')\n\n# Create the bar plot\nplt.bar(sorted_df['year'], sorted_df['stars'])\nplt.xlabel('Year')\nplt.ylabel('Sum of Stars')\nplt.title('Sum of Stars by Year')\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Show me a bar chart comparing the total number of captains in each rank, and rank total number in descending order please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the captain table\ncaptain_df = pd.read_sql(\"SELECT * FROM captain\", conn)\n\n# Convert column names to lowercase\ncaptain_df.columns = captain_df.columns.str.lower()\n\n# Perform the SQL query\nresult = captain_df.groupby('rank').size().reset_index(name='count').sort_values('count', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['rank'], result['count'])\nplt.xlabel('Rank')\nplt.ylabel('Count')\nplt.title('Count of Ranks')\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "how many entrepreneurs correspond to each investor?, and sort Y in asc order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the entrepreneur table\nentrepreneur_df = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\n\n# Convert column names to lowercase\nentrepreneur_df.columns = entrepreneur_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = entrepreneur_df.groupby('investor').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result_df['investor'], result_df['count'])\nplt.xlabel('Investor')\nplt.ylabel('Count')\nplt.title('Number of Entrepreneurs per Investor')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "What is the company of the entrepreneur with the highest height?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Perform the join operation\nresult = pd.merge(entrepreneur, people, on='people_id')\n\n# Sort the result by height in descending order\nresult = result.sort_values('height', ascending=False)\n\n# Plot the line chart\nplt.plot(result['company'], result['height'])\nplt.xlabel('Company')\nplt.ylabel('Height')\nplt.title('Height of Entrepreneurs')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "riding_club",
    "question": "Draw a bar chart of gender versus the number of gender , I want to list X from low to high order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nplayer.columns = player.columns.str.lower()\n\n# Grouping the data by gender and counting the occurrences\ngender_counts = player.groupby('gender').size()\n\n# Sorting the data by gender in ascending order\ngender_counts = gender_counts.sort_index()\n\n# Creating a bar plot\nplt.bar(gender_counts.index, gender_counts.values)\n\n# Adding labels and title\nplt.xlabel('Gender')\nplt.ylabel('Count')\nplt.title('Gender Distribution')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "csu_1",
    "question": "How many faculty lines are there in each university, represented by a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncampuses = pd.read_sql(\"SELECT * FROM campuses\", conn)\nfaculty = pd.read_sql(\"SELECT * FROM faculty\", conn)\ncampuses.columns = campuses.columns.str.lower()\nfaculty.columns = faculty.columns.str.lower()\n\n# Perform the join operation\nmerged_data = pd.merge(campuses, faculty, left_on='id', right_on='campus')\n\n# Group by university and count faculty lines\nfaculty_lines = merged_data.groupby('id').size().reset_index(name='faculty_lines')\n\n# Plot the bar chart\nplt.bar(faculty_lines['id'], faculty_lines['faculty_lines'])\nplt.xlabel('University')\nplt.ylabel('Faculty Lines')\nplt.title('Number of Faculty Lines per University')\nplt.show()"
  },
  {
    "db_id": "company_employee",
    "question": "What is the number of companies for each headquarter ? Visualize by bar chart , show from low to high by the bar .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompany = pd.read_sql(\"SELECT * FROM company\", conn)\ncompany.columns = company.columns.str.lower()\n\n# Group by headquarters and count the number of companies\nheadquarters_count = company.groupby('headquarters').size().reset_index(name='count')\n\n# Sort the data by headquarters in ascending order\nheadquarters_count = headquarters_count.sort_values('headquarters')\n\n# Create a bar plot\nplt.bar(headquarters_count['headquarters'], headquarters_count['count'])\nplt.xlabel('Headquarters')\nplt.ylabel('Count')\nplt.title('Number of Companies by Headquarters')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "For all organizations that have grants of more than 6000 dollars, compare the number of details of the organizations with a bar chart, and I want to list by the bar in desc.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Grants table\ngrants = pd.read_sql(\"SELECT * FROM Grants\", conn)\n\n# Read the Organisations table\norganisations = pd.read_sql(\"SELECT * FROM Organisations\", conn)\n\n# Convert column names to lowercase\ngrants.columns = grants.columns.str.lower()\norganisations.columns = organisations.columns.str.lower()\n\n# merge the grants and organisations tables on organisation_id\nmerged_data = pd.merge(grants, organisations, on=\"organisation_id\")\n\n# group by organisation_details and count the occurrences\ngrouped_data = merged_data.groupby(\"organisation_details\").size().reset_index(name=\"count\")\n\n# sort the data by organisation_details in descending order\nsorted_data = grouped_data.sort_values(\"organisation_details\", ascending=False)\n\n# plot the bar chart\nplt.bar(sorted_data[\"organisation_details\"], sorted_data[\"count\"])\nplt.xlabel(\"Organisation Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Grants by Organisation Details\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "sports_competition",
    "question": "Show me the number of country by country in a bar , and rank by the y axis in ascending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by country and count the occurrences\ncountry_counts = competition.groupby('country').size().reset_index(name='count')\n\n# Sort the counts in ascending order\ncountry_counts = country_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(country_counts['country'], country_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "Return the lot details , group the lot details , and compute the number of each lot details , list X-axis from low to high order please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nLOTS = pd.read_sql(\"SELECT * FROM LOTS\", conn)\nLOTS.columns = LOTS.columns.str.lower()\n\n# Grouping the data by 'lot_details' and counting the occurrences\ngrouped_data = LOTS.groupby('lot_details').size().reset_index(name='count')\n\n# Sorting the data by 'lot_details' in ascending order\nsorted_data = grouped_data.sort_values('lot_details')\n\n# Creating the bar plot\nplt.bar(sorted_data['lot_details'], sorted_data['count'])\nplt.xlabel('Lot Details')\nplt.ylabel('Count')\nplt.title('Count of Lot Details')\nplt.show()"
  },
  {
    "db_id": "voter_2",
    "question": "What is the scatter plot of the count of students of each age who have vice president votes and reside in a city whose city code is not PIT?",
    "chart": "Scatter",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nVOTING_RECORD = pd.read_sql(\"SELECT * FROM VOTING_RECORD\", conn)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nSTUDENT.columns = STUDENT.columns.str.lower()\nVOTING_RECORD.columns = VOTING_RECORD.columns.str.lower()\nSTUDENT.columns = STUDENT.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(STUDENT, VOTING_RECORD, left_on='stuid', right_on='stuid')\n\n# Excluding the rows where city_code is 'pit'\nfiltered_df = merged_df[merged_df['city_code'] != 'pit']\n\n# Grouping by age and counting the number of rows\ngrouped_df = filtered_df.groupby('age').size().reset_index(name='count')\n\n# Creating scatter plot\nplt.scatter(grouped_df['age'], grouped_df['count'])\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.title('Scatter plot of Age vs Count')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": " Ignore movies whose director is NULL. For each director, what are the titles and ratings for all the movies they reviewed? Show the result by a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\nmovie_df.columns = map(str.lower, movie_df.columns)\n\n# Merge the Rating and Movie tables on mID column\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Filter the merged dataframe to exclude rows with director as \"null\"\nfiltered_df = merged_df[merged_df[\"director\"] != \"null\"]\n\n# Select the required columns for visualization\nselected_df = filtered_df[[\"title\", \"stars\"]]\n\n# Group the data by title and calculate the average stars\ngrouped_df = selected_df.groupby(\"title\").mean().reset_index()\n\n# Sort the data by average stars in descending order\nsorted_df = grouped_df.sort_values(by=\"stars\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df[\"title\"], sorted_df[\"stars\"])\nplt.xticks(rotation=90)\nplt.xlabel(\"Movie Title\")\nplt.ylabel(\"Average Stars\")\nplt.title(\"Average Stars for Movies with Non-null Directors\")\nplt.show()"
  },
  {
    "db_id": "voter_2",
    "question": "Scatter plot to show advisor on x axis and the total number on y axis .",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nSTUDENT.columns = STUDENT.columns.str.lower()\n\n# Assuming the table data is stored in a DataFrame called STUDENT\n\n# Grouping the data by advisor and counting the number of students for each advisor\nadvisor_counts = STUDENT.groupby('advisor').size().reset_index(name='count')\n\n# Creating a scatter plot\nplt.scatter(advisor_counts['advisor'], advisor_counts['count'])\n\n# Adding labels and title\nplt.xlabel('Advisor')\nplt.ylabel('Count')\nplt.title('Number of Students per Advisor')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "Return the names and surface areas of the 5 largest countries by a bar chart .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry.columns = country.columns.str.lower()\n\n# Sort the dataframe by surfacearea in descending order and select the top 5 rows\ntop_countries = country.sort_values(by='surfacearea', ascending=False).head(5)\n\n# Create a bar plot\nplt.bar(top_countries['name'], top_countries['surfacearea'])\n\n# Set the x-axis label\nplt.xlabel('Country')\n\n# Set the y-axis label\nplt.ylabel('Surface Area')\n\n# Set the title of the plot\nplt.title('Top 5 Countries by Surface Area')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Show me a bar chart of the average rating star for each reviewer, ranked by the highest average rating.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nReviewer = pd.read_sql(\"SELECT * FROM Reviewer\", conn)\nRating.columns = Rating.columns.str.lower()\nReviewer.columns = Reviewer.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Rating, Reviewer, on='rid')\n\n# Calculate the average stars for each reviewer\navg_stars = merged_df.groupby('name')['stars'].mean().reset_index()\n\n# Sort the dataframe by average stars in descending order\nsorted_avg_stars = avg_stars.sort_values('stars', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_avg_stars['name'], sorted_avg_stars['stars'])\nplt.xlabel('Reviewer')\nplt.ylabel('Average Stars')\nplt.title('Average Stars by Reviewer')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "A bar chart about what is the average rating star for each reviewer?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating and Reviewer tables\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nreviewer_df = pd.read_sql(\"SELECT * FROM Reviewer\", conn)\n\n# Convert column names to lowercase\nrating_df.columns = rating_df.columns.str.lower()\nreviewer_df.columns = reviewer_df.columns.str.lower()\n\n# Merge the Rating and Reviewer tables on rID\nmerged_df = pd.merge(rating_df, reviewer_df, on=\"rid\")\n\n# Calculate the average stars for each reviewer\navg_stars_by_reviewer = merged_df.groupby(\"name\")[\"stars\"].mean()\n\n# Create a bar plot\nplt.bar(avg_stars_by_reviewer.index, avg_stars_by_reviewer.values)\nplt.xlabel(\"Reviewer Name\")\nplt.ylabel(\"Average Stars\")\nplt.title(\"Average Stars by Reviewer\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Compare the prices of furnitures which some companies are manufacturing by each name using a bar chart, and order by the y-axis in asc.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the furniture table\nfurniture = pd.read_sql(\"SELECT * FROM furniture\", conn)\nfurniture.columns = map(str.lower, furniture.columns)\n\n# Read the furniture_manufacte table\nfurniture_manufacte = pd.read_sql(\"SELECT * FROM furniture_manufacte\", conn)\nfurniture_manufacte.columns = map(str.lower, furniture_manufacte.columns)\n\n# Merge the two tables on Furniture_ID\nmerged_data = pd.merge(furniture, furniture_manufacte, on=\"furniture_id\")\n\n# Sort the merged data by Price_in_Dollar in ascending order\nsorted_data = merged_data.sort_values(\"price_in_dollar\")\n\n# Plot the bar chart\nplt.bar(sorted_data[\"name\"], sorted_data[\"price_in_dollar\"])\nplt.xlabel(\"Furniture Name\")\nplt.ylabel(\"Price in Dollar\")\nplt.title(\"Furniture Prices\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "Bar graph to show the number of investor from different investor , rank by the bars from low to high .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\n\n# Grouping and counting the investors\ninvestor_counts = entrepreneur.groupby('investor').size().reset_index(name='count')\n\n# Sorting the data by investor name\ninvestor_counts = investor_counts.sort_values('investor')\n\n# Creating the bar plot\nplt.bar(investor_counts['investor'], investor_counts['count'])\nplt.xlabel('Investor')\nplt.ylabel('Count')\nplt.title('Number of Entrepreneurs by Investor')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "How many hosts does each nationality have? List the nationality and the count with a bar chart, and sort X-axis from high to low order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the HOST table\nhost_df = pd.read_sql(\"SELECT * FROM HOST\", conn)\n\n# Convert column names to lowercase\nhost_df.columns = host_df.columns.str.lower()\n\n# Perform the query\nresult_df = host_df.groupby('nationality').size().reset_index(name='count')\nresult_df = result_df.sort_values('nationality', ascending=False)\n\n# Generate the bar plot\nplt.bar(result_df['nationality'], result_df['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Hosts by Nationality')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Please tell me the average star ratings of each movie title using a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\nmovie_df.columns = map(str.lower, movie_df.columns)\n\n# Merge the Rating and Movie tables on mID column\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Calculate the average stars for each movie title\navg_stars_df = merged_df.groupby(\"title\")[\"stars\"].mean().reset_index()\n\n# Plot the bar chart\nplt.bar(avg_stars_df[\"title\"], avg_stars_df[\"stars\"])\nplt.xlabel(\"Movie Title\")\nplt.ylabel(\"Average Stars\")\nplt.title(\"Average Stars for Each Movie\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "Give me a bar for what are the statuses and average populations of each city?, list by the names in desc please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the city table\ncity_df = pd.read_sql(\"SELECT * FROM city\", conn)\n\n# Convert column names to lowercase\ncity_df.columns = city_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = city_df.groupby(\"status\").agg({\"population\": \"mean\"}).reset_index().sort_values(\"status\", ascending=False)\n\n# Generate the bar plot\nplt.bar(result_df[\"status\"], result_df[\"population\"])\nplt.xlabel(\"Status\")\nplt.ylabel(\"Average Population\")\nplt.title(\"Average Population by Status\")\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "List the types of competition and the number of competitions of each type . Visualize by bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the number of occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Create a bar plot\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Type')\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Can you draw the trend of sum budget in billions over the creation ? , could you display by the x-axis in descending please ?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = department.columns.str.lower()\n\n# Assuming 'department' is a DataFrame containing the table data\n\n# Grouping the data by 'creation' and calculating the sum of 'budget_in_billions'\ngrouped_data = department.groupby('creation')['budget_in_billions'].sum()\n\n# Sorting the data by 'creation' in descending order\nsorted_data = grouped_data.sort_index(ascending=False)\n\n# Creating a line plot\nplt.plot(sorted_data.index, sorted_data.values)\n\n# Adding labels and title\nplt.xlabel('Creation')\nplt.ylabel('Sum of Budget (in billions)')\nplt.title('Sum of Budget by Creation')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor , and could you display Y in asc order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\n\n# Grouping the data by 'investor' and counting the occurrences\ngrouped_data = entrepreneur.groupby('investor').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nsorted_data = grouped_data.sort_values('count')\n\n# Creating the bar plot\nplt.bar(sorted_data['investor'], sorted_data['count'])\nplt.xlabel('Investor')\nplt.ylabel('Count')\nplt.title('Number of Entrepreneurs by Investor')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "What are the statuses and average populations of each city Plot them as bar chart, and list by the y-axis in asc.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the city table\ncity_df = pd.read_sql(\"SELECT * FROM city\", conn)\n\n# Convert column names to lowercase\ncity_df.columns = city_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = city_df.groupby('status')['population'].mean().reset_index().sort_values('population')\n\n# Generate the bar plot\nplt.bar(result_df['status'], result_df['population'])\nplt.xlabel('Status')\nplt.ylabel('Average Population')\nplt.title('Average Population by Status')\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Draw a pie chart for what are the different ship flags , and how many ships have each ?",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Group by 'flag' and count the number of occurrences\nship_grouped = ship.groupby('flag').size().reset_index(name='count')\n\n# Plotting a pie chart\nplt.pie(ship_grouped['count'], labels=ship_grouped['flag'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "Show the number of the names of editors that are on the committee of journals with sales bigger than 3000.",
    "chart": "Pie",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the tables\njournal_committee = pd.read_sql(\"SELECT * FROM journal_committee\", conn)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\njournal = pd.read_sql(\"SELECT * FROM journal\", conn)\n\n# Convert column names to lowercase\njournal_committee.columns = journal_committee.columns.str.lower()\neditor.columns = editor.columns.str.lower()\njournal.columns = journal.columns.str.lower()\n\n# Merge the tables\nmerged_data = pd.merge(journal_committee, editor, on=\"editor_id\")\nmerged_data = pd.merge(merged_data, journal, on=\"journal_id\")\n\n# Filter the data\nfiltered_data = merged_data[merged_data[\"sales\"] > 3000]\n\n# Group by name and count\ngrouped_data = filtered_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# Plot the pie chart\nplt.pie(grouped_data[\"count\"], labels=grouped_data[\"name\"], autopct=\"%1.1f%%\")\nplt.axis(\"equal\")\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "A bar chart for what are the number of the titles of all movies that have between 3 and 5 stars?, and list X-axis in asc order please.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating and Movie tables\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\n\n# Convert column names to lowercase\nrating_df.columns = rating_df.columns.str.lower()\nmovie_df.columns = movie_df.columns.str.lower()\n\n# Merge the Rating and Movie tables on mID\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Filter the merged dataframe for stars between 3 and 5\nfiltered_df = merged_df[(merged_df[\"stars\"] >= 3) & (merged_df[\"stars\"] <= 5)]\n\n# Group by title and count the occurrences\ngrouped_df = filtered_df.groupby(\"title\").size().reset_index(name=\"count\")\n\n# Sort the dataframe by title in ascending order\nsorted_df = grouped_df.sort_values(\"title\", ascending=True)\n\n# Generate the bar plot\nplt.bar(sorted_df[\"title\"], sorted_df[\"count\"])\nplt.xlabel(\"Movie Title\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Ratings for Movies with Stars between 3 and 5\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Visualize the title and and the average star rating of the movie using a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\nmovie_df.columns = map(str.lower, movie_df.columns)\n\n# Merge the Rating and Movie tables on mID column\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Calculate the average stars for each movie title\navg_stars_df = merged_df.groupby(\"title\")[\"stars\"].mean().reset_index()\n\n# Plot the bar chart\nplt.bar(avg_stars_df[\"title\"], avg_stars_df[\"stars\"])\nplt.xlabel(\"Movie Title\")\nplt.ylabel(\"Average Stars\")\nplt.title(\"Average Stars for Each Movie\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "company_employee",
    "question": "Bar chart x axis industry y axis the number of industry , display by the the number of industry from low to high please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompany = pd.read_sql(\"SELECT * FROM company\", conn)\ncompany.columns = company.columns.str.lower()\n\n# Group by industry and count the number of companies in each industry\nindustry_counts = company.groupby('industry').size().reset_index(name='count')\n\n# Sort the counts in ascending order\nindustry_counts = industry_counts.sort_values('count')\n\n# Plot the bar chart\nplt.bar(industry_counts['industry'], industry_counts['count'])\nplt.xlabel('Industry')\nplt.ylabel('Count')\nplt.title('Number of Companies by Industry')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "Give me a bar for what are the statuses and average populations of each city ?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncity.columns = city.columns.str.lower()\n\n# Group by status and calculate average population\ngrouped_city = city.groupby('status')['population'].mean()\n\n# Convert the grouped data to a dataframe\ndf = pd.DataFrame(grouped_city).reset_index()\n\n# Plot the bar chart\nplt.bar(df['status'], df['population'])\nplt.xlabel('Status')\nplt.ylabel('Average Population')\nplt.title('Average Population by Status')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Plot the total number by grouped by competition type as a bar graph , and sort by the y axis from high to low .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the number of occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort the counts in descending order\ncompetition_counts = competition_counts.sort_values(by='count', ascending=False)\n\n# Create a bar plot\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Type')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "school_player",
    "question": "Which school has the highest number of players, and can you represent this information using a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nschool = pd.read_sql(\"SELECT * FROM school\", conn)\nplayer.columns = player.columns.str.lower()\nschool.columns = school.columns.str.lower()\n\n# Joining player and school tables\nmerged_df = pd.merge(player, school, on='school_id')\n\n# Grouping by location and counting the number of players\ngrouped_df = merged_df.groupby('location').size().reset_index(name='count')\n\n# Filtering locations with count greater than 1\nfiltered_df = grouped_df[grouped_df['count'] > 1]\n\n# Sorting by count in descending order\nsorted_df = filtered_df.sort_values('count', ascending=False)\n\n# Plotting the bar chart\nplt.bar(sorted_df['location'], sorted_df['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Players by Location')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "company_employee",
    "question": "Show the different headquarters and number of companies at each headquarter , and could you list in ascending by the X please ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompany = pd.read_sql(\"SELECT * FROM company\", conn)\ncompany.columns = company.columns.str.lower()\n\n# Group by headquarters and count the number of companies\nheadquarters_count = company.groupby('headquarters').size().reset_index(name='count')\n\n# Sort the data by headquarters in ascending order\nheadquarters_count = headquarters_count.sort_values('headquarters')\n\n# Create a bar plot\nplt.bar(headquarters_count['headquarters'], headquarters_count['count'])\nplt.xlabel('Headquarters')\nplt.ylabel('Count')\nplt.title('Number of Companies by Headquarters')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "company_employee",
    "question": "Return a bar chart about the number of companies for each industry , and order in asc by the Y please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompany = pd.read_sql(\"SELECT * FROM company\", conn)\ncompany.columns = company.columns.str.lower()\n\n# Group by industry and count the number of companies in each industry\nindustry_counts = company.groupby('industry').size().reset_index(name='count')\n\n# Sort the counts in ascending order\nindustry_counts = industry_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(industry_counts['industry'], industry_counts['count'])\nplt.xlabel('Industry')\nplt.ylabel('Count')\nplt.title('Number of Companies by Industry')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "county_public_safety",
    "question": "Return a bar chart on how many counties correspond to each police force ? , could you show in asc by the x-axis ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncounty_public_safety = pd.read_sql(\"SELECT * FROM county_public_safety\", conn)\ncounty_public_safety.columns = county_public_safety.columns.str.lower()\n\n# Group by police_force and count the occurrences\ndf = county_public_safety.groupby('police_force').size().reset_index(name='count')\n\n# Sort by police_force in ascending order\ndf = df.sort_values('police_force')\n\n# Create a bar plot\nplt.bar(df['police_force'], df['count'])\nplt.xlabel('Police Force')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Police Force')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "company_employee",
    "question": "Show the different headquarters and number of companies at each headquarter , order y axis in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompany = pd.read_sql(\"SELECT * FROM company\", conn)\ncompany.columns = company.columns.str.lower()\n\n# Group by headquarters and count the number of companies\nheadquarters_count = company.groupby('headquarters').size().reset_index(name='count')\n\n# Sort the dataframe by count in ascending order\nheadquarters_count = headquarters_count.sort_values('count')\n\n# Create a bar plot\nplt.bar(headquarters_count['headquarters'], headquarters_count['count'])\nplt.xlabel('Headquarters')\nplt.ylabel('Count')\nplt.title('Number of Companies by Headquarters')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Show names of musicals and the number of actors who have appeared in the musicals by a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the actor table\nactor = pd.read_sql(\"SELECT * FROM actor\", conn)\n\n# Read the musical table\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\n\n# Convert column names to lowercase\nactor.columns = actor.columns.str.lower()\nmusical.columns = musical.columns.str.lower()\n\n# merge the actor and musical tables on musical_id\nmerged = pd.merge(actor, musical, on='musical_id')\n\n# group by musical_id and count the number of occurrences\ngrouped = merged.groupby('musical_id').size()\n\n# plot the pie chart\nplt.pie(grouped, labels=grouped.index, autopct='%1.1f%%')\nplt.title('Number of Actors in Each Musical')\nplt.show()\n"
  },
  {
    "db_id": "entrepreneur",
    "question": "Display a bar chart for what are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the entrepreneur table\nentrepreneur_df = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\n\n# Convert column names to lowercase\nentrepreneur_df.columns = entrepreneur_df.columns.str.lower()\n\n# Perform the SQL query\nresult = entrepreneur_df.groupby('investor').size().reset_index(name='count')\n\n# Generate the bar chart\nplt.bar(result['investor'], result['count'])\nplt.xlabel('Investor')\nplt.ylabel('Count')\nplt.title('Number of Entrepreneurs per Investor')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "What are the types of competition and number of competitions for that type Show bar chart , and rank Y in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the number of occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort the counts in ascending order\ncompetition_counts = competition_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Type')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "For each continent where the average life expectancy is shorter than 72, show their total population with a bar chart, rank in desc by the Continent.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the country table\ncountry_df = pd.read_sql(\"SELECT * FROM country\", conn)\n\n# Convert column names to lowercase\ncountry_df.columns = country_df.columns.str.lower()\n\n# Calculate the sum of population by continent\npopulation_df = country_df.groupby(\"continent\")[\"population\"].sum().reset_index()\n\n# Filter continents with average life expectancy less than 72\ncontinent_df = country_df.groupby(\"continent\")[\"lifeexpectancy\"].mean().reset_index()\ncontinent_df = continent_df[continent_df[\"lifeexpectancy\"] < 72]\n\n# Merge population and continent dataframes\nmerged_df = pd.merge(population_df, continent_df, on=\"continent\")\n\n# Sort by continent in descending order\nmerged_df = merged_df.sort_values(\"continent\", ascending=False)\n\n# Plot the bar chart\nplt.bar(merged_df[\"continent\"], merged_df[\"population\"])\nplt.xlabel(\"Continent\")\nplt.ylabel(\"Population\")\nplt.title(\"Population by Continent\")\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "Give me a bar for what are the statuses and average populations of each city ? , could you sort Y from high to low order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncity.columns = city.columns.str.lower()\n\n# Group by status and calculate average population\ngrouped_city = city.groupby('status')['population'].mean()\n\n# Sort by average population in descending order\nsorted_city = grouped_city.sort_values(ascending=False)\n\n# Create bar plot\nplt.bar(sorted_city.index, sorted_city.values)\n\n# Set labels and title\nplt.xlabel('Status')\nplt.ylabel('Average Population')\nplt.title('Average Population by Status')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "local_govt_mdm",
    "question": "what are the details of the cmi masters that have the cross reference code 'Tax', and count them by a bar chart",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read data from Customer_Master_Index table\ncustomer_master_index = pd.read_sql(\"SELECT * FROM Customer_Master_Index\", conn)\n\n# Read data from CMI_Cross_References table\ncmi_cross_references = pd.read_sql(\"SELECT * FROM CMI_Cross_References\", conn)\n\n# Convert column names to lowercase\ncustomer_master_index.columns = customer_master_index.columns.str.lower()\ncmi_cross_references.columns = cmi_cross_references.columns.str.lower()\n\n# merge the two tables on master_customer_id\nmerged_data = pd.merge(customer_master_index, cmi_cross_references, on='master_customer_id')\n\n# filter the merged data for source_system_code = 'tax'\nfiltered_data = merged_data[merged_data['source_system_code'] == 'tax']\n\n# group by cmi_details and count the occurrences\ngrouped_data = filtered_data.groupby('cmi_details').size().reset_index(name='count')\n\n# plot the bar chart\nplt.bar(grouped_data['cmi_details'], grouped_data['count'])\nplt.xlabel('CMI Details')\nplt.ylabel('Count')\nplt.title('Bar Chart of CMI Details')\nplt.show()\n"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "Bar chart x axis lot details y axis the number of lot details, could you show x-axis in descending order?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the LOTS table\nlots = pd.read_sql(\"SELECT * FROM LOTS\", conn)\n\n# Convert column names to lowercase\nlots.columns = lots.columns.str.lower()\n\n# Perform the query\nresult = lots.groupby('lot_details').size().reset_index(name='count').sort_values('lot_details', ascending=False)\n\n# Generate the bar plot\nplt.bar(result['lot_details'], result['count'])\nplt.xlabel('Lot Details')\nplt.ylabel('Count')\nplt.title('Bar Plot of Lot Details')\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Bar chart x axis location y axis how many location , and rank by the bars in asc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\nperformance.columns = performance.columns.str.lower()\n\n# Group by location and count the occurrences\nlocation_counts = performance.groupby('location').size().reset_index(name='count')\n\n# Sort by location in ascending order\nlocation_counts = location_counts.sort_values('location')\n\n# Create bar plot\nplt.bar(location_counts['location'], location_counts['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Location Counts')\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "Show different nationalities along with the number of hosts of each nationality Visualize by bar chart , and sort the total number from low to high order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nHOST = pd.read_sql(\"SELECT * FROM HOST\", conn)\nHOST.columns = HOST.columns.str.lower()\n\n# Grouping the data by nationality and counting the occurrences\nnationality_counts = HOST.groupby('nationality').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nnationality_counts = nationality_counts.sort_values('count')\n\n# Creating the bar plot\nplt.bar(nationality_counts['nationality'], nationality_counts['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Hosts by Nationality')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Show the average age of heads of departments born in each state with a bar chart, and could you display y-axis in descending order?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the \"head\" table\nhead_df = pd.read_sql(\"SELECT * FROM head\", conn)\n\n# Convert column names to lowercase\nhead_df.columns = head_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = head_df.groupby(\"born_state\").agg({\"age\": \"mean\"}).reset_index().sort_values(\"age\", ascending=False)\n\n# Generate the bar plot\nplt.bar(result_df[\"born_state\"], result_df[\"age\"])\nplt.xlabel(\"Born State\")\nplt.ylabel(\"Average Age\")\nplt.title(\"Average Age by Born State\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "company_employee",
    "question": "Bar chart x axis industry y axis the number of industry, order by the Industry from high to low.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"company\" table\ncompany_data = pd.read_sql(\"SELECT * FROM company\", conn)\n\n# Convert column names to lowercase\ncompany_data.columns = company_data.columns.str.lower()\n\n# Perform the SQL query\nindustry_counts = company_data.groupby('industry').size().reset_index(name='count')\nindustry_counts = industry_counts.sort_values('industry', ascending=False)\n\n# Generate the bar plot\nplt.bar(industry_counts['industry'], industry_counts['count'])\nplt.xlabel('Industry')\nplt.ylabel('Count')\nplt.title('Number of Companies by Industry')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "For those ships that do not have a captain, tell me the total number of their classes using a pie chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ship table\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Read the captain table\ncaptain_df = pd.read_sql(\"SELECT * FROM captain\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\ncaptain_df.columns = captain_df.columns.str.lower()\n\n# filter ship records where ship_id is not in captain table\nfiltered_ship_df = ship_df[~ship_df['ship_id'].isin(captain_df['ship_id'])]\n\n# group by class and count the occurrences\ngrouped_df = filtered_ship_df.groupby('class').size().reset_index(name='count')\n\n# plot the bar chart\nplt.bar(grouped_df['class'], grouped_df['count'])\nplt.xlabel('Class')\nplt.ylabel('Count')\nplt.title('Number of Ships by Class')\nplt.show()\n"
  },
  {
    "db_id": "performance_attendance",
    "question": "How many members attended each performance location, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmember_attendance = pd.read_sql(\"SELECT * FROM member_attendance\", conn)\nmember = pd.read_sql(\"SELECT * FROM member\", conn)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\nmember_attendance.columns = member_attendance.columns.str.lower()\nmember.columns = member.columns.str.lower()\nperformance.columns = performance.columns.str.lower()\n\n# Perform the SQL query using pandas merge\nresult = pd.merge(pd.merge(member_attendance, member, on='member_id'), performance, on='performance_id')\n\n# Group by location and count the number of members\ngrouped = result.groupby('location').size()\n\n# Plot the pie chart\nplt.pie(grouped, labels=grouped.index, autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "Return the number of the lot details of lots that belong to investors with details \"l\"?",
    "chart": "Pie",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the INVESTORS table\ninvestors = pd.read_sql(\"SELECT * FROM INVESTORS\", conn)\n\n# Read the data from the LOTS table\nlots = pd.read_sql(\"SELECT * FROM LOTS\", conn)\n\n# Merge the INVESTORS and LOTS tables on investor_id\nmerged_data = pd.merge(investors, lots, on=\"investor_id\")\n\n# Filter the merged data for Investor_details = \"l\"\nfiltered_data = merged_data[merged_data[\"Investor_details\"] == \"l\"]\n\n# Group the filtered data by lot_details and count the occurrences\ngrouped_data = filtered_data.groupby(\"lot_details\").size().reset_index(name=\"count\")\n\n# Convert the column names to lowercase\ngrouped_data.columns = grouped_data.columns.str.lower()\n\n# Plot the pie chart\nplt.pie(grouped_data[\"count\"], labels=grouped_data[\"lot_details\"], autopct=\"%1.1f%%\")\nplt.title(\"Distribution of Lot Details\")\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Bar chart x axis duration y axis how many duration , and could you order X from low to high order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nactor = pd.read_sql(\"SELECT * FROM actor\", conn)\nactor.columns = actor.columns.str.lower()\n\n# Group by duration and count the occurrences\nduration_counts = actor.groupby('duration').size().reset_index(name='count')\n\n# Sort by duration in ascending order\nduration_counts = duration_counts.sort_values('duration')\n\n# Plot the bar chart\nplt.bar(duration_counts['duration'], duration_counts['count'])\nplt.xlabel('Duration')\nplt.ylabel('Count')\nplt.title('Distribution of Durations')\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Show average of budget in different year and group by department creation time with a line chart , show in ascending by the X .",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = department.columns.str.lower()\n\n# Assuming 'department' is a DataFrame containing the table data\n\n# Grouping by 'creation' and calculating the average of 'budget_in_billions'\navg_budget = department.groupby('creation')['budget_in_billions'].mean()\n\n# Sorting the data by 'creation' in ascending order\navg_budget = avg_budget.sort_index()\n\n# Creating a line plot\nplt.plot(avg_budget.index, avg_budget.values)\n\n# Adding labels and title\nplt.xlabel('Creation')\nplt.ylabel('Average Budget (in billions)')\nplt.title('Average Budget by Creation')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Give me a bar chart for budget_in_billions of each name, and sort by the total number in asc.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the department table\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\n\n# Convert column names to lowercase\ndepartment.columns = department.columns.str.lower()\n\n# Sort the department table by budget_in_billions in ascending order\ndepartment_sorted = department.sort_values(by='budget_in_billions')\n\n# Create a bar plot\nplt.bar(department_sorted['name'], department_sorted['budget_in_billions'])\nplt.xlabel('Department Name')\nplt.ylabel('Budget in Billions')\nplt.title('Department Budgets')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "A bar chart for what are the number of the paragraph texts for the document with the name 'Customer reviews'?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the Paragraphs table\nparagraphs = pd.read_sql(\"SELECT * FROM Paragraphs\", conn)\n\n# Read the data from the Documents table\ndocuments = pd.read_sql(\"SELECT * FROM Documents\", conn)\n\n# Convert column names to lowercase\nparagraphs.columns = paragraphs.columns.str.lower()\ndocuments.columns = documents.columns.str.lower()\n\n# merge the two tables on document_id\nmerged_data = pd.merge(paragraphs, documents, on=\"document_id\")\n\n# filter the merged data for document_name = \"customer reviews\"\nfiltered_data = merged_data[merged_data[\"document_name\"] == \"customer reviews\"]\n\n# group by paragraph_text and count the occurrences\ngrouped_data = filtered_data.groupby(\"paragraph_text\").size().reset_index(name=\"count\")\n\n# plot the bar chart\nplt.bar(grouped_data[\"paragraph_text\"], grouped_data[\"count\"])\nplt.xlabel(\"Paragraph Text\")\nplt.ylabel(\"Count\")\nplt.title(\"Bar Chart of Paragraph Text Counts\")\nplt.show()\n"
  },
  {
    "db_id": "department_management",
    "question": "Show me mean age by born state in a bar, rank by the y axis in asc.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the \"head\" table\nhead_df = pd.read_sql(\"SELECT * FROM head\", conn)\n\n# Convert column names to lowercase\nhead_df.columns = head_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = head_df.groupby(\"born_state\").agg({\"age\": \"mean\"}).reset_index().sort_values(\"age\")\n\n# Generate the bar chart\nplt.bar(result_df[\"born_state\"], result_df[\"age\"])\nplt.xlabel(\"Born State\")\nplt.ylabel(\"Average Age\")\nplt.title(\"Average Age by Born State\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "What are the ids and details for all organizations that have grants of more than 6000 dollars, and I want to order by the bars in descending.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Grants table\ngrants = pd.read_sql(\"SELECT * FROM Grants\", conn)\n\n# Read the Organisations table\norganisations = pd.read_sql(\"SELECT * FROM Organisations\", conn)\n\n# Convert column names to lowercase\ngrants.columns = grants.columns.str.lower()\norganisations.columns = organisations.columns.str.lower()\n\n# Merge the Grants and Organisations tables\nmerged_data = pd.merge(grants, organisations, on=\"organisation_id\")\n\n# Group by organisation_details and count the number of grants\ngrouped_data = merged_data.groupby(\"organisation_details\").size().reset_index(name=\"count\")\n\n# Sort the data by organisation_details in descending order\nsorted_data = grouped_data.sort_values(\"organisation_details\", ascending=False)\n\n# Create a bar plot\nplt.bar(sorted_data[\"organisation_details\"], sorted_data[\"count\"])\nplt.xlabel(\"Organisation Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Grants by Organisation Details\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "Which organization dominates the research field with the highest number of research staff, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nOrganisations = pd.read_sql(\"SELECT * FROM Organisations\", conn)\nResearch_Staff = pd.read_sql(\"SELECT * FROM Research_Staff\", conn)\nOrganisations.columns = Organisations.columns.str.lower()\nResearch_Staff.columns = Research_Staff.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Organisations, Research_Staff, left_on='organisation_id', right_on='employer_organisation_id')\n\n# Group by organisation_id and count the number of rows\ngrouped_df = merged_df.groupby('organisation_id').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['organisation_id'], sorted_df['count'])\nplt.xlabel('Organisation ID')\nplt.ylabel('Count')\nplt.title('Number of Research Staff per Organisation')\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Tell me the proportion of the total number of different classes using a bar graph.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the captain table\ncaptain_df = pd.read_sql(\"SELECT * FROM captain\", conn)\n\n# Convert column names to lowercase\ncaptain_df.columns = captain_df.columns.str.lower()\n\n# Perform the SQL query\nclass_counts = captain_df.groupby('class').size()\n\n# Create a pie chart\nplt.pie(class_counts, labels=class_counts.index, autopct='%1.1f%%')\nplt.title('Distribution of Classes')\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "What is the total number of captains with different classes ? , show by the Class in ascending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\ncaptain.columns = captain.columns.str.lower()\n\n# Group by 'class' and count the occurrences\nclass_counts = captain.groupby('class').size().reset_index(name='count')\n\n# Sort the dataframe by 'class' in ascending order\nclass_counts = class_counts.sort_values('class')\n\n# Create a bar plot\nplt.bar(class_counts['class'], class_counts['count'])\nplt.xlabel('Class')\nplt.ylabel('Count')\nplt.title('Count of each class')\nplt.show()"
  },
  {
    "db_id": "scientist_1",
    "question": "Visualize a bar chart for what are the naems of all the projects, and how many scientists were assigned to each of them?, and show by the bar in ascending please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the projects table\nprojects = pd.read_sql(\"SELECT * FROM projects\", conn)\n\n# Read the assignedto table\nassignedto = pd.read_sql(\"SELECT * FROM assignedto\", conn)\n\n# Convert column names to lowercase\nprojects.columns = projects.columns.str.lower()\nassignedto.columns = assignedto.columns.str.lower()\n\n# merge the projects and assignedto tables on the code column\nmerged_data = pd.merge(projects, assignedto, left_on=\"code\", right_on=\"project\")\n\n# group by project name and count the number of occurrences\ngrouped_data = merged_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# sort the data by project name in ascending order\nsorted_data = grouped_data.sort_values(\"name\", ascending=True)\n\n# plot the bar chart\nplt.bar(sorted_data[\"name\"], sorted_data[\"count\"])\nplt.xlabel(\"Project Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Assignments per Project\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "Can you create a bar chart displaying the project detail and task count for each project?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nProjects = pd.read_sql(\"SELECT * FROM Projects\", conn)\nTasks = pd.read_sql(\"SELECT * FROM Tasks\", conn)\nProjects.columns = Projects.columns.str.lower()\nTasks.columns = Tasks.columns.str.lower()\n\n# Joining Projects and Tasks tables\nmerged_df = pd.merge(Projects, Tasks, on='project_id')\n\n# Grouping by project_id and counting tasks\ntask_count_df = merged_df.groupby('project_id')['project_details'].count().reset_index()\ntask_count_df.columns = ['project_id', 'task_count']\n\n# Sorting by task_count in descending order\nsorted_df = task_count_df.sort_values('task_count', ascending=False)\n\n# Plotting the bar chart\nplt.bar(sorted_df['project_id'], sorted_df['task_count'])\nplt.xlabel('Project ID')\nplt.ylabel('Task Count')\nplt.title('Task Count per Project')\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Show the number of the dates of performances with attending members whose roles are \"Violin\", and could you display x-axis in asc order?",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the tables from the database\nmember_attendance = pd.read_sql(\"SELECT * FROM member_attendance\", conn)\nmember = pd.read_sql(\"SELECT * FROM member\", conn)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\n\n# Convert column names to lowercase\nmember_attendance.columns = member_attendance.columns.str.lower()\nmember.columns = member.columns.str.lower()\nperformance.columns = performance.columns.str.lower()\n\n# Merge the tables\nmerged_data = pd.merge(member_attendance, member, on=\"member_id\")\nmerged_data = pd.merge(merged_data, performance, on=\"performance_id\")\n\n# Filter the data for role \"Violin\"\nfiltered_data = merged_data[merged_data[\"role\"] == \"Violin\"]\n\n# Group by date and count the occurrences\ngrouped_data = filtered_data.groupby(\"date\").size().reset_index(name=\"count\")\n\n# Sort the data by date\nsorted_data = grouped_data.sort_values(\"date\")\n\n# Plot the bar chart\nplt.bar(sorted_data[\"date\"], sorted_data[\"count\"])\nplt.xlabel(\"Date\")\nplt.ylabel(\"Count\")\nplt.title(\"Attendance Count for Violin Role\")\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Visualize a bar chart for how many students play each sport ?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nSportsinfo.columns = Sportsinfo.columns.str.lower()\n\n# Grouping the data by sportname and counting the occurrences\nsport_counts = Sportsinfo.groupby('sportname').size().reset_index(name='count')\n\n# Creating the bar plot\nplt.bar(sport_counts['sportname'], sport_counts['count'])\nplt.xlabel('Sport Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Sport')\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "A bar chart showing how many representatives in each party.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the representative table\nrepresentative_df = pd.read_sql(\"SELECT * FROM representative\", conn)\n\n# Convert column names to lowercase\nrepresentative_df.columns = map(str.lower, representative_df.columns)\n\n# Perform the SQL query\nparty_count_df = representative_df.groupby('party').size().reset_index(name='count')\n\n# Generate the bar chart\nplt.bar(party_count_df['party'], party_count_df['count'])\nplt.xlabel('Party')\nplt.ylabel('Count')\nplt.title('Number of Representatives by Party')\nplt.show()"
  },
  {
    "db_id": "local_govt_mdm",
    "question": "What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'? Show the results in a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nElectoral_Register = pd.read_sql(\"SELECT * FROM Electoral_Register\", conn)\nCMI_Cross_References = pd.read_sql(\"SELECT * FROM CMI_Cross_References\", conn)\nElectoral_Register.columns = Electoral_Register.columns.str.lower()\nCMI_Cross_References.columns = CMI_Cross_References.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Electoral_Register, CMI_Cross_References, on='cmi_cross_ref_id')\n\n# Filter the data based on the condition\nfiltered_df = merged_df[(merged_df['source_system_code'] == 'Electoral') | (merged_df['source_system_code'] == 'Tax')]\n\n# Group by electoral_register_id and count the occurrences\ngrouped_df = filtered_df.groupby('electoral_register_id').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['electoral_register_id'], grouped_df['count'])\nplt.xlabel('Electoral Register ID')\nplt.ylabel('Count')\nplt.title('Count of Records by Electoral Register ID')\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Give me a bar for how many students play each sport ? , and sort bars in descending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nSportsinfo.columns = Sportsinfo.columns.str.lower()\n\n# Grouping the data by sportname and counting the occurrences\nsport_counts = Sportsinfo.groupby('sportname').size().reset_index(name='count')\n\n# Sorting the data by sportname in descending order\nsport_counts = sport_counts.sort_values('sportname', ascending=False)\n\n# Creating the bar plot\nplt.bar(sport_counts['sportname'], sport_counts['count'])\nplt.xlabel('Sport Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Sport Name')\nplt.show()"
  },
  {
    "db_id": "local_govt_mdm",
    "question": "What is the scatter plot of the tax source system code related to the benefits and overpayments? Display the council tax ID and the source system code, sorted by the council tax ID.",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nCMI_Cross_References = pd.read_sql(\"SELECT * FROM CMI_Cross_References\", conn)\nBenefits_Overpayments = pd.read_sql(\"SELECT * FROM Benefits_Overpayments\", conn)\nCMI_Cross_References.columns = CMI_Cross_References.columns.str.lower()\nBenefits_Overpayments.columns = Benefits_Overpayments.columns.str.lower()\n\n# Merge the two dataframes on the common column \"cmi_cross_ref_id\"\nmerged_df = pd.merge(CMI_Cross_References, Benefits_Overpayments, on=\"cmi_cross_ref_id\")\n\n# Create a scatter plot\nplt.scatter(merged_df[\"council_tax_id\"], merged_df[\"source_system_code\"])\nplt.xlabel(\"Council Tax ID\")\nplt.ylabel(\"Source System Code\")\nplt.title(\"Scatter Plot of Council Tax ID vs Source System Code\")\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Bar chart of the total number from each location , and could you list from low to high by the Y ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\nperformance.columns = performance.columns.str.lower()\n\n# Group by location and count the number of occurrences\nlocation_counts = performance.groupby('location').size().reset_index(name='count')\n\n# Sort the counts in ascending order\nlocation_counts = location_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(location_counts['location'], location_counts['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Performances by Location')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "scientist_1",
    "question": "Find the number of scientists involved for the projects that require more than 300 hours. Show a pie chart.",
    "chart": "Pie",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the projects table\nprojects = pd.read_sql(\"SELECT * FROM projects\", conn)\nprojects.columns = map(str.lower, projects.columns)\n\n# Read the assignedto table\nassignedto = pd.read_sql(\"SELECT * FROM assignedto\", conn)\nassignedto.columns = map(str.lower, assignedto.columns)\n\n# Merge the projects and assignedto tables\nmerged = pd.merge(projects, assignedto, left_on=\"code\", right_on=\"project\")\n\n# Filter the merged table based on hours > 300\nfiltered = merged[merged[\"hours\"] > 300]\n\n# Group by name and count the occurrences\ngrouped = filtered.groupby(\"name\").size().reset_index(name=\"count\")\n\n# Plot the pie chart\nplt.pie(grouped[\"count\"], labels=grouped[\"name\"], autopct=\"%1.1f%%\")\nplt.axis(\"equal\")\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Give me a bar chart for budget_in_billions of each name, show in ascending by the Name.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the department table\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\n\n# Convert column names to lowercase\ndepartment.columns = department.columns.str.lower()\n\n# Sort the department table by name\ndepartment_sorted = department.sort_values(by='name')\n\n# Create a bar plot\nplt.bar(department_sorted['name'], department_sorted['budget_in_billions'])\nplt.xlabel('Department Name')\nplt.ylabel('Budget in Billions')\nplt.title('Department Budgets')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Create a pie chart to display the distribution of ratings made by each reviewer.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nReviewer = pd.read_sql(\"SELECT * FROM Reviewer\", conn)\nRating.columns = Rating.columns.str.lower()\nReviewer.columns = Reviewer.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Rating, Reviewer, on='rid')\n\n# Perform the group by operation and count the number of ratings for each reviewer\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['name'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Find the component amounts and names of all furnitures that have more than 10 components. Show me the proportion of component amounts using a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the furniture table\nfurniture = pd.read_sql(\"SELECT * FROM furniture\", conn)\n\n# Convert column names to lowercase\nfurniture.columns = furniture.columns.str.lower()\n\n# Filter the data\nfiltered_furniture = furniture[furniture[\"num_of_component\"] > 10]\n\n# Create a pie chart\nplt.pie(filtered_furniture[\"num_of_component\"], labels=filtered_furniture[\"name\"])\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all template type codes and number of templates for each with a bar chart , order from high to low by the x-axis please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nTemplates = pd.read_sql(\"SELECT * FROM Templates\", conn)\nTemplates.columns = Templates.columns.str.lower()\n\n# Grouping the data by template_type_code and counting the occurrences\ntemplate_counts = Templates.groupby('template_type_code').size().reset_index(name='count')\n\n# Sorting the data by template_type_code in descending order\ntemplate_counts = template_counts.sort_values('template_type_code', ascending=False)\n\n# Creating the bar plot\nplt.bar(template_counts['template_type_code'], template_counts['count'])\nplt.xlabel('Template Type Code')\nplt.ylabel('Count')\nplt.title('Template Type Counts')\nplt.show()"
  },
  {
    "db_id": "coffee_shop",
    "question": "Find the address and staff number of the shops that do not have any happy hour. Plot them as pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the shop table\nshop_df = pd.read_sql(\"SELECT * FROM shop\", conn)\n\n# Read the happy_hour table\nhappy_hour_df = pd.read_sql(\"SELECT * FROM happy_hour\", conn)\n\n# Convert column names to lowercase\nshop_df.columns = shop_df.columns.str.lower()\nhappy_hour_df.columns = happy_hour_df.columns.str.lower()\n\n# filter the shop table to exclude shops with happy hour\nfiltered_shop_df = shop_df[~shop_df['shop_id'].isin(happy_hour_df['shop_id'])]\n\n# create a pie chart of the number of staff by address\nplt.pie(filtered_shop_df['num_of_staff'], labels=filtered_shop_df['address'])\nplt.title(\"Number of Staff by Address\")\nplt.show()\n"
  },
  {
    "db_id": "music_4",
    "question": "Return the number of music festivals of each category . Show a pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nmusic_festival = pd.read_sql(\"SELECT * FROM music_festival\", conn)\nmusic_festival.columns = music_festival.columns.str.lower()\n\n# Group by category and count the number of occurrences\ncategory_counts = music_festival.groupby('category').size().reset_index(name='count')\n\n# Create a pie chart\nplt.pie(category_counts['count'], labels=category_counts['category'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Display the chart\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "For each continent where the average life expectancy is shorter than 72, show their total population with a bar chart, display in asc by the sum population.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the country table\ncountry_df = pd.read_sql(\"SELECT * FROM country\", conn)\n\n# Convert column names to lowercase\ncountry_df.columns = country_df.columns.str.lower()\n\n# Calculate the average life expectancy by continent\ncontinent_avg_life = country_df.groupby('continent')['lifeexpectancy'].mean()\n\n# Filter continents with average life expectancy less than 72\nfiltered_continents = continent_avg_life[continent_avg_life < 72]\n\n# Calculate the sum of population by continent\ncontinent_population = country_df.groupby('continent')['population'].sum()\n\n# Filter continents based on the filtered average life expectancy\nfiltered_population = continent_population[continent_population.index.isin(filtered_continents.index)]\n\n# Sort the population in ascending order\nsorted_population = filtered_population.sort_values()\n\n# Plot the bar chart\nplt.bar(sorted_population.index, sorted_population.values)\nplt.xlabel('Continent')\nplt.ylabel('Population')\nplt.title('Population by Continent with Average Life Expectancy < 72')\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Plot how many class by grouped by class as a bar graph , order in asc by the Class .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\ncaptain.columns = captain.columns.str.lower()\n\n# Group by 'class' and count the occurrences\nclass_counts = captain.groupby('class').size().reset_index(name='count')\n\n# Sort the dataframe by 'class' in ascending order\nclass_counts = class_counts.sort_values('class')\n\n# Create a bar plot\nplt.bar(class_counts['class'], class_counts['count'])\nplt.xlabel('Class')\nplt.ylabel('Count')\nplt.title('Count of each class')\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Compare the total number of locations in each location using a bar graph .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\nperformance.columns = performance.columns.str.lower()\n\n# Group by location and count the occurrences\nlocation_counts = performance.groupby('location').size().reset_index(name='count')\n\n# Create bar plot\nplt.bar(location_counts['location'], location_counts['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Performance by Location')\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "Can you provide a bar chart displaying the details of the project whose research has been published?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nProjects = pd.read_sql(\"SELECT * FROM Projects\", conn)\nProject_outcomes = pd.read_sql(\"SELECT * FROM Project_outcomes\", conn)\nResearch_outcomes = pd.read_sql(\"SELECT * FROM Research_outcomes\", conn)\nProjects.columns = Projects.columns.str.lower()\nProject_outcomes.columns = Project_outcomes.columns.str.lower()\nResearch_outcomes.columns = Research_outcomes.columns.str.lower()\n\n# Merge the tables\nmerged_df = pd.merge(Projects, Project_outcomes, on='project_id')\nmerged_df = pd.merge(merged_df, Research_outcomes, on='outcome_code')\n\n# Filter the data\nfiltered_df = merged_df[merged_df['outcome_description'].str.contains('published', case=False)]\n\n# Group by project_details and count the occurrences\ngrouped_df = filtered_df.groupby('project_details').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['project_details'], grouped_df['count'])\nplt.xlabel('Project Details')\nplt.ylabel('Count')\nplt.title('Number of Projects with Published Outcomes')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "voter_2",
    "question": "Show me a bar chart displaying the count of each distinct last name of the students who have president votes but do not have 2192 as the advisor.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nVOTING_RECORD = pd.read_sql(\"SELECT * FROM VOTING_RECORD\", conn)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nSTUDENT.columns = STUDENT.columns.str.lower()\nVOTING_RECORD.columns = VOTING_RECORD.columns.str.lower()\nSTUDENT.columns = STUDENT.columns.str.lower()\n\n# Perform the SQL query\nquery = \"\"\"\n    select lname, count(*) \n    from (\n        select distinct t1.lname \n        from student as t1 \n        join voting_record as t2 on t1.stuid = president_vote \n        except \n        select distinct lname \n        from student \n        where advisor = '2192'\n    ) \n    group by lname\n\"\"\"\n\nresult = pd.merge(STUDENT, VOTING_RECORD, left_on='stuid', right_on='president_vote')\nresult = result[~result['lname'].isin(STUDENT[STUDENT['advisor'] == '2192']['lname'].unique())]\nresult = result['lname'].value_counts().reset_index()\nresult.columns = ['lname', 'count']\n\n# Plot the bar chart\nplt.bar(result['lname'], result['count'])\nplt.xlabel('Last Name')\nplt.ylabel('Count')\nplt.title('Number of Students by Last Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "company_employee",
    "question": "Show the different headquarters and number of companies at each headquarter with a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the company table\ncompany = pd.read_sql(\"SELECT * FROM company\", conn)\n\n# Convert column names to lowercase\ncompany.columns = company.columns.str.lower()\n\n# Perform the SQL query\nresult = company.groupby('headquarters').size()\n\n# Create the bar plot\nplt.bar(result.index, result.values)\nplt.xlabel('Headquarters')\nplt.ylabel('Count')\nplt.title('Number of Companies by Headquarters')\nplt.show()"
  },
  {
    "db_id": "company_employee",
    "question": "Return a bar chart about the number of companies for each industry , order bar in asc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompany = pd.read_sql(\"SELECT * FROM company\", conn)\ncompany.columns = company.columns.str.lower()\n\n# Group by industry and count the number of companies in each industry\nindustry_counts = company.groupby('industry').size().reset_index(name='count')\n\n# Sort the data by industry in ascending order\nindustry_counts = industry_counts.sort_values('industry')\n\n# Create a bar plot\nplt.bar(industry_counts['industry'], industry_counts['count'])\nplt.xlabel('Industry')\nplt.ylabel('Count')\nplt.title('Number of Companies by Industry')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "What is the scatter plot of the total number of hours per week (X) and the total number of games played (Y) by David Shieber?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nStudent = pd.read_sql(\"SELECT * FROM Student\", conn)\nSportsinfo.columns = Sportsinfo.columns.str.lower()\nStudent.columns = Student.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(Sportsinfo, Student, on='stuid')\n\n# Filtering the data for David Shieber\nfiltered_df = merged_df[(merged_df['fname'] == 'David') & (merged_df['lname'] == 'Shieber')]\n\n# Calculating the sum of hoursperweek and gamesplayed\nsum_df = filtered_df.groupby(['fname', 'lname']).agg({'hoursperweek': 'sum', 'gamesplayed': 'sum'}).reset_index()\n\n# Creating scatter plot\nplt.scatter(sum_df['hoursperweek'], sum_df['gamesplayed'])\nplt.xlabel('Hours per Week')\nplt.ylabel('Games Played')\nplt.title('Scatter Plot of Hours per Week vs Games Played for David Shieber')\nplt.show()"
  },
  {
    "db_id": "scientist_1",
    "question": "What are the naems of all the projects, and how many scientists were assigned to each of them, rank x axis in descending order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the projects table\nprojects = pd.read_sql(\"SELECT * FROM projects\", conn)\nprojects.columns = map(str.lower, projects.columns)\n\n# Read the assignedto table\nassignedto = pd.read_sql(\"SELECT * FROM assignedto\", conn)\nassignedto.columns = map(str.lower, assignedto.columns)\n\n# Merge the projects and assignedto tables\nmerged = pd.merge(projects, assignedto, left_on=\"code\", right_on=\"project\")\n\n# Perform the aggregation\naggregated = merged.groupby(\"name\").size().reset_index(name=\"count\")\naggregated = aggregated.sort_values(\"name\", ascending=False)\n\n# Plot the bar chart\nplt.bar(aggregated[\"name\"], aggregated[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Assignments per Project\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Show the title and the lowest rating among all movies in a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\n\n# Merge the Rating and Movie tables on mID\nmerged_df = pd.merge(rating_df, movie_df, on=\"mID\")\n\n# Group by title and calculate the minimum stars for each movie\ngrouped_df = merged_df.groupby(\"title\")[\"stars\"].min().reset_index()\n\n# Convert column names to lowercase\ngrouped_df.columns = grouped_df.columns.str.lower()\n\n# Plot the bar chart\nplt.bar(grouped_df[\"title\"], grouped_df[\"stars\"])\nplt.xlabel(\"Movie Title\")\nplt.ylabel(\"Minimum Stars\")\nplt.title(\"Minimum Stars for Each Movie\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Compare the total number of different ranks using a bar graph , could you order X in desc order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\ncaptain.columns = captain.columns.str.lower()\n\n# Group by rank and count the occurrences\nrank_counts = captain.groupby('rank').size().reset_index(name='count')\n\n# Sort the dataframe by rank in descending order\nrank_counts = rank_counts.sort_values('rank', ascending=False)\n\n# Create a bar plot\nplt.bar(rank_counts['rank'], rank_counts['count'])\n\n# Set the x-axis label\nplt.xlabel('Rank')\n\n# Set the y-axis label\nplt.ylabel('Count')\n\n# Set the title of the plot\nplt.title('Count of Captains by Rank')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Visualize a bar chart for how many students play each sport ? , and sort bar in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nSportsinfo.columns = Sportsinfo.columns.str.lower()\n\n# Grouping the data by sportname and counting the occurrences\nsport_counts = Sportsinfo.groupby('sportname').size().reset_index(name='count')\n\n# Sorting the data by sportname in ascending order\nsport_counts = sport_counts.sort_values('sportname')\n\n# Creating the bar plot\nplt.bar(sport_counts['sportname'], sport_counts['count'])\nplt.xlabel('Sport Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Sport Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Which actors have performed in the musical \"The Phantom of the Opera\" and what is the frequency of their appearances, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nactor = pd.read_sql(\"SELECT * FROM actor\", conn)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nactor.columns = actor.columns.str.lower()\nmusical.columns = musical.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(actor, musical, on='musical_id')\n\n# Filter the data for the specified musical name\nfiltered_df = merged_df[merged_df['name_y'] == 'The Phantom of the Opera']\n\n# Group the data by actor name and count the occurrences\ngrouped_df = filtered_df.groupby('name_x').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['name_x'], grouped_df['count'])\nplt.xlabel('Actor Name')\nplt.ylabel('Count')\nplt.title('Number of Appearances in \"The Phantom of the Opera\"')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "scientist_1",
    "question": "Visualize a bar chart for what are the naems of all the projects, and how many scientists were assigned to each of them?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the projects table\nprojects = pd.read_sql(\"SELECT * FROM projects\", conn)\n\n# Read the assignedto table\nassignedto = pd.read_sql(\"SELECT * FROM assignedto\", conn)\n\n# Convert column names to lowercase\nprojects.columns = projects.columns.str.lower()\nassignedto.columns = assignedto.columns.str.lower()\n\n# merge the projects and assignedto tables on the code column\nmerged_data = pd.merge(projects, assignedto, left_on=\"code\", right_on=\"project\")\n\n# group by project name and count the number of occurrences\ngrouped_data = merged_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# plot the bar chart\nplt.bar(grouped_data[\"name\"], grouped_data[\"count\"])\nplt.xlabel(\"Project Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Assignments per Project\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "party_host",
    "question": "What is the theme of each party and how many hosts does each party have, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nparty_host = pd.read_sql(\"SELECT * FROM party_host\", conn)\nHOST = pd.read_sql(\"SELECT * FROM HOST\", conn)\nparty = pd.read_sql(\"SELECT * FROM party\", conn)\nparty_host.columns = party_host.columns.str.lower()\nHOST.columns = HOST.columns.str.lower()\nparty.columns = party.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(party_host, HOST, on='host_id')\nmerged_df = pd.merge(merged_df, party, on='party_id')\n\n# Grouping by party_theme and counting party_id\ngrouped_df = merged_df.groupby('party_theme').count().reset_index()\n\n# Sorting by count in ascending order\nsorted_df = grouped_df.sort_values('party_id')\n\n# Creating the bar plot\nplt.bar(sorted_df['party_theme'], sorted_df['party_id'])\nplt.xlabel('Party Theme')\nplt.ylabel('Count')\nplt.title('Number of Parties by Theme')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "Show the average of population from each status, and rank by the Y in descending.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the city table\ncity_df = pd.read_sql(\"SELECT * FROM city\", conn)\n\n# Convert column names to lowercase\ncity_df.columns = city_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = city_df.groupby('status')['population'].mean().reset_index().sort_values('population', ascending=False)\n\n# Create the bar plot\nplt.bar(result_df['status'], result_df['population'])\nplt.xlabel('Status')\nplt.ylabel('Average Population')\nplt.title('Average Population by Status')\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Can you create a bar chart displaying the manufacturer ID and the count of shops for each manufacturer, ordered by the ascending count of number of shops?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmanufacturer = pd.read_sql(\"SELECT * FROM manufacturer\", conn)\nfurniture_manufacte = pd.read_sql(\"SELECT * FROM furniture_manufacte\", conn)\nmanufacturer.columns = manufacturer.columns.str.lower()\nfurniture_manufacte.columns = furniture_manufacte.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(manufacturer, furniture_manufacte, on='manufacturer_id')\n\n# Group by manufacturer_id and count the number of shops\ngrouped_df = merged_df.groupby('manufacturer_id').size().reset_index(name='num_of_shops')\n\n# Sort the dataframe by num_of_shops in ascending order\nsorted_df = grouped_df.sort_values('num_of_shops')\n\n# Plot the bar chart\nplt.bar(sorted_df['manufacturer_id'], sorted_df['num_of_shops'])\nplt.xlabel('Manufacturer ID')\nplt.ylabel('Number of Shops')\nplt.title('Number of Shops per Manufacturer')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "How many competitions for each country ? , rank by the Country in desc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by country and count the occurrences\ncountry_counts = competition.groupby('country').size().reset_index(name='count')\n\n# Sort by country in descending order\ncountry_counts = country_counts.sort_values('country', ascending=False)\n\n# Plot the bar chart\nplt.bar(country_counts['country'], country_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Country')\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "How many parties have a number of hosts greater than 20, and can you display this information using a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nparty_host = pd.read_sql(\"SELECT * FROM party_host\", conn)\nHOST = pd.read_sql(\"SELECT * FROM HOST\", conn)\nparty = pd.read_sql(\"SELECT * FROM party\", conn)\nparty_host.columns = party_host.columns.str.lower()\nHOST.columns = HOST.columns.str.lower()\nparty.columns = party.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(party_host, HOST, on='host_id')\nmerged_df = pd.merge(merged_df, party, on='party_id')\n\n# Filtering the data\nfiltered_df = merged_df[merged_df['number_of_hosts'] > 20]\n\n# Grouping and counting the parties\ngrouped_df = filtered_df.groupby('number_of_hosts').size().reset_index(name='number_of_parties')\n\n# Plotting the bar chart\nplt.bar(grouped_df['number_of_hosts'], grouped_df['number_of_parties'])\nplt.xlabel('Number of Hosts')\nplt.ylabel('Number of Parties')\nplt.title('Number of Parties vs Number of Hosts')\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "What is the total number of captains with different classes?, show by the Class in ascending.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the captain table\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\n\n# Convert column names to lowercase\ncaptain.columns = captain.columns.str.lower()\n\n# Perform the SQL query\nresult = captain.groupby('class').size().reset_index(name='count').sort_values('class')\n\n# Generate the bar chart\nplt.bar(result['class'], result['count'])\nplt.xlabel('Class')\nplt.ylabel('Count')\nplt.title('Number of Captains by Class')\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , sort x axis from high to low order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry.columns = country.columns.str.lower()\n\n# Group by governmentform and calculate the sum of population\ngrouped_data = country.groupby('governmentform')['population'].sum()\n\n# Sort the data by governmentform in descending order\nsorted_data = grouped_data.sort_index(ascending=False)\n\n# Create a bar plot\nplt.bar(sorted_data.index, sorted_data.values)\n\n# Set the x-axis labels\nplt.xlabel('Government Form')\n\n# Set the y-axis label\nplt.ylabel('Population')\n\n# Set the title of the plot\nplt.title('Population by Government Form')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Return a bar on how many actors have appeared in each musical?, and order y-axis in desc order please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the actor and musical tables\nactor = pd.read_sql(\"SELECT * FROM actor\", conn)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\n\n# Convert column names to lowercase\nactor.columns = actor.columns.str.lower()\nmusical.columns = musical.columns.str.lower()\n\n# Merge the actor and musical tables on Musical_ID\nmerged = pd.merge(actor, musical, on=\"musical_id\")\n\n# Perform the group by and count\ngrouped = merged.groupby(\"musical_id\").size().reset_index(name=\"count\")\ngrouped = pd.merge(grouped, musical, on=\"musical_id\")\n\n# Sort by count in descending order\ngrouped = grouped.sort_values(\"count\", ascending=False)\n\n# Create the bar plot\nplt.bar(grouped[\"name\"], grouped[\"count\"])\nplt.xlabel(\"Musical\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Actors in Musicals\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "Who is the entrepreneur with the highest weight, and can you represent the weights of all entrepreneurs in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Perform the join operation\nresult = pd.merge(entrepreneur, people, on='people_id')\n\n# Sort the result by weight in descending order\nresult = result.sort_values('weight', ascending=False)\n\n# Create the bar plot\nplt.bar(result['name'], result['weight'])\nplt.xlabel('Name')\nplt.ylabel('Weight')\nplt.title('Weight of Entrepreneurs')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Show me a bar chart of the titles of movies that were not reviewed by Chris Jackson and the number of times they were reviewed.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nMovie = pd.read_sql(\"SELECT * FROM Movie\", conn)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nMovie = pd.read_sql(\"SELECT * FROM Movie\", conn)\nReviewer = pd.read_sql(\"SELECT * FROM Reviewer\", conn)\nMovie.columns = Movie.columns.str.lower()\nRating.columns = Rating.columns.str.lower()\nMovie.columns = Movie.columns.str.lower()\nReviewer.columns = Reviewer.columns.str.lower()\n\n# Perform the SQL query\ndf1 = pd.merge(Movie, Rating, on='mid')\ndf2 = pd.merge(df1, Reviewer, on='rid')\ndf3 = df2[df2['name'] != 'chris jackson']\ndf4 = df3.groupby('title').size().reset_index(name='count')\n\n# Create the bar plot\nplt.bar(df4['title'], df4['count'])\nplt.xlabel('Movie Title')\nplt.ylabel('Count')\nplt.title('Number of Ratings per Movie (excluding Chris Jackson)')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Find the number of funiture types produced by each manufacturer as well as the company names. Visualize by pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the manufacturer table\nmanufacturer = pd.read_sql(\"SELECT * FROM manufacturer\", conn)\n\n# Read the furniture_manufacte table\nfurniture_manufacte = pd.read_sql(\"SELECT * FROM furniture_manufacte\", conn)\n\n# Convert column names to lowercase\nmanufacturer.columns = manufacturer.columns.str.lower()\nfurniture_manufacte.columns = furniture_manufacte.columns.str.lower()\n\n# merge the two tables on manufacturer_id\nmerged_table = pd.merge(manufacturer, furniture_manufacte, on=\"manufacturer_id\")\n\n# group by manufacturer_id and count the number of occurrences\ngrouped_table = merged_table.groupby(\"manufacturer_id\").size().reset_index(name=\"count\")\n\n# merge with the manufacturer table to get the manufacturer name\nresult_table = pd.merge(grouped_table, manufacturer, on=\"manufacturer_id\")\n\n# plot the pie chart\nplt.pie(result_table[\"count\"], labels=result_table[\"name\"], autopct=\"%1.1f%%\")\nplt.axis(\"equal\")\nplt.show()\n"
  },
  {
    "db_id": "journal_committee",
    "question": "How many journals, with sales bigger than 3000, have editors on their committees? Visualize the results using a scatter chart.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\njournal_committee = pd.read_sql(\"SELECT * FROM journal_committee\", conn)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\njournal = pd.read_sql(\"SELECT * FROM journal\", conn)\njournal_committee.columns = journal_committee.columns.str.lower()\neditor.columns = editor.columns.str.lower()\njournal.columns = journal.columns.str.lower()\n\n# Merge tables\nmerged_df = pd.merge(journal_committee, editor, on='editor_id')\nmerged_df = pd.merge(merged_df, journal, on='journal_id')\n\n# Filter data\nfiltered_df = merged_df[merged_df['sales'] > 3000]\n\n# Group by sales and count\ngrouped_df = filtered_df.groupby('sales').size().reset_index(name='count')\n\n# Scatter plot\nplt.scatter(grouped_df['sales'], grouped_df['count'])\nplt.xlabel('Sales')\nplt.ylabel('Count')\nplt.title('Scatter plot of Sales vs Count')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "List the position of players and the average number of points of players of each position Visualize by bar chart , and could you sort by the total number in ascending ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nplayer.columns = player.columns.str.lower()\n\n# Group by position and calculate average points\navg_points = player.groupby('position')['points'].mean()\n\n# Sort the average points in ascending order\navg_points_sorted = avg_points.sort_values()\n\n# Create a bar plot\nplt.bar(avg_points_sorted.index, avg_points_sorted.values)\n\n# Set the labels and title\nplt.xlabel('Position')\nplt.ylabel('Average Points')\nplt.title('Average Points by Position')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "How many captains are in each rank, and list X from high to low order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the captain table\ncaptain_df = pd.read_sql(\"SELECT * FROM captain\", conn)\n\n# Convert column names to lowercase\ncaptain_df.columns = captain_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = captain_df.groupby('rank').size().reset_index(name='count').sort_values('rank', ascending=False)\n\n# Generate the bar plot\nplt.bar(result_df['rank'], result_df['count'])\nplt.xlabel('Rank')\nplt.ylabel('Count')\nplt.title('Count of Captains by Rank')\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Show me mean age by born state in a bar , and list names in desc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nhead = pd.read_sql(\"SELECT * FROM head\", conn)\nhead.columns = head.columns.str.lower()\n\nresult = head.groupby('born_state')['age'].mean().reset_index().sort_values('born_state', ascending=False)\n\nplt.bar(result['born_state'], result['age'])\nplt.xlabel('Born State')\nplt.ylabel('Average Age')\nplt.title('Average Age by Born State')\nplt.show()"
  },
  {
    "db_id": "school_player",
    "question": "Give me a pie to show the total number from different denomination .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nschool = pd.read_sql(\"SELECT * FROM school\", conn)\nschool.columns = school.columns.str.lower()\n\n# Grouping the data by denomination and counting the number of occurrences\ndenomination_counts = school.groupby('denomination').size()\n\n# Creating a pie chart\nplt.pie(denomination_counts, labels=denomination_counts.index, autopct='%1.1f%%')\nplt.title('Denomination Distribution')\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Return a scatter chart showing the relationship between major id and maximum age.",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Student table\nstudent_df = pd.read_sql(\"SELECT * FROM Student\", conn)\n\n# Convert column names to lowercase\nstudent_df.columns = student_df.columns.str.lower()\n\n# Group by Major and find the maximum age\nmax_age_df = student_df.groupby('major')['age'].max().reset_index()\n\n# Scatter plot\nplt.scatter(max_age_df['major'], max_age_df['age'])\nplt.xlabel('Major')\nplt.ylabel('Max Age')\nplt.title('Max Age by Major')\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "Return the lot details , group the lot details , and compute the number of each lot details , and show y-axis in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nLOTS = pd.read_sql(\"SELECT * FROM LOTS\", conn)\nLOTS.columns = LOTS.columns.str.lower()\n\n# Grouping the data by 'lot_details' and counting the occurrences\ngrouped_data = LOTS.groupby('lot_details').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nsorted_data = grouped_data.sort_values('count')\n\n# Creating the bar plot\nplt.bar(sorted_data['lot_details'], sorted_data['count'])\nplt.xlabel('Lot Details')\nplt.ylabel('Count')\nplt.title('Count of Lot Details')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Plot the total number by grouped by competition type as a bar graph, and order X in ascending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the competition table\ncompetition_df = pd.read_sql(\"SELECT * FROM competition\", conn)\n\n# Convert column names to lowercase\ncompetition_df.columns = competition_df.columns.str.lower()\n\n# Perform the SQL query\nresult = competition_df.groupby('competition_type').size().reset_index(name='count').sort_values('competition_type')\n\n# Generate the bar plot\nplt.bar(result['competition_type'], result['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Competition Type Count')\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "A bar chart about what are the statuses and average populations of each city ? , display by the x axis from low to high .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncity.columns = city.columns.str.lower()\n\n# Group by status and calculate average population\ngrouped_city = city.groupby('status')['population'].mean()\n\n# Sort by status in ascending order\ngrouped_city = grouped_city.sort_index()\n\n# Create bar plot\nplt.bar(grouped_city.index, grouped_city.values)\n\n# Set labels and title\nplt.xlabel('Status')\nplt.ylabel('Average Population')\nplt.title('Average Population by Status')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "insurance_fnol",
    "question": "Give me a bar to show the ordered list of customer ids ?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\ncustomers.columns = customers.columns.str.lower()\n\n# Assuming customers is a DataFrame containing the table data\n\n# Sort the DataFrame by customer_id in ascending order\nsorted_customers = customers.sort_values('customer_id')\n\n# Extract the customer_name and customer_id columns\ncustomer_names = sorted_customers['customer_name']\ncustomer_ids = sorted_customers['customer_id']\n\n# Create a bar plot\nplt.bar(customer_names, customer_ids)\n\n# Set the x-axis label\nplt.xlabel('Customer Name')\n\n# Set the y-axis label\nplt.ylabel('Customer ID')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "A bar chart showing how many representatives in each party .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\nrepresentative.columns = representative.columns.str.lower()\n\n# Group by party and count the number of representatives in each party\nparty_counts = representative.groupby('party').size()\n\n# Create a bar plot\nplt.bar(party_counts.index, party_counts.values)\n\n# Set the labels and title\nplt.xlabel('Party')\nplt.ylabel('Count')\nplt.title('Number of Representatives by Party')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Return a bar chart on how many musicals has each nominee been nominated for ?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Group by nominee and count the number of occurrences\nnominee_counts = musical.groupby('nominee').size().reset_index(name='count')\n\n# Create a bar plot\nplt.bar(nominee_counts['nominee'], nominee_counts['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "Create a bar chart showing how many location across location, could you rank from high to low by the names?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the party table\nparty_df = pd.read_sql(\"SELECT * FROM party\", conn)\n\n# Convert column names to lowercase\nparty_df.columns = party_df.columns.str.lower()\n\n# Perform the SQL query\nresult = party_df.groupby('location').size().reset_index(name='count').sort_values('location', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['location'], result['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Party Count by Location')\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\", and count them by a bar chart, I want to sort y axis in ascending order.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the musical table\nmusical_df = pd.read_sql(\"SELECT * FROM musical\", conn)\n\n# Convert column names to lowercase\nmusical_df.columns = musical_df.columns.str.lower()\n\n# Filter the data based on the conditions\nfiltered_df = musical_df[(musical_df['award'] == \"Tony Award\") | (musical_df['award'] == \"Cleavant Derricks\")]\n\n# Group by nominee and count the occurrences\ngrouped_df = filtered_df.groupby('nominee').size().reset_index(name='count')\n\n# Sort the data by count in ascending order\nsorted_df = grouped_df.sort_values('count', ascending=True)\n\n# Plot the bar chart\nplt.bar(sorted_df['nominee'], sorted_df['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Awards for Each Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "Create a bar chart showing how many location across location",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nparty = pd.read_sql(\"SELECT * FROM party\", conn)\nparty.columns = party.columns.str.lower()\n\n# Group by location and count the occurrences\nlocation_counts = party.groupby('location').size().reset_index(name='count')\n\n# Create a bar plot\nplt.bar(location_counts['location'], location_counts['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Party Count by Location')\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Show me a bar chart displaying the names of each furniture and the corresponding number of manufacturers.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nfurniture = pd.read_sql(\"SELECT * FROM furniture\", conn)\nfurniture_manufacte = pd.read_sql(\"SELECT * FROM furniture_manufacte\", conn)\nfurniture.columns = furniture.columns.str.lower()\nfurniture_manufacte.columns = furniture_manufacte.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(furniture, furniture_manufacte, on='furniture_id')\n\n# Perform the group by and count operation\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['name'], sorted_df['count'])\nplt.xlabel('Furniture Name')\nplt.ylabel('Count')\nplt.title('Number of Furniture by Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "Show the ids and details of the investors who have at least two transactions with type code \"SALE\" with a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the INVESTORS table\ninvestors = pd.read_sql(\"SELECT * FROM INVESTORS\", conn)\ninvestors.columns = map(str.lower, investors.columns)\n\n# Read the TRANSACTIONS table\ntransactions = pd.read_sql(\"SELECT * FROM TRANSACTIONS\", conn)\ntransactions.columns = map(str.lower, transactions.columns)\n\n# Merge the two tables on investor_id\nmerged_data = pd.merge(investors, transactions, on=\"investor_id\")\n\n# Filter the merged data for SALE transactions\nsale_transactions = merged_data[merged_data[\"transaction_type_code\"] == \"SALE\"]\n\n# Count the number of occurrences for each investor\ninvestor_counts = sale_transactions[\"investor_details\"].value_counts()\n\n# Plot the pie chart\nplt.pie(investor_counts, labels=investor_counts.index, autopct=\"%1.1f%%\")\nplt.title(\"Investor Distribution for SALE Transactions\")\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "I want to see trend of the number of creation by creation , and display from high to low by the X .",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = department.columns.str.lower()\n\n# Assuming 'department' is a DataFrame containing the table data\n\n# Grouping the data by 'creation' and counting the occurrences\ngrouped_data = department.groupby('creation').size().reset_index(name='count')\n\n# Sorting the data by 'creation' in descending order\nsorted_data = grouped_data.sort_values('creation', ascending=False)\n\n# Plotting the line chart\nplt.plot(sorted_data['creation'], sorted_data['count'])\nplt.xlabel('Creation')\nplt.ylabel('Count')\nplt.title('Line Chart of Creation Counts')\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "Give me a bar for what are the different parties of representative ? Show the party name and the number of representatives in each party , and I want to order the total number from high to low order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\nrepresentative.columns = representative.columns.str.lower()\n\n# Group by party and count the number of representatives in each party\nparty_counts = representative.groupby('party').size().reset_index(name='count')\n\n# Sort the parties by count in descending order\nparty_counts = party_counts.sort_values(by='count', ascending=False)\n\n# Create a bar plot\nplt.bar(party_counts['party'], party_counts['count'])\nplt.xlabel('Party')\nplt.ylabel('Count')\nplt.title('Number of Representatives by Party')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "What is the scatter plot of the count of ratings and the average stars for each reviewer who has the same name as the director of the movie they are rating?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nMovie = pd.read_sql(\"SELECT * FROM Movie\", conn)\nReviewer = pd.read_sql(\"SELECT * FROM Reviewer\", conn)\nRating.columns = Rating.columns.str.lower()\nMovie.columns = Movie.columns.str.lower()\nReviewer.columns = Reviewer.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(pd.merge(Rating, Movie, on='mid'), Reviewer, on='rid')\n\n# Filter rows where director is the same as reviewer's name\nfiltered_df = merged_df[merged_df['director'] == merged_df['name']]\n\n# Group by reviewer's name and calculate count and average stars\ngrouped_df = filtered_df.groupby('name').agg({'rid': 'count', 'stars': 'mean'}).reset_index()\n\n# Scatter plot\nplt.scatter(grouped_df['rid'], grouped_df['stars'])\nplt.xlabel('Number of Ratings')\nplt.ylabel('Average Stars')\nplt.title('Number of Ratings vs Average Stars by Director')\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 Visualize by bar chart , I want to list x axis in desc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry.columns = country.columns.str.lower()\n\n# Group by governmentform and calculate the sum of population\ngrouped_data = country.groupby('governmentform')['population'].sum()\n\n# Sort the data by governmentform in descending order\nsorted_data = grouped_data.sort_index(ascending=False)\n\n# Create a bar plot\nplt.bar(sorted_data.index, sorted_data.values)\n\n# Set the x-axis labels\nplt.xlabel('Government Form')\n\n# Set the y-axis label\nplt.ylabel('Population')\n\n# Set the title of the plot\nplt.title('Population by Government Form')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "Display a bar chart for the names and the ages of editors , sort Y-axis in ascending order please .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\neditor.columns = editor.columns.str.lower()\n\n# Assuming the data is already loaded into a dataframe called 'editor'\n\n# Sort the dataframe by age in ascending order\nsorted_df = editor.sort_values(by='age')\n\n# Extract the name and age columns\nname = sorted_df['name']\nage = sorted_df['age']\n\n# Create a bar plot\nplt.bar(name, age)\n\n# Add labels and title\nplt.xlabel('Name')\nplt.ylabel('Age')\nplt.title('Age Distribution')\n\n# Rotate x-axis labels if needed\nplt.xticks(rotation=90)\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Please give me a bar chart to show the market share of different furniture name, which no any company is producing in our records by a pie chart, and could you sort y axis in desc order please?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the furniture table\nfurniture = pd.read_sql(\"SELECT * FROM furniture\", conn)\n\n# Read the furniture_manufacte table\nfurniture_manufacte = pd.read_sql(\"SELECT * FROM furniture_manufacte\", conn)\n\n# Convert column names to lowercase\nfurniture.columns = furniture.columns.str.lower()\nfurniture_manufacte.columns = furniture_manufacte.columns.str.lower()\n\n# merge the two tables on furniture_id\nmerged_data = pd.merge(furniture, furniture_manufacte, on=\"furniture_id\", how=\"left\")\n\n# filter the merged data to exclude furniture_ids present in furniture_manufacte\nfiltered_data = merged_data[~merged_data[\"furniture_id\"].isin(furniture_manufacte[\"furniture_id\"])]\n\n# sort the filtered data by market_rate in descending order\nsorted_data = filtered_data.sort_values(\"market_rate\", ascending=False)\n\n# plot the bar chart\nplt.bar(sorted_data[\"name\"], sorted_data[\"market_rate\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Market Rate\")\nplt.title(\"Market Rate of Furniture\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "department_management",
    "question": "Show me mean age by born state in a bar , show Y-axis in descending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nhead = pd.read_sql(\"SELECT * FROM head\", conn)\nhead.columns = head.columns.str.lower()\n\nresult = head.groupby('born_state')['age'].mean().sort_values(ascending=False)\n\nplt.bar(result.index, result.values)\nplt.xlabel('Born State')\nplt.ylabel('Average Age')\nplt.title('Average Age by Born State')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "Show me a bar chart displaying the sale details and transaction count for each sale with an amount less than 3000.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsales = pd.read_sql(\"SELECT * FROM sales\", conn)\ntransactions = pd.read_sql(\"SELECT * FROM transactions\", conn)\nsales.columns = sales.columns.str.lower()\ntransactions.columns = transactions.columns.str.lower()\n\n# Merge sales and transactions tables\nmerged_df = pd.merge(sales, transactions, left_on='sales_transaction_id', right_on='transaction_id')\n\n# Filter data where amount_of_transaction < 3000\nfiltered_df = merged_df[merged_df['amount_of_transaction'] < 3000]\n\n# Group by sales_details and count the occurrences\ngrouped_df = filtered_df.groupby('sales_details').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['sales_details'], grouped_df['count'])\nplt.xlabel('Sales Details')\nplt.ylabel('Count')\nplt.title('Count of Sales Details with Amount < 3000')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "coffee_shop",
    "question": "Find the address and staff number of the shops that do not have any happy hour Visualize by bar chart, and order by the X-axis in desc.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the shop table\nshop_df = pd.read_sql(\"SELECT * FROM shop\", conn)\n\n# Read the happy_hour table\nhappy_hour_df = pd.read_sql(\"SELECT * FROM happy_hour\", conn)\n\n# Convert column names to lowercase\nshop_df.columns = shop_df.columns.str.lower()\nhappy_hour_df.columns = happy_hour_df.columns.str.lower()\n\n# filter the shop table based on the condition\nfiltered_shop_df = shop_df[~shop_df[\"shop_id\"].isin(happy_hour_df[\"shop_id\"])]\n\n# sort the filtered shop table by address in descending order\nsorted_shop_df = filtered_shop_df.sort_values(\"address\", ascending=False)\n\n# create the bar plot\nplt.bar(sorted_shop_df[\"address\"], sorted_shop_df[\"num_of_staff\"])\nplt.xlabel(\"Address\")\nplt.ylabel(\"Num_of_staff\")\nplt.title(\"Number of Staff in Shops without Happy Hour\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "farm",
    "question": "What is the official names of cities and the count of competitions they have hosted, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\nfarm_competition = pd.read_sql(\"SELECT * FROM farm_competition\", conn)\ncity.columns = city.columns.str.lower()\nfarm_competition.columns = farm_competition.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(city, farm_competition, left_on='city_id', right_on='host_city_id')\n\n# Group by official_name and count the number of competitions\ncompetition_count = merged_df.groupby('official_name').size().reset_index(name='competition_count')\n\n# Plot the bar chart\nplt.bar(competition_count['official_name'], competition_count['competition_count'])\nplt.xlabel('Official Name')\nplt.ylabel('Competition Count')\nplt.title('Number of Competitions by City')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "company_employee",
    "question": "Show the different headquarters and number of companies at each headquarter .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompany = pd.read_sql(\"SELECT * FROM company\", conn)\ncompany.columns = company.columns.str.lower()\n\n# Group by headquarters and count the number of companies\nheadquarters_count = company.groupby('headquarters').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(headquarters_count['headquarters'], headquarters_count['count'])\nplt.xlabel('Headquarters')\nplt.ylabel('Count')\nplt.title('Number of Companies by Headquarters')\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Bar chart x axis nominee y axis the total number , show Y in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Group by nominee and count the occurrences\ngrouped = musical.groupby('nominee').size().reset_index(name='count')\n\n# Sort by count in ascending order\nsorted_grouped = grouped.sort_values('count')\n\n# Create bar plot\nplt.bar(sorted_grouped['nominee'], sorted_grouped['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Please tell me the total star ratings of each movie title using a bar chart, and list from high to low by the y-axis.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\n\n# Convert column names to lowercase\nrating_df.columns = rating_df.columns.str.lower()\nmovie_df.columns = movie_df.columns.str.lower()\n\n# merge the rating and movie tables on mid\nmerged_df = pd.merge(rating_df, movie_df, on='mid')\n\n# group by title and calculate the sum of stars\ngrouped_df = merged_df.groupby('title')['stars'].sum().reset_index()\n\n# sort the dataframe by the sum of stars in descending order\nsorted_df = grouped_df.sort_values('stars', ascending=False)\n\n# plot the bar chart\nplt.bar(sorted_df['title'], sorted_df['stars'])\nplt.xlabel('Movie Title')\nplt.ylabel('Sum of Stars')\nplt.title('Sum of Stars by Movie Title')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "farm",
    "question": "What are the official names of cities that have hosted multiple competitions, and how many competitions have they hosted? Show the results in a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\nfarm_competition = pd.read_sql(\"SELECT * FROM farm_competition\", conn)\ncity.columns = city.columns.str.lower()\nfarm_competition.columns = farm_competition.columns.str.lower()\n\n# Joining the city and farm_competition tables\nmerged_df = pd.merge(city, farm_competition, left_on='city_id', right_on='host_city_id')\n\n# Grouping by official_name and counting the number of occurrences\ngrouped_df = merged_df.groupby('official_name').size().reset_index(name='count')\n\n# Filtering for counts greater than 1\nfiltered_df = grouped_df[grouped_df['count'] > 1]\n\n# Sorting by count in descending order\nsorted_df = filtered_df.sort_values('count', ascending=False)\n\n# Plotting the bar chart\nplt.bar(sorted_df['official_name'], sorted_df['count'])\nplt.xlabel('Official Name')\nplt.ylabel('Count')\nplt.title('Number of Farm Competitions hosted by City')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "What are the average star ratings of each movie title? Could you return me a bar chart?, rank in desc by the Y please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\nmovie_df.columns = map(str.lower, movie_df.columns)\n\n# Merge the Rating and Movie tables on mID\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Calculate the average stars for each movie title\navg_stars_df = merged_df.groupby(\"title\")[\"stars\"].mean().reset_index()\navg_stars_df = avg_stars_df.sort_values(by=\"stars\", ascending=False)\n\n# Plot the bar chart\nplt.bar(avg_stars_df[\"title\"], avg_stars_df[\"stars\"])\nplt.xlabel(\"Movie Title\")\nplt.ylabel(\"Average Stars\")\nplt.title(\"Average Stars for Each Movie\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "Can you create a pie chart displaying the breakdown and count of grants for organizations that have received more than $6000?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nGrants = pd.read_sql(\"SELECT * FROM Grants\", conn)\nOrganisations = pd.read_sql(\"SELECT * FROM Organisations\", conn)\nGrants.columns = Grants.columns.str.lower()\nOrganisations.columns = Organisations.columns.str.lower()\n\n# Merge Grants and Organisations dataframes\nmerged_df = pd.merge(Grants, Organisations, on='organisation_id')\n\n# Group by organisation_details and count the number of grants\ngrouped_df = merged_df.groupby('organisation_details').size().reset_index(name='count')\n\n# Filter organisations with grant amount > 6000\nfiltered_df = grouped_df[grouped_df['count'] > 6000]\n\n# Plot pie chart\nplt.pie(filtered_df['count'], labels=filtered_df['organisation_details'], autopct='%1.1f%%')\nplt.title('Organisations with Grant Amount > 6000')\nplt.show()"
  },
  {
    "db_id": "car_1",
    "question": "How many countries does each continent have? Return a bar chart listing the continent name and the number of countries.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the CONTINENTS table\ncontinents = pd.read_sql(\"SELECT * FROM continents\", conn)\n\n# Read the COUNTRIES table\ncountries = pd.read_sql(\"SELECT * FROM countries\", conn)\n\n# Convert column names to lowercase\ncontinents.columns = continents.columns.str.lower()\ncountries.columns = countries.columns.str.lower()\n\n# merge the continents and countries tables on the continentid column\nmerged_data = pd.merge(continents, countries, left_on='contid', right_on='continent')\n\n# group the data by continent and count the number of occurrences\ngrouped_data = merged_data.groupby('continent_x').size()\n\n# plot the bar chart\nplt.bar(grouped_data.index, grouped_data.values)\nplt.xlabel('Continent')\nplt.ylabel('Count')\nplt.title('Number of Countries per Continent')\n\n# Show the plot\nplt.show()\n"
  },
  {
    "db_id": "company_employee",
    "question": "Bar chart x axis industry y axis the number of industry",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompany = pd.read_sql(\"SELECT * FROM company\", conn)\ncompany.columns = company.columns.str.lower()\n\n# Group by industry and count the number of companies in each industry\nindustry_counts = company.groupby('industry').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(industry_counts['industry'], industry_counts['count'])\nplt.xlabel('Industry')\nplt.ylabel('Count')\nplt.title('Number of Companies by Industry')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Show all sport name and the number of students Show bar chart , could you sort by the Y-axis in ascending please ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nSportsinfo.columns = Sportsinfo.columns.str.lower()\n\n# Grouping the data by sportname and counting the occurrences\nsport_counts = Sportsinfo.groupby('sportname').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nsport_counts = sport_counts.sort_values('count')\n\n# Creating the bar plot\nplt.bar(sport_counts['sportname'], sport_counts['count'])\nplt.xlabel('Sport Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Sport Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "What are the task ids and project ids for the projects that are detailed as 'omnis' or have at least 3 outcomes? Show the information in a scatter chart.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nTasks = pd.read_sql(\"SELECT * FROM Tasks\", conn)\nProjects = pd.read_sql(\"SELECT * FROM Projects\", conn)\nProject_outcomes = pd.read_sql(\"SELECT * FROM Project_outcomes\", conn)\nTasks.columns = Tasks.columns.str.lower()\nProjects.columns = Projects.columns.str.lower()\nProject_outcomes.columns = Project_outcomes.columns.str.lower()\n\n# Merge tasks and projects dataframes\nmerged_df = pd.merge(Tasks, Projects, on='project_id')\n\n# Filter projects with project_details = 'omnis'\nfiltered_df = merged_df[merged_df['project_details'] == 'omnis']\n\n# Get project_ids with count > 2 from project_outcomes\ncount_df = Project_outcomes.groupby('project_id').size().reset_index(name='count')\nfiltered_project_ids = count_df[count_df['count'] > 2]['project_id']\n\n# Filter projects with project_ids in filtered_project_ids\nfiltered_df = pd.concat([filtered_df, merged_df[merged_df['project_id'].isin(filtered_project_ids)]])\n\n# Create scatter plot\nplt.scatter(filtered_df['task_id'], filtered_df['project_id'])\nplt.xlabel('Task ID')\nplt.ylabel('Project ID')\nplt.title('Scatter Plot of Task ID vs Project ID')\nplt.show()"
  },
  {
    "db_id": "insurance_fnol",
    "question": "How many policies are listed for the customer named \"Dayana Robel\" in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\ncustomers_policies = pd.read_sql(\"SELECT * FROM customers_policies\", conn)\ncustomers.columns = customers.columns.str.lower()\ncustomers_policies.columns = customers_policies.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(customers, customers_policies, on='customer_id')\n\n# Filter the data for customer_name = 'dayana robel'\nfiltered_df = merged_df[merged_df['customer_name'] == 'Dayana Robel']\n\n# Group by customer and count the number of policies\ngrouped_df = filtered_df.groupby('customer_name').size().reset_index(name='policies')\n\n# Plot the bar chart\nplt.bar(grouped_df['customer_name'], grouped_df['policies'])\nplt.xlabel('Customer')\nplt.ylabel('Number of Policies')\nplt.title('Number of Policies for Customer: dayana robel')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all template type codes and number of templates for each with a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Templates table into a DataFrame\ntemplates_df = pd.read_sql(\"SELECT * FROM Templates\", conn)\n\n# Convert column names to lowercase\ntemplates_df.columns = templates_df.columns.str.lower()\n\n# Group by template_type_code and count the number of occurrences\ngrouped_df = templates_df.groupby('template_type_code').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['template_type_code'], grouped_df['count'])\nplt.xlabel('Template Type Code')\nplt.ylabel('Count')\nplt.title('Number of Templates by Template Type Code')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "Show me a bar chart displaying the number of entrepreneurs for each name.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Perform the join operation\nresult = pd.merge(entrepreneur, people, on='people_id')\n\n# Group by name and count the occurrences\ngrouped = result.groupby('name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped['name'], grouped['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Number of Entrepreneurs by Name')\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Bar chart x axis duration y axis how many duration , I want to sort in desc by the bar please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nactor = pd.read_sql(\"SELECT * FROM actor\", conn)\nactor.columns = actor.columns.str.lower()\n\n# Grouping the data by duration and counting the occurrences\ngrouped_data = actor.groupby('duration').size().reset_index(name='count')\n\n# Sorting the data by duration in descending order\nsorted_data = grouped_data.sort_values('duration', ascending=False)\n\n# Creating the bar plot\nplt.bar(sorted_data['duration'], sorted_data['count'])\n\n# Adding labels and title\nplt.xlabel('Duration')\nplt.ylabel('Count')\nplt.title('Distribution of Durations')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "What are the titles of all movies that have rating star is between 3 and 5, and count them by a bar chart",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating and Movie tables\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\n\n# Convert column names to lowercase\nrating_df.columns = rating_df.columns.str.lower()\nmovie_df.columns = movie_df.columns.str.lower()\n\n# Merge the Rating and Movie tables on the mID column\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Filter the merged dataframe for stars between 3 and 5\nfiltered_df = merged_df[(merged_df[\"stars\"] >= 3) & (merged_df[\"stars\"] <= 5)]\n\n# Group by title and count the occurrences\ngrouped_df = filtered_df.groupby(\"title\").size().reset_index(name=\"count\")\n\n# Plot the bar chart\nplt.bar(grouped_df[\"title\"], grouped_df[\"count\"])\nplt.xlabel(\"Movie Title\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Ratings for Movies with Stars between 3 and 5\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "Show the number of competitions held in each city with a bar chart, and rank in descending by the y axis.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the city and farm_competition tables\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\nfarm_competition = pd.read_sql(\"SELECT * FROM farm_competition\", conn)\n\n# Convert column names to lowercase\ncity.columns = city.columns.str.lower()\nfarm_competition.columns = farm_competition.columns.str.lower()\n\n# Merge the city and farm_competition tables on City_ID and Host_city_ID columns\nmerged_data = pd.merge(city, farm_competition, left_on=\"city_id\", right_on=\"host_city_id\")\n\n# Perform the SQL query and group by Official_Name, count the occurrences, and sort in descending order\nresult = merged_data.groupby(\"official_name\").size().reset_index(name=\"count\").sort_values(\"count\", ascending=False)\n\n# Plot the bar chart\nplt.bar(result[\"official_name\"], result[\"count\"])\nplt.xlabel(\"Official Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Farm Competitions by Official Name\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Please give me a bar chart to show the market share of different furniture name, which no any company is producing in our records by a pie chart, and order in desc by the names please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the furniture table\nfurniture = pd.read_sql(\"SELECT * FROM furniture\", conn)\n\n# Read the furniture_manufacte table\nfurniture_manufacte = pd.read_sql(\"SELECT * FROM furniture_manufacte\", conn)\n\n# Convert column names to lowercase\nfurniture.columns = furniture.columns.str.lower()\nfurniture_manufacte.columns = furniture_manufacte.columns.str.lower()\n\n# merge the two tables on furniture_id\nmerged_data = pd.merge(furniture, furniture_manufacte, on='furniture_id', how='left')\n\n# filter the merged data to exclude furniture_ids present in furniture_manufacte\nfiltered_data = merged_data[~merged_data['furniture_id'].isin(furniture_manufacte['furniture_id'])]\n\n# sort the filtered data by name in descending order\nsorted_data = filtered_data.sort_values('name', ascending=False)\n\n# plot the bar chart\nplt.bar(sorted_data['name'], sorted_data['market_rate'])\nplt.xlabel('Name')\nplt.ylabel('Market Rate')\nplt.title('Market Rate of Furniture (Excluding Manufactured Furniture)')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "musical",
    "question": "Calculate the number of actors in each duration of actors using a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nactor = pd.read_sql(\"SELECT * FROM actor\", conn)\nactor.columns = actor.columns.str.lower()\n\n# Group by duration and count the occurrences\nduration_counts = actor.groupby('duration').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(duration_counts['duration'], duration_counts['count'])\nplt.xlabel('Duration')\nplt.ylabel('Count')\nplt.title('Distribution of Duration')\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Show me a pie chart for what are the different ship flags, and how many ships have each?",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ship table\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\n\n# Perform the SQL query\nresult = ship_df.groupby('flag').size()\n\n# Plot the pie chart\nplt.pie(result, labels=result.index, autopct='%1.1f%%')\nplt.title('Ship Flags')\nplt.show()"
  },
  {
    "db_id": "school_player",
    "question": "For each denomination, return the denomination and the count of schools with that denomination. Visualize by bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"school\" table\nschool_data = pd.read_sql(\"SELECT * FROM school\", conn)\n\n# Convert column names to lowercase\nschool_data.columns = school_data.columns.str.lower()\n\n# Perform the SQL query\ndenomination_counts = school_data.groupby('denomination').size().reset_index(name='count')\n\n# Generate the bar plot\nplt.bar(denomination_counts['denomination'], denomination_counts['count'])\nplt.xlabel('Denomination')\nplt.ylabel('Count')\nplt.title('Number of Schools by Denomination')\nplt.show()"
  },
  {
    "db_id": "coffee_shop",
    "question": "Find the number of members living in each address. Show bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the member table\nmember_df = pd.read_sql(\"SELECT * FROM member\", conn)\n\n# Convert column names to lowercase\nmember_df.columns = member_df.columns.str.lower()\n\n# Group by address and count the number of occurrences\ngrouped_df = member_df.groupby('address').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['address'], grouped_df['count'])\nplt.xlabel('Address')\nplt.ylabel('Count')\nplt.title('Number of Members by Address')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "What are the types of competition and number of competitions for that type . Show bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the number of occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Create a bar plot\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Type')\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Find the number of funiture types produced by each manufacturer as well as the company names Show bar chart, and could you display by the x-axis in desc please?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the manufacturer table\nmanufacturer = pd.read_sql(\"SELECT * FROM manufacturer\", conn)\nmanufacturer.columns = map(str.lower, manufacturer.columns)\n\n# Read the furniture_manufacte table\nfurniture_manufacte = pd.read_sql(\"SELECT * FROM furniture_manufacte\", conn)\nfurniture_manufacte.columns = map(str.lower, furniture_manufacte.columns)\n\n# Merge the two tables on manufacturer_id\nmerged_data = pd.merge(manufacturer, furniture_manufacte, on=\"manufacturer_id\")\n\n# Perform the group by and count\ngrouped_data = merged_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# Sort the data by name in descending order\nsorted_data = grouped_data.sort_values(\"name\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"name\"], sorted_data[\"count\"])\nplt.xlabel(\"Manufacturer Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Furniture by Manufacturer\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Find the component amounts and names of all furnitures that have more than 10 components , order by the Num_of_Component in descending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nfurniture = pd.read_sql(\"SELECT * FROM furniture\", conn)\nfurniture.columns = furniture.columns.str.lower()\n\n# Filter the furniture dataframe\nfiltered_furniture = furniture[furniture['num_of_component'] > 10]\n\n# Sort the filtered dataframe by num_of_component in descending order\nsorted_furniture = filtered_furniture.sort_values('num_of_component', ascending=False)\n\n# Create the bar plot\nplt.bar(sorted_furniture['name'], sorted_furniture['num_of_component'])\n\n# Set the x-axis label\nplt.xlabel('Name')\n\n# Set the y-axis label\nplt.ylabel('Number of Components')\n\n# Set the title of the plot\nplt.title('Furniture with Number of Components > 10')\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "How many stars has each reviewer given to movies directed by themselves, and what is the count of ratings for each reviewer? Show the results in a bar chart.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nMovie = pd.read_sql(\"SELECT * FROM Movie\", conn)\nReviewer = pd.read_sql(\"SELECT * FROM Reviewer\", conn)\nRating.columns = Rating.columns.str.lower()\nMovie.columns = Movie.columns.str.lower()\nReviewer.columns = Reviewer.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(pd.merge(Rating, Movie, on='mid'), Reviewer, on='rid')\n\n# Filtering the data based on the condition\nfiltered_df = merged_df[merged_df['director'] == merged_df['name']]\n\n# Grouping the data and counting the stars\ngrouped_df = filtered_df.groupby('name').count()['stars'].reset_index()\n\n# Sorting the data in descending order\nsorted_df = grouped_df.sort_values(by='stars', ascending=False)\n\n# Plotting the bar chart\nplt.bar(sorted_df['name'], sorted_df['stars'])\nplt.xlabel('Director')\nplt.ylabel('Number of Stars')\nplt.title('Number of Stars by Director')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "Show the average amount of transactions for different lots, ordered by average amount of transactions. Show scatter chart.",
    "chart": "Scatter",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the TRANSACTIONS table\ntransactions = pd.read_sql(\"SELECT * FROM TRANSACTIONS\", conn)\n\n# Read the Transactions_Lots table\ntransactions_lots = pd.read_sql(\"SELECT * FROM Transactions_Lots\", conn)\n\n# Convert column names to lowercase\ntransactions.columns = transactions.columns.str.lower()\ntransactions_lots.columns = transactions_lots.columns.str.lower()\n\n# merge the two tables on transaction_id\nmerged_data = pd.merge(transactions, transactions_lots, on=\"transaction_id\")\n\n# calculate the average amount_of_transaction for each lot_id\navg_amount_by_lot = merged_data.groupby(\"lot_id\")[\"amount_of_transaction\"].mean().reset_index()\n\n# sort the data by average amount_of_transaction\nsorted_data = avg_amount_by_lot.sort_values(\"amount_of_transaction\")\n\n# create a scatter plot\nplt.scatter(sorted_data[\"lot_id\"], sorted_data[\"amount_of_transaction\"])\nplt.xlabel(\"Lot ID\")\nplt.ylabel(\"Average Amount of Transaction\")\nplt.title(\"Scatter Plot of Average Amount of Transaction by Lot ID\")\n\n# Show the plot\nplt.show()\n"
  },
  {
    "db_id": "ship_1",
    "question": "What is the count of captains with the ranks of Midshipman and Lieutenant for each rank, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\nship.columns = ship.columns.str.lower()\ncaptain.columns = captain.columns.str.lower()\n\n# Joining the ship and captain tables\nmerged_df = pd.merge(ship, captain, on='ship_id')\n\n# Filtering the data for ranks 'Midshipman' and 'Lieutenant'\nfiltered_df = merged_df[merged_df['rank'].isin(['Midshipman', 'Lieutenant'])]\n\n# Grouping the data by rank and counting the number of occurrences\ngrouped_df = filtered_df.groupby('rank').size().reset_index(name='count')\n\n# Creating the bar plot\nplt.bar(grouped_df['rank'], grouped_df['count'])\nplt.xlabel('Rank')\nplt.ylabel('Count')\nplt.title('Number of Ships by Rank')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Show the number of different competition types with a bar graph .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Competition Type Counts')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "List the position of players and the average number of points of players of each position Visualize by bar chart , and order by the names in descending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nplayer.columns = player.columns.str.lower()\n\n# Calculate average points by position\navg_points = player.groupby('position')['points'].mean()\n\n# Sort positions in descending order\navg_points = avg_points.sort_index(ascending=False)\n\n# Create bar plot\nplt.bar(avg_points.index, avg_points.values)\n\n# Set labels and title\nplt.xlabel('Position')\nplt.ylabel('Average Points')\nplt.title('Average Points by Position')\n\n# Show plot\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Show all sport name and the number of students . Show bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nSportsinfo.columns = Sportsinfo.columns.str.lower()\n\n# Grouping the data by sportname and counting the occurrences\nsport_counts = Sportsinfo.groupby('sportname').size().reset_index(name='count')\n\n# Creating the bar plot\nplt.bar(sport_counts['sportname'], sport_counts['count'])\nplt.xlabel('Sport Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Sport')\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "Bar chart of the total number from each party, and could you order by the bars in asc?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the representative table\nrepresentative_df = pd.read_sql(\"SELECT * FROM representative\", conn)\n\n# Convert column names to lowercase\nrepresentative_df.columns = map(str.lower, representative_df.columns)\n\n# Perform the SQL query\nparty_counts = representative_df.groupby('party').size().reset_index(name='count')\nparty_counts = party_counts.sort_values('party')\n\n# Generate the bar plot\nplt.bar(party_counts['party'], party_counts['count'])\nplt.xlabel('Party')\nplt.ylabel('Count')\nplt.title('Number of Representatives by Party')\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "Can you create a pie chart to visually represent the count of representatives for each party in the election?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nelection = pd.read_sql(\"SELECT * FROM election\", conn)\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\nelection.columns = election.columns.str.lower()\nrepresentative.columns = representative.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(election, representative, on='representative_id')\n\n# Group by party and count the number of occurrences\nparty_counts = merged_df['party'].value_counts()\n\n# Create a pie chart\nplt.pie(party_counts, labels=party_counts.index, autopct='%1.1f%%')\nplt.title('Party Distribution')\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "What are the statuses and average populations of each city Plot them as bar chart , and show in descending by the Y-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncity.columns = city.columns.str.lower()\n\n# Group by status and calculate average population\ngrouped_city = city.groupby('status')['population'].mean()\n\n# Sort by average population in descending order\nsorted_city = grouped_city.sort_values(ascending=False)\n\n# Create bar plot\nplt.bar(sorted_city.index, sorted_city.values)\n\n# Set labels and title\nplt.xlabel('Status')\nplt.ylabel('Average Population')\nplt.title('Average Population by Status')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "school_player",
    "question": "Create a bar chart showing the total number across denomination , and rank by the Denomination in asc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nschool = pd.read_sql(\"SELECT * FROM school\", conn)\nschool.columns = school.columns.str.lower()\n\n# Grouping the data by denomination and counting the number of occurrences\ndenomination_counts = school.groupby('denomination').size().reset_index(name='count')\n\n# Sorting the data by denomination in ascending order\ndenomination_counts = denomination_counts.sort_values('denomination')\n\n# Creating a bar plot\nplt.bar(denomination_counts['denomination'], denomination_counts['count'])\nplt.xlabel('Denomination')\nplt.ylabel('Count')\nplt.title('Number of Schools by Denomination')\nplt.show()"
  },
  {
    "db_id": "county_public_safety",
    "question": "What is the distribution of cities in each white percentage range, and how do the corresponding crime rates of the counties they correspond to vary? Show a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncounty_public_safety = pd.read_sql(\"SELECT * FROM county_public_safety\", conn)\ncity.columns = city.columns.str.lower()\ncounty_public_safety.columns = county_public_safety.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(city, county_public_safety, on='county_id')\n\n# Create a new column 'white_range' based on the 'white' column values\nmerged_df['white_range'] = pd.cut(merged_df['white'], bins=[0, 25, 50, 75, 100], labels=['0-24.9%', '25-49.9%', '50-74.9%', '75-100%'])\n\n# Group by 'white_range' and count the number of occurrences\ngrouped_df = merged_df.groupby('white_range').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['white_range'], autopct='%1.1f%%')\nplt.title('Distribution of White Population')\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Show different nominees and the number of musicals they have been nominated in a bar chart , I want to order by the X in desc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Group by nominee and count the occurrences\ngrouped = musical.groupby('nominee').size().reset_index(name='count')\n\n# Sort by nominee in descending order\ngrouped = grouped.sort_values('nominee', ascending=False)\n\n# Create bar plot\nplt.bar(grouped['nominee'], grouped['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "school_player",
    "question": "Create a bar chart showing the total number across denomination , and could you show y-axis in ascending order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nschool = pd.read_sql(\"SELECT * FROM school\", conn)\nschool.columns = school.columns.str.lower()\n\n# Group by denomination and count the number of occurrences\ndenomination_counts = school.groupby('denomination').size().reset_index(name='count')\n\n# Sort the counts in ascending order\ndenomination_counts = denomination_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(denomination_counts['denomination'], denomination_counts['count'])\nplt.xlabel('Denomination')\nplt.ylabel('Count')\nplt.title('Number of Schools by Denomination')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Show the number of heads of departments born in each state with a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"head\" table\nhead_data = pd.read_sql(\"SELECT * FROM head\", conn)\n\n# Convert column names to lowercase\nhead_data.columns = map(str.lower, head_data.columns)\n\n# Perform the SQL query\nborn_state_counts = head_data.groupby('born_state').size()\n\n# Plot the pie chart\nplt.pie(born_state_counts, labels=born_state_counts.index, autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "company_employee",
    "question": "Show the different headquarters and number of companies at each headquarter with a bar chart , list bars from low to high order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompany = pd.read_sql(\"SELECT * FROM company\", conn)\ncompany.columns = company.columns.str.lower()\n\n# Group by headquarters and count the number of companies\nheadquarters_count = company.groupby('headquarters').size().reset_index(name='count')\n\n# Sort the data by headquarters in ascending order\nheadquarters_count = headquarters_count.sort_values('headquarters')\n\n# Create a bar plot\nplt.bar(headquarters_count['headquarters'], headquarters_count['count'])\nplt.xlabel('Headquarters')\nplt.ylabel('Count')\nplt.title('Number of Companies by Headquarters')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Which movie, according to the number of ratings, takes the top spot on the bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nMovie = pd.read_sql(\"SELECT * FROM Movie\", conn)\nRating.columns = Rating.columns.str.lower()\nMovie.columns = Movie.columns.str.lower()\n\n# Joining the Rating and Movie tables\nmerged_df = pd.merge(Rating, Movie, on='mid')\n\n# Grouping by title and counting the number of ratings\nrating_count = merged_df.groupby('title').size().reset_index(name='rating_count')\n\n# Sorting by rating count in descending order and selecting the top 1\ntop_movie = rating_count.sort_values('rating_count', ascending=False).head(1)\n\n# Plotting the bar chart\nplt.bar(top_movie['title'], top_movie['rating_count'])\nplt.xlabel('Movie Title')\nplt.ylabel('Rating Count')\nplt.title('Top Movie by Rating Count')\nplt.show()"
  },
  {
    "db_id": "company_employee",
    "question": "Bar chart x axis industry y axis the number of industry , order by the Industry from high to low .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompany = pd.read_sql(\"SELECT * FROM company\", conn)\ncompany.columns = company.columns.str.lower()\n\n# Group by industry and count the number of companies in each industry\nindustry_counts = company.groupby('industry').size().reset_index(name='count')\n\n# Sort the dataframe by industry in descending order\nindustry_counts = industry_counts.sort_values('industry', ascending=False)\n\n# Create a bar plot\nplt.bar(industry_counts['industry'], industry_counts['count'])\nplt.xlabel('Industry')\nplt.ylabel('Count')\nplt.title('Number of Companies by Industry')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "Bar chart x axis name y axis how many name , sort by the X-axis in descending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\neditor.columns = editor.columns.str.lower()\n\n# Assuming the table data is stored in a DataFrame called 'editor'\n\n# Perform the SQL query\nresult = editor.groupby('name').size().reset_index(name='count').sort_values('name', ascending=False)\n\n# Create the bar plot\nplt.bar(result['name'], result['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Count of Names')\nplt.show()"
  },
  {
    "db_id": "school_player",
    "question": "Show me a bar chart displaying the number of players in each team.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nschool = pd.read_sql(\"SELECT * FROM school\", conn)\nplayer.columns = player.columns.str.lower()\nschool.columns = school.columns.str.lower()\n\n# Perform the join operation\nmerged_data = pd.merge(player, school, on='school_id')\n\n# Group by team and count the number of players in each team\nteam_counts = merged_data.groupby('team').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(team_counts['team'], team_counts['count'])\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Number of Players in Each Team')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Plot the total number by grouped by competition type as a bar graph , and order X in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the number of occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort the dataframe by competition_type in ascending order\ncompetition_counts = competition_counts.sort_values('competition_type')\n\n# Create a bar plot\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Type')\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Compare the total number of captains with different classes using a bar graph .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\ncaptain.columns = captain.columns.str.lower()\n\n# Group by 'class' and count the occurrences\nclass_counts = captain.groupby('class').size()\n\n# Create a bar plot\nplt.bar(class_counts.index, class_counts.values)\n\n# Set the labels and title\nplt.xlabel('Class')\nplt.ylabel('Count')\nplt.title('Count of Class')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "Return the number of music festivals of each category, show by the Category in desc.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the music_festival table\nmusic_festival = pd.read_sql(\"SELECT * FROM music_festival\", conn)\n\n# Convert column names to lowercase\nmusic_festival.columns = music_festival.columns.str.lower()\n\n# Perform the SQL query\nresult = music_festival.groupby('category').size().reset_index(name='count').sort_values('category', ascending=False)\n\n# Generate the bar plot\nplt.bar(result['category'], result['count'])\nplt.xlabel('Category')\nplt.ylabel('Count')\nplt.title('Music Festival by Category')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "What are the types of competition and number of competitions for that type Show bar chart , I want to display by the X-axis in descending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the number of occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort the dataframe by competition_type in descending order\ncompetition_counts = competition_counts.sort_values('competition_type', ascending=False)\n\n# Create a bar plot\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Type')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "How many templates with version number later than 5 for each template type code? Show me a bar chart, I want to sort by the bars in asc.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Templates table into a DataFrame\ntemplates_df = pd.read_sql(\"SELECT * FROM Templates\", conn)\n\n# Convert column names to lowercase\ntemplates_df.columns = templates_df.columns.str.lower()\n\n# Filter the DataFrame for version_number > 5\nfiltered_df = templates_df[templates_df['version_number'] > 5]\n\n# Group by Template_Type_Code and count occurrences\ngrouped_df = filtered_df.groupby('template_type_code').size().reset_index(name='count')\n\n# Sort by Template_Type_Code in ascending order\nsorted_df = grouped_df.sort_values('template_type_code')\n\n# Generate the bar plot\nplt.bar(sorted_df['template_type_code'], sorted_df['count'])\nplt.xlabel('Template Type Code')\nplt.ylabel('Count')\nplt.title('Template Type Code Counts')\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Show sum of budget in different year and group by department creation time with a line chart.",
    "chart": "Line",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the department table\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\n\n# Convert column names to lowercase\ndepartment.columns = department.columns.str.lower()\n\n# Perform the SQL query\nresult = department.groupby('creation')['budget_in_billions'].sum()\n\n# Create the line plot\nplt.plot(result.index, result.values)\nplt.xlabel('Creation')\nplt.ylabel('Total Budget (in Billions)')\nplt.title('Total Budget by Creation')\nplt.show()"
  },
  {
    "db_id": "voter_2",
    "question": "What is the distribution of male students who had class senator votes in the fall election cycle, represented by a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nVOTING_RECORD = pd.read_sql(\"SELECT * FROM VOTING_RECORD\", conn)\nSTUDENT.columns = STUDENT.columns.str.lower()\nVOTING_RECORD.columns = VOTING_RECORD.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(STUDENT, VOTING_RECORD, left_on='stuid', right_on='class_senator_vote')\n\n# Filter the data\nfiltered_df = merged_df[(merged_df['sex'] == 'M') & (merged_df['election_cycle'] == 'Fall')]\n\n# Group by sex and count the number of records\ngrouped_df = filtered_df.groupby('sex').size().reset_index(name='count')\n\n# Create a pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['sex'], autopct='%1.1f%%')\nplt.title('Male Students Voting Record in Fall')\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Bar chart of the total number from each location , I want to sort by the bars from high to low .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\nperformance.columns = performance.columns.str.lower()\n\n# Group by location and count the number of occurrences\nlocation_counts = performance.groupby('location').size().reset_index(name='count')\n\n# Sort the data by location in descending order\nlocation_counts = location_counts.sort_values('location', ascending=False)\n\n# Create a bar plot\nplt.bar(location_counts['location'], location_counts['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Performances by Location')\nplt.show()"
  },
  {
    "db_id": "riding_club",
    "question": "Bar chart x axis occupation y axis how many occupation, and rank by the y-axis from low to high.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the player table\nplayer_df = pd.read_sql(\"SELECT * FROM player\", conn)\n\n# Convert column names to lowercase\nplayer_df.columns = player_df.columns.str.lower()\n\n# Perform the SQL query\noccupation_count = player_df.groupby('occupation').size().reset_index(name='count')\noccupation_count = occupation_count.sort_values('count')\n\n# Generate the bar plot\nplt.bar(occupation_count['occupation'], occupation_count['count'])\nplt.xlabel('Occupation')\nplt.ylabel('Count')\nplt.title('Occupation Count')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "How many party hosts are there for each age group, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nparty_host = pd.read_sql(\"SELECT * FROM party_host\", conn)\nHOST = pd.read_sql(\"SELECT * FROM HOST\", conn)\nparty_host.columns = party_host.columns.str.lower()\nHOST.columns = HOST.columns.str.lower()\n\n# Joining the tables\ndf = pd.merge(party_host, HOST, on='host_id')\n\n# Grouping by age and counting the number of occurrences\ndf_grouped = df.groupby('age').size().reset_index(name='count')\n\n# Plotting the pie chart\nplt.pie(df_grouped['count'], labels=df_grouped['age'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Please tell me the total star ratings of each movie title using a bar chart, I want to show in descending by the X.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\nmovie_df.columns = map(str.lower, movie_df.columns)\n\n# Merge the Rating and Movie tables on mID column\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Group by title and calculate the sum of stars\ngrouped_df = merged_df.groupby(\"title\").stars.sum().reset_index()\n\n# Sort the dataframe by title in descending order\nsorted_df = grouped_df.sort_values(\"title\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df[\"title\"], sorted_df[\"stars\"])\nplt.xlabel(\"Movie Title\")\nplt.ylabel(\"Total Stars\")\nplt.title(\"Total Stars by Movie Title\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Show me a bar chart of the game names and total hours played for games that have been played for at least 1000 hours, sorted in descending order of total hours played.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nPlays_games = pd.read_sql(\"SELECT * FROM Plays_games\", conn)\nVideo_games = pd.read_sql(\"SELECT * FROM Video_games\", conn)\nPlays_games.columns = Plays_games.columns.str.lower()\nVideo_games.columns = Video_games.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Plays_games, Video_games, on='gameid')\n\n# Group by gameid and calculate the sum of hours_played\ngrouped_df = merged_df.groupby('gameid').agg({'gname': 'first', 'hours_played': 'sum'})\n\n# Filter the games with sum(hours_played) >= 1000\nfiltered_df = grouped_df[grouped_df['hours_played'] >= 1000]\n\n# Sort the filtered dataframe by sum(hours_played) in descending order\nsorted_df = filtered_df.sort_values('hours_played', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['gname'], sorted_df['hours_played'])\nplt.xlabel('Game Name')\nplt.ylabel('Total Hours Played')\nplt.title('Total Hours Played by Game')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Show different locations and the number of performances at each location by a bar chart, and could you list from low to high by the Y?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the performance table\nperformance_df = pd.read_sql(\"SELECT * FROM performance\", conn)\n\n# Convert column names to lowercase\nperformance_df.columns = performance_df.columns.str.lower()\n\n# Perform the query\nresult_df = performance_df.groupby('location').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar plot\nplt.bar(result_df['location'], result_df['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Performances by Location')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Give me a bar chart for mean points of each position",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nplayer.columns = player.columns.str.lower()\n\n# Calculate average points by position\navg_points_by_position = player.groupby('position')['points'].mean()\n\n# Create bar plot\nplt.bar(avg_points_by_position.index, avg_points_by_position.values)\nplt.xlabel('Position')\nplt.ylabel('Average Points')\nplt.title('Average Points by Position')\nplt.show()"
  },
  {
    "db_id": "riding_club",
    "question": "Show different occupations along with the number of players in each occupation Show bar chart, show in ascending by the bar.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the player table\nplayer_df = pd.read_sql(\"SELECT * FROM player\", conn)\n\n# Convert column names to lowercase\nplayer_df.columns = player_df.columns.str.lower()\n\n# Perform the SQL query\noccupation_count = player_df.groupby('occupation').size().reset_index(name='count')\noccupation_count = occupation_count.sort_values('occupation')\n\n# Generate the bar plot\nplt.bar(occupation_count['occupation'], occupation_count['count'])\nplt.xlabel('Occupation')\nplt.ylabel('Count')\nplt.title('Number of Players by Occupation')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "A bar chart for how many competitions for each country, and display bars from high to low order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the competition table\ncompetition_df = pd.read_sql(\"SELECT * FROM competition\", conn)\n\n# Convert column names to lowercase\ncompetition_df.columns = competition_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = competition_df.groupby('country').size().reset_index(name='count').sort_values('country', ascending=False)\n\n# Generate the bar chart\nplt.bar(result_df['country'], result_df['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Competition by Country')\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "A bar chart for returning the number of the categories of music festivals that have the result \"Awarded\", sort from low to high by the x-axis.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the music_festival table\nmusic_festival = pd.read_sql(\"SELECT * FROM music_festival\", conn)\n\n# Convert column names to lowercase\nmusic_festival.columns = music_festival.columns.str.lower()\n\n# Filter the data for \"Awarded\" results\nawarded_data = music_festival[music_festival[\"result\"] == \"Awarded\"]\n\n# Group by category and count the occurrences\ncategory_counts = awarded_data.groupby(\"category\").size().reset_index(name=\"count\")\n\n# Sort the data by category in ascending order\ncategory_counts = category_counts.sort_values(\"category\")\n\n# Create a bar plot\nplt.bar(category_counts[\"category\"], category_counts[\"count\"])\nplt.xlabel(\"Category\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Awards by Category\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "Return the number of music festivals of each category in a bar chart, and sort X in ascending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the music_festival table\nmusic_festival = pd.read_sql(\"SELECT * FROM music_festival\", conn)\n\n# Convert column names to lowercase\nmusic_festival.columns = music_festival.columns.str.lower()\n\n# Perform the SQL query\nresult = music_festival.groupby('category').size().reset_index(name='count').sort_values('category')\n\n# Generate the bar plot\nplt.bar(result['category'], result['count'])\nplt.xlabel('Category')\nplt.ylabel('Count')\nplt.title('Music Festival by Category')\nplt.show()"
  },
  {
    "db_id": "school_player",
    "question": "What is the school denomination with the highest number of players, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nschool = pd.read_sql(\"SELECT * FROM school\", conn)\nplayer.columns = player.columns.str.lower()\nschool.columns = school.columns.str.lower()\n\n# Perform the join operation\nmerged_data = pd.merge(player, school, on='school_id')\n\n# Group by denomination and count the number of players\ngrouped_data = merged_data.groupby('denomination').size().reset_index(name='count')\n\n# Sort the data by count in descending order\nsorted_data = grouped_data.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data['denomination'], sorted_data['count'])\nplt.xlabel('Denomination')\nplt.ylabel('Count')\nplt.title('Number of Players by Denomination')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "A bar chart about how many captains are in each rank?, and I want to list in ascending by the Y-axis.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the captain table\ncaptain_df = pd.read_sql(\"SELECT * FROM captain\", conn)\n\n# Convert column names to lowercase\ncaptain_df.columns = captain_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = captain_df.groupby('rank').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar plot\nplt.bar(result_df['rank'], result_df['count'])\nplt.xlabel('Rank')\nplt.ylabel('Count')\nplt.title('Count of Captains by Rank')\nplt.show()"
  },
  {
    "db_id": "scientist_1",
    "question": "Find the number of scientists involved for the projects that require more than 300 hours. Show bar chart.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the projects table\nprojects = pd.read_sql(\"SELECT * FROM projects\", conn)\nprojects.columns = map(str.lower, projects.columns)\n\n# Read the assignedto table\nassignedto = pd.read_sql(\"SELECT * FROM assignedto\", conn)\nassignedto.columns = map(str.lower, assignedto.columns)\n\n# Merge the projects and assignedto tables\nmerged = pd.merge(projects, assignedto, left_on=\"code\", right_on=\"project\")\n\n# Filter the merged table based on hours > 300\nfiltered = merged[merged[\"hours\"] > 300]\n\n# Group by name and count the occurrences\ngrouped = filtered.groupby(\"name\").size().reset_index(name=\"count\")\n\n# Plot the bar chart\nplt.bar(grouped[\"name\"], grouped[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Projects with Hours > 300\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Visualize a bar chart for what are the different template type codes , and how many templates correspond to each ? , and could you show in desc by the x axis ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nTemplates = pd.read_sql(\"SELECT * FROM Templates\", conn)\nTemplates.columns = Templates.columns.str.lower()\n\n# Grouping the data by template_type_code and counting the occurrences\ntemplate_counts = Templates.groupby('template_type_code').size().reset_index(name='count')\n\n# Sorting the data by template_type_code in descending order\ntemplate_counts = template_counts.sort_values('template_type_code', ascending=False)\n\n# Creating the bar plot\nplt.bar(template_counts['template_type_code'], template_counts['count'])\nplt.xlabel('Template Type Code')\nplt.ylabel('Count')\nplt.title('Template Type Counts')\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 , and list X-axis in desc order please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry.columns = country.columns.str.lower()\n\n# Group by governmentform and calculate the sum of population\ngrouped_data = country.groupby('governmentform')['population'].sum()\n\n# Sort the data by governmentform in descending order\nsorted_data = grouped_data.sort_index(ascending=False)\n\n# Create a bar plot\nplt.bar(sorted_data.index, sorted_data.values)\n\n# Set the labels and title\nplt.xlabel('Government Form')\nplt.ylabel('Population')\nplt.title('Population by Government Form')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Show me a bar chart displaying the names of different reviewers who rated Gone with the Wind and the frequency of their ratings.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nMovie = pd.read_sql(\"SELECT * FROM Movie\", conn)\nReviewer = pd.read_sql(\"SELECT * FROM Reviewer\", conn)\nRating.columns = Rating.columns.str.lower()\nMovie.columns = Movie.columns.str.lower()\nReviewer.columns = Reviewer.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(pd.merge(Rating, Movie, on='mid'), Reviewer, on='rid')\n\n# Filtering the data for the movie 'Gone with the Wind'\nfiltered_df = merged_df[merged_df['title'] == 'Gone with the Wind']\n\n# Grouping by reviewer name and counting the number of ratings\ngrouped_df = filtered_df.groupby('name').size().reset_index(name='count')\n\n# Sorting the data by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plotting the bar chart\nplt.bar(sorted_df['name'], sorted_df['count'])\nplt.xlabel('Reviewer Name')\nplt.ylabel('Count')\nplt.title('Number of Ratings for \"Gone with the Wind\" by Reviewer')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "how many actors have appeared in each musical?, order x-axis in ascending order please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the actor and musical tables\nactor_df = pd.read_sql(\"SELECT * FROM actor\", conn)\nmusical_df = pd.read_sql(\"SELECT * FROM musical\", conn)\n\n# Convert column names to lowercase\nactor_df.columns = actor_df.columns.str.lower()\nmusical_df.columns = musical_df.columns.str.lower()\n\n# Merge the actor and musical tables on Musical_ID\nmerged_df = pd.merge(actor_df, musical_df, on=\"musical_id\")\n\n# Group by musical_id and count the number of actors\ngrouped_df = merged_df.groupby(\"musical_id\").size().reset_index(name=\"count\")\n\n# Join with musical table to get musical names\ngrouped_df = pd.merge(grouped_df, musical_df[[\"musical_id\", \"name\"]], on=\"musical_id\")\n\n# Sort the dataframe by musical name\nsorted_df = grouped_df.sort_values(\"name\")\n\n# Create a bar plot\nplt.bar(sorted_df[\"name\"], sorted_df[\"count\"])\nplt.xlabel(\"Musical Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Actors in Each Musical\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "entrepreneur",
    "question": "Can you create a pie chart to display the distribution of entrepreneurs based on their weight range?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(entrepreneur, people, on='people_id')\n\n# Create a new column 'weight_range' based on the weight value\nmerged_df['weight_range'] = pd.cut(merged_df['weight'], bins=[0, 50, 100, float('inf')], labels=['0-50', '51-100', '>100'])\n\n# Group by 'weight_range' and count the occurrences\ngrouped_df = merged_df.groupby('weight_range').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['weight_range'], autopct='%1.1f%%')\nplt.title('Weight Range Distribution')\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "Show the ids and details of the investors who have at least two transactions with type code \"SALE\" by a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the INVESTORS table\ninvestors = pd.read_sql(\"SELECT * FROM INVESTORS\", conn)\ninvestors.columns = map(str.lower, investors.columns)\n\n# Read the TRANSACTIONS table\ntransactions = pd.read_sql(\"SELECT * FROM TRANSACTIONS\", conn)\ntransactions.columns = map(str.lower, transactions.columns)\n\n# Merge the two tables on investor_id\nmerged_data = pd.merge(investors, transactions, on=\"investor_id\")\n\n# Filter the merged data for SALE transactions\nsale_transactions = merged_data[merged_data[\"transaction_type_code\"] == \"SALE\"]\n\n# Count the number of occurrences for each investor\ninvestor_counts = sale_transactions[\"investor_details\"].value_counts()\n\n# Plot the bar chart\nplt.bar(investor_counts.index, investor_counts.values)\nplt.xlabel(\"Investor Details\")\nplt.ylabel(\"Number of Sales\")\nplt.title(\"Number of Sales per Investor\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Show the title and the lowest rating among all movies in a bar chart, list in ascending by the bars.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\nmovie_df.columns = map(str.lower, movie_df.columns)\n\n# Merge the Rating and Movie tables on mID column\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Group by title and calculate the minimum stars for each movie\ngrouped_df = merged_df.groupby(\"title\")[\"stars\"].min().reset_index()\n\n# Sort the dataframe by title in ascending order\nsorted_df = grouped_df.sort_values(\"title\", ascending=True)\n\n# Plot the bar chart\nplt.bar(sorted_df[\"title\"], sorted_df[\"stars\"])\nplt.xlabel(\"Movie Title\")\nplt.ylabel(\"Minimum Stars\")\nplt.title(\"Minimum Stars for Each Movie\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the number of documents for each document name? Return a bar chart, and display by the names in descending please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the Paragraphs table\nparagraphs = pd.read_sql(\"SELECT * FROM Paragraphs\", conn)\n\n# Read the data from the Documents table\ndocuments = pd.read_sql(\"SELECT * FROM Documents\", conn)\n\n# Convert column names to lowercase\nparagraphs.columns = paragraphs.columns.str.lower()\ndocuments.columns = documents.columns.str.lower()\n\n# merge the two tables on the document_id column\nmerged_data = pd.merge(paragraphs, documents, on=\"document_id\")\n\n# group the data by document_name and count the number of occurrences\ngrouped_data = merged_data.groupby(\"document_name\").size().reset_index(name=\"count\")\n\n# sort the data by document_name in descending order\nsorted_data = grouped_data.sort_values(\"document_name\", ascending=False)\n\n# plot the bar chart\nplt.bar(sorted_data[\"document_name\"], sorted_data[\"count\"])\nplt.xlabel(\"Document Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Paragraphs per Document\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "ship_1",
    "question": "What is the total number of flags of ships that do not have a captain with the rank of Midshipman? Show the result using a bar chart, and rank by the X-axis in descending.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ship table\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Read the captain table\ncaptain_df = pd.read_sql(\"SELECT * FROM captain\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\ncaptain_df.columns = captain_df.columns.str.lower()\n\n# filter ship_ids based on captain's rank\nfiltered_ship_ids = captain_df[captain_df['rank'] == 'Midshipman']['ship_id']\n\n# filter ship table based on ship_ids\nfiltered_ship_df = ship_df[~ship_df['ship_id'].isin(filtered_ship_ids)]\n\n# group by flag and count the occurrences\ngrouped_df = filtered_ship_df.groupby('flag').size().reset_index(name='count')\n\n# sort by flag in descending order\nsorted_df = grouped_df.sort_values('flag', ascending=False)\n\n# plot the bar chart\nplt.bar(sorted_df['flag'], sorted_df['count'])\nplt.xlabel('Flag')\nplt.ylabel('Count')\nplt.title('Number of Ships by Flag')\nplt.show()\n"
  },
  {
    "db_id": "world_1",
    "question": "What is the official language used in the country the name of whose head of state is Beatrix, and count them by a bar chart, rank in ascending by the the number of language please.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the country table\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountrylanguage = pd.read_sql(\"SELECT * FROM countrylanguage\", conn)\n\n# Convert column names to lowercase\ncountry.columns = country.columns.str.lower()\ncountrylanguage.columns = countrylanguage.columns.str.lower()\n\n# Merge the country and countrylanguage tables\nmerged_data = pd.merge(country, countrylanguage, left_on=\"code\", right_on=\"countrycode\")\n\n# Filter the data based on the conditions\nfiltered_data = merged_data[(merged_data[\"headofstate\"] == \"Beatrix\") & (merged_data[\"isofficial\"] == \"T\")]\n\n# Group by language and count the occurrences\ngrouped_data = filtered_data.groupby(\"language\").size().reset_index(name=\"count\")\n\n# Sort the data by count in ascending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=True)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"language\"], sorted_data[\"count\"])\nplt.xlabel(\"Language\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Countries with Official Language by Language\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "Bar chart x axis lot details y axis the number of lot details , could you show x-axis in descending order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nLOTS = pd.read_sql(\"SELECT * FROM LOTS\", conn)\nLOTS.columns = LOTS.columns.str.lower()\n\n# Grouping the data by 'lot_details' and counting the occurrences\ngrouped_data = LOTS.groupby('lot_details').size().reset_index(name='count')\n\n# Sorting the data by 'lot_details' in descending order\nsorted_data = grouped_data.sort_values('lot_details', ascending=False)\n\n# Creating the bar plot\nplt.bar(sorted_data['lot_details'], sorted_data['count'])\nplt.xlabel('Lot Details')\nplt.ylabel('Count')\nplt.title('Count of Lot Details')\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "List the description of the outcomes for all projects, and count them by a bar chart",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Research_outcomes table\nresearch_outcomes = pd.read_sql(\"SELECT * FROM Research_outcomes\", conn)\n\n# Read the Project_outcomes table\nproject_outcomes = pd.read_sql(\"SELECT * FROM Project_outcomes\", conn)\n\n# Convert column names to lowercase\nresearch_outcomes.columns = research_outcomes.columns.str.lower()\nproject_outcomes.columns = project_outcomes.columns.str.lower()\n\n# merge the two tables on outcome_code\nmerged_data = pd.merge(research_outcomes, project_outcomes, on=\"outcome_code\")\n\n# group by outcome_description and count the occurrences\ngrouped_data = merged_data.groupby(\"outcome_description\").size().reset_index(name=\"count\")\n\n# plot the bar chart\nplt.bar(grouped_data[\"outcome_description\"], grouped_data[\"count\"])\nplt.xlabel(\"Outcome Description\")\nplt.ylabel(\"Count\")\nplt.title(\"Bar Chart of Outcome Descriptions\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "farm",
    "question": "How many cities with a population greater than 1000 residents are hosting farm competitions, and how many competitions are being hosted in each of these cities? Show the data using a scatter chart.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\nfarm_competition = pd.read_sql(\"SELECT * FROM farm_competition\", conn)\ncity.columns = city.columns.str.lower()\nfarm_competition.columns = farm_competition.columns.str.lower()\n\n# Merge city and farm_competition tables\nmerged_df = pd.merge(city, farm_competition, left_on='city_id', right_on='host_city_id')\n\n# Filter cities with population greater than 1000\nfiltered_df = merged_df[merged_df['population'] > 1000]\n\n# Group by population and count the number of occurrences\ngrouped_df = filtered_df.groupby('population').size().reset_index(name='count')\n\n# Scatter plot\nplt.scatter(grouped_df['population'], grouped_df['count'])\nplt.xlabel('Population')\nplt.ylabel('Count')\nplt.title('Number of Farm Competitions by City Population')\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "What are the different parties of representative ? Show the party name and the number of representatives in each party , order in asc by the Y-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\nrepresentative.columns = representative.columns.str.lower()\n\n# Group by party and count the number of representatives\nparty_counts = representative.groupby('party').size()\n\n# Sort the counts in ascending order\nparty_counts = party_counts.sort_values()\n\n# Create a bar plot\nplt.bar(party_counts.index, party_counts.values)\n\n# Set the x-axis label\nplt.xlabel('Party')\n\n# Set the y-axis label\nplt.ylabel('Count')\n\n# Set the title of the plot\nplt.title('Number of Representatives by Party')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "county_public_safety",
    "question": "Display a bar chart for how many counties correspond to each police force ? , and rank X in asc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncounty_public_safety = pd.read_sql(\"SELECT * FROM county_public_safety\", conn)\ncounty_public_safety.columns = county_public_safety.columns.str.lower()\n\n# Group by police_force and count the occurrences\ndf = county_public_safety.groupby('police_force').size().reset_index(name='count')\n\n# Sort by police_force in ascending order\ndf = df.sort_values('police_force')\n\n# Create a bar plot\nplt.bar(df['police_force'], df['count'])\nplt.xlabel('Police Force')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Police Force')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "county_public_safety",
    "question": "What insights can be gained from the SQL statement using a bar chart?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncounty_public_safety = pd.read_sql(\"SELECT * FROM county_public_safety\", conn)\ncity.columns = city.columns.str.lower()\ncounty_public_safety.columns = county_public_safety.columns.str.lower()\n\n# Merge the city and county_public_safety dataframes on county_id\nmerged_df = pd.merge(city, county_public_safety, on='county_id')\n\n# Select the columns for visualization\ndata = merged_df[['white', 'crime_rate']]\n\n# Plot the bar chart\nplt.bar(data['white'], data['crime_rate'])\nplt.xlabel('White Population')\nplt.ylabel('Crime Rate')\nplt.title('Crime Rate vs White Population')\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "Show me a bar chart displaying the role description and count of project staff involved in each role, sorted in descending order by count.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nStaff_Roles = pd.read_sql(\"SELECT * FROM Staff_Roles\", conn)\nProject_Staff = pd.read_sql(\"SELECT * FROM Project_Staff\", conn)\nProject_outcomes = pd.read_sql(\"SELECT * FROM Project_outcomes\", conn)\nStaff_Roles.columns = Staff_Roles.columns.str.lower()\nProject_Staff.columns = Project_Staff.columns.str.lower()\nProject_outcomes.columns = Project_outcomes.columns.str.lower()\n\n# Merge the tables\nmerged_df = pd.merge(pd.merge(Staff_Roles, Project_Staff, on='role_code'), Project_outcomes, on='project_id')\n\n# Group by role_description and count the occurrences\ngrouped_df = merged_df.groupby('role_description').size().reset_index(name='count')\n\n# Sort by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['role_description'], sorted_df['count'])\nplt.xlabel('Role Description')\nplt.ylabel('Count')\nplt.title('Number of Staff in Each Role')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "What is the count of journal_committee entries for each Journal_ID, displayed in a bar chart and sorted in ascending order?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\njournal_committee = pd.read_sql(\"SELECT * FROM journal_committee\", conn)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\njournal_committee.columns = journal_committee.columns.str.lower()\neditor.columns = editor.columns.str.lower()\n\n# Perform the join operation\ndf = pd.merge(journal_committee, editor, on='editor_id')\n\n# Group by journal_id and count the number of rows\ndf_grouped = df.groupby('journal_id').size().reset_index(name='count')\n\n# Sort the dataframe by count in ascending order\ndf_sorted = df_grouped.sort_values('count')\n\n# Create the bar plot\nplt.bar(df_sorted['journal_id'], df_sorted['count'])\nplt.xlabel('Journal ID')\nplt.ylabel('Count')\nplt.title('Number of Editors in Each Journal')\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "How many hosts are there for each party theme, represented in a scatter plot?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nparty_host = pd.read_sql(\"SELECT * FROM party_host\", conn)\nHOST = pd.read_sql(\"SELECT * FROM HOST\", conn)\nparty = pd.read_sql(\"SELECT * FROM party\", conn)\nparty_host.columns = party_host.columns.str.lower()\nHOST.columns = HOST.columns.str.lower()\nparty.columns = party.columns.str.lower()\n\n# Merge tables\nmerged_df = pd.merge(party_host, HOST, left_on='host_id', right_on='host_id')\nmerged_df = pd.merge(merged_df, party, left_on='party_id', right_on='party_id')\n\n# Group by party theme and count host names\ngrouped_df = merged_df.groupby('party_theme')['name'].count().reset_index()\n\n# Scatter plot\nplt.scatter(grouped_df['party_theme'], grouped_df['name'])\nplt.xlabel('Party Theme')\nplt.ylabel('Count of Host Names')\nplt.title('Count of Host Names by Party Theme')\nplt.show()"
  },
  {
    "db_id": "coffee_shop",
    "question": "Bar graph to show the total number from different address",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmember = pd.read_sql(\"SELECT * FROM member\", conn)\nmember.columns = member.columns.str.lower()\n\n# Grouping the data by address and counting the number of occurrences\naddress_counts = member.groupby('address').size().reset_index(name='count')\n\n# Creating a bar plot\nplt.bar(address_counts['address'], address_counts['count'])\nplt.xlabel('Address')\nplt.ylabel('Count')\nplt.title('Number of Members by Address')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "Count the total number of different locations of parties using a pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nparty = pd.read_sql(\"SELECT * FROM party\", conn)\nparty.columns = party.columns.str.lower()\n\n# Group by location and count the occurrences\nlocation_counts = party.groupby('location').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(location_counts['count'], labels=location_counts['location'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "Give me a bar chart , that group by location and count them , rank x axis in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nparty = pd.read_sql(\"SELECT * FROM party\", conn)\nparty.columns = party.columns.str.lower()\n\n# Group by location and count the occurrences\nlocation_counts = party.groupby('location').size().reset_index(name='count')\n\n# Sort by location in ascending order\nlocation_counts = location_counts.sort_values('location')\n\n# Create bar plot\nplt.bar(location_counts['location'], location_counts['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Party Count by Location')\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "Bar chart x axis name y axis how many name, and could you sort in ascending by the Y?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the editor table\neditor_df = pd.read_sql(\"SELECT * FROM editor\", conn)\n\n# Convert column names to lowercase\neditor_df.columns = editor_df.columns.str.lower()\n\n# Group by Name and count occurrences\ngrouped_df = editor_df.groupby('name').size().reset_index(name='count')\n\n# Sort by count in ascending order\nsorted_df = grouped_df.sort_values('count')\n\n# Plot the bar chart\nplt.bar(sorted_df['name'], sorted_df['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Number of occurrences by Name')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the number of documents for each document name? Return a bar chart, display by the the total number in descending please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the Paragraphs table\nparagraphs = pd.read_sql(\"SELECT * FROM Paragraphs\", conn)\n\n# Read the data from the Documents table\ndocuments = pd.read_sql(\"SELECT * FROM Documents\", conn)\n\n# Convert column names to lowercase\nparagraphs.columns = paragraphs.columns.str.lower()\ndocuments.columns = documents.columns.str.lower()\n\n# merge the two tables on the document_id column\nmerged_data = pd.merge(paragraphs, documents, on=\"document_id\")\n\n# group by document_name and count the number of paragraphs\ngrouped_data = merged_data.groupby(\"document_name\").size().reset_index(name=\"count\")\n\n# sort the data by count in descending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=False)\n\n# plot the bar chart\nplt.bar(sorted_data[\"document_name\"], sorted_data[\"count\"])\nplt.xlabel(\"Document Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Paragraphs per Document\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "movie_1",
    "question": "Find the average rating star for each movie that received at least 2 ratings. ",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\n\n# Convert column names to lowercase\nrating_df.columns = rating_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = rating_df.groupby('mid')['stars'].mean().reset_index()\n\n# Scatter plot\nplt.scatter(result_df['mid'], result_df['stars'])\nplt.xlabel('Movie ID')\nplt.ylabel('Average Rating')\nplt.title('Scatter Plot of Average Rating by Movie ID')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "List the position of players and the average number of points of players of each position by a bar chart, rank by the bars in desc.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the player table\nplayer_df = pd.read_sql(\"SELECT * FROM player\", conn)\n\n# Convert column names to lowercase\nplayer_df.columns = player_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = player_df.groupby('position')['points'].mean().reset_index().sort_values('position', ascending=False)\n\n# Create the bar plot\nplt.bar(result_df['position'], result_df['points'])\nplt.xlabel('Position')\nplt.ylabel('Average Points')\nplt.title('Average Points by Position')\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "A bar chart about how many hosts does each nationality have ? List the nationality and the count , and order by the names from high to low .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nHOST = pd.read_sql(\"SELECT * FROM HOST\", conn)\nHOST.columns = HOST.columns.str.lower()\n\n# Grouping the data by nationality and counting the occurrences\nnationality_counts = HOST.groupby('nationality').size().reset_index(name='count')\n\n# Sorting the data by nationality in descending order\nnationality_counts = nationality_counts.sort_values(by='nationality', ascending=False)\n\n# Creating the bar plot\nplt.bar(nationality_counts['nationality'], nationality_counts['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Hosts by Nationality')\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "Draw a bar chart of name versus age , and I want to rank by the y-axis in descending .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\neditor.columns = editor.columns.str.lower()\n\n# Assuming the data is already loaded into a dataframe called 'editor'\n\n# Sort the dataframe by age in descending order\nsorted_df = editor.sort_values(by='age', ascending=False)\n\n# Extract the name and age columns\nnames = sorted_df['name']\nages = sorted_df['age']\n\n# Create a bar plot\nplt.bar(names, ages)\n\n# Add labels and title\nplt.xlabel('Name')\nplt.ylabel('Age')\nplt.title('Age Distribution')\n\n# Rotate x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all template type codes and the number of documents using each type with a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Templates table\ntemplates = pd.read_sql(\"SELECT * FROM Templates\", conn)\ntemplates.columns = map(str.lower, templates.columns)\n\n# Read the Documents table\ndocuments = pd.read_sql(\"SELECT * FROM Documents\", conn)\ndocuments.columns = map(str.lower, documents.columns)\n\n# Merge the Templates and Documents tables on template_id\nmerged_data = pd.merge(templates, documents, on=\"template_id\")\n\n# Group by template_type_code and count the number of occurrences\ngrouped_data = merged_data.groupby(\"template_type_code\").size().reset_index(name=\"count\")\n\n# Plot the bar chart\nplt.bar(grouped_data[\"template_type_code\"], grouped_data[\"count\"])\nplt.xlabel(\"Template Type Code\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Templates by Template Type Code\")\n\n# Show the bar chart\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Show different nominees and the number of musicals they have been nominated in a bar chart , sort in desc by the Y-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Group by nominee and count the occurrences\ngrouped = musical.groupby('nominee').size().reset_index(name='count')\n\n# Sort by count in descending order\nsorted_grouped = grouped.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_grouped['nominee'], sorted_grouped['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return a bar chart showing the number of templates with a version number greater than 5 for each template type code, display from high to low by the X.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Templates table into a DataFrame\ntemplates_df = pd.read_sql(\"SELECT * FROM Templates\", conn)\n\n# Convert column names to lowercase\ntemplates_df.columns = templates_df.columns.str.lower()\n\n# Filter the DataFrame for version_number > 5\nfiltered_df = templates_df[templates_df['version_number'] > 5]\n\n# Group by Template_Type_Code and count occurrences\ngrouped_df = filtered_df.groupby('template_type_code').size().reset_index(name='count')\n\n# Sort by Template_Type_Code in descending order\nsorted_df = grouped_df.sort_values('template_type_code', ascending=False)\n\n# Create a bar plot\nplt.bar(sorted_df['template_type_code'], sorted_df['count'])\nplt.xlabel('Template Type Code')\nplt.ylabel('Count')\nplt.title('Template Type Code Counts')\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "Bar chart of the total number from each party",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\nrepresentative.columns = representative.columns.str.lower()\n\n# Group by party and count the number of representatives\nparty_counts = representative.groupby('party').size()\n\n# Create a bar plot\nplt.bar(party_counts.index, party_counts.values)\n\n# Set the labels and title\nplt.xlabel('Party')\nplt.ylabel('Count')\nplt.title('Number of Representatives by Party')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "scientist_1",
    "question": "What are the names of projects that require more than 300 hours, and how many scientists are assigned to each, and list from high to low by the the total number .",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the projects table\nprojects = pd.read_sql(\"SELECT * FROM projects\", conn)\nprojects.columns = map(str.lower, projects.columns)\n\n# Read the assignedto table\nassignedto = pd.read_sql(\"SELECT * FROM assignedto\", conn)\nassignedto.columns = map(str.lower, assignedto.columns)\n\n# Merge the projects and assignedto tables\nmerged = pd.merge(projects, assignedto, left_on=\"code\", right_on=\"project\")\n\n# Filter the merged table based on hours > 300\nfiltered = merged[merged[\"hours\"] > 300]\n\n# Group by project name and count the number of occurrences\ngrouped = filtered.groupby(\"name\").size().reset_index(name=\"count\")\n\n# Sort the grouped table by count in descending order\nsorted_table = grouped.sort_values(by=\"count\", ascending=False)\n\n# Generate the bar plot\nplt.bar(sorted_table[\"name\"], sorted_table[\"count\"])\nplt.xlabel(\"Project Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Assignments per Project\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Ignore movies whose director is NULL. For each director, what are the titles and the highest rating among all of their movies they reviewed? Draw the result by a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\nmovie_df.columns = map(str.lower, movie_df.columns)\n\n# Merge the Rating and Movie tables on mID column\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Filter out rows where director is not null\nfiltered_df = merged_df[merged_df[\"director\"] != \"null\"]\n\n# Group by title and find the maximum stars for each movie\ngrouped_df = filtered_df.groupby(\"title\").agg({\"stars\": \"max\"}).reset_index()\n\n# Plot the bar chart\nplt.bar(grouped_df[\"title\"], grouped_df[\"stars\"])\nplt.xlabel(\"Movie Title\")\nplt.ylabel(\"Maximum Stars\")\nplt.title(\"Maximum Stars for Movies with Non-null Directors\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "Show me a bar chart displaying the count of party hosts for each party theme.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nparty_host = pd.read_sql(\"SELECT * FROM party_host\", conn)\nHOST = pd.read_sql(\"SELECT * FROM HOST\", conn)\nparty = pd.read_sql(\"SELECT * FROM party\", conn)\nparty_host.columns = party_host.columns.str.lower()\nHOST.columns = HOST.columns.str.lower()\nparty.columns = party.columns.str.lower()\n\n# Merge the tables\nmerged_df = pd.merge(party_host, HOST, on='host_id')\nmerged_df = pd.merge(merged_df, party, on='party_id')\n\n# Group by party theme and count the number of hosts\nparty_theme_counts = merged_df.groupby('party_theme')['name'].count().reset_index()\n\n# Plot the bar chart\nplt.bar(party_theme_counts['party_theme'], party_theme_counts['name'])\nplt.xlabel('Party Theme')\nplt.ylabel('Number of Hosts')\nplt.title('Number of Hosts per Party Theme')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "insurance_fnol",
    "question": "What is the count of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\" for each service, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\nfirst_notification_of_loss = pd.read_sql(\"SELECT * FROM first_notification_of_loss\", conn)\nservices = pd.read_sql(\"SELECT * FROM services\", conn)\ncustomers.columns = customers.columns.str.lower()\nfirst_notification_of_loss.columns = first_notification_of_loss.columns.str.lower()\nservices.columns = services.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(customers, first_notification_of_loss, on='customer_id')\nmerged_df = pd.merge(merged_df, services, on='service_id')\n\n# Filter services\nfiltered_df = merged_df[merged_df['service_name'].isin(['Close a policy', 'Upgrade a policy'])]\n\n# Group by service_name and count\ngrouped_df = filtered_df.groupby('service_name').size().reset_index(name='count')\n\n# Sort by count\nsorted_df = grouped_df.sort_values('count')\n\n# Plot bar chart\nplt.bar(sorted_df['service_name'], sorted_df['count'])\nplt.xlabel('Service Name')\nplt.ylabel('Count')\nplt.title('Count of Customers for Services')\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "How does the number of transactions with type code \"SALE\" vary for each investor? Show it using a scatter chart.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nINVESTORS = pd.read_sql(\"SELECT * FROM INVESTORS\", conn)\nTRANSACTIONS = pd.read_sql(\"SELECT * FROM TRANSACTIONS\", conn)\nINVESTORS.columns = INVESTORS.columns.str.lower()\nTRANSACTIONS.columns = TRANSACTIONS.columns.str.lower()\n\n# Merge the INVESTORS and TRANSACTIONS dataframes\nmerged_df = pd.merge(INVESTORS, TRANSACTIONS, on='investor_id')\n\n# Filter the merged dataframe for transactions with transaction_type_code = 'SALE'\nfiltered_df = merged_df[merged_df['transaction_type_code'] == 'SALE']\n\n# Group the filtered dataframe by investor_id and count the number of transactions\ngrouped_df = filtered_df.groupby('investor_id').size().reset_index(name='transaction_count')\n\n# Create a scatter plot of investor_id vs transaction_count\nplt.scatter(grouped_df['investor_id'], grouped_df['transaction_count'])\nplt.xlabel('Investor ID')\nplt.ylabel('Transaction Count')\nplt.title('Number of Transactions per Investor')\nplt.show()"
  },
  {
    "db_id": "coffee_shop",
    "question": "Bar graph to show the total number from different address, show in desc by the Y-axis please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the member table\nmember_df = pd.read_sql(\"SELECT * FROM member\", conn)\n\n# Convert column names to lowercase\nmember_df.columns = member_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = member_df.groupby('address').size().reset_index(name='count').sort_values(by='count', ascending=False)\n\n# Generate the bar chart\nplt.bar(result_df['address'], result_df['count'])\nplt.xlabel('Address')\nplt.ylabel('Count')\nplt.title('Number of Members by Address')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "What is the distribution of creation years for departments managed by a secretary born in Alabama, represented by a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\nmanagement = pd.read_sql(\"SELECT * FROM management\", conn)\nhead = pd.read_sql(\"SELECT * FROM head\", conn)\ndepartment.columns = department.columns.str.lower()\nmanagement.columns = management.columns.str.lower()\nhead.columns = head.columns.str.lower()\n\n# Join tables\ndf = pd.merge(department, management, on='department_id')\ndf = pd.merge(df, head, on='head_id')\n\n# Filter data\ndf_filtered = df[df['born_state'] == 'Alabama']\n\n# Group by creation and count\ndf_grouped = df_filtered.groupby('creation').size().reset_index(name='count')\n\n# Plot bar chart\nplt.bar(df_grouped['creation'], df_grouped['count'])\nplt.xlabel('Creation')\nplt.ylabel('Count')\nplt.title('Department Creation Count')\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "Group and count the name attribute for visualizing a bar chart , and display in descending by the names .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\neditor.columns = editor.columns.str.lower()\n\n# Assuming the table data is stored in a dataframe called 'editor'\n\n# Grouping the data by name and counting the occurrences\ngrouped_data = editor.groupby('name').size().reset_index(name='count')\n\n# Sorting the data by name in descending order\nsorted_data = grouped_data.sort_values('name', ascending=False)\n\n# Creating the bar plot\nplt.bar(sorted_data['name'], sorted_data['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Count of Names')\nplt.show()"
  },
  {
    "db_id": "coffee_shop",
    "question": "Bar graph to show the total number from different address, I want to display names from low to high order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"member\" table\nmember_data = pd.read_sql(\"SELECT * FROM member\", conn)\n\n# Convert column names to lowercase\nmember_data.columns = member_data.columns.str.lower()\n\n# Perform the SQL query\nresult = member_data.groupby('address').size().reset_index(name='count').sort_values('address')\n\n# Generate the bar chart\nplt.bar(result['address'], result['count'])\nplt.xlabel('Address')\nplt.ylabel('Count')\nplt.title('Number of Members by Address')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "Give me a bar for what are the different parties of representative ? Show the party name and the number of representatives in each party , could you order by the bars in asc ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\nrepresentative.columns = representative.columns.str.lower()\n\n# Group by party and count the number of representatives in each party\nparty_counts = representative.groupby('party').size().reset_index(name='count')\n\n# Sort the parties in ascending order\nparty_counts = party_counts.sort_values('party')\n\n# Create a bar plot\nplt.bar(party_counts['party'], party_counts['count'])\nplt.xlabel('Party')\nplt.ylabel('Count')\nplt.title('Number of Representatives by Party')\nplt.show()"
  },
  {
    "db_id": "insurance_fnol",
    "question": "List all the customers in increasing order of IDs by a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the customers table\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\n\n# Convert column names to lowercase\ncustomers.columns = customers.columns.str.lower()\n\n# Sort the customers table by customer_id\ncustomers = customers.sort_values(by='customer_id')\n\n# Create a bar plot of customer_name and customer_id\nplt.bar(customers['customer_name'], customers['customer_id'])\nplt.xlabel('Customer Name')\nplt.ylabel('Customer ID')\nplt.title('Customer ID by Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "Show the number of transactions for different investors with a scatter chart.",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the TRANSACTIONS table\ntransactions = pd.read_sql(\"SELECT * FROM TRANSACTIONS\", conn)\n\n# Convert column names to lowercase\ntransactions.columns = transactions.columns.str.lower()\n\n# Perform the query and group by investor_id\ngrouped_transactions = transactions.groupby('investor_id').size().reset_index(name='count')\n\n# Scatter plot\nplt.scatter(grouped_transactions['investor_id'], grouped_transactions['count'])\nplt.xlabel('Investor ID')\nplt.ylabel('Count')\nplt.title('Number of Transactions per Investor')\nplt.show()"
  },
  {
    "db_id": "county_public_safety",
    "question": "Display a bar chart for how many counties correspond to each police force?, show by the names in desc.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"county_public_safety\" table\ndf = pd.read_sql(\"SELECT * FROM county_public_safety\", conn)\n\n# Convert column names to lowercase\ndf.columns = df.columns.str.lower()\n\n# Perform the SQL query\nresult = df.groupby('police_force').size().reset_index(name='count').sort_values('police_force', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['police_force'], result['count'])\nplt.xlabel('Police Force')\nplt.ylabel('Count')\nplt.title('Number of Incidents by Police Force')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "How many games has Linda Smith played for each game name, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nPlays_games = pd.read_sql(\"SELECT * FROM Plays_games\", conn)\nVideo_games = pd.read_sql(\"SELECT * FROM Video_games\", conn)\nStudent = pd.read_sql(\"SELECT * FROM Student\", conn)\nPlays_games.columns = Plays_games.columns.str.lower()\nVideo_games.columns = Video_games.columns.str.lower()\nStudent.columns = Student.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(pd.merge(Plays_games, Video_games, on='gameid'), Student, on='stuid')\n\n# Filter the data for the specific student\nfiltered_df = merged_df[(merged_df['lname'] == 'Smith') & (merged_df['fname'] == 'Linda')]\n\n# Group the data by game name and count the number of occurrences\ngrouped_df = filtered_df.groupby('gname').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['gname'], grouped_df['count'])\nplt.xlabel('Game Name')\nplt.ylabel('Count')\nplt.title('Number of Games Played by Linda Smith')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "Show the number of companies each investor has invested with a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the entrepreneur table\nentrepreneur_df = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\n\n# Convert column names to lowercase\nentrepreneur_df.columns = entrepreneur_df.columns.str.lower()\n\n# Perform the SQL query\nresult = entrepreneur_df.groupby('investor').size().reset_index(name='count')\n\n# Generate the bar chart\nplt.bar(result['investor'], result['count'])\nplt.xlabel('Investor')\nplt.ylabel('Count')\nplt.title('Number of Entrepreneurs per Investor')\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Can you draw the trend of sum budget in billions over the creation ?",
    "chart": "Line",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = department.columns.str.lower()\n\n# Assuming 'department' is a DataFrame containing the table data\n\n# Grouping the data by 'creation' and calculating the sum of 'budget_in_billions'\ngrouped_data = department.groupby('creation')['budget_in_billions'].sum()\n\n# Converting the grouped data into a DataFrame\ndf = pd.DataFrame(grouped_data).reset_index()\n\n# Plotting the line chart\nplt.plot(df['creation'], df['budget_in_billions'])\nplt.xlabel('Creation')\nplt.ylabel('Sum of Budget (in billions)')\nplt.title('Sum of Budget by Creation')\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "Display a bar chart for the names and the ages of editors , order by the total number in desc .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\neditor.columns = editor.columns.str.lower()\n\n# Assuming the data is already loaded into a dataframe called 'editor'\n\n# Sort the dataframe by age in descending order\nsorted_df = editor.sort_values(by='age', ascending=False)\n\n# Extract the name and age columns\nnames = sorted_df['name']\nages = sorted_df['age']\n\n# Create a bar plot\nplt.bar(names, ages)\n\n# Add labels and title\nplt.xlabel('Name')\nplt.ylabel('Age')\nplt.title('Age Distribution')\n\n# Rotate x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "Return the names and surface areas of the 5 largest countries with a pie chart .",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry.columns = country.columns.str.lower()\n\n# Selecting the top 5 countries with largest surface area\ntop_countries = country.nlargest(5, 'surfacearea')\n\n# Creating a pie chart\nplt.pie(top_countries['surfacearea'], labels=top_countries['name'], autopct='%1.1f%%')\nplt.title('Top 5 Countries by Surface Area')\nplt.show()"
  },
  {
    "db_id": "scientist_1",
    "question": "Who are the top 5 scientists, assigned to the most projects, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nassignedto = pd.read_sql(\"SELECT * FROM assignedto\", conn)\nscientists = pd.read_sql(\"SELECT * FROM scientists\", conn)\nassignedto.columns = assignedto.columns.str.lower()\nscientists.columns = scientists.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(assignedto, scientists, left_on='scientist', right_on='ssn')\n\n# Group by scientist name and count the number of projects\ngrouped_df = merged_df.groupby('name').agg({'project': 'count'}).reset_index()\n\n# Sort the dataframe by project count in descending order and select the top 5 rows\ntop_5_scientists = grouped_df.sort_values('project', ascending=False).head(5)\n\n# Create the bar plot\nplt.bar(top_5_scientists['name'], top_5_scientists['project'])\nplt.xlabel('Scientist')\nplt.ylabel('Number of Projects')\nplt.title('Top 5 Scientists with the Most Projects')\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "Show the number of the names of editors that are on the committee of journals with sales bigger than 3000.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the tables\njournal_committee = pd.read_sql(\"SELECT * FROM journal_committee\", conn)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\njournal = pd.read_sql(\"SELECT * FROM journal\", conn)\n\n# Convert column names to lowercase\njournal_committee.columns = journal_committee.columns.str.lower()\neditor.columns = editor.columns.str.lower()\njournal.columns = journal.columns.str.lower()\n\n# Merge the tables\nmerged_data = pd.merge(journal_committee, editor, on=\"editor_id\")\nmerged_data = pd.merge(merged_data, journal, on=\"journal_id\")\n\n# Filter the data based on the condition\nfiltered_data = merged_data[merged_data[\"sales\"] > 3000]\n\n# Group by Name and count occurrences\ngrouped_data = filtered_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# Plot the bar chart\nplt.bar(grouped_data[\"name\"], grouped_data[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Occurrences of Name\")\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "Show different nationalities along with the number of hosts of each nationality Visualize by bar chart , and show from high to low by the X .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nHOST = pd.read_sql(\"SELECT * FROM HOST\", conn)\nHOST.columns = HOST.columns.str.lower()\n\n# Grouping the data by nationality and counting the occurrences\nnationality_counts = HOST.groupby('nationality').size().reset_index(name='count')\n\n# Sorting the data by nationality in descending order\nnationality_counts = nationality_counts.sort_values(by='nationality', ascending=False)\n\n# Creating the bar plot\nplt.bar(nationality_counts['nationality'], nationality_counts['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Hosts by Nationality')\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "Can you create a pie chart to display the distribution of grants with descriptions of Regular and Initial Applications?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nGrants = pd.read_sql(\"SELECT * FROM Grants\", conn)\nDocuments = pd.read_sql(\"SELECT * FROM Documents\", conn)\nDocument_Types = pd.read_sql(\"SELECT * FROM Document_Types\", conn)\nGrants.columns = Grants.columns.str.lower()\nDocuments.columns = Documents.columns.str.lower()\nDocument_Types.columns = Document_Types.columns.str.lower()\n\n# Merge the tables\nmerged_df = pd.merge(Grants, Documents, on='grant_id')\nmerged_df = pd.merge(merged_df, Document_Types, on='document_type_code')\n\n# Filter the data\nfiltered_df = merged_df[merged_df['document_description'].isin(['Regular', 'Initial Application'])]\n\n# Group by document_description and count the grant_start_date\ngrouped_df = filtered_df.groupby('document_description').count()['grant_start_date']\n\n# Plot the pie chart\nplt.pie(grouped_df, labels=grouped_df.index, autopct='%1.1f%%')\nplt.title('Document Description Distribution')\nplt.show()\n"
  },
  {
    "db_id": "world_1",
    "question": "What is the official language used in the country the name of whose head of state is Beatrix, and count them by a pie chart",
    "chart": "Pie",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the tables\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountrylanguage = pd.read_sql(\"SELECT * FROM countrylanguage\", conn)\n\n# Convert column names to lowercase\ncountry.columns = country.columns.str.lower()\ncountrylanguage.columns = countrylanguage.columns.str.lower()\n\n# Merge the tables\nmerged_data = pd.merge(country, countrylanguage, left_on=\"code\", right_on=\"countrycode\")\n\n# Filter the data\nfiltered_data = merged_data[(merged_data[\"headofstate\"] == \"Beatrix\") & (merged_data[\"isofficial\"] == \"T\")]\n\n# Group by language and count\ngrouped_data = filtered_data.groupby(\"language\").size()\n\n# Plot the pie chart\nplt.pie(grouped_data, labels=grouped_data.index, autopct=\"%1.1f%%\")\nplt.title(\"Language Distribution\")\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "Give me a bar chart, that group by location and count them, rank x axis in ascending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the party table\nparty_df = pd.read_sql(\"SELECT * FROM party\", conn)\n\n# Convert column names to lowercase\nparty_df.columns = party_df.columns.str.lower()\n\n# Perform the SQL query\nresult = party_df.groupby('location').size().reset_index(name='count').sort_values('location')\n\n# Generate the bar plot\nplt.bar(result['location'], result['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Party Count by Location')\nplt.show()"
  },
  {
    "db_id": "voter_2",
    "question": "Visualize a scatter chart on how many students does each advisor have ?",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nSTUDENT.columns = STUDENT.columns.str.lower()\n\n# Assuming the table data is stored in a DataFrame called STUDENT\n\n# Grouping the data by advisor and counting the number of students for each advisor\nadvisor_counts = STUDENT.groupby('advisor').size().reset_index(name='count')\n\n# Creating a scatter plot\nplt.scatter(advisor_counts['advisor'], advisor_counts['count'])\n\n# Adding labels and title\nplt.xlabel('Advisor')\nplt.ylabel('Count')\nplt.title('Number of Students per Advisor')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Show me the number of country by country in a bar, sort by the bar in asc.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the competition table\ncompetition_df = pd.read_sql(\"SELECT * FROM competition\", conn)\n\n# Convert column names to lowercase\ncompetition_df.columns = competition_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = competition_df.groupby('country').size().reset_index(name='count').sort_values('country')\n\n# Generate the bar chart\nplt.bar(result_df['country'], result_df['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Competition by Country')\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Show different nominees and the number of musicals they have been nominated . Plot them as bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Group by nominee and count the number of occurrences\nnominee_counts = musical.groupby('nominee').size().reset_index(name='count')\n\n# Create a bar plot\nplt.bar(nominee_counts['nominee'], nominee_counts['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Find the component amounts and names of all furnitures that have more than 10 components, and could you order by the y axis from low to high?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the furniture table into a DataFrame\nfurniture_df = pd.read_sql(\"SELECT * FROM furniture\", conn)\n\n# Convert column names to lowercase\nfurniture_df.columns = furniture_df.columns.str.lower()\n\n# Filter the DataFrame for Num_of_Component > 10\nfiltered_df = furniture_df[furniture_df['num_of_component'] > 10]\n\n# Sort the filtered DataFrame by Num_of_Component in ascending order\nsorted_df = filtered_df.sort_values('num_of_component', ascending=True)\n\n# Create a bar plot\nplt.bar(sorted_df['name'], sorted_df['num_of_component'])\nplt.xlabel('Name')\nplt.ylabel('Num_of_Component')\nplt.title('Furniture with Num_of_Component > 10')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "For the sale details with amount smaller than 3000, visualize a bar chart that x-axis is the sales details and count them as y, I want to sort by the Y in desc.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the SALES and TRANSACTIONS tables\nsales = pd.read_sql(\"SELECT * FROM sales\", conn)\ntransactions = pd.read_sql(\"SELECT * FROM transactions\", conn)\n\n# Convert column names to lowercase\nsales.columns = sales.columns.str.lower()\ntransactions.columns = transactions.columns.str.lower()\n\n# Merge the SALES and TRANSACTIONS tables on the sales_transaction_id column\nmerged_data = pd.merge(sales, transactions, left_on=\"sales_transaction_id\", right_on=\"transaction_id\")\n\n# Filter the merged data based on the condition amount_of_transaction < 3000\nfiltered_data = merged_data[merged_data[\"amount_of_transaction\"] < 3000]\n\n# Group the filtered data by sales_details and count the occurrences\ngrouped_data = filtered_data.groupby(\"sales_details\").size().reset_index(name=\"count\")\n\n# Sort the grouped data by count in descending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=False)\n\n# Generate the bar plot\nplt.bar(sorted_data[\"sales_details\"], sorted_data[\"count\"])\nplt.xlabel(\"Sales Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of Sales Details\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "What is the id of the organization with the highest number of outcomes and how many outcomes are there, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nProjects = pd.read_sql(\"SELECT * FROM Projects\", conn)\nProject_outcomes = pd.read_sql(\"SELECT * FROM Project_outcomes\", conn)\nProjects.columns = Projects.columns.str.lower()\nProject_outcomes.columns = Project_outcomes.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Projects, Project_outcomes, on='project_id')\n\n# Group by organisation_id and count the number of occurrences\ngrouped_df = merged_df.groupby('organisation_id').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['organisation_id'], grouped_df['count'])\nplt.xlabel('Organisation ID')\nplt.ylabel('Count')\nplt.title('Number of Projects by Organisation')\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Bar chart of the total number from each location , I want to order bars in asc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\nperformance.columns = performance.columns.str.lower()\n\n# Group by location and count the number of occurrences\nlocation_counts = performance.groupby('location').size().reset_index(name='count')\n\n# Sort the data by location in ascending order\nlocation_counts = location_counts.sort_values('location')\n\n# Create a bar plot\nplt.bar(location_counts['location'], location_counts['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Performances by Location')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Show different nominees and the number of musicals they have been nominated Plot them as bar chart , show in desc by the X .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Group by nominee and count the occurrences\ngrouped = musical.groupby('nominee').size().reset_index(name='count')\n\n# Sort by nominee in descending order\ngrouped = grouped.sort_values('nominee', ascending=False)\n\n# Create bar plot\nplt.bar(grouped['nominee'], grouped['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "Give me a bar for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?, rank from high to low by the sum population.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the country table\ncountry_df = pd.read_sql(\"SELECT * FROM country\", conn)\n\n# Convert column names to lowercase\ncountry_df.columns = country_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = country_df.groupby('governmentform')['population'].sum().reset_index()\nresult_df = result_df.sort_values('population', ascending=False)\n\n# Plot the bar chart\nplt.bar(result_df['governmentform'], result_df['population'])\nplt.xlabel('Government Form')\nplt.ylabel('Population')\nplt.title('Population by Government Form')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Show me a bar chart comparing the total number of captains in each rank .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\ncaptain.columns = captain.columns.str.lower()\n\n# Grouping the data by rank and counting the occurrences\nrank_counts = captain.groupby('rank').size()\n\n# Creating a bar plot\nplt.bar(rank_counts.index, rank_counts.values)\n\n# Adding labels and title\nplt.xlabel('Rank')\nplt.ylabel('Count')\nplt.title('Count of Captains by Rank')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "scientist_1",
    "question": "Find the number of the name of the project for which a scientist whose name contains \u2018Smith\u2019 is assigned to.",
    "chart": "Pie",
    "hardness": "Extra Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the assignedto table\nassignedto_data = pd.read_sql(\"SELECT * FROM assignedto\", conn)\n\n# Read the data from the projects table\nprojects_data = pd.read_sql(\"SELECT * FROM projects\", conn)\n\n# Read the data from the scientists table\nscientists_data = pd.read_sql(\"SELECT * FROM scientists\", conn)\n\n# Convert column names to lowercase\nassignedto_data.columns = assignedto_data.columns.str.lower()\nprojects_data.columns = projects_data.columns.str.lower()\nscientists_data.columns = scientists_data.columns.str.lower()\n\n# Merge the assignedto, projects, and scientists tables\nmerged_data = pd.merge(assignedto_data, projects_data, left_on=\"project\", right_on=\"code\")\nmerged_data = pd.merge(merged_data, scientists_data, left_on=\"scientist\", right_on=\"ssn\")\n\n# Filter the data for scientists with name containing 'Smith'\nfiltered_data = merged_data[merged_data[\"name_x\"].str.contains(\"Smith\")]\n\n# Group the data by project name and count the occurrences\ngrouped_data = filtered_data.groupby(\"name_y\").size()\n\n# Plot the pie chart\nplt.pie(grouped_data, labels=grouped_data.index, autopct=\"%1.1f%%\")\nplt.title(\"Distribution of Projects for Scientists with Name containing 'Smith'\")\nplt.show()\n"
  },
  {
    "db_id": "sports_competition",
    "question": "Return a bar on what are the types of competition and number of competitions for that type ? , and list by the names from low to high .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the number of occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort the dataframe by competition_type in ascending order\ncompetition_counts = competition_counts.sort_values('competition_type')\n\n# Create a bar plot\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Type')\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Compare the total number of different ranks using a bar graph.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the captain table\ncaptain_df = pd.read_sql(\"SELECT * FROM captain\", conn)\n\n# Convert column names to lowercase\ncaptain_df.columns = captain_df.columns.str.lower()\n\n# Perform the SQL query\nresult = captain_df.groupby('rank').size()\n\n# Generate the bar plot\nplt.bar(result.index, result.values)\nplt.xlabel('Rank')\nplt.ylabel('Count')\nplt.title('Count of Captains by Rank')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "A bar chart showing the number of different competition types , I want to rank Y-axis in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort the counts in ascending order\ncompetition_counts = competition_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Competition Type Counts')\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "What is the average amount of transactions for different lots, ranked by the highest average amount of transactions, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nTRANSACTIONS = pd.read_sql(\"SELECT * FROM TRANSACTIONS\", conn)\nTransactions_Lots = pd.read_sql(\"SELECT * FROM Transactions_Lots\", conn)\nTRANSACTIONS.columns = TRANSACTIONS.columns.str.lower()\nTransactions_Lots.columns = Transactions_Lots.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(TRANSACTIONS, Transactions_Lots, on='transaction_id')\n\n# Group by lot_id and calculate the average amount_of_transaction\ngrouped_df = merged_df.groupby('lot_id')['amount_of_transaction'].mean().reset_index()\n\n# Sort the dataframe by average amount_of_transaction in descending order\nsorted_df = grouped_df.sort_values('amount_of_transaction', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['lot_id'], sorted_df['amount_of_transaction'])\nplt.xlabel('Lot ID')\nplt.ylabel('Average Amount of Transaction')\nplt.title('Average Amount of Transaction by Lot ID')\nplt.show()"
  },
  {
    "db_id": "riding_club",
    "question": "How many players does each coach have, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer_coach = pd.read_sql(\"SELECT * FROM player_coach\", conn)\ncoach = pd.read_sql(\"SELECT * FROM coach\", conn)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nplayer_coach.columns = player_coach.columns.str.lower()\ncoach.columns = coach.columns.str.lower()\nplayer.columns = player.columns.str.lower()\n\n# Perform the join operation\nmerged_data = pd.merge(player_coach, coach, on='coach_id')\nmerged_data = pd.merge(merged_data, player, on='player_id')\n\n# Group by coach_name and count the number of rows\ngrouped_data = merged_data.groupby('coach_name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_data['coach_name'], grouped_data['count'])\nplt.xlabel('Coach Name')\nplt.ylabel('Count')\nplt.title('Number of Players per Coach')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Find the component amounts and names of all furnitures that have more than 10 components. ",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the furniture table\nfurniture = pd.read_sql(\"SELECT * FROM furniture\", conn)\n\n# Convert column names to lowercase\nfurniture.columns = furniture.columns.str.lower()\n\n# Filter the data based on the condition\nfiltered_data = furniture[furniture['num_of_component'] > 10]\n\n# Create a bar plot\nplt.bar(filtered_data['name'], filtered_data['num_of_component'])\nplt.xlabel('Name')\nplt.ylabel('Num_of_Component')\nplt.title('Furniture with Num_of_Component > 10')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "What is the scatter plot of the total number of hours per week and number of games played by students under 20, grouped by hours per week and games played?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nStudent = pd.read_sql(\"SELECT * FROM Student\", conn)\nSportsinfo.columns = Sportsinfo.columns.str.lower()\nStudent.columns = Student.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(Sportsinfo, Student, on='stuid')\n\n# Filtering the data based on age\nfiltered_df = merged_df[merged_df['age'] < 20]\n\n# Grouping the data and calculating the sum of hoursperweek and gamesplayed\ngrouped_df = filtered_df.groupby(['hoursperweek', 'gamesplayed']).sum().reset_index()\n\n# Creating scatter plot\nplt.scatter(grouped_df['hoursperweek'], grouped_df['gamesplayed'])\nplt.xlabel('Hours per Week')\nplt.ylabel('Games Played')\nplt.title('Scatter Plot of Hours per Week vs Games Played')\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Show me a bar chart comparing the total number of captains of different classes , and rank by the Class from low to high .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\ncaptain.columns = captain.columns.str.lower()\n\n# Group by 'class' and count the occurrences\nclass_counts = captain.groupby('class').size().reset_index(name='count')\n\n# Sort the dataframe by 'class' in ascending order\nclass_counts = class_counts.sort_values('class')\n\n# Create a bar plot\nplt.bar(class_counts['class'], class_counts['count'])\nplt.xlabel('Class')\nplt.ylabel('Count')\nplt.title('Count of each class')\nplt.show()"
  },
  {
    "db_id": "school_player",
    "question": "Show me a bar chart of the number of players for each school, along with their respective locations. Sort the bars in descending order based on the count of players.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nschool = pd.read_sql(\"SELECT * FROM school\", conn)\nplayer.columns = player.columns.str.lower()\nschool.columns = school.columns.str.lower()\n\n# Joining the player and school tables\nmerged_df = pd.merge(player, school, on='school_id')\n\n# Grouping by location and counting the number of players\ngrouped_df = merged_df.groupby('location').size().reset_index(name='count')\n\n# Filtering the schools with count greater than 1\nfiltered_df = grouped_df[grouped_df['count'] > 1]\n\n# Sorting the schools by count in descending order\nsorted_df = filtered_df.sort_values('count', ascending=False)\n\n# Plotting the bar chart\nplt.bar(sorted_df['location'], sorted_df['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Players by Location')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Please tell me the average star ratings of each movie title using a bar chart, rank in desc by the Y please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\nmovie_df.columns = map(str.lower, movie_df.columns)\n\n# Merge the Rating and Movie tables on mID\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Calculate the average stars for each movie title\navg_stars_df = merged_df.groupby(\"title\")[\"stars\"].mean().reset_index()\navg_stars_df = avg_stars_df.sort_values(by=\"stars\", ascending=False)\n\n# Plot the bar chart\nplt.bar(avg_stars_df[\"title\"], avg_stars_df[\"stars\"])\nplt.xlabel(\"Movie Title\")\nplt.ylabel(\"Average Stars\")\nplt.title(\"Average Stars for Each Movie\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "What are the dates of performances and the cumulative attendance for each date, displayed in a line chart, with the dates arranged in ascending order?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmember_attendance = pd.read_sql(\"SELECT * FROM member_attendance\", conn)\nmember = pd.read_sql(\"SELECT * FROM member\", conn)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\nmember_attendance.columns = member_attendance.columns.str.lower()\nmember.columns = member.columns.str.lower()\nperformance.columns = performance.columns.str.lower()\n\n# Merge the tables\nmerged_df = pd.merge(member_attendance, member, on='member_id')\nmerged_df = pd.merge(merged_df, performance, on='performance_id')\n\n# Group by date and calculate the sum of attendance\ngrouped_df = merged_df.groupby('date')['attendance'].sum().reset_index()\n\n# Sort the dataframe by date\nsorted_df = grouped_df.sort_values('date')\n\n# Plot the line chart\nplt.plot(sorted_df['date'], sorted_df['attendance'])\nplt.xlabel('Date')\nplt.ylabel('Attendance')\nplt.title('Attendance by Date')\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "How many hosts does each nationality have? List the nationality and the count Visualize by bar chart, and could you sort by the x axis in ascending?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the HOST table\nhost_df = pd.read_sql(\"SELECT * FROM HOST\", conn)\n\n# Convert column names to lowercase\nhost_df.columns = host_df.columns.str.lower()\n\n# Perform the SQL query\nresult = host_df.groupby('nationality').size().reset_index(name='count').sort_values('nationality')\n\n# Generate the bar plot\nplt.bar(result['nationality'], result['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Hosts by Nationality')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Compare the total number of locations in each location using a bar graph.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the performance table\nperformance_df = pd.read_sql(\"SELECT * FROM performance\", conn)\n\n# Convert column names to lowercase\nperformance_df.columns = performance_df.columns.str.lower()\n\n# Group by location and count the occurrences\nlocation_counts = performance_df.groupby('location').size()\n\n# Create a bar plot\nplt.bar(location_counts.index, location_counts.values)\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Location Counts')\nplt.show()"
  },
  {
    "db_id": "local_govt_mdm",
    "question": "Show me a bar chart displaying the count of council tax entries for each CMI cross reference ID.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nCMI_Cross_References = pd.read_sql(\"SELECT * FROM CMI_Cross_References\", conn)\nCouncil_Tax = pd.read_sql(\"SELECT * FROM Council_Tax\", conn)\nCMI_Cross_References.columns = CMI_Cross_References.columns.str.lower()\nCouncil_Tax.columns = Council_Tax.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(CMI_Cross_References, Council_Tax, on='cmi_cross_ref_id')\n\n# Group by cmi_cross_ref_id and count the occurrences\ngrouped_df = merged_df.groupby('cmi_cross_ref_id').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['cmi_cross_ref_id'], grouped_df['count'])\nplt.xlabel('cmi_cross_ref_id')\nplt.ylabel('Count')\nplt.title('Count of occurrences by cmi_cross_ref_id')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "List the types of competition and the number of competitions of each type in a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the number of occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Create a bar plot\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Type')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Show me a bar chart displaying the average rating star for each reviewer.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nReviewer = pd.read_sql(\"SELECT * FROM Reviewer\", conn)\nRating.columns = Rating.columns.str.lower()\nReviewer.columns = Reviewer.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Rating, Reviewer, on='rid')\n\n# Calculate the average stars for each reviewer\navg_stars = merged_df.groupby('name')['stars'].mean()\n\n# Create a bar plot\nplt.bar(avg_stars.index, avg_stars.values)\nplt.xlabel('Reviewer')\nplt.ylabel('Average Stars')\nplt.title('Average Stars by Reviewer')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "county_public_safety",
    "question": "What is the distribution of crime rates among counties with a city having a white percentage greater than 90, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncounty_public_safety = pd.read_sql(\"SELECT * FROM county_public_safety\", conn)\ncity.columns = city.columns.str.lower()\ncounty_public_safety.columns = county_public_safety.columns.str.lower()\n\n# Merge city and county_public_safety tables\nmerged_df = pd.merge(city, county_public_safety, on='county_id')\n\n# Filter rows where white population is greater than 90\nfiltered_df = merged_df[merged_df['white'] > 90]\n\n# Group by crime_rate and count the number of occurrences\ngrouped_df = filtered_df.groupby('crime_rate').size().reset_index(name='count')\n\n# Plot pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['crime_rate'], autopct='%1.1f%%')\nplt.title('Crime Rate Distribution for Counties with White Population > 90%')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "What is the count of directors for each star rating in the movie ratings, visualized as a scatter chart?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nMovie = pd.read_sql(\"SELECT * FROM Movie\", conn)\nRating.columns = Rating.columns.str.lower()\nMovie.columns = Movie.columns.str.lower()\n\n# Joining the Rating and Movie tables\nmerged_df = pd.merge(Rating, Movie, on='mid')\n\n# Grouping by stars and counting the number of directors\ngrouped_df = merged_df.groupby('stars')['director'].count().reset_index()\n\n# Plotting the scatter plot\nplt.scatter(grouped_df['stars'], grouped_df['director'])\nplt.xlabel('Stars')\nplt.ylabel('Number of Directors')\nplt.title('Scatter Plot of Stars vs Number of Directors')\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Show me a line chart of the count of students on scholarship in the Sportsinfo table, categorized by last name.",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nStudent = pd.read_sql(\"SELECT * FROM Student\", conn)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nStudent.columns = Student.columns.str.lower()\nSportsinfo.columns = Sportsinfo.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Student, Sportsinfo, on='stuid')\n\n# Group by lname and count the number of stuid\ngrouped_df = merged_df.groupby('lname').size().reset_index(name='count')\n\n# Sort the dataframe by lname\nsorted_df = grouped_df.sort_values('lname')\n\n# Plot the line chart\nplt.plot(sorted_df['lname'], sorted_df['count'])\nplt.xlabel('lname')\nplt.ylabel('Count')\nplt.title('Count of stuid by lname')\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "A bar chart groups the lot details , and computes the number of each lot details , I want to display x axis in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nLOTS = pd.read_sql(\"SELECT * FROM LOTS\", conn)\nLOTS.columns = LOTS.columns.str.lower()\n\n# Grouping the data by 'lot_details' and counting the occurrences\ngrouped_data = LOTS.groupby('lot_details').size().reset_index(name='count')\n\n# Sorting the data by 'lot_details' in ascending order\nsorted_data = grouped_data.sort_values('lot_details')\n\n# Creating the bar plot\nplt.bar(sorted_data['lot_details'], sorted_data['count'])\nplt.xlabel('Lot Details')\nplt.ylabel('Count')\nplt.title('Count of Lot Details')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Give me a bar for what are the types of competition and number of competitions for that type ? , rank in desc by the y axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the number of occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort the counts in descending order\ncompetition_counts = competition_counts.sort_values(by='count', ascending=False)\n\n# Create a bar plot\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Type')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "Just show the id and name of each editor using a bar chart, rank from low to high by the X-axis.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the editor table\neditor_df = pd.read_sql(\"SELECT * FROM editor\", conn)\neditor_df.columns = map(str.lower, editor_df.columns)\n\n# Read the journal_committee table\njournal_committee_df = pd.read_sql(\"SELECT * FROM journal_committee\", conn)\njournal_committee_df.columns = map(str.lower, journal_committee_df.columns)\n\n# Merge the two tables on Editor_ID\nmerged_df = pd.merge(editor_df, journal_committee_df, on=\"editor_id\")\n\n# Sort the merged dataframe by Name\nsorted_df = merged_df.sort_values(by=\"name\")\n\n# Create a bar plot\nplt.bar(sorted_df[\"name\"], sorted_df[\"editor_id\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Editor ID\")\nplt.title(\"Editor ID by Name\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "For all organizations that have grants of more than 6000 dollars, compare the number of details of the organizations with a bar chart, display in asc by the bars.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Grants table\ngrants = pd.read_sql(\"SELECT * FROM Grants\", conn)\n\n# Read the Organisations table\norganisations = pd.read_sql(\"SELECT * FROM Organisations\", conn)\n\n# Convert column names to lowercase\ngrants.columns = grants.columns.str.lower()\norganisations.columns = organisations.columns.str.lower()\n\n# merge the grants and organisations tables on organisation_id\nmerged_data = pd.merge(grants, organisations, on=\"organisation_id\")\n\n# group by organisation_details and count the occurrences\ngrouped_data = merged_data.groupby(\"organisation_details\").size().reset_index(name=\"count\")\n\n# sort the data by organisation_details in ascending order\nsorted_data = grouped_data.sort_values(\"organisation_details\")\n\n# plot the bar chart\nplt.bar(sorted_data[\"organisation_details\"], sorted_data[\"count\"])\nplt.xlabel(\"Organisation Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Grants by Organisation Details\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "music_4",
    "question": "How many times has each famous title been achieved by artists who have both had volumes that spent more than 2 weeks on top and volumes that spent less than 2 weeks on top, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nvolume = pd.read_sql(\"SELECT * FROM volume\", conn)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nvolume = pd.read_sql(\"SELECT * FROM volume\", conn)\nartist.columns = artist.columns.str.lower()\nvolume.columns = volume.columns.str.lower()\nartist.columns = artist.columns.str.lower()\nvolume.columns = volume.columns.str.lower()\n\n# Perform the SQL query using pandas merge\nmerged_df = pd.merge(artist, volume, on='artist_id')\nfiltered_df = merged_df[(merged_df['weeks_on_top'] > 2) & (merged_df['weeks_on_top'] < 2)]\nresult_df = filtered_df.groupby('famous_title').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(result_df['famous_title'], result_df['count'])\nplt.xlabel('Famous Title')\nplt.ylabel('Count')\nplt.title('Number of Famous Titles')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "Show me a bar chart displaying the project detail and task count for each project, sorted in ascending order by task count.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nProjects = pd.read_sql(\"SELECT * FROM Projects\", conn)\nTasks = pd.read_sql(\"SELECT * FROM Tasks\", conn)\nProjects.columns = Projects.columns.str.lower()\nTasks.columns = Tasks.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Projects, Tasks, on='project_id')\n\n# Group by project_details and count the number of tasks\ngrouped_df = merged_df.groupby('project_details').size().reset_index(name='task_count')\n\n# Sort the dataframe by task_count in ascending order\nsorted_df = grouped_df.sort_values('task_count')\n\n# Plot the bar chart\nplt.bar(sorted_df['project_details'], sorted_df['task_count'])\nplt.xlabel('Project Details')\nplt.ylabel('Task Count')\nplt.title('Task Count by Project')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "Bar chart x axis nationality y axis the total number , rank in desc by the x axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nHOST = pd.read_sql(\"SELECT * FROM HOST\", conn)\nHOST.columns = HOST.columns.str.lower()\n\n# Grouping the data by nationality and counting the occurrences\nnationality_counts = HOST.groupby('nationality').size().reset_index(name='count')\n\n# Sorting the data by nationality in descending order\nnationality_counts = nationality_counts.sort_values(by='nationality', ascending=False)\n\n# Creating the bar plot\nplt.bar(nationality_counts['nationality'], nationality_counts['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Hosts by Nationality')\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Can you draw the trend of sum budget in billions over the creation?, I want to rank x axis in descending order.",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the department table\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\n\n# Convert column names to lowercase\ndepartment.columns = department.columns.str.lower()\n\n# Perform the SQL query\nresult = department.groupby(\"creation\")[\"budget_in_billions\"].sum().reset_index().sort_values(\"creation\", ascending=False)\n\n# Plot the line chart\nplt.plot(result[\"creation\"], result[\"budget_in_billions\"])\nplt.xlabel(\"Creation\")\nplt.ylabel(\"Budget in Billions\")\nplt.title(\"Total Budget by Creation\")\nplt.show()"
  },
  {
    "db_id": "voter_2",
    "question": "What are the distinct majors that students with treasurer votes are studying, and how many students are in each major, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nVOTING_RECORD = pd.read_sql(\"SELECT * FROM VOTING_RECORD\", conn)\nSTUDENT.columns = STUDENT.columns.str.lower()\nVOTING_RECORD.columns = VOTING_RECORD.columns.str.lower()\n\n# Merge the STUDENT and VOTING_RECORD dataframes\nmerged_df = pd.merge(STUDENT, VOTING_RECORD, left_on='stuid', right_on='treasurer_vote')\n\n# Get the distinct majors and count the number of students for each major\nmajor_counts = merged_df['major'].value_counts()\n\n# Plot the bar chart\nplt.bar(major_counts.index, major_counts.values)\nplt.xlabel('Major')\nplt.ylabel('Count')\nplt.title('Number of Students by Major')\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Group and count the durations for each actor with a bar graph , order in asc by the total number .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nactor = pd.read_sql(\"SELECT * FROM actor\", conn)\nactor.columns = actor.columns.str.lower()\n\n# Group by duration and count the occurrences\nduration_counts = actor.groupby('duration').size().reset_index(name='count')\n\n# Sort by count in ascending order\nduration_counts = duration_counts.sort_values('count')\n\n# Plot the bar chart\nplt.bar(duration_counts['duration'], duration_counts['count'])\nplt.xlabel('Duration')\nplt.ylabel('Count')\nplt.title('Count of Durations')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "What is the scatter plot of the count of ratings and the average number of stars awarded by each reviewer?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nReviewer = pd.read_sql(\"SELECT * FROM Reviewer\", conn)\nRating.columns = Rating.columns.str.lower()\nReviewer.columns = Reviewer.columns.str.lower()\n\n# Merge Rating and Reviewer tables\nmerged_df = pd.merge(Rating, Reviewer, on='rid')\n\n# Group by rid and calculate count and average of stars\ngrouped_df = merged_df.groupby('rid').agg({'stars': ['count', 'mean']})\n\n# Reset column names\ngrouped_df.columns = ['count', 'average']\n\n# Scatter plot\nplt.scatter(grouped_df['count'], grouped_df['average'])\nplt.xlabel('Count')\nplt.ylabel('Average')\nplt.title('Scatter plot of Count vs Average')\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "Return the results of all music festivals using a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the music_festival table\nmusic_festival = pd.read_sql(\"SELECT * FROM music_festival\", conn)\n\n# Convert column names to lowercase\nmusic_festival.columns = music_festival.columns.str.lower()\n\n# Perform the SQL query\nresult_counts = music_festival.groupby('result').size().reset_index(name='count')\n\n# Create a pie chart\nplt.pie(result_counts['count'], labels=result_counts['result'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Show the pie chart\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "Count the total number of different locations of parties using a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the party table into a pandas DataFrame\nparty_df = pd.read_sql(\"SELECT * FROM party\", conn)\n\n# Convert column names to lowercase\nparty_df.columns = party_df.columns.str.lower()\n\n# Perform the SQL query and group by Location\nlocation_counts = party_df.groupby('location').size()\n\n# Create a pie chart\nplt.pie(location_counts, labels=location_counts.index, autopct='%1.1f%%')\nplt.title('Party Locations')\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Bar chart x axis duration y axis how many duration",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nactor = pd.read_sql(\"SELECT * FROM actor\", conn)\nactor.columns = actor.columns.str.lower()\n\n# Group by duration and count the occurrences\nduration_counts = actor.groupby('duration').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(duration_counts['duration'], duration_counts['count'])\nplt.xlabel('Duration')\nplt.ylabel('Count')\nplt.title('Distribution of Duration')\nplt.show()"
  },
  {
    "db_id": "riding_club",
    "question": "Visualize a bar chart that X-axis is the gender and compute the number of players in each gender as a Y-axis , show from low to high by the X .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nplayer.columns = player.columns.str.lower()\n\n# Grouping the data by gender and counting the occurrences\ngender_counts = player.groupby('gender').size().reset_index(name='count')\n\n# Sorting the data by gender in ascending order\ngender_counts = gender_counts.sort_values('gender')\n\n# Creating the bar plot\nplt.bar(gender_counts['gender'], gender_counts['count'])\nplt.xlabel('Gender')\nplt.ylabel('Count')\nplt.title('Gender Distribution')\nplt.show()"
  },
  {
    "db_id": "scientist_1",
    "question": "Give me a bar for what are the names of projects that require more than 300 hours, and how many scientists are assigned to each?, and list by the Name in desc.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the projects table\nprojects = pd.read_sql(\"SELECT * FROM projects\", conn)\nprojects.columns = map(str.lower, projects.columns)\n\n# Read the assignedto table\nassignedto = pd.read_sql(\"SELECT * FROM assignedto\", conn)\nassignedto.columns = map(str.lower, assignedto.columns)\n\n# Merge the projects and assignedto tables\nmerged = pd.merge(projects, assignedto, left_on=\"code\", right_on=\"project\")\n\n# Filter the merged table based on hours > 300\nfiltered = merged[merged[\"hours\"] > 300]\n\n# Group by project name and count the number of occurrences\ngrouped = filtered.groupby(\"name\").size().reset_index(name=\"count\")\n\n# Sort the grouped table by name in descending order\nsorted_table = grouped.sort_values(\"name\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_table[\"name\"], sorted_table[\"count\"])\nplt.xlabel(\"Project Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Projects with Hours > 300\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 , and sort names in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry.columns = country.columns.str.lower()\n\n# Group by governmentform and calculate the sum of population\ngrouped_data = country.groupby('governmentform')['population'].sum()\n\n# Sort the data by governmentform in ascending order\nsorted_data = grouped_data.sort_index()\n\n# Create a bar plot\nplt.bar(sorted_data.index, sorted_data.values)\n\n# Set the x-axis label\nplt.xlabel('Government Form')\n\n# Set the y-axis label\nplt.ylabel('Population')\n\n# Set the title of the plot\nplt.title('Population by Government Form')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Draw a bar chart for what are the different ship flags, and how many ships have each?, show names in ascending order please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ship table\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\n\n# Perform the SQL query\nresult = ship_df.groupby('flag').size().reset_index(name='count').sort_values('flag')\n\n# Generate the bar plot\nplt.bar(result['flag'], result['count'])\nplt.xlabel('Flag')\nplt.ylabel('Count')\nplt.title('Number of Ships by Flag')\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "What are the statuses and average populations of each city Plot them as bar chart , and I want to order names from high to low order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncity.columns = city.columns.str.lower()\n\n# Group by status and calculate average population\ngrouped_data = city.groupby('status')['population'].mean()\n\n# Sort the data by status in descending order\nsorted_data = grouped_data.sort_index(ascending=False)\n\n# Create a bar plot\nplt.bar(sorted_data.index, sorted_data.values)\n\n# Set the labels and title\nplt.xlabel('Status')\nplt.ylabel('Average Population')\nplt.title('Average Population by Status')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "Display a pie chart for how many music festivals have had each kind of result, ordered descending by count?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the music_festival table\nmusic_festival = pd.read_sql(\"SELECT * FROM music_festival\", conn)\n\n# Convert column names to lowercase\nmusic_festival.columns = music_festival.columns.str.lower()\n\n# Perform the SQL query\nresult_counts = music_festival.groupby('result').size().reset_index(name='count')\nresult_counts = result_counts.sort_values(by='count', ascending=False)\n\n# Plot the pie chart\nplt.pie(result_counts['count'], labels=result_counts['result'], autopct='%1.1f%%')\nplt.title('Music Festival Results')\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Show the total number from each rank, and list the total number from high to low order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the captain table\ncaptain_df = pd.read_sql(\"SELECT * FROM captain\", conn)\n\n# Convert column names to lowercase\ncaptain_df.columns = captain_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = captain_df.groupby('rank').size().reset_index(name='count').sort_values(by='count', ascending=False)\n\n# Generate the bar plot\nplt.bar(result_df['rank'], result_df['count'])\nplt.xlabel('Rank')\nplt.ylabel('Count')\nplt.title('Count of Captains by Rank')\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "What is the breakdown of the role that is involved with the most number of projects for each staff id in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nStaff_Roles = pd.read_sql(\"SELECT * FROM Staff_Roles\", conn)\nProject_Staff = pd.read_sql(\"SELECT * FROM Project_Staff\", conn)\nProject_outcomes = pd.read_sql(\"SELECT * FROM Project_outcomes\", conn)\nStaff_Roles.columns = Staff_Roles.columns.str.lower()\nProject_Staff.columns = Project_Staff.columns.str.lower()\nProject_outcomes.columns = Project_outcomes.columns.str.lower()\n\n# Merge the tables\nmerged_df = pd.merge(pd.merge(Staff_Roles, Project_Staff, on='role_code'), Project_outcomes, on='project_id')\n\n# Group by staff_id and count the number of occurrences\ngrouped_df = merged_df.groupby('staff_id').size().reset_index(name='count')\n\n# Sort by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['staff_id'], sorted_df['count'])\nplt.xlabel('Staff ID')\nplt.ylabel('Count')\nplt.title('Number of Projects per Staff')\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "What are the number of the purchase details of transactions with amount bigger than 10000?, and I want to list by the X-axis in desc please.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the PURCHASES and TRANSACTIONS tables\npurchases = pd.read_sql(\"SELECT * FROM PURCHASES\", conn)\ntransactions = pd.read_sql(\"SELECT * FROM TRANSACTIONS\", conn)\n\n# Convert column names to lowercase\npurchases.columns = purchases.columns.str.lower()\ntransactions.columns = transactions.columns.str.lower()\n\n# Merge the PURCHASES and TRANSACTIONS tables on the common column\nmerged_data = pd.merge(purchases, transactions, left_on=\"purchase_transaction_id\", right_on=\"transaction_id\")\n\n# Filter the merged data based on the condition\nfiltered_data = merged_data[merged_data[\"amount_of_transaction\"] > 10000]\n\n# Group the filtered data by purchase_details and count the occurrences\ngrouped_data = filtered_data.groupby(\"purchase_details\").size().reset_index(name=\"count\")\n\n# Sort the grouped data by purchase_details in descending order\nsorted_data = grouped_data.sort_values(\"purchase_details\", ascending=False)\n\n# Generate the bar plot\nplt.bar(sorted_data[\"purchase_details\"], sorted_data[\"count\"])\nplt.xlabel(\"Purchase Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Bar Plot of Purchase Details\")\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "What is the name of the game that has been played the most, and can you show the total number of hours played for that game in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nPlays_games = pd.read_sql(\"SELECT * FROM Plays_games\", conn)\nVideo_games = pd.read_sql(\"SELECT * FROM Video_games\", conn)\nPlays_games.columns = Plays_games.columns.str.lower()\nVideo_games.columns = Video_games.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Plays_games, Video_games, on='gameid')\n\n# Group by gameid and calculate the sum of hours_played\ngrouped_df = merged_df.groupby('gameid').agg({'hours_played': 'sum'})\n\n# Sort the dataframe by sum of hours_played in descending order\nsorted_df = grouped_df.sort_values('hours_played', ascending=False)\n\n# Select the game with the highest sum of hours_played\ntop_game = sorted_df.head(1)\n\n# Plot the result as a bar chart\nplt.bar(top_game.index, top_game['hours_played'])\nplt.xlabel('Game Name')\nplt.ylabel('Total Hours Played')\nplt.title('Top Game by Total Hours Played')\nplt.show()"
  },
  {
    "db_id": "riding_club",
    "question": "What is the proportion of the gender of players ?",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nplayer.columns = player.columns.str.lower()\n\n# Grouping the data by gender and counting the occurrences\ngender_count = player.groupby('gender').size()\n\n# Creating a pie chart\nplt.pie(gender_count, labels=gender_count.index, autopct='%1.1f%%')\nplt.title('Gender Distribution')\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "What are the response received dates for the documents described as 'Regular' or granted with more than 100, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDocuments = pd.read_sql(\"SELECT * FROM Documents\", conn)\nDocument_Types = pd.read_sql(\"SELECT * FROM Document_Types\", conn)\nGrants = pd.read_sql(\"SELECT * FROM Grants\", conn)\nDocuments.columns = Documents.columns.str.lower()\nDocument_Types.columns = Document_Types.columns.str.lower()\nGrants.columns = Grants.columns.str.lower()\n\n# Merge tables\nmerged_df = pd.merge(Documents, Document_Types, on='document_type_code')\nmerged_df = pd.merge(merged_df, Grants, on='grant_id')\n\n# Filter data\nfiltered_df = merged_df[(merged_df['document_description'] == 'regular') | (merged_df['grant_amount'] > 100)]\n\n# Group by response_received_date and count\ngrouped_df = filtered_df.groupby('response_received_date').size().reset_index(name='count')\n\n# Plot bar chart\nplt.bar(grouped_df['response_received_date'], grouped_df['count'])\nplt.xlabel('Response Received Date')\nplt.ylabel('Count')\nplt.title('Number of Documents by Response Received Date')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "What is the game name and the total number of hours played for the game that has the highest number of hours played, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nPlays_games = pd.read_sql(\"SELECT * FROM Plays_games\", conn)\nVideo_games = pd.read_sql(\"SELECT * FROM Video_games\", conn)\nPlays_games.columns = Plays_games.columns.str.lower()\nVideo_games.columns = Video_games.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Plays_games, Video_games, on='gameid')\n\n# Group by gameid and calculate the sum of hours_played\ngrouped_df = merged_df.groupby('gameid').agg({'gname': 'first', 'hours_played': 'sum'}).reset_index()\n\n# Sort the dataframe by sum of hours_played in descending order\nsorted_df = grouped_df.sort_values('hours_played', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['gname'], sorted_df['hours_played'])\nplt.xlabel('Game Name')\nplt.ylabel('Total Hours Played')\nplt.title('Total Hours Played by Game')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "car_1",
    "question": "Show me a bar chart for what are the names and ids of all makers with more than 3 models?, show FullName in ascending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the CAR_MAKERS table\ncar_makers = pd.read_sql(\"SELECT * FROM CAR_MAKERS\", conn)\ncar_makers.columns = map(str.lower, car_makers.columns)\n\n# Read the MODEL_LIST table\nmodel_list = pd.read_sql(\"SELECT * FROM MODEL_LIST\", conn)\nmodel_list.columns = map(str.lower, model_list.columns)\n\n# Merge the two tables on the Maker column\nmerged_data = pd.merge(car_makers, model_list, left_on='id', right_on='maker')\n\n# Sort the merged data by FullName in ascending order\nsorted_data = merged_data.sort_values(by='fullname')\n\n# Create a bar plot of FullName and Id\nplt.bar(sorted_data['fullname'], sorted_data['id'])\nplt.xlabel('FullName')\nplt.ylabel('Id')\nplt.title('Car Makers')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "I want to see trend of the number of creation by creation , and I want to list from low to high by the Creation .",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = department.columns.str.lower()\n\n# Assuming 'department' is a DataFrame containing the table data\n\n# Grouping the data by 'creation' and counting the occurrences\ngrouped_data = department.groupby('creation').size().reset_index(name='count')\n\n# Sorting the data by 'creation' in ascending order\nsorted_data = grouped_data.sort_values('creation')\n\n# Plotting the line chart\nplt.plot(sorted_data['creation'], sorted_data['count'])\nplt.xlabel('Creation')\nplt.ylabel('Count')\nplt.title('Line Chart of Creation Count')\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "What are the different ship flags , and how many ships have each . Show a pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Grouping the data by 'flag' and counting the occurrences\nship_grouped = ship.groupby('flag').size().reset_index(name='count')\n\n# Creating a pie chart\nplt.pie(ship_grouped['count'], labels=ship_grouped['flag'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Displaying the chart\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "Create a pie chart showing the number of party across party .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\nrepresentative.columns = representative.columns.str.lower()\n\n# Group by party and count the number of representatives in each party\nparty_counts = representative.groupby('party').size()\n\n# Create a pie chart\nplt.pie(party_counts, labels=party_counts.index, autopct='%1.1f%%')\nplt.axis('equal')\n\n# Display the chart\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "Group and count the name attribute for visualizing a bar chart, and display in descending by the names.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the editor table\neditor_df = pd.read_sql(\"SELECT * FROM editor\", conn)\n\n# Convert column names to lowercase\neditor_df.columns = editor_df.columns.str.lower()\n\n# Perform the SQL query\nresult = editor_df.groupby('name').size().reset_index(name='count').sort_values('name', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['name'], result['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Bar Chart of Name Counts')\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "Give me a bar for what are the different parties of representative ? Show the party name and the number of representatives in each party , and show total number in asc order please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\nrepresentative.columns = representative.columns.str.lower()\n\n# Group by party and count the number of representatives in each party\nparty_counts = representative.groupby('party').size()\n\n# Sort the parties by count in ascending order\nparty_counts = party_counts.sort_values()\n\n# Create a bar plot\nplt.bar(party_counts.index, party_counts.values)\n\n# Set the x-axis label\nplt.xlabel('Party')\n\n# Set the y-axis label\nplt.ylabel('Count')\n\n# Set the title of the plot\nplt.title('Number of Representatives by Party')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "riding_club",
    "question": "Can you create a line chart displaying the names of players and their corresponding votes?",
    "chart": "Line",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer_coach = pd.read_sql(\"SELECT * FROM player_coach\", conn)\ncoach = pd.read_sql(\"SELECT * FROM coach\", conn)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nplayer_coach.columns = player_coach.columns.str.lower()\ncoach.columns = coach.columns.str.lower()\nplayer.columns = player.columns.str.lower()\n\n# Perform the join operation\nmerged_data = pd.merge(pd.merge(player_coach, coach, on='coach_id'), player, on='player_id')\n\n# Select the required columns\ndata = merged_data[['player_name', 'votes']]\n\n# Plot the line chart\nplt.plot(data['player_name'], data['votes'])\nplt.xlabel('Player Name')\nplt.ylabel('Votes')\nplt.title('Votes by Player')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Bar chart x axis location y axis how many location , I want to display names from high to low order please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\nperformance.columns = performance.columns.str.lower()\n\n# Group by location and count the occurrences\nlocation_counts = performance.groupby('location').size().reset_index(name='count')\n\n# Sort by location in descending order\nlocation_counts = location_counts.sort_values('location', ascending=False)\n\n# Plot the bar chart\nplt.bar(location_counts['location'], location_counts['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Location Counts')\nplt.show()"
  },
  {
    "db_id": "voter_2",
    "question": "What is the distribution of class senator votes among the students, showing the distinct first names of the students and the corresponding number of votes for each student in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nVOTING_RECORD = pd.read_sql(\"SELECT * FROM VOTING_RECORD\", conn)\nSTUDENT.columns = STUDENT.columns.str.lower()\nVOTING_RECORD.columns = VOTING_RECORD.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(STUDENT, VOTING_RECORD, left_on='stuid', right_on='class_senator_vote')\n\n# Get distinct first names\ndistinct_names = merged_df['fname'].unique()\n\n# Count the occurrences of each first name\nname_counts = merged_df['fname'].value_counts()\n\n# Create a bar plot\nplt.bar(distinct_names, name_counts)\n\n# Set the labels and title\nplt.xlabel('First Name')\nplt.ylabel('Count')\nplt.title('Count of Students by First Name')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "How many hours per week and games played by David Shieber can you represent in a bar chart?",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nStudent = pd.read_sql(\"SELECT * FROM Student\", conn)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nStudent = pd.read_sql(\"SELECT * FROM Student\", conn)\nSportsinfo.columns = Sportsinfo.columns.str.lower()\nStudent.columns = Student.columns.str.lower()\nSportsinfo.columns = Sportsinfo.columns.str.lower()\nStudent.columns = Student.columns.str.lower()\n\n# Joining tables\nmerged_df = pd.merge(Sportsinfo, Student, on='stuid')\n\n# Filtering data for David Shieber\ndavid_df = merged_df[(merged_df['fname'] == 'david') & (merged_df['lname'] == 'shieber')]\n\n# Calculating total hours and total games\ntotal_hours = david_df['hoursperweek'].sum()\ntotal_games = david_df['gamesplayed'].sum()\n\n# Creating a bar plot\ncategories = ['Total Hours', 'Total Games']\ncounts = [total_hours, total_games]\n\nplt.bar(categories, counts)\nplt.xlabel('Categories')\nplt.ylabel('Counts')\nplt.title('Total Hours and Total Games for David Shieber')\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "Which editors are part of multiple journal committees and how many committees are they involved in? Visualize the data using a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\njournal_committee = pd.read_sql(\"SELECT * FROM journal_committee\", conn)\neditor.columns = editor.columns.str.lower()\njournal_committee.columns = journal_committee.columns.str.lower()\n\n# Merge the editor and journal_committee tables\nmerged_df = pd.merge(editor, journal_committee, on='editor_id')\n\n# Group by name and count the number of occurrences\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Filter the groups with count >= 2\nfiltered_df = grouped_df[grouped_df['count'] >= 2]\n\n# Plot the pie chart\nplt.pie(filtered_df['count'], labels=filtered_df['name'], autopct='%1.1f%%')\nplt.title('Editor Distribution with Count >= 2')\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "What is the most frequent transaction type in the database, represented by a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRef_Transaction_Types = pd.read_sql(\"SELECT * FROM Ref_Transaction_Types\", conn)\nTRANSACTIONS = pd.read_sql(\"SELECT * FROM TRANSACTIONS\", conn)\nRef_Transaction_Types.columns = Ref_Transaction_Types.columns.str.lower()\nTRANSACTIONS.columns = TRANSACTIONS.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(Ref_Transaction_Types, TRANSACTIONS, on='transaction_type_code')\n\n# Grouping by transaction type description and counting the frequency\ngrouped_df = merged_df.groupby('transaction_type_description').size().reset_index(name='frequency')\n\n# Sorting by frequency in descending order and selecting the top 1\nsorted_df = grouped_df.sort_values('frequency', ascending=False).head(1)\n\n# Plotting the bar chart\nplt.bar(sorted_df['transaction_type_description'], sorted_df['frequency'])\nplt.xlabel('Transaction Type Description')\nplt.ylabel('Frequency')\nplt.title('Most Frequent Transaction Type')\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Give me a bar chart showing the total number of ships' classes that do not have a captain, rank bar in desc order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ship table\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Read the captain table\ncaptain_df = pd.read_sql(\"SELECT * FROM captain\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\ncaptain_df.columns = captain_df.columns.str.lower()\n\n# filter ship table to exclude ship_id present in captain table\nfiltered_ship_df = ship_df[~ship_df['ship_id'].isin(captain_df['ship_id'])]\n\n# group by class and count the occurrences\ngrouped_ship_df = filtered_ship_df.groupby('class').size().reset_index(name='count')\n\n# sort by class in descending order\nsorted_ship_df = grouped_ship_df.sort_values('class', ascending=False)\n\n# plot the bar chart\nplt.bar(sorted_ship_df['class'], sorted_ship_df['count'])\nplt.xlabel('Class')\nplt.ylabel('Count')\nplt.title('Number of Ships by Class')\nplt.show()\n"
  },
  {
    "db_id": "movie_1",
    "question": "A bar chart for what are the number of the titles of all movies that have between 3 and 5 stars?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating and Movie tables\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\n\n# Convert column names to lowercase\nrating_df.columns = rating_df.columns.str.lower()\nmovie_df.columns = movie_df.columns.str.lower()\n\n# Merge the Rating and Movie tables on the mID column\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Filter the merged dataframe for stars between 3 and 5\nfiltered_df = merged_df[(merged_df[\"stars\"] >= 3) & (merged_df[\"stars\"] <= 5)]\n\n# Group by title and count the occurrences\ngrouped_df = filtered_df.groupby(\"title\").size().reset_index(name=\"count\")\n\n# Plot the bar chart\nplt.bar(grouped_df[\"title\"], grouped_df[\"count\"])\nplt.xlabel(\"Movie Title\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Ratings for Movies with Stars between 3 and 5\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "A bar chart about what are the statuses and average populations of each city ? , I want to sort by the the average of population in ascending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncity.columns = city.columns.str.lower()\n\n# Group by status and calculate average population\ngrouped_city = city.groupby('status')['population'].mean()\n\n# Sort by average population in ascending order\nsorted_city = grouped_city.sort_values()\n\n# Create bar plot\nplt.bar(sorted_city.index, sorted_city.values)\n\n# Set labels and title\nplt.xlabel('Status')\nplt.ylabel('Average Population')\nplt.title('Average Population by Status')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "company_employee",
    "question": "Return a bar chart about the number of companies for each industry.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the company table\ncompany_df = pd.read_sql(\"SELECT * FROM company\", conn)\n\n# Convert column names to lowercase\ncompany_df.columns = company_df.columns.str.lower()\n\n# Group by Industry and count the occurrences\nindustry_counts = company_df.groupby('industry').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(industry_counts['industry'], industry_counts['count'])\nplt.xlabel('Industry')\nplt.ylabel('Count')\nplt.title('Number of Companies by Industry')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "What are the purchase details of transactions with amount bigger than 10000, and count them by a pie chart",
    "chart": "Pie",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the PURCHASES and TRANSACTIONS tables\npurchases = pd.read_sql(\"SELECT * FROM PURCHASES\", conn)\ntransactions = pd.read_sql(\"SELECT * FROM TRANSACTIONS\", conn)\n\n# Convert column names to lowercase\npurchases.columns = purchases.columns.str.lower()\ntransactions.columns = transactions.columns.str.lower()\n\n# Merge the PURCHASES and TRANSACTIONS tables on the common column\nmerged_data = pd.merge(purchases, transactions, left_on=\"purchase_transaction_id\", right_on=\"transaction_id\")\n\n# Filter the merged data based on the condition\nfiltered_data = merged_data[merged_data[\"amount_of_transaction\"] > 10000]\n\n# Group the filtered data by purchase_details and count the occurrences\ngrouped_data = filtered_data.groupby(\"purchase_details\").size()\n\n# Plot the pie chart\nplt.pie(grouped_data, labels=grouped_data.index, autopct=\"%1.1f%%\")\nplt.title(\"Purchase Details Distribution\")\nplt.show()"
  },
  {
    "db_id": "scientist_1",
    "question": "Find the number of scientists involved for each project name. ",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the projects table\nprojects = pd.read_sql(\"SELECT * FROM projects\", conn)\n\n# Read the assignedto table\nassignedto = pd.read_sql(\"SELECT * FROM assignedto\", conn)\n\n# Convert column names to lowercase\nprojects.columns = projects.columns.str.lower()\nassignedto.columns = assignedto.columns.str.lower()\n\n# merge the projects and assignedto tables on the code column\nmerged_data = pd.merge(projects, assignedto, left_on=\"code\", right_on=\"project\")\n\n# group by project name and count the number of occurrences\ngrouped_data = merged_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# plot the bar chart\nplt.bar(grouped_data[\"name\"], grouped_data[\"count\"])\nplt.xlabel(\"Project Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Assignments per Project\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "riding_club",
    "question": "Can you create a bar chart to display the number of coaches for each club?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\ncoach = pd.read_sql(\"SELECT * FROM coach\", conn)\nclub.columns = club.columns.str.lower()\ncoach.columns = coach.columns.str.lower()\n\n# Joining the club and coach tables\nmerged_df = pd.merge(club, coach, on='club_id')\n\n# Grouping by club_name and counting the number of rows\ngrouped_df = merged_df.groupby('club_name').size().reset_index(name='count')\n\n# Plotting the bar chart\nplt.bar(grouped_df['club_name'], grouped_df['count'])\nplt.xlabel('Club Name')\nplt.ylabel('Count')\nplt.title('Number of Coaches per Club')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "voter_2",
    "question": "For each advisor, report the total number of students advised by him or her. Plot them as scatter chart.",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the STUDENT table\nstudent_df = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\n\n# Convert column names to lowercase\nstudent_df.columns = student_df.columns.str.lower()\n\n# Perform the query and group by Advisor\nadvisor_count = student_df.groupby('advisor').size().reset_index(name='count')\n\n# Scatter plot\nplt.scatter(advisor_count['advisor'], advisor_count['count'])\nplt.xlabel('Advisor')\nplt.ylabel('Count')\nplt.title('Number of Students per Advisor')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Visualize the title and and the total star rating of the movie using a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating and Movie tables\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\n\n# Convert column names to lowercase\nrating_df.columns = rating_df.columns.str.lower()\nmovie_df.columns = movie_df.columns.str.lower()\n\n# Merge the Rating and Movie tables on mID column\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Group by title and calculate the sum of stars\ngrouped_df = merged_df.groupby(\"title\")[\"stars\"].sum().reset_index()\n\n# Plot the bar chart\nplt.bar(grouped_df[\"title\"], grouped_df[\"stars\"])\nplt.xlabel(\"Movie Title\")\nplt.ylabel(\"Total Stars\")\nplt.title(\"Total Stars by Movie Title\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "company_employee",
    "question": "Bar chart x axis industry y axis the number of industry, could you list in ascending by the X-axis?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"company\" table\ncompany_data = pd.read_sql(\"SELECT * FROM company\", conn)\n\n# Convert column names to lowercase\ncompany_data.columns = company_data.columns.str.lower()\n\n# Perform the SQL query\nindustry_counts = company_data.groupby('industry').size().reset_index(name='count')\nindustry_counts = industry_counts.sort_values('industry')\n\n# Generate the bar plot\nplt.bar(industry_counts['industry'], industry_counts['count'])\nplt.xlabel('Industry')\nplt.ylabel('Count')\nplt.title('Number of Companies by Industry')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Show all sport name and the number of students in a bar chart , display from low to high by the bar .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nSportsinfo.columns = Sportsinfo.columns.str.lower()\n\n# Grouping the data by sportname and counting the occurrences\nsport_counts = Sportsinfo.groupby('sportname').size().reset_index(name='count')\n\n# Sorting the data by sportname in ascending order\nsport_counts = sport_counts.sort_values('sportname')\n\n# Creating the bar plot\nplt.bar(sport_counts['sportname'], sport_counts['count'])\nplt.xlabel('Sport Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Sport Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "voter_2",
    "question": "For each advisor , report the total number of students advised by him or her . Plot them as scatter chart .",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nSTUDENT.columns = STUDENT.columns.str.lower()\n\n# Assuming the table data is stored in a DataFrame called STUDENT\n\n# Grouping the data by advisor and counting the number of students for each advisor\nadvisor_counts = STUDENT.groupby('advisor').size().reset_index(name='count')\n\n# Creating a scatter plot\nplt.scatter(advisor_counts['advisor'], advisor_counts['count'])\n\n# Adding labels and title\nplt.xlabel('Advisor')\nplt.ylabel('Count')\nplt.title('Number of Students per Advisor')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "Return the lot details, group the lot details, and compute the number of each lot details.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the LOTS table\nlots = pd.read_sql(\"SELECT * FROM LOTS\", conn)\n\n# Convert column names to lowercase\nlots.columns = lots.columns.str.lower()\n\n# Perform the query and group by lot_details\nresult = lots.groupby('lot_details').size().reset_index(name='count')\n\n# Generate the bar chart\nplt.bar(result['lot_details'], result['count'])\nplt.xlabel('Lot Details')\nplt.ylabel('Count')\nplt.title('Bar Chart of Lot Details')\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "Show the average amount of transactions for different investors with a scatter chart.",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the TRANSACTIONS table\ntransactions = pd.read_sql(\"SELECT * FROM TRANSACTIONS\", conn)\n\n# Convert column names to lowercase\ntransactions.columns = transactions.columns.str.lower()\n\n# Calculate the average amount of transaction per investor\navg_transaction = transactions.groupby('investor_id')['amount_of_transaction'].mean().reset_index()\n\n# Scatter plot\nplt.scatter(avg_transaction['investor_id'], avg_transaction['amount_of_transaction'])\nplt.xlabel('Investor ID')\nplt.ylabel('Average Amount of Transaction')\nplt.title('Scatter Plot of Average Amount of Transaction per Investor')\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "Show the number of companies each investor has invested with a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the entrepreneur table\nentrepreneur_df = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\n\n# Convert column names to lowercase\nentrepreneur_df.columns = entrepreneur_df.columns.str.lower()\n\n# Perform the SQL query\nresult = entrepreneur_df.groupby('investor').size()\n\n# Plot the pie chart\nplt.pie(result, labels=result.index, autopct='%1.1f%%')\nplt.title('Investor Distribution')\nplt.show()"
  },
  {
    "db_id": "insurance_fnol",
    "question": "List all the customers in increasing order of IDs by a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\ncustomers.columns = customers.columns.str.lower()\n\n# Assuming customers is a DataFrame containing the table data\n\n# Sort the DataFrame by customer_id in ascending order\nsorted_customers = customers.sort_values('customer_id')\n\n# Extract the customer_name and customer_id columns\ncustomer_names = sorted_customers['customer_name']\ncustomer_ids = sorted_customers['customer_id']\n\n# Create a bar plot\nplt.bar(customer_names, customer_ids)\n\n# Set the x-axis label\nplt.xlabel('Customer Name')\n\n# Set the y-axis label\nplt.ylabel('Customer ID')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "riding_club",
    "question": "Compare the distribution of the players' gender using a bar chart , and could you display in ascending by the x axis ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nplayer.columns = player.columns.str.lower()\n\n# Grouping the data by gender and counting the occurrences\ngender_counts = player.groupby('gender').size()\n\n# Sorting the data by gender in ascending order\ngender_counts = gender_counts.sort_index()\n\n# Creating a bar plot\nplt.bar(gender_counts.index, gender_counts.values)\n\n# Adding labels and title\nplt.xlabel('Gender')\nplt.ylabel('Count')\nplt.title('Gender Distribution')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "Give me a scatter chart of showing the id and the number of journal committees they are on.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the editor and journal_committee tables\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\njournal_committee = pd.read_sql(\"SELECT * FROM journal_committee\", conn)\n\n# Convert column names to lowercase\neditor.columns = editor.columns.str.lower()\njournal_committee.columns = journal_committee.columns.str.lower()\n\n# Merge the editor and journal_committee tables on Editor_ID\nmerged_data = pd.merge(editor, journal_committee, on=\"editor_id\")\n\n# Group by Editor_ID and count the number of occurrences\ngrouped_data = merged_data.groupby(\"editor_id\").size().reset_index(name=\"count\")\n\n# Scatter plot\nplt.scatter(grouped_data[\"editor_id\"], grouped_data[\"count\"])\nplt.xlabel(\"Editor ID\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Occurrences by Editor ID\")\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 Visualize by bar chart , display in desc by the Y .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry.columns = country.columns.str.lower()\n\n# Group by governmentform and calculate the sum of population\ngrouped_data = country.groupby('governmentform')['population'].sum()\n\n# Sort the data in descending order\nsorted_data = grouped_data.sort_values(ascending=False)\n\n# Create a bar plot\nplt.bar(sorted_data.index, sorted_data.values)\n\n# Set the x-axis label\nplt.xlabel('Government Form')\n\n# Set the y-axis label\nplt.ylabel('Population')\n\n# Set the title of the plot\nplt.title('Population by Government Form')\n\n# Rotate the x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all template type codes and number of templates for each with a bar chart , I want to list by the X-axis from low to high .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nTemplates = pd.read_sql(\"SELECT * FROM Templates\", conn)\nTemplates.columns = Templates.columns.str.lower()\n\n# Grouping the data by template_type_code and counting the occurrences\ntemplate_counts = Templates.groupby('template_type_code').size().reset_index(name='count')\n\n# Sorting the data by template_type_code in ascending order\ntemplate_counts = template_counts.sort_values('template_type_code')\n\n# Creating the bar plot\nplt.bar(template_counts['template_type_code'], template_counts['count'])\nplt.xlabel('Template Type Code')\nplt.ylabel('Count')\nplt.title('Template Type Counts')\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "Just compare the number of journal committees of each editor using a bar, display by the total number in descending please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the editor and journal_committee tables\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\njournal_committee = pd.read_sql(\"SELECT * FROM journal_committee\", conn)\n\n# Convert column names to lowercase\neditor.columns = editor.columns.str.lower()\njournal_committee.columns = journal_committee.columns.str.lower()\n\n# Merge the editor and journal_committee tables on Editor_ID\nmerged_data = pd.merge(editor, journal_committee, on=\"editor_id\")\n\n# Perform the SQL query\nresult = merged_data.groupby(\"editor_id\")[\"name\"].count().reset_index().sort_values(by=\"name\", ascending=False)\n\n# Plot the bar chart\nplt.bar(result[\"editor_id\"], result[\"name\"])\nplt.xlabel(\"Editor ID\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Journals per Editor\")\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes' Visualize by bar chart, could you rank by the total number in asc?",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the department table\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = map(str.lower, department.columns)\n\n# Read the management table\nmanagement = pd.read_sql(\"SELECT * FROM management\", conn)\nmanagement.columns = map(str.lower, management.columns)\n\n# Merge the department and management tables\nmerged_data = pd.merge(department, management, on=\"department_id\")\n\n# Filter the merged data for temporary acting departments\ntemporary_acting_data = merged_data[merged_data[\"temporary_acting\"] == \"Yes\"]\n\n# Calculate the average number of employees for each department\navg_employees = temporary_acting_data.groupby(\"name\")[\"num_employees\"].mean().reset_index()\n\n# Sort the data by average number of employees in ascending order\nsorted_data = avg_employees.sort_values(\"num_employees\")\n\n# Plot the bar chart\nplt.bar(sorted_data[\"name\"], sorted_data[\"num_employees\"])\nplt.xlabel(\"Department\")\nplt.ylabel(\"Average Number of Employees\")\nplt.title(\"Average Number of Employees in Temporary Acting Departments\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "What is the count of songs in volumes associated with artists aged 32 or older, grouped by age, visualized as a scatter chart?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nvolume = pd.read_sql(\"SELECT * FROM volume\", conn)\nartist.columns = artist.columns.str.lower()\nvolume.columns = volume.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(artist, volume, on='artist_id')\n\n# Filter the data based on age >= 32\nfiltered_df = merged_df[merged_df['age'] >= 32]\n\n# Group the data by age and count the number of songs\ngrouped_df = filtered_df.groupby('age').agg({'song': 'count'}).reset_index()\n\n# Create scatter plot\nplt.scatter(grouped_df['age'], grouped_df['song'])\nplt.xlabel('Age')\nplt.ylabel('Number of Songs')\nplt.title('Number of Songs by Age')\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "For the sale details with amount smaller than 3000, visualize a bar chart that x-axis is the sales details and count them as y, rank names in asc order.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the SALES table\nsales = pd.read_sql(\"SELECT * FROM sales\", conn)\nsales.columns = map(str.lower, sales.columns)\n\n# Read the TRANSACTIONS table\ntransactions = pd.read_sql(\"SELECT * FROM transactions\", conn)\ntransactions.columns = map(str.lower, transactions.columns)\n\n# Merge the SALES and TRANSACTIONS tables on sales_transaction_id\nmerged_data = pd.merge(sales, transactions, left_on='sales_transaction_id', right_on='transaction_id')\n\n# Filter the merged data based on the condition amount_of_transaction < 3000\nfiltered_data = merged_data[merged_data['amount_of_transaction'] < 3000]\n\n# Group the filtered data by sales_details and count the occurrences\ngrouped_data = filtered_data.groupby('sales_details').size().reset_index(name='count')\n\n# Sort the grouped data by sales_details in ascending order\nsorted_data = grouped_data.sort_values('sales_details')\n\n# Plot the bar chart\nplt.bar(sorted_data['sales_details'], sorted_data['count'])\nplt.xlabel('Sales Details')\nplt.ylabel('Count')\nplt.title('Count of Sales Details')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "Plot how many party by grouped by party as a bar graph , rank in desc by the bar .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\nrepresentative.columns = representative.columns.str.lower()\n\n# Group by party and count the number of representatives in each party\nparty_counts = representative.groupby('party').size().reset_index(name='count')\n\n# Sort the parties in descending order\nparty_counts = party_counts.sort_values('party', ascending=False)\n\n# Create a bar plot\nplt.bar(party_counts['party'], party_counts['count'])\nplt.xlabel('Party')\nplt.ylabel('Count')\nplt.title('Number of Representatives by Party')\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "Bar chart x axis lot details y axis the number of lot details , and sort by the names in asc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nLOTS = pd.read_sql(\"SELECT * FROM LOTS\", conn)\nLOTS.columns = LOTS.columns.str.lower()\n\n# Grouping the data by 'lot_details' and counting the occurrences\ngrouped_data = LOTS.groupby('lot_details').size().reset_index(name='count')\n\n# Sorting the data by 'lot_details' in ascending order\nsorted_data = grouped_data.sort_values('lot_details')\n\n# Creating the bar plot\nplt.bar(sorted_data['lot_details'], sorted_data['count'])\nplt.xlabel('Lot Details')\nplt.ylabel('Count')\nplt.title('Count of Lot Details')\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "How many departments are built in each year ? Group by creation time in a line chart .",
    "chart": "Line",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = department.columns.str.lower()\n\n# Assuming 'department' is a DataFrame containing the table data\n\n# Grouping the data by 'creation' and counting the occurrences\ngrouped_data = department.groupby('creation').size().reset_index(name='count')\n\n# Sorting the data by 'creation' in ascending order\nsorted_data = grouped_data.sort_values('creation')\n\n# Creating a line plot\nplt.plot(sorted_data['creation'], sorted_data['count'])\n\n# Adding labels and title\nplt.xlabel('Creation')\nplt.ylabel('Count')\nplt.title('Count of Creation')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "A bar chart for what are the number of the last names for all scholarship students?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Sportsinfo table\nsportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\n\n# Read the Student table\nstudent = pd.read_sql(\"SELECT * FROM Student\", conn)\n\n# Convert column names to lowercase\nsportsinfo.columns = sportsinfo.columns.str.lower()\nstudent.columns = student.columns.str.lower()\n\n# merge the sportsinfo and student tables on stuid\nmerged_data = pd.merge(sportsinfo, student, on=\"stuid\")\n\n# filter the merged data for students on scholarship\nfiltered_data = merged_data[merged_data[\"onscholarship\"] == \"y\"]\n\n# group by lname and count the occurrences\ngrouped_data = filtered_data.groupby(\"lname\").size().reset_index(name=\"count\")\n\n# plot the bar chart\nplt.bar(grouped_data[\"lname\"], grouped_data[\"count\"])\nplt.xlabel(\"Last Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Students on Scholarship by Last Name\")\n\n# Show the plot\nplt.show()\n"
  },
  {
    "db_id": "movie_1",
    "question": "Visualize the title and and the total star rating of the movie using a bar chart, order by the X from low to high.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\nmovie_df.columns = map(str.lower, movie_df.columns)\n\n# Merge the Rating and Movie tables on mID column\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Group by title and calculate the sum of stars\ngrouped_df = merged_df.groupby(\"title\")[\"stars\"].sum().reset_index()\n\n# Sort the dataframe by title in ascending order\nsorted_df = grouped_df.sort_values(\"title\", ascending=True)\n\n# Plot the bar chart\nplt.bar(sorted_df[\"title\"], sorted_df[\"stars\"])\nplt.xlabel(\"Movie Title\")\nplt.ylabel(\"Total Stars\")\nplt.title(\"Total Stars by Movie Title\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Plot how many class by grouped by class as a bar graph , and show by the Y-axis in asc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\ncaptain.columns = captain.columns.str.lower()\n\n# Group by 'class' and count the occurrences\nclass_counts = captain.groupby('class').size().reset_index(name='count')\n\n# Sort the counts in ascending order\nclass_counts = class_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(class_counts['class'], class_counts['count'])\nplt.xlabel('Class')\nplt.ylabel('Count')\nplt.title('Count of each class')\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes' Visualize by bar chart, could you show in ascending by the names?",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the department table\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = map(str.lower, department.columns)\n\n# Read the management table\nmanagement = pd.read_sql(\"SELECT * FROM management\", conn)\nmanagement.columns = map(str.lower, management.columns)\n\n# Merge the department and management tables\nmerged_data = pd.merge(department, management, on=\"department_id\")\n\n# Filter the merged data for temporary acting departments\ntemporary_acting_data = merged_data[merged_data[\"temporary_acting\"] == \"Yes\"]\n\n# Calculate the average number of employees per department\navg_employees = temporary_acting_data.groupby(\"name\")[\"num_employees\"].mean()\n\n# Sort the data by department name\nsorted_data = avg_employees.sort_index()\n\n# Create a bar plot\nplt.bar(sorted_data.index, sorted_data.values)\nplt.xlabel(\"Department\")\nplt.ylabel(\"Average Number of Employees\")\nplt.title(\"Average Number of Employees in Temporary Acting Departments\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Give me a bar for how many musicals has each nominee been nominated for ? , show in desc by the X .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Group by nominee and count the occurrences\ngrouped = musical.groupby('nominee').size().reset_index(name='count')\n\n# Sort by nominee in descending order\ngrouped = grouped.sort_values('nominee', ascending=False)\n\n# Create bar plot\nplt.bar(grouped['nominee'], grouped['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Compare the total number of captains with different classes using a bar graph , show by the Class in ascending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\ncaptain.columns = captain.columns.str.lower()\n\n# Group by 'class' and count the occurrences\nclass_counts = captain.groupby('class').size().reset_index(name='count')\n\n# Sort the dataframe by 'class' in ascending order\nclass_counts = class_counts.sort_values('class')\n\n# Create a bar plot\nplt.bar(class_counts['class'], class_counts['count'])\nplt.xlabel('Class')\nplt.ylabel('Count')\nplt.title('Count of each class')\nplt.show()"
  },
  {
    "db_id": "company_employee",
    "question": "Bar chart x axis headquarters y axis the total number , and sort y-axis in asc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompany = pd.read_sql(\"SELECT * FROM company\", conn)\ncompany.columns = company.columns.str.lower()\n\n# Group by headquarters and count the number of companies\nheadquarters_count = company.groupby('headquarters').size().reset_index(name='count')\n\n# Sort the dataframe by count in ascending order\nheadquarters_count = headquarters_count.sort_values('count')\n\n# Create a bar plot\nplt.bar(headquarters_count['headquarters'], headquarters_count['count'])\nplt.xlabel('Headquarters')\nplt.ylabel('Count')\nplt.title('Number of Companies by Headquarters')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes' Visualize by bar chart, list from high to low by the Y.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the department table\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = map(str.lower, department.columns)\n\n# Read the management table\nmanagement = pd.read_sql(\"SELECT * FROM management\", conn)\nmanagement.columns = map(str.lower, management.columns)\n\n# Merge the department and management tables\nmerged_data = pd.merge(department, management, on=\"department_id\")\n\n# Filter the merged data for temporary acting departments\ntemporary_acting_data = merged_data[merged_data[\"temporary_acting\"] == \"Yes\"]\n\n# Calculate the average number of employees per department\navg_employees = temporary_acting_data.groupby(\"name\")[\"num_employees\"].mean().reset_index()\n\n# Sort the data by average number of employees in descending order\nsorted_data = avg_employees.sort_values(\"num_employees\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"name\"], sorted_data[\"num_employees\"])\nplt.xlabel(\"Department\")\nplt.ylabel(\"Average Number of Employees\")\nplt.title(\"Average Number of Employees in Temporary Acting Departments\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "Return the number of music festivals of each category by a pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nmusic_festival = pd.read_sql(\"SELECT * FROM music_festival\", conn)\nmusic_festival.columns = music_festival.columns.str.lower()\n\n# Group by category and count the number of occurrences\ncategory_counts = music_festival.groupby('category').size().reset_index(name='count')\n\n# Create a pie chart\nplt.pie(category_counts['count'], labels=category_counts['category'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Display the chart\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "How many performances of each location ? Show me the proportion using a pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\nperformance.columns = performance.columns.str.lower()\n\n# Group by location and count the occurrences\nlocation_counts = performance.groupby('location').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(location_counts['count'], labels=location_counts['location'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "What is the count of lots belonging to investors with details \"l\" and their corresponding lot details, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nINVESTORS = pd.read_sql(\"SELECT * FROM INVESTORS\", conn)\nLOTS = pd.read_sql(\"SELECT * FROM LOTS\", conn)\nINVESTORS.columns = INVESTORS.columns.str.lower()\nLOTS.columns = LOTS.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(INVESTORS, LOTS, on='investor_id')\n\n# Filter the data based on the condition\nfiltered_df = merged_df[merged_df['investor_details'] == 'l']\n\n# Group by lot_details and count the number of occurrences\ngrouped_df = filtered_df.groupby('lot_details').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['lot_details'], grouped_df['count'])\nplt.xlabel('Lot Details')\nplt.ylabel('Count')\nplt.title('Number of Lots by Lot Details')\nplt.show()"
  },
  {
    "db_id": "local_govt_mdm",
    "question": "what are the details of the cmi masters that have the cross reference code 'Tax', and count them by a pie chart",
    "chart": "Pie",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read data from Customer_Master_Index table\ncustomer_master_index = pd.read_sql(\"SELECT * FROM Customer_Master_Index\", conn)\n\n# Read data from CMI_Cross_References table\ncmi_cross_references = pd.read_sql(\"SELECT * FROM CMI_Cross_References\", conn)\n\n# Convert column names to lowercase\ncustomer_master_index.columns = customer_master_index.columns.str.lower()\ncmi_cross_references.columns = cmi_cross_references.columns.str.lower()\n\n# merge the two tables on master_customer_id\nmerged_data = pd.merge(customer_master_index, cmi_cross_references, on='master_customer_id')\n\n# filter the merged data for source_system_code = 'tax'\nfiltered_data = merged_data[merged_data['source_system_code'] == 'tax']\n\n# group by cmi_details and count the occurrences\ngrouped_data = filtered_data.groupby('cmi_details').size().reset_index(name='count')\n\n# plot the pie chart\nplt.pie(grouped_data['count'], labels=grouped_data['cmi_details'], autopct='%1.1f%%')\nplt.title('Distribution of cmi_details')\nplt.show()\n"
  },
  {
    "db_id": "music_4",
    "question": "What is the count of volumes by the artist named Gorgoroth for each issue date, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nvolume = pd.read_sql(\"SELECT * FROM volume\", conn)\nartist.columns = artist.columns.str.lower()\nvolume.columns = volume.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(artist, volume, on='artist_id')\n\n# Filter the data for artist 'Gorgoroth'\nfiltered_df = merged_df[merged_df['artist'] == 'Gorgoroth']\n\n# Group by issue_date and count the number of records\ngrouped_df = filtered_df.groupby('issue_date').size().reset_index(name='count')\n\n# Sort the data by issue_date\nsorted_df = grouped_df.sort_values('issue_date')\n\n# Plot the bar chart\nplt.bar(sorted_df['issue_date'], sorted_df['count'])\nplt.xlabel('Issue Date')\nplt.ylabel('Count')\nplt.title('Number of Records by Issue Date for Artist Gorgoroth')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "Can you create a scatter plot to display the purchase details and amount of transactions where the transaction amount is greater than 10000?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nPURCHASES = pd.read_sql(\"SELECT * FROM PURCHASES\", conn)\nTRANSACTIONS = pd.read_sql(\"SELECT * FROM TRANSACTIONS\", conn)\nPURCHASES.columns = PURCHASES.columns.str.lower()\nTRANSACTIONS.columns = TRANSACTIONS.columns.str.lower()\n\n# Merge the purchases and transactions dataframes\nmerged_df = pd.merge(PURCHASES, TRANSACTIONS, left_on='purchase_transaction_id', right_on='transaction_id')\n\n# Filter the merged dataframe for transactions with amount greater than 10000\nfiltered_df = merged_df[merged_df['amount_of_transaction'] > 10000]\n\n# Create a scatter plot\nplt.scatter(filtered_df['purchase_details'], filtered_df['amount_of_transaction'])\nplt.xlabel('Purchase Details')\nplt.ylabel('Amount of Transaction')\nplt.title('Scatter Plot of Purchase Details vs Amount of Transaction')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Compare the lowest rating among all movies by each title using a histogram, and show from high to low by the stars.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\n\n# Convert column names to lowercase\nrating_df.columns = rating_df.columns.str.lower()\nmovie_df.columns = movie_df.columns.str.lower()\n\n# merge the rating and movie tables on mid\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# group by title and calculate the minimum stars for each movie\ngrouped_df = merged_df.groupby(\"title\")[\"stars\"].min().reset_index()\n\n# sort the dataframe by minimum stars in descending order\nsorted_df = grouped_df.sort_values(\"stars\", ascending=False)\n\n# plot the bar chart\nplt.bar(sorted_df[\"title\"], sorted_df[\"stars\"])\nplt.xlabel(\"Movie Title\")\nplt.ylabel(\"Minimum Stars\")\nplt.title(\"Minimum Stars for Each Movie\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "company_employee",
    "question": "How many employees work for companies with sales bigger than 200, grouped by company and sales, visualized in a scatter chart?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nemployment = pd.read_sql(\"SELECT * FROM employment\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\ncompany = pd.read_sql(\"SELECT * FROM company\", conn)\nemployment.columns = employment.columns.str.lower()\npeople.columns = people.columns.str.lower()\ncompany.columns = company.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(employment, people, on='people_id')\nmerged_df = pd.merge(merged_df, company, on='company_id')\n\n# Filtering the data\nfiltered_df = merged_df[merged_df['sales_in_billion'] > 200]\n\n# Grouping and counting the number of employees\ngrouped_df = filtered_df.groupby(['company_id', 'sales_in_billion']).size().reset_index(name='number_of_employees')\n\n# Scatter plot\nplt.scatter(grouped_df['sales_in_billion'], grouped_df['number_of_employees'])\nplt.xlabel('Sales in Billion')\nplt.ylabel('Number of Employees')\nplt.title('Number of Employees vs Sales')\nplt.show()"
  },
  {
    "db_id": "scientist_1",
    "question": "What is the project with the highest number of hours and its corresponding duration, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nassignedto = pd.read_sql(\"SELECT * FROM assignedto\", conn)\nprojects = pd.read_sql(\"SELECT * FROM projects\", conn)\nassignedto.columns = assignedto.columns.str.lower()\nprojects.columns = projects.columns.str.lower()\n\n# Perform the join operation\nresult = pd.merge(assignedto, projects, left_on='project', right_on='code')\n\n# Group by project and calculate the maximum hours\ngrouped = result.groupby('project')['hours'].max().reset_index()\n\n# Sort the result by max_hours in descending order\nsorted_result = grouped.sort_values('hours', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_result['project'], sorted_result['hours'])\nplt.xlabel('Project')\nplt.ylabel('Max Hours')\nplt.title('Max Hours per Project')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "Return a bar on how many entrepreneurs correspond to each investor ? , sort by the X in ascending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\n\n# Grouping the data by 'investor' and counting the occurrences\ngrouped_data = entrepreneur.groupby('investor').size().reset_index(name='count')\n\n# Sorting the data by 'investor' in ascending order\nsorted_data = grouped_data.sort_values('investor')\n\n# Creating the bar plot\nplt.bar(sorted_data['investor'], sorted_data['count'])\nplt.xlabel('Investor')\nplt.ylabel('Count')\nplt.title('Number of Entrepreneurs by Investor')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "A bar chart for what are the number of the titles of all movies that have between 3 and 5 stars?, I want to show by the bars from high to low.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\nmovie_df.columns = map(str.lower, movie_df.columns)\n\n# Merge the Rating and Movie tables on mID\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Filter the merged table for stars between 3 and 5\nfiltered_df = merged_df[(merged_df[\"stars\"] >= 3) & (merged_df[\"stars\"] <= 5)]\n\n# Group by title and count the occurrences\ngrouped_df = filtered_df.groupby(\"title\").size().reset_index(name=\"count\")\n\n# Sort the grouped table by title in descending order\nsorted_df = grouped_df.sort_values(\"title\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df[\"title\"], sorted_df[\"count\"])\nplt.xlabel(\"Title\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Ratings for Movies with Stars between 3 and 5\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "A bar chart for how many competitions for each country , and I want to list y-axis in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by country and count the occurrences\ncountry_counts = competition.groupby('country').size().reset_index(name='count')\n\n# Sort the counts in ascending order\ncountry_counts = country_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(country_counts['country'], country_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "How many reviewers have ratings with a NULL value for the date, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nReviewer = pd.read_sql(\"SELECT * FROM Reviewer\", conn)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nReviewer.columns = Reviewer.columns.str.lower()\nRating.columns = Rating.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Reviewer, Rating, on='rid')\n\n# Filter the data where ratingdate is null\nfiltered_df = merged_df[merged_df['ratingdate'].isnull()]\n\n# Group by name and count the number of rows\ngrouped_df = filtered_df.groupby('name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['name'], grouped_df['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Number of Null Rating Dates by Reviewer')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "Show me a bar chart displaying the total number of votes for representatives from the \"Republican\" party.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nelection = pd.read_sql(\"SELECT * FROM election\", conn)\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\nelection.columns = election.columns.str.lower()\nrepresentative.columns = representative.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(election, representative, on='representative_id')\n\n# Filter the data for Republican party\nrepublican_df = merged_df[merged_df['party'] == 'Republican']\n\n# Group by party and calculate the sum of votes\ngrouped_df = republican_df.groupby('party').sum('votes')\n\n# Sort the data by sum of votes in descending order\nsorted_df = grouped_df.sort_values('votes', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df.index, sorted_df['votes'])\nplt.xlabel('Party')\nplt.ylabel('Total Votes')\nplt.title('Total Votes for Republican Party')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Plot the total number by grouped by competition type as a bar graph, and display names in descending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the competition table\ncompetition_df = pd.read_sql(\"SELECT * FROM competition\", conn)\n\n# Convert column names to lowercase\ncompetition_df.columns = competition_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = competition_df.groupby('competition_type').size().reset_index(name='count')\nresult_df = result_df.sort_values('competition_type', ascending=False)\n\n# Generate the bar plot\nplt.bar(result_df['competition_type'], result_df['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Type')\nplt.show()"
  },
  {
    "db_id": "car_1",
    "question": "Draw a bar chart for what are the names and ids of all makers with more than 3 models?, rank in descending by the x-axis please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read data from the CAR_MAKERS table\ncar_makers = pd.read_sql(\"SELECT * FROM CAR_MAKERS\", conn)\ncar_makers.columns = map(str.lower, car_makers.columns)\n\n# Read data from the MODEL_LIST table\nmodel_list = pd.read_sql(\"SELECT * FROM MODEL_LIST\", conn)\nmodel_list.columns = map(str.lower, model_list.columns)\n\n# Merge the two tables on the Maker column\nmerged_data = pd.merge(car_makers, model_list, left_on='id', right_on='maker')\n\n# Sort the merged data by FullName in descending order\nsorted_data = merged_data.sort_values(by='fullname', ascending=False)\n\n# Extract the FullName and Id columns\nfullname = sorted_data['fullname']\nid = sorted_data['id']\n\n# Create a bar plot\nplt.bar(fullname, id)\nplt.xlabel('Full Name')\nplt.ylabel('Id')\nplt.title('Car Makers')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the different template type codes , and how many templates correspond to each Plot them as bar chart , and order from high to low by the x-axis please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nTemplates = pd.read_sql(\"SELECT * FROM Templates\", conn)\nTemplates.columns = Templates.columns.str.lower()\n\n# Grouping the data by template_type_code and counting the occurrences\ntemplate_counts = Templates.groupby('template_type_code').size().reset_index(name='count')\n\n# Sorting the data by template_type_code in descending order\ntemplate_counts = template_counts.sort_values('template_type_code', ascending=False)\n\n# Creating the bar plot\nplt.bar(template_counts['template_type_code'], template_counts['count'])\nplt.xlabel('Template Type Code')\nplt.ylabel('Count')\nplt.title('Template Type Counts')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "What is the number of types of competition ? , sort the number of competition type from high to low order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort by count in descending order\ncompetition_counts = competition_counts.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Competition Type Counts')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Show the number of different competition types with a bar graph , and order by the bar in asc please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort by competition_type in ascending order\ncompetition_counts = competition_counts.sort_values('competition_type')\n\n# Create a bar plot\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Competition Type Counts')\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "Compare each editors' ages using a bar chart , and could you list bars in descending order ?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\neditor.columns = editor.columns.str.lower()\n\n# Assuming the data is already loaded into a dataframe called 'editor'\n\n# Sort the dataframe by name in descending order\nsorted_df = editor.sort_values(by='name', ascending=False)\n\n# Extract the name and age columns\nname = sorted_df['name']\nage = sorted_df['age']\n\n# Create a bar plot\nplt.bar(name, age)\n\n# Add labels and title\nplt.xlabel('Name')\nplt.ylabel('Age')\nplt.title('Age by Name')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "For the sale details with amount smaller than 3000, visualize a bar chart that x-axis is the sales details and count them as y, and sort names in descending order.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the SALES table\nsales = pd.read_sql(\"SELECT * FROM sales\", conn)\nsales.columns = map(str.lower, sales.columns)\n\n# Read the TRANSACTIONS table\ntransactions = pd.read_sql(\"SELECT * FROM transactions\", conn)\ntransactions.columns = map(str.lower, transactions.columns)\n\n# Merge the SALES and TRANSACTIONS tables on sales_transaction_id\nmerged_data = pd.merge(sales, transactions, left_on=\"sales_transaction_id\", right_on=\"transaction_id\")\n\n# Filter the merged data based on the condition amount_of_transaction < 3000\nfiltered_data = merged_data[merged_data[\"amount_of_transaction\"] < 3000]\n\n# Group the filtered data by sales_details and count the occurrences\ngrouped_data = filtered_data.groupby(\"sales_details\").size().reset_index(name=\"count\")\n\n# Sort the grouped data by sales_details in descending order\nsorted_data = grouped_data.sort_values(\"sales_details\", ascending=False)\n\n# Generate the bar plot\nplt.bar(sorted_data[\"sales_details\"], sorted_data[\"count\"])\nplt.xlabel(\"Sales Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of Sales Details\")\nplt.show()"
  },
  {
    "db_id": "car_1",
    "question": "What is the number of car models that are produced by each maker? Show the id and number in a scatter chart.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the MODEL_LIST table\nmodel_list = pd.read_sql(\"SELECT * FROM MODEL_LIST\", conn)\n\n# Read the CAR_MAKERS table\ncar_makers = pd.read_sql(\"SELECT * FROM CAR_MAKERS\", conn)\n\n# Convert column names to lowercase\nmodel_list.columns = model_list.columns.str.lower()\ncar_makers.columns = car_makers.columns.str.lower()\n\n# merge the two tables on the maker column\nmerged_data = pd.merge(model_list, car_makers, left_on=\"maker\", right_on=\"id\")\n\n# group the data by car maker and count the number of models\ngrouped_data = merged_data.groupby(\"id\").count()\n\n# rename the count column\ngrouped_data.rename(columns={\"model\": \"count\"}, inplace=True)\n\n# create a scatter plot\nplt.scatter(grouped_data.index, grouped_data[\"count\"])\n\n# Set the labels and title\nplt.xlabel(\"Car Maker ID\")\nplt.ylabel(\"Number of Models\")\nplt.title(\"Number of Models per Car Maker\")\n\n# Show the plot\nplt.show()\n"
  },
  {
    "db_id": "voter_2",
    "question": "How many students does each advisor have .",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nSTUDENT.columns = STUDENT.columns.str.lower()\n\n# Assuming the table data is stored in a DataFrame called STUDENT\n\n# Grouping the data by advisor and counting the number of students for each advisor\nadvisor_counts = STUDENT.groupby('advisor').size().reset_index(name='count')\n\n# Creating a scatter plot\nplt.scatter(advisor_counts['advisor'], advisor_counts['count'])\n\n# Adding labels and title\nplt.xlabel('Advisor')\nplt.ylabel('Count')\nplt.title('Number of Students per Advisor')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "voter_2",
    "question": "Who are the students with vice president votes and are 18 years old? Visualize their first names and last names using a scatter chart.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nStudent = pd.read_sql(\"SELECT * FROM Student\", conn)\nVoting_Record = pd.read_sql(\"SELECT * FROM Voting_Record\", conn)\nStudent.columns = Student.columns.str.lower()\nVoting_Record.columns = Voting_Record.columns.str.lower()\n\n# Merge the Student and Voting_Record dataframes on stuid\nmerged_df = pd.merge(Student, Voting_Record, left_on='stuid', right_on='vice_president_vote')\n\n# Filter the merged dataframe for age = 18\nfiltered_df = merged_df[merged_df['age'] == 18]\n\n# Create a scatter plot of fname and lname\nplt.scatter(filtered_df['fname'], filtered_df['lname'])\nplt.xlabel('First Name')\nplt.ylabel('Last Name')\nplt.title('Scatter Plot of First Name and Last Name')\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Show me a bar chart displaying the number of shops for each manufacturer, ranked in descending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmanufacturer = pd.read_sql(\"SELECT * FROM manufacturer\", conn)\nfurniture_manufacte = pd.read_sql(\"SELECT * FROM furniture_manufacte\", conn)\nmanufacturer.columns = manufacturer.columns.str.lower()\nfurniture_manufacte.columns = furniture_manufacte.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(manufacturer, furniture_manufacte, on='manufacturer_id')\n\n# Group by manufacturer_id and count the number of shops\ngrouped_df = merged_df.groupby('manufacturer_id').size().reset_index(name='num_of_shops')\n\n# Sort the dataframe by num_of_shops in descending order\nsorted_df = grouped_df.sort_values('num_of_shops', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['manufacturer_id'], sorted_df['num_of_shops'])\nplt.xlabel('Manufacturer ID')\nplt.ylabel('Number of Shops')\nplt.title('Number of Shops per Manufacturer')\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "What details are there on the research staff? List the result in ascending alphabetical order, and count them by a bar chart",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the Research_Staff table\ndf = pd.read_sql(\"SELECT * FROM Research_Staff\", conn)\n\n# Convert column names to lowercase\ndf.columns = df.columns.str.lower()\n\n# Perform the SQL query\nresult = df.groupby('staff_details').size().reset_index(name='count').sort_values('staff_details')\n\n# Generate the bar plot\nplt.bar(result['staff_details'], result['count'])\nplt.xlabel('Staff Details')\nplt.ylabel('Count')\nplt.title('Bar Plot of Staff Details')\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "How many students play each sport . Show bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nSportsinfo.columns = Sportsinfo.columns.str.lower()\n\n# Grouping the data by sportname and counting the occurrences\nsport_counts = Sportsinfo.groupby('sportname').size().reset_index(name='count')\n\n# Creating the bar plot\nplt.bar(sport_counts['sportname'], sport_counts['count'])\nplt.xlabel('Sport Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Sport')\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "Plot the id and the number of journal committees they are on in a scatter chart.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the editor and journal_committee tables\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\njournal_committee = pd.read_sql(\"SELECT * FROM journal_committee\", conn)\n\n# Convert column names to lowercase\neditor.columns = editor.columns.str.lower()\njournal_committee.columns = journal_committee.columns.str.lower()\n\n# Merge the editor and journal_committee tables on Editor_ID\nmerged_data = pd.merge(editor, journal_committee, on=\"editor_id\")\n\n# Group by Editor_ID and count the number of occurrences\ngrouped_data = merged_data.groupby(\"editor_id\").size().reset_index(name=\"count\")\n\n# Scatter plot\nplt.scatter(grouped_data[\"editor_id\"], grouped_data[\"count\"])\nplt.xlabel(\"Editor ID\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Occurrences by Editor ID\")\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Find the average rating star for each movie that are not reviewed by Brittany Harris. Plot them as scatter chart.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating and Reviewer tables\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nreviewer_df = pd.read_sql(\"SELECT * FROM Reviewer\", conn)\n\n# Convert column names to lowercase\nrating_df.columns = rating_df.columns.str.lower()\nreviewer_df.columns = reviewer_df.columns.str.lower()\n\n# Merge Rating and Reviewer tables\nmerged_df = pd.merge(rating_df, reviewer_df, on=\"rid\")\n\n# Filter out movies rated by Brittany Harris\nfiltered_df = merged_df[merged_df[\"name\"] != \"Brittany Harris\"]\n\n# Calculate average stars per movie\navg_stars_df = filtered_df.groupby(\"mid\")[\"stars\"].mean().reset_index()\n\n# Scatter plot\nplt.scatter(avg_stars_df[\"mid\"], avg_stars_df[\"stars\"])\nplt.xlabel(\"Movie ID\")\nplt.ylabel(\"Average Stars\")\nplt.title(\"Average Stars per Movie (Excluding Brittany Harris)\")\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "Return the lot details of lots that belong to investors with details \"l\", and count them by a bar chart, order by the lot_details in ascending.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read data from the INVESTORS table\ninvestors = pd.read_sql(\"SELECT * FROM INVESTORS\", conn)\ninvestors.columns = map(str.lower, investors.columns)\n\n# Read data from the LOTS table\nlots = pd.read_sql(\"SELECT * FROM LOTS\", conn)\nlots.columns = map(str.lower, lots.columns)\n\n# Merge the INVESTORS and LOTS tables on investor_id\nmerged_data = pd.merge(investors, lots, on=\"investor_id\")\n\n# Filter the merged data based on Investor_details = \"l\"\nfiltered_data = merged_data[merged_data[\"investor_details\"] == \"l\"]\n\n# Group by lot_details and count the occurrences\ngrouped_data = filtered_data.groupby(\"lot_details\").size().reset_index(name=\"count\")\n\n# Sort the grouped data by lot_details in ascending order\nsorted_data = grouped_data.sort_values(\"lot_details\")\n\n# Generate the bar plot\nplt.bar(sorted_data[\"lot_details\"], sorted_data[\"count\"])\nplt.xlabel(\"Lot Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Bar Plot of Lot Details\")\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "Return a bar on how many hosts does each nationality have ? List the nationality and the count , display by the Y in ascending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nHOST = pd.read_sql(\"SELECT * FROM HOST\", conn)\nHOST.columns = HOST.columns.str.lower()\n\n# Grouping the data by nationality and counting the occurrences\nnationality_counts = HOST.groupby('nationality').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nnationality_counts = nationality_counts.sort_values('count')\n\n# Creating the bar plot\nplt.bar(nationality_counts['nationality'], nationality_counts['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Hosts by Nationality')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "How many organizations are described as Sponsors for each unique organization detail? Show the count using a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nOrganisations = pd.read_sql(\"SELECT * FROM Organisations\", conn)\norganisation_Types = pd.read_sql(\"SELECT * FROM organisation_Types\", conn)\nOrganisations.columns = Organisations.columns.str.lower()\norganisation_Types.columns = organisation_Types.columns.str.lower()\n\n# Perform the SQL query\nresult = pd.merge(Organisations, organisation_Types, on='organisation_type')\nresult = result[result['organisation_type_description'] == 'Sponsor']\nresult = result.groupby('organisation_details').size().reset_index(name='count')\n\n# Create the pie chart\nplt.pie(result['count'], labels=result['organisation_details'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.title('Distribution of Sponsors')\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Bar chart x axis nominee y axis the total number , and rank in descending by the total number .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Group by nominee and count the occurrences\ngrouped = musical.groupby('nominee').size().reset_index(name='count')\n\n# Sort by count in descending order\nsorted_grouped = grouped.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_grouped['nominee'], sorted_grouped['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Compare the total number of competitions for each country , and sort by the Y in asc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by country and count the occurrences\ncountry_counts = competition.groupby('country').size().reset_index(name='count')\n\n# Sort the counts in ascending order\ncountry_counts = country_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(country_counts['country'], country_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Give me a bar for how many musicals has each nominee been nominated for ? , sort by the Y-axis in desc please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Group by nominee and count the occurrences\ngrouped = musical.groupby('nominee').size().reset_index(name='count')\n\n# Sort by count in descending order\nsorted_grouped = grouped.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_grouped['nominee'], sorted_grouped['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "voter_2",
    "question": "What is the distribution of students, grouped by sex, who have vice president votes and reside in cities other than PIT, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nVOTING_RECORD = pd.read_sql(\"SELECT * FROM VOTING_RECORD\", conn)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nSTUDENT.columns = STUDENT.columns.str.lower()\nVOTING_RECORD.columns = VOTING_RECORD.columns.str.lower()\nSTUDENT.columns = STUDENT.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(STUDENT, VOTING_RECORD, left_on='stuid', right_on='vice_president_vote')\n\n# Excluding the rows where city_code is 'pit'\nexcluded_df = STUDENT[STUDENT['city_code'] != 'pit']\n\n# Grouping by sex and counting the number of occurrences\ngrouped_df = merged_df.groupby('sex').size().reset_index(name='count')\n\n# Excluding the rows where city_code is 'pit' from the grouped dataframe\nfinal_df = pd.merge(grouped_df, excluded_df[['fname', 'city_code']], left_on='sex', right_on='fname', how='left')\nfinal_df = final_df[final_df['city_code'].isnull()]\n\n# Plotting the pie chart\nplt.pie(final_df['count'], labels=final_df['sex'], autopct='%1.1f%%')\nplt.title('Distribution of Sex in Voting Record')\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "What are the last names for all scholarship students, and count them by a bar chart, and rank by the y axis from low to high please.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Sportsinfo table\nsportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\n# Convert column names to lowercase\nsportsinfo.columns = sportsinfo.columns.str.lower()\n\n# Read the Student table\nstudent = pd.read_sql(\"SELECT * FROM Student\", conn)\n# Convert column names to lowercase\nstudent.columns = student.columns.str.lower()\n\n# Merge the Sportsinfo and Student tables on StuID\nmerged_data = pd.merge(sportsinfo, student, on=\"stuid\")\n\n# Filter the merged data for rows where onscholarship is 'Y'\nfiltered_data = merged_data[merged_data[\"onscholarship\"] == \"Y\"]\n\n# Group by LName and count the occurrences\ngrouped_data = filtered_data.groupby(\"lname\").size().reset_index(name=\"count\")\n\n# Sort the grouped data by count in ascending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=True)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"lname\"], sorted_data[\"count\"])\nplt.xlabel(\"LName\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Students on Scholarship by Last Name\")\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Show different locations and the number of performances at each location with a pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\nperformance.columns = performance.columns.str.lower()\n\n# Group by location and count the number of occurrences\nlocation_counts = performance.groupby('location').size()\n\n# Create a pie chart\nplt.pie(location_counts, labels=location_counts.index, autopct='%1.1f%%')\nplt.axis('equal')\n\n# Display the chart\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "Show different nationalities along with the number of hosts of each nationality Visualize by bar chart , I want to list in ascending by the x-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nHOST = pd.read_sql(\"SELECT * FROM HOST\", conn)\nHOST.columns = HOST.columns.str.lower()\n\n# Grouping the data by nationality and counting the occurrences\nnationality_counts = HOST.groupby('nationality').size().reset_index(name='count')\n\n# Sorting the data by nationality in ascending order\nnationality_counts = nationality_counts.sort_values('nationality')\n\n# Creating the bar plot\nplt.bar(nationality_counts['nationality'], nationality_counts['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Hosts by Nationality')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Compare the total number of different ranks using a bar graph , and sort from low to high by the Y .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\ncaptain.columns = captain.columns.str.lower()\n\n# Group by rank and count the occurrences\nrank_counts = captain.groupby('rank').size().reset_index(name='count')\n\n# Sort the counts in ascending order\nrank_counts = rank_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(rank_counts['rank'], rank_counts['count'])\nplt.xlabel('Rank')\nplt.ylabel('Count')\nplt.title('Rank Counts')\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "What is the scatter plot displaying from the tables \"entrepreneur\" and \"people\"?",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Merge entrepreneur and people dataframes on people_id\nmerged_df = pd.merge(entrepreneur, people, on='people_id')\n\n# Select height and weight columns\ndata = merged_df[['height', 'weight']]\n\n# Create scatter plot\nplt.scatter(data['height'], data['weight'])\nplt.xlabel('Height')\nplt.ylabel('Weight')\nplt.title('Scatter Plot of Height vs Weight')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Return a bar on what are the types of competition and number of competitions for that type ? , order by the Y in asc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the number of occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort the counts in ascending order\ncompetition_counts = competition_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Type')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "riding_club",
    "question": "Compare the number of players of different occupations using a bar chart, I want to show in asc by the Occupation.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the player table\nplayer_df = pd.read_sql(\"SELECT * FROM player\", conn)\n\n# Convert column names to lowercase\nplayer_df.columns = player_df.columns.str.lower()\n\n# Perform the SQL query\noccupation_count = player_df.groupby('occupation').size().reset_index(name='count')\noccupation_count = occupation_count.sort_values('occupation')\n\n# Generate the bar plot\nplt.bar(occupation_count['occupation'], occupation_count['count'])\nplt.xlabel('Occupation')\nplt.ylabel('Count')\nplt.title('Occupation Count')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Show me a bar chart displaying the names of reviewers and the count of their ratings, sorted in ascending order by the count of ratings.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nReviewer = pd.read_sql(\"SELECT * FROM Reviewer\", conn)\nRating.columns = Rating.columns.str.lower()\nReviewer.columns = Reviewer.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Rating, Reviewer, on='rid')\n\n# Group by reviewer name and count the number of ratings\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Sort the dataframe by count in ascending order\nsorted_df = grouped_df.sort_values('count')\n\n# Plot the bar chart\nplt.bar(sorted_df['name'], sorted_df['count'])\nplt.xlabel('Reviewer Name')\nplt.ylabel('Number of Ratings')\nplt.title('Number of Ratings by Reviewer')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "For all organizations that have grants of more than 6000 dollars, compare the number of details of the organizations with a bar chart, display y-axis in ascending order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Grants table\ngrants = pd.read_sql(\"SELECT * FROM Grants\", conn)\n\n# Read the Organisations table\norganisations = pd.read_sql(\"SELECT * FROM Organisations\", conn)\n\n# Convert column names to lowercase\ngrants.columns = grants.columns.str.lower()\norganisations.columns = organisations.columns.str.lower()\n\n# merge the grants and organisations tables on organisation_id\nmerged_data = pd.merge(grants, organisations, on=\"organisation_id\")\n\n# group by organisation_details and count the occurrences\ngrouped_data = merged_data.groupby(\"organisation_details\").size().reset_index(name=\"count\")\n\n# sort the data by count in ascending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=True)\n\n# plot the bar chart\nplt.bar(sorted_data[\"organisation_details\"], sorted_data[\"count\"])\nplt.xlabel(\"Organisation Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Grants by Organisation Details\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "world_1",
    "question": "What is the official language spoken in the country whose head of state is Beatrix, and count them by a bar chart, and rank total number from low to high order please.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the country table\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountrylanguage = pd.read_sql(\"SELECT * FROM countrylanguage\", conn)\n\n# Convert column names to lowercase\ncountry.columns = country.columns.str.lower()\ncountrylanguage.columns = countrylanguage.columns.str.lower()\n\n# Merge the country and countrylanguage tables\nmerged_data = pd.merge(country, countrylanguage, left_on=\"code\", right_on=\"countrycode\")\n\n# Filter the data based on the conditions\nfiltered_data = merged_data[(merged_data[\"headofstate\"] == \"Beatrix\") & (merged_data[\"isofficial\"] == \"T\")]\n\n# Group by language and count the occurrences\ngrouped_data = filtered_data.groupby(\"language\").size().reset_index(name=\"count\")\n\n# Sort the data by count in ascending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=True)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"language\"], sorted_data[\"count\"])\nplt.xlabel(\"Language\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Countries with Official Language by Language\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "What are the names and stars of the ratings where the reviewer had the same name as the director of the movie, shown in a line chart?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nMovie = pd.read_sql(\"SELECT * FROM Movie\", conn)\nReviewer = pd.read_sql(\"SELECT * FROM Reviewer\", conn)\nRating.columns = Rating.columns.str.lower()\nMovie.columns = Movie.columns.str.lower()\nReviewer.columns = Reviewer.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(pd.merge(Rating, Movie, on='mid'), Reviewer, on='rid')\n\n# Filter data\nfiltered_df = merged_df[merged_df['director'] == merged_df['name']]\n\n# Plot line chart\nplt.plot(filtered_df['name'], filtered_df['stars'])\nplt.xlabel('Director')\nplt.ylabel('Stars')\nplt.title('Stars by Director')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "What are the last names for all scholarship students, and count them by a bar chart, and could you sort in descending by the y-axis?",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Sportsinfo table\nsportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\n# Convert column names to lowercase\nsportsinfo.columns = sportsinfo.columns.str.lower()\n\n# Read the Student table\nstudent = pd.read_sql(\"SELECT * FROM Student\", conn)\n# Convert column names to lowercase\nstudent.columns = student.columns.str.lower()\n\n# Merge the Sportsinfo and Student tables on StuID\nmerged_data = pd.merge(sportsinfo, student, on=\"stuid\")\n\n# Filter the merged data for rows where onscholarship is 'Y'\nfiltered_data = merged_data[merged_data[\"onscholarship\"] == \"Y\"]\n\n# Group by LName and count the occurrences\ngrouped_data = filtered_data.groupby(\"lname\").size().reset_index(name=\"count\")\n\n# Sort the grouped data by count in descending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"lname\"], sorted_data[\"count\"])\nplt.xlabel(\"LName\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Students on Scholarship by Last Name\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "How did the number of ratings higher than 3 stars given by each reviewer change over time, and what are their names?",
    "chart": "Line",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nReviewer = pd.read_sql(\"SELECT * FROM Reviewer\", conn)\nRating.columns = Rating.columns.str.lower()\nReviewer.columns = Reviewer.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Rating, Reviewer, on='rid')\n\n# Filter the data based on the condition\nfiltered_df = merged_df[merged_df['stars'] > 3]\n\n# Group the data by reviewer name and count the number of rows\ngrouped_df = filtered_df.groupby('name').size().reset_index(name='count')\n\n# Sort the data by reviewer name in ascending order\nsorted_df = grouped_df.sort_values('name')\n\n# Plot the data as a line chart\nplt.plot(sorted_df['name'], sorted_df['count'])\nplt.xlabel('Reviewer Name')\nplt.ylabel('Count')\nplt.title('Number of Ratings with Stars > 3 by Reviewer')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Return a bar chart on how many musicals has each nominee been nominated for ? , and could you order by the X in asc ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Group by nominee and count the occurrences\ngrouped = musical.groupby('nominee').size().reset_index(name='count')\n\n# Sort by nominee in ascending order\ngrouped = grouped.sort_values('nominee')\n\n# Create bar plot\nplt.bar(grouped['nominee'], grouped['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "A bar chart showing the number of different competition types , display from high to low by the x axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort by competition_type in descending order\ncompetition_counts = competition_counts.sort_values('competition_type', ascending=False)\n\n# Plot the bar chart\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Competition Type Counts')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all template ids and number of documents using each template with a scatter chart.",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Documents table\ndocuments = pd.read_sql(\"SELECT * FROM Documents\", conn)\n\n# Convert column names to lowercase\ndocuments.columns = documents.columns.str.lower()\n\n# Perform the SQL query\ntemplate_counts = documents.groupby('template_id').size().reset_index(name='count')\n\n# Scatter plot\nplt.scatter(template_counts['template_id'], template_counts['count'])\nplt.xlabel('Template ID')\nplt.ylabel('Count')\nplt.title('Document Counts by Template')\nplt.show()"
  },
  {
    "db_id": "school_player",
    "question": "For each denomination , return the denomination and the count of schools with that denomination Visualize by bar chart , and could you list Denomination in asc order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nschool = pd.read_sql(\"SELECT * FROM school\", conn)\nschool.columns = school.columns.str.lower()\n\n# Grouping the data by denomination and counting the number of occurrences\ndenomination_counts = school.groupby('denomination').size().reset_index(name='count')\n\n# Sorting the data by denomination in ascending order\ndenomination_counts = denomination_counts.sort_values('denomination')\n\n# Creating a bar plot\nplt.bar(denomination_counts['denomination'], denomination_counts['count'])\nplt.xlabel('Denomination')\nplt.ylabel('Count')\nplt.title('Number of Schools by Denomination')\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "A bar chart for what are the number of the purchase details of transactions with amount bigger than 10000?, and could you rank in asc by the the number of purchase details?",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the PURCHASES and TRANSACTIONS tables\npurchases = pd.read_sql(\"SELECT * FROM PURCHASES\", conn)\ntransactions = pd.read_sql(\"SELECT * FROM TRANSACTIONS\", conn)\n\n# Convert column names to lowercase\npurchases.columns = purchases.columns.str.lower()\ntransactions.columns = transactions.columns.str.lower()\n\n# Merge the PURCHASES and TRANSACTIONS tables on the purchase_transaction_id column\nmerged_data = pd.merge(purchases, transactions, left_on=\"purchase_transaction_id\", right_on=\"transaction_id\")\n\n# Filter the merged data for transactions with amount_of_transaction > 10000\nfiltered_data = merged_data[merged_data[\"amount_of_transaction\"] > 10000]\n\n# Group the filtered data by purchase_details and count the occurrences\ngrouped_data = filtered_data.groupby(\"purchase_details\").size().reset_index(name=\"count\")\n\n# Sort the grouped data by count in ascending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=True)\n\n# Generate the bar plot\nplt.bar(sorted_data[\"purchase_details\"], sorted_data[\"count\"])\nplt.xlabel(\"Purchase Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of Purchase Details with Amount > 10000\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "school_player",
    "question": "For each denomination, return the denomination and the count of schools with that denomination Visualize by bar chart, list from low to high by the Y.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the \"school\" table into a pandas DataFrame\nschool_df = pd.read_sql(\"SELECT * FROM school\", conn)\n\n# Convert column names to lowercase\nschool_df.columns = school_df.columns.str.lower()\n\n# Perform the SQL query\nresult = school_df.groupby('denomination').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result['denomination'], result['count'])\nplt.xlabel('Denomination')\nplt.ylabel('Count')\nplt.title('Number of Schools by Denomination')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Give me a bar for what is the number of players who have points less than 30 for each position?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the player table\nplayer_df = pd.read_sql(\"SELECT * FROM player\", conn)\n\n# Convert column names to lowercase\nplayer_df.columns = player_df.columns.str.lower()\n\n# Filter the data where points < 30\nfiltered_df = player_df[player_df['points'] < 30]\n\n# Group by position and count the number of players\ngrouped_df = filtered_df.groupby('position').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['position'], grouped_df['count'])\nplt.xlabel('Position')\nplt.ylabel('Count')\nplt.title('Number of Players with Points < 30 by Position')\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "Give me a bar for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry.columns = country.columns.str.lower()\n\n# Group by governmentform and calculate the sum of population\ngrouped_data = country.groupby('governmentform')['population'].sum()\n\n# Convert the grouped data into a dataframe\ndf = pd.DataFrame(grouped_data).reset_index()\n\n# Plot the bar chart\nplt.bar(df['governmentform'], df['population'])\nplt.xlabel('Government Form')\nplt.ylabel('Population')\nplt.title('Population by Government Form')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "local_govt_mdm",
    "question": "What is the distribution of cross reference entries for each source system code in the CMI_Cross_References table that are related to at least one council tax entry, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nCMI_Cross_References = pd.read_sql(\"SELECT * FROM CMI_Cross_References\", conn)\nCouncil_Tax = pd.read_sql(\"SELECT * FROM Council_Tax\", conn)\nCMI_Cross_References.columns = CMI_Cross_References.columns.str.lower()\nCouncil_Tax.columns = Council_Tax.columns.str.lower()\n\n# Merge the two dataframes\nmerged_df = pd.merge(CMI_Cross_References, Council_Tax, on='cmi_cross_ref_id')\n\n# Group by source_system_code and count the occurrences\ngrouped_df = merged_df.groupby('source_system_code').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['source_system_code'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "Create a bar chart showing how many location across location , could you rank from high to low by the names ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nparty = pd.read_sql(\"SELECT * FROM party\", conn)\nparty.columns = party.columns.str.lower()\n\n# Group by location and count the occurrences\nlocation_counts = party.groupby('location').size().reset_index(name='count')\n\n# Sort by location in descending order\nlocation_counts = location_counts.sort_values('location', ascending=False)\n\n# Create bar plot\nplt.bar(location_counts['location'], location_counts['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Party Count by Location')\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Can you draw the trend of sum budget in billions over the creation ? , I want to rank x axis from low to high order .",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = department.columns.str.lower()\n\n# Assuming 'department' is a DataFrame containing the table data\n\n# Grouping the data by 'creation' and calculating the sum of 'budget_in_billions'\ngrouped_data = department.groupby('creation')['budget_in_billions'].sum()\n\n# Sorting the data by 'creation' in ascending order\nsorted_data = grouped_data.sort_index()\n\n# Creating a line plot\nplt.plot(sorted_data.index, sorted_data.values)\n\n# Adding labels and title\nplt.xlabel('Creation')\nplt.ylabel('Sum of Budget (in billions)')\nplt.title('Line Plot of Sum of Budget by Creation')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Plot the average of budget in billions over creation in a line chart , and order by the Creation in descending .",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = department.columns.str.lower()\n\n# Assuming 'department' is a DataFrame containing the table data\n\n# Grouping the data by 'creation' and calculating the average of 'budget_in_billions'\ngrouped_data = department.groupby('creation')['budget_in_billions'].mean()\n\n# Sorting the data by 'creation' in descending order\nsorted_data = grouped_data.sort_index(ascending=False)\n\n# Creating a line plot\nplt.plot(sorted_data.index, sorted_data.values)\n\n# Adding labels and title\nplt.xlabel('Creation')\nplt.ylabel('Average Budget (in billions)')\nplt.title('Average Budget by Creation')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "riding_club",
    "question": "Visualize a bar chart to show how many players in each occupation, order X in desc order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the player table\nplayer_df = pd.read_sql(\"SELECT * FROM player\", conn)\n\n# Convert column names to lowercase\nplayer_df.columns = player_df.columns.str.lower()\n\n# Perform the SQL query\noccupation_count = player_df.groupby('occupation').size().reset_index(name='count')\noccupation_count = occupation_count.sort_values('occupation', ascending=False)\n\n# Generate the bar plot\nplt.bar(occupation_count['occupation'], occupation_count['count'])\nplt.xlabel('Occupation')\nplt.ylabel('Count')\nplt.title('Occupation Count')\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "How many performances of each location? Show me the proportion using a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the performance table\nperformance_df = pd.read_sql(\"SELECT * FROM performance\", conn)\n\n# Convert column names to lowercase\nperformance_df.columns = performance_df.columns.str.lower()\n\n# Group by location and count the occurrences\nlocation_counts = performance_df.groupby('location').size()\n\n# Plot the pie chart\nplt.pie(location_counts, labels=location_counts.index, autopct='%1.1f%%')\nplt.title('Location Distribution')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "What is the number of players who have points less than 30 for each position Plot them as bar chart, list in asc by the x axis please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the player table\nplayer_df = pd.read_sql(\"SELECT * FROM player\", conn)\n\n# Convert column names to lowercase\nplayer_df.columns = player_df.columns.str.lower()\n\n# Filter the data where points < 30\nfiltered_df = player_df[player_df['points'] < 30]\n\n# Group by position and count the number of players\ngrouped_df = filtered_df.groupby('position').size().reset_index(name='count')\n\n# Sort the data by position in ascending order\nsorted_df = grouped_df.sort_values('position')\n\n# Create a bar plot\nplt.bar(sorted_df['position'], sorted_df['count'])\nplt.xlabel('Position')\nplt.ylabel('Count')\nplt.title('Number of Players with Points < 30 by Position')\nplt.show()"
  },
  {
    "db_id": "school_player",
    "question": "Create a bar chart showing the total number across denomination",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nschool = pd.read_sql(\"SELECT * FROM school\", conn)\nschool.columns = school.columns.str.lower()\n\n# Grouping the data by denomination and counting the number of occurrences\ndenomination_counts = school.groupby('denomination').size()\n\n# Creating a bar plot\nplt.bar(denomination_counts.index, denomination_counts.values)\n\n# Adding labels and title\nplt.xlabel('Denomination')\nplt.ylabel('Count')\nplt.title('Number of Schools by Denomination')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "For each position , what is the average number of points for players in that position . Plot them as bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nplayer.columns = player.columns.str.lower()\n\n# Calculate average points by position\navg_points_by_position = player.groupby('position')['points'].mean()\n\n# Create bar plot\nplt.bar(avg_points_by_position.index, avg_points_by_position.values)\nplt.xlabel('Position')\nplt.ylabel('Average Points')\nplt.title('Average Points by Position')\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor , rank from high to low by the x axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\n\n# Grouping the data by 'investor' and counting the occurrences\ngrouped_data = entrepreneur.groupby('investor').size().reset_index(name='count')\n\n# Sorting the data by 'investor' in descending order\nsorted_data = grouped_data.sort_values('investor', ascending=False)\n\n# Creating the bar plot\nplt.bar(sorted_data['investor'], sorted_data['count'])\nplt.xlabel('Investor')\nplt.ylabel('Count')\nplt.title('Number of Entrepreneurs by Investor')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "Return the categories of music festivals that have the result \"Awarded\", and count them by a bar chart, sort by the X in desc please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the music_festival table\nmusic_festival = pd.read_sql(\"SELECT * FROM music_festival\", conn)\n\n# Convert column names to lowercase\nmusic_festival.columns = music_festival.columns.str.lower()\n\n# Filter the data for \"Awarded\" results\nawarded_data = music_festival[music_festival['result'] == 'Awarded']\n\n# Group by category and count the occurrences\ncategory_counts = awarded_data.groupby('category').size().reset_index(name='count')\n\n# Sort the data by category in descending order\ncategory_counts = category_counts.sort_values('category', ascending=False)\n\n# Create a bar plot\nplt.bar(category_counts['category'], category_counts['count'])\nplt.xlabel('Category')\nplt.ylabel('Count')\nplt.title('Music Festival Awards by Category')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "Return a bar on how many entrepreneurs correspond to each investor ? , and I want to sort from low to high by the Y-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\n\n# Grouping the data by 'investor' and counting the occurrences\ngrouped_data = entrepreneur.groupby('investor').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nsorted_data = grouped_data.sort_values('count')\n\n# Creating the bar plot\nplt.bar(sorted_data['investor'], sorted_data['count'])\nplt.xlabel('Investor')\nplt.ylabel('Count')\nplt.title('Number of Entrepreneurs by Investor')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Visualize a bar chart for what are the different template type codes , and how many templates correspond to each ? , I want to sort from low to high by the x axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nTemplates = pd.read_sql(\"SELECT * FROM Templates\", conn)\nTemplates.columns = Templates.columns.str.lower()\n\n# Grouping the data by template_type_code and counting the occurrences\ntemplate_counts = Templates.groupby('template_type_code').size().reset_index(name='count')\n\n# Sorting the data by template_type_code in ascending order\ntemplate_counts = template_counts.sort_values('template_type_code')\n\n# Creating the bar plot\nplt.bar(template_counts['template_type_code'], template_counts['count'])\nplt.xlabel('Template Type Code')\nplt.ylabel('Count')\nplt.title('Template Type Counts')\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "Bar graph to show total number of population from different governmentform , and list in asc by the sum population .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry.columns = country.columns.str.lower()\n\n# Group by governmentform and calculate the sum of population\ngrouped_data = country.groupby('governmentform')['population'].sum()\n\n# Sort the data in ascending order\nsorted_data = grouped_data.sort_values()\n\n# Create a bar plot\nplt.bar(sorted_data.index, sorted_data.values)\n\n# Set the x-axis label\nplt.xlabel('Government Form')\n\n# Set the y-axis label\nplt.ylabel('Population')\n\n# Set the title of the plot\nplt.title('Population by Government Form')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "What is the number of players who have points less than 30 for each position Plot them as bar chart, and list by the names in desc.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the player table\nplayer_df = pd.read_sql(\"SELECT * FROM player\", conn)\n\n# Convert column names to lowercase\nplayer_df.columns = player_df.columns.str.lower()\n\n# Filter the data where points < 30\nfiltered_df = player_df[player_df['points'] < 30]\n\n# Group by position and count the number of players\ngrouped_df = filtered_df.groupby('position').size().reset_index(name='count')\n\n# Sort the data by position in descending order\nsorted_df = grouped_df.sort_values('position', ascending=False)\n\n# Create the bar plot\nplt.bar(sorted_df['position'], sorted_df['count'])\nplt.xlabel('Position')\nplt.ylabel('Count')\nplt.title('Number of Players with Points < 30 by Position')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Return me a scatter chart to show the star rating of the movie for each reviewer.",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating and Movie tables\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\n\n# Convert column names to lowercase\nrating_df.columns = rating_df.columns.str.lower()\nmovie_df.columns = movie_df.columns.str.lower()\n\n# Merge the Rating and Movie tables on the mID column\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Create a scatter plot\nplt.scatter(merged_df[\"rid\"], merged_df[\"stars\"])\nplt.xlabel(\"rID\")\nplt.ylabel(\"Stars\")\nplt.title(\"Scatter Plot of rID vs Stars\")\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "What are the statuses and average populations of each city Plot them as bar chart , and rank in asc by the x axis please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncity.columns = city.columns.str.lower()\n\n# Group by status and calculate average population\ngrouped_city = city.groupby('status')['population'].mean()\n\n# Sort by status in ascending order\ngrouped_city = grouped_city.sort_index()\n\n# Create bar plot\nplt.bar(grouped_city.index, grouped_city.values)\n\n# Set labels and title\nplt.xlabel('Status')\nplt.ylabel('Average Population')\nplt.title('Average Population by Status')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "company_employee",
    "question": "Show the different headquarters and number of companies at each headquarter with a bar chart , sort X-axis in desc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompany = pd.read_sql(\"SELECT * FROM company\", conn)\ncompany.columns = company.columns.str.lower()\n\n# Group by headquarters and count the number of companies\nheadquarters_count = company.groupby('headquarters').size().reset_index(name='count')\n\n# Sort the data by headquarters in descending order\nheadquarters_count = headquarters_count.sort_values('headquarters', ascending=False)\n\n# Create a bar plot\nplt.bar(headquarters_count['headquarters'], headquarters_count['count'])\nplt.xlabel('Headquarters')\nplt.ylabel('Count')\nplt.title('Number of Companies by Headquarters')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "Bar chart of the total number from each party , and rank x axis in descending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\nrepresentative.columns = representative.columns.str.lower()\n\n# Group by party and count the number of representatives in each party\nparty_counts = representative.groupby('party').size().reset_index(name='count')\n\n# Sort the parties in descending order\nparty_counts = party_counts.sort_values('party', ascending=False)\n\n# Create a bar plot\nplt.bar(party_counts['party'], party_counts['count'])\nplt.xlabel('Party')\nplt.ylabel('Count')\nplt.title('Number of Representatives by Party')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Return a bar on what are the types of competition and number of competitions for that type ? , I want to display total number in desc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the number of occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort the counts in descending order\ncompetition_counts = competition_counts.sort_values(by='count', ascending=False)\n\n# Create a bar plot\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Type')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "Give me a bar for what are the different parties of representative ? Show the party name and the number of representatives in each party .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\nrepresentative.columns = representative.columns.str.lower()\n\n# Group by party and count the number of representatives\nparty_counts = representative.groupby('party').size()\n\n# Create a bar plot\nplt.bar(party_counts.index, party_counts.values)\n\n# Set the labels and title\nplt.xlabel('Party')\nplt.ylabel('Count')\nplt.title('Number of Representatives by Party')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "Visualize a bar chart to show editors' names and their ages , I want to rank bars from high to low order .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\neditor.columns = editor.columns.str.lower()\n\n# Assuming the data is already loaded into a dataframe called 'editor'\n\n# Sort the dataframe by name in descending order\nsorted_df = editor.sort_values(by='name', ascending=False)\n\n# Extract the name and age columns\nname = sorted_df['name']\nage = sorted_df['age']\n\n# Create a bar plot\nplt.bar(name, age)\n\n# Add labels and title\nplt.xlabel('Name')\nplt.ylabel('Age')\nplt.title('Age by Name')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Compare the total number of different ranks using a bar graph, and sort from low to high by the Y.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the captain table\ncaptain_df = pd.read_sql(\"SELECT * FROM captain\", conn)\n\n# Convert column names to lowercase\ncaptain_df.columns = captain_df.columns.str.lower()\n\n# Perform the SQL query\nresult = captain_df.groupby('rank').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar plot\nplt.bar(result['rank'], result['count'])\nplt.xlabel('Rank')\nplt.ylabel('Count')\nplt.title('Count of Ranks')\nplt.show()"
  },
  {
    "db_id": "company_employee",
    "question": "Show the number of headquarters from each headquarters , and I want to show by the X from high to low .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompany = pd.read_sql(\"SELECT * FROM company\", conn)\ncompany.columns = company.columns.str.lower()\n\n# Group by headquarters and count the number of companies\nheadquarters_count = company.groupby('headquarters').size().reset_index(name='count')\n\n# Sort the data by headquarters in descending order\nheadquarters_count = headquarters_count.sort_values('headquarters', ascending=False)\n\n# Create a bar plot\nplt.bar(headquarters_count['headquarters'], headquarters_count['count'])\nplt.xlabel('Headquarters')\nplt.ylabel('Count')\nplt.title('Number of Companies by Headquarters')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "Just show the id and name of each editor using a bar chart, order by the y axis in ascending.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the editor and journal_committee tables\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\njournal_committee = pd.read_sql(\"SELECT * FROM journal_committee\", conn)\n\n# Convert column names to lowercase\neditor.columns = editor.columns.str.lower()\njournal_committee.columns = journal_committee.columns.str.lower()\n\n# Merge the editor and journal_committee tables on Editor_ID\nmerged_data = pd.merge(editor, journal_committee, on=\"editor_id\")\n\n# Sort the merged data by Editor_ID\nsorted_data = merged_data.sort_values(\"editor_id\")\n\n# Create a bar plot\nplt.bar(sorted_data[\"name\"], sorted_data[\"editor_id\"])\nplt.xlabel(\"Editor Name\")\nplt.ylabel(\"Editor ID\")\nplt.title(\"Editor ID by Name\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes' with a bar chart, and order from high to low by the Y.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the department table\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = map(str.lower, department.columns)\n\n# Read the management table\nmanagement = pd.read_sql(\"SELECT * FROM management\", conn)\nmanagement.columns = map(str.lower, management.columns)\n\n# Merge the department and management tables\nmerged_data = pd.merge(department, management, on=\"department_id\")\n\n# Filter the merged data for temporary acting departments\nfiltered_data = merged_data[merged_data[\"temporary_acting\"] == \"Yes\"]\n\n# Group by department name and calculate the sum of num_employees\ngrouped_data = filtered_data.groupby(\"name\")[\"num_employees\"].sum().reset_index()\n\n# Sort the data by the sum of num_employees in descending order\nsorted_data = grouped_data.sort_values(\"num_employees\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"name\"], sorted_data[\"num_employees\"])\nplt.xlabel(\"Department Name\")\nplt.ylabel(\"Total Number of Employees\")\nplt.title(\"Total Number of Employees in Temporary Acting Departments\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "What are the statuses and average populations of each city Plot them as bar chart , and list by the y-axis in asc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncity.columns = city.columns.str.lower()\n\n# Group by status and calculate average population\ngrouped_city = city.groupby('status')['population'].mean()\n\n# Sort by average population in ascending order\nsorted_city = grouped_city.sort_values()\n\n# Create bar plot\nplt.bar(sorted_city.index, sorted_city.values)\n\n# Set labels and title\nplt.xlabel('Status')\nplt.ylabel('Average Population')\nplt.title('Average Population by Status')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "scientist_1",
    "question": "Visualize a bar chart for what are the naems of all the projects, and how many scientists were assigned to each of them?, and rank x axis from high to low order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the projects table\nprojects = pd.read_sql(\"SELECT * FROM projects\", conn)\nprojects.columns = map(str.lower, projects.columns)\n\n# Read the assignedto table\nassignedto = pd.read_sql(\"SELECT * FROM assignedto\", conn)\nassignedto.columns = map(str.lower, assignedto.columns)\n\n# Merge the projects and assignedto tables\nmerged = pd.merge(projects, assignedto, left_on=\"code\", right_on=\"project\")\n\n# Perform the aggregation\naggregated = merged.groupby(\"name\").size().reset_index(name=\"count\")\naggregated = aggregated.sort_values(\"name\", ascending=False)\n\n# Plot the bar chart\nplt.bar(aggregated[\"name\"], aggregated[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Assignments per Project\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "Show me a bar chart displaying the count of entrepreneurs for each weight, with the bars ordered in descending order of money requested.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(entrepreneur, people, on='people_id')\n\n# Group by weight and count the occurrences\ngrouped_df = merged_df.groupby('weight').size().reset_index(name='count')\n\n# Sort by money_requested in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['weight'], sorted_df['count'])\nplt.xlabel('Weight')\nplt.ylabel('Count')\nplt.title('Count of Entrepreneurs by Weight')\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "What is the average number of weeks on top for volumes by artists that are at most 25 years old, grouped by artist ID, and ordered in descending order of the average number of weeks on top, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nvolume = pd.read_sql(\"SELECT * FROM volume\", conn)\nartist.columns = artist.columns.str.lower()\nvolume.columns = volume.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(artist, volume, on='artist_id')\n\n# Filter the data based on age condition\nfiltered_df = merged_df[merged_df['age'] <= 25]\n\n# Group by artist_id and calculate the average weeks_on_top\ngrouped_df = filtered_df.groupby('artist_id').agg({'weeks_on_top': 'mean'}).reset_index()\n\n# Sort the data by average weeks_on_top in descending order\nsorted_df = grouped_df.sort_values('weeks_on_top', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['artist_id'], sorted_df['weeks_on_top'])\nplt.xlabel('Artist ID')\nplt.ylabel('Average Weeks on Top')\nplt.title('Average Weeks on Top by Artist (Age <= 25)')\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "What are the purchase details of transactions with amount bigger than 10000, and count them by a bar chart, show by the names in ascending.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the PURCHASES and TRANSACTIONS tables\npurchases = pd.read_sql(\"SELECT * FROM PURCHASES\", conn)\ntransactions = pd.read_sql(\"SELECT * FROM TRANSACTIONS\", conn)\n\n# Convert column names to lowercase\npurchases.columns = purchases.columns.str.lower()\ntransactions.columns = transactions.columns.str.lower()\n\n# Merge the PURCHASES and TRANSACTIONS tables on the common column\nmerged_data = pd.merge(purchases, transactions, left_on=\"purchase_transaction_id\", right_on=\"transaction_id\")\n\n# Filter the merged data based on the condition\nfiltered_data = merged_data[merged_data[\"amount_of_transaction\"] > 10000]\n\n# Group the filtered data by purchase_details and count the occurrences\ngrouped_data = filtered_data.groupby(\"purchase_details\").size().reset_index(name=\"count\")\n\n# Sort the grouped data by purchase_details in ascending order\nsorted_data = grouped_data.sort_values(\"purchase_details\", ascending=True)\n\n# Generate the bar plot\nplt.bar(sorted_data[\"purchase_details\"], sorted_data[\"count\"])\nplt.xlabel(\"Purchase Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Bar Plot of Purchase Details\")\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Compare the total number of different ranks using a bar graph , and sort bar in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\ncaptain.columns = captain.columns.str.lower()\n\n# Grouping and counting the ranks\nrank_counts = captain.groupby('rank').size().reset_index(name='count')\n\n# Sorting the ranks in ascending order\nrank_counts = rank_counts.sort_values('rank')\n\n# Creating the bar plot\nplt.bar(rank_counts['rank'], rank_counts['count'])\nplt.xlabel('Rank')\nplt.ylabel('Count')\nplt.title('Rank Distribution')\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "Show the average of population from each status , and sort names in descending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncity.columns = city.columns.str.lower()\n\n# Group by status and calculate average population\ngrouped_data = city.groupby('status')['population'].mean()\n\n# Sort the data by status in descending order\nsorted_data = grouped_data.sort_index(ascending=False)\n\n# Create a bar plot\nplt.bar(sorted_data.index, sorted_data.values)\n\n# Set the labels and title\nplt.xlabel('Status')\nplt.ylabel('Average Population')\nplt.title('Average Population by Status')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "What is the distribution of project staff involved in each role in the project outcomes, represented by a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nStaff_Roles = pd.read_sql(\"SELECT * FROM Staff_Roles\", conn)\nProject_Staff = pd.read_sql(\"SELECT * FROM Project_Staff\", conn)\nProject_outcomes = pd.read_sql(\"SELECT * FROM Project_outcomes\", conn)\nStaff_Roles.columns = Staff_Roles.columns.str.lower()\nProject_Staff.columns = Project_Staff.columns.str.lower()\nProject_outcomes.columns = Project_outcomes.columns.str.lower()\n\n# Merge the tables\nmerged_df = pd.merge(pd.merge(Staff_Roles, Project_Staff, on='role_code'), Project_outcomes, on='project_id')\n\n# Group by role_description and count the occurrences\ngrouped_df = merged_df.groupby('role_description').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['role_description'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Plot how many class by grouped by class as a bar graph, and display by the X-axis in descending.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the captain table\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\n\n# Convert column names to lowercase\ncaptain.columns = captain.columns.str.lower()\n\n# Perform the SQL query\nresult = captain.groupby('class').size().reset_index(name='count').sort_values('class', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['class'], result['count'])\nplt.xlabel('Class')\nplt.ylabel('Count')\nplt.title('Count of Class')\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Give me a bar chart showing the total number of ships' classes that do not have a captain, show Y in descending order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ship table\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Read the captain table\ncaptain_df = pd.read_sql(\"SELECT * FROM captain\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\ncaptain_df.columns = captain_df.columns.str.lower()\n\n# filter ship records where ship_id is not in captain table\nfiltered_ship_df = ship_df[~ship_df['ship_id'].isin(captain_df['ship_id'])]\n\n# group by class and count the occurrences\ngrouped_ship_df = filtered_ship_df.groupby('class').size().reset_index(name='count')\n\n# sort by count in descending order\nsorted_ship_df = grouped_ship_df.sort_values('count', ascending=False)\n\n# plot the bar chart\nplt.bar(sorted_ship_df['class'], sorted_ship_df['count'])\nplt.xlabel('Class')\nplt.ylabel('Count')\nplt.title('Number of Ships by Class (without Captain)')\nplt.show()\n"
  },
  {
    "db_id": "world_1",
    "question": "What is the official language used in the country the name of whose head of state is Beatrix, and count them by a bar chart, and rank in desc by the x axis.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the country table\ncountry_data = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry_data.columns = map(str.lower, country_data.columns)\n\n# Read the data from the countrylanguage table\ncountrylanguage_data = pd.read_sql(\"SELECT * FROM countrylanguage\", conn)\ncountrylanguage_data.columns = map(str.lower, countrylanguage_data.columns)\n\n# Merge the two tables on the CountryCode column\nmerged_data = pd.merge(country_data, countrylanguage_data, left_on=\"code\", right_on=\"countrycode\")\n\n# Filter the merged data based on the conditions\nfiltered_data = merged_data[(merged_data[\"headofstate\"] == \"Beatrix\") & (merged_data[\"isofficial\"] == \"T\")]\n\n# Group the data by Language and count the occurrences\ngrouped_data = filtered_data.groupby(\"language\").size().reset_index(name=\"count\")\n\n# Sort the data by Language in descending order\nsorted_data = grouped_data.sort_values(by=\"language\", ascending=False)\n\n# Create a bar plot\nplt.bar(sorted_data[\"language\"], sorted_data[\"count\"])\nplt.xlabel(\"Language\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Countries with Official Language by Language\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "Give me a bar for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , sort names in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry.columns = country.columns.str.lower()\n\n# Group by governmentform and calculate the sum of population\ngrouped_data = country.groupby('governmentform')['population'].sum()\n\n# Sort the data by governmentform in ascending order\nsorted_data = grouped_data.sort_index()\n\n# Create a bar plot\nplt.bar(sorted_data.index, sorted_data.values)\n\n# Set the x-axis label\nplt.xlabel('Government Form')\n\n# Set the y-axis label\nplt.ylabel('Population')\n\n# Set the title of the plot\nplt.title('Population by Government Form')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Ignore movies whose director is NULL. For each director, what are the titles and the highest rating among all of their movies they reviewed? Draw the result by a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\nmovie_df.columns = map(str.lower, movie_df.columns)\n\n# Merge the Rating and Movie tables on mID column\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Filter out rows where director is not null\nfiltered_df = merged_df[merged_df[\"director\"] != \"null\"]\n\n# Group by title and find the maximum stars for each movie\ngrouped_df = filtered_df.groupby(\"title\").agg({\"stars\": \"max\"})\n\n# Plot the pie chart\nplt.pie(grouped_df[\"stars\"], labels=grouped_df.index, autopct=\"%1.1f%%\")\nplt.title(\"Maximum Stars by Movie Title\")\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Show the stars of each director by a bar chart, show by the Y in desc.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\nmovie_df.columns = map(str.lower, movie_df.columns)\n\n# Merge the Rating and Movie tables on mID column\nmerged_df = pd.merge(rating_df, movie_df, on='mid')\n\n# Sort the merged dataframe by stars in descending order\nsorted_df = merged_df.sort_values(by='stars', ascending=False)\n\n# Convert the director column to strings\nsorted_df['director'] = sorted_df['director'].astype(str)\n\n# Plot the bar chart\nplt.bar(sorted_df['director'], sorted_df['stars'])\nplt.xlabel('Director')\nplt.ylabel('Stars')\nplt.title('Top Rated Movies by Director')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "department_management",
    "question": "Plot the average of budget in billions over creation in a line chart, and order by the x-axis from low to high.",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the department table\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\n\n# Convert column names to lowercase\ndepartment.columns = department.columns.str.lower()\n\n# Perform the SQL query\nresult = department.groupby(\"creation\")[\"budget_in_billions\"].mean().reset_index().sort_values(\"creation\")\n\n# Plot the line chart\nplt.plot(result[\"creation\"], result[\"budget_in_billions\"])\nplt.xlabel(\"Creation\")\nplt.ylabel(\"Average Budget (in Billions)\")\nplt.title(\"Average Budget by Creation\")\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "What is the distribution of entrepreneurs, who do not have the investor Rachel Elnaugh, based on their names? Show it using a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Perform the join operation\ndf = pd.merge(entrepreneur, people, on='people_id')\n\n# Filter out rows where investor is not 'rachel elnaugh'\ndf_filtered = df[df['investor'] != 'rachel elnaugh']\n\n# Group by name and count the occurrences\ndf_grouped = df_filtered.groupby('name').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(df_grouped['count'], labels=df_grouped['name'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Visualize names and market shares of furnitures which no any company is producing in our records by a bar chart, order by the y-axis in asc.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the furniture table\nfurniture = pd.read_sql(\"SELECT * FROM furniture\", conn)\n\n# Read the furniture_manufacte table\nfurniture_manufacte = pd.read_sql(\"SELECT * FROM furniture_manufacte\", conn)\n\n# Convert column names to lowercase\nfurniture.columns = furniture.columns.str.lower()\nfurniture_manufacte.columns = furniture_manufacte.columns.str.lower()\n\n# merge the two tables on furniture_id\nmerged_data = pd.merge(furniture, furniture_manufacte, on='furniture_id', how='left')\n\n# filter the merged data to exclude furniture_ids present in furniture_manufacte\nfiltered_data = merged_data[~merged_data['furniture_id'].isin(furniture_manufacte['furniture_id'])]\n\n# sort the filtered data by market_rate in ascending order\nsorted_data = filtered_data.sort_values('market_rate')\n\n# plot the bar chart\nplt.bar(sorted_data['name'], sorted_data['market_rate'])\nplt.xlabel('Name')\nplt.ylabel('Market Rate')\nplt.title('Market Rate of Furniture')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "sports_competition",
    "question": "Show the proportion of different competition types.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the competition table\ncompetition_df = pd.read_sql(\"SELECT * FROM competition\", conn)\n\n# Convert column names to lowercase\ncompetition_df.columns = competition_df.columns.str.lower()\n\n# Perform the SQL query\nresult = competition_df.groupby('competition_type').size()\n\n# Plot the pie chart\nplt.pie(result, labels=result.index, autopct='%1.1f%%')\nplt.title('Competition Types')\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Plot a pie chart to show different nominees and the number of musicals they have been nominated .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Assuming the data is already loaded into a dataframe called 'musical'\n\n# Grouping the data by 'nominee' and counting the occurrences\ngrouped_data = musical.groupby('nominee').size().reset_index(name='count')\n\n# Creating a pie chart\nplt.pie(grouped_data['count'], labels=grouped_data['nominee'], autopct='%1.1f%%')\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Show different locations and the number of performances at each location with a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the performance table\nperformance_df = pd.read_sql(\"SELECT * FROM performance\", conn)\n\n# Convert column names to lowercase\nperformance_df.columns = performance_df.columns.str.lower()\n\n# Perform the group by operation\ngrouped_df = performance_df.groupby('location').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['location'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()\n\n# Close the database connection\nconn.close()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Compare the total number of locations in each location using a bar graph , and order by the Y-axis from low to high .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\nperformance.columns = performance.columns.str.lower()\n\n# Group by location and count the occurrences\nlocation_counts = performance.groupby('location').size().reset_index(name='count')\n\n# Sort the counts in ascending order\nlocation_counts = location_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(location_counts['location'], location_counts['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Location Counts')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "A bar chart for how many competitions for each country , and order x-axis from low to high order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by country and count the occurrences\ncountry_counts = competition.groupby('country').size().reset_index(name='count')\n\n# Sort by country in ascending order\ncountry_counts = country_counts.sort_values('country')\n\n# Create bar plot\nplt.bar(country_counts['country'], country_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Show names of musicals and the number of actors who have appeared in the musicals. ",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the actor table\nactor = pd.read_sql(\"SELECT * FROM actor\", conn)\n\n# Read the musical table\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\n\n# Convert column names to lowercase\nactor.columns = actor.columns.str.lower()\nmusical.columns = musical.columns.str.lower()\n\n# merge the actor and musical tables on musical_id\nmerged = pd.merge(actor, musical, on='musical_id')\n\n# group by musical_id and count the number of occurrences\ngrouped = merged.groupby('musical_id').size()\n\n# plot the pie chart\nplt.pie(grouped, labels=grouped.index, autopct='%1.1f%%')\nplt.title('Number of Actors in Each Musical')\nplt.show()\n"
  },
  {
    "db_id": "musical",
    "question": "Show different nominees and the number of musicals they have been nominated Plot them as bar chart, show in desc by the X.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the musical table\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\n\n# Convert column names to lowercase\nmusical.columns = musical.columns.str.lower()\n\n# Perform the SQL query\nresult = musical.groupby('nominee').size().reset_index(name='count').sort_values('nominee', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['nominee'], result['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Nominations by Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "For the sale details with amount smaller than 3000, visualize a bar chart that x-axis is the sales details and count them as y.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the SALES table\nsales = pd.read_sql(\"SELECT * FROM sales\", conn)\nsales.columns = map(str.lower, sales.columns)\n\n# Read the TRANSACTIONS table\ntransactions = pd.read_sql(\"SELECT * FROM transactions\", conn)\ntransactions.columns = map(str.lower, transactions.columns)\n\n# Merge the SALES and TRANSACTIONS tables on sales_transaction_id\nmerged_data = pd.merge(sales, transactions, left_on='sales_transaction_id', right_on='transaction_id')\n\n# Filter the merged data based on the condition amount_of_transaction < 3000\nfiltered_data = merged_data[merged_data['amount_of_transaction'] < 3000]\n\n# Group the filtered data by sales_details and count the occurrences\ngrouped_data = filtered_data.groupby('sales_details').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_data['sales_details'], grouped_data['count'])\nplt.xlabel('Sales Details')\nplt.ylabel('Count')\nplt.title('Count of Sales Details with Amount < 3000')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Give me a bar chart for how many competition type of each competition type , order by the y-axis in descending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort by count in descending order\ncompetition_counts = competition_counts.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Competition Type Counts')\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "A pie chart for showing the number of the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".",
    "chart": "Pie",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the musical table\nmusical_df = pd.read_sql(\"SELECT * FROM musical\", conn)\n\n# Convert column names to lowercase\nmusical_df.columns = musical_df.columns.str.lower()\n\n# Filter the data based on the conditions\nfiltered_df = musical_df[(musical_df['award'] == \"Tony Award\") | (musical_df['award'] == \"Cleavant Derricks\")]\n\n# Group by nominee and count the occurrences\ngrouped_df = filtered_df.groupby('nominee').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['nominee'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.title('Nominee Distribution')\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "Show me a bar chart displaying the project ID and the count of staff for each project, ranked in descending order of the staff count.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nProject_Staff = pd.read_sql(\"SELECT * FROM Project_Staff\", conn)\nProjects = pd.read_sql(\"SELECT * FROM Projects\", conn)\nProject_Staff.columns = Project_Staff.columns.str.lower()\nProjects.columns = Projects.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(Project_Staff, Projects, on='project_id')\n\n# Grouping by project_id and counting the number of rows\ngrouped_df = merged_df.groupby('project_id').size().reset_index(name='count')\n\n# Sorting by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plotting the bar chart\nplt.bar(sorted_df['project_id'], sorted_df['count'])\nplt.xlabel('Project ID')\nplt.ylabel('Count')\nplt.title('Number of Staff per Project')\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "Give me a bar chart , that group by location and count them , show by the Location in descending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nparty = pd.read_sql(\"SELECT * FROM party\", conn)\nparty.columns = party.columns.str.lower()\n\n# Group by location and count the occurrences\nlocation_counts = party.groupby('location').size().reset_index(name='count')\n\n# Sort by location in descending order\nlocation_counts = location_counts.sort_values('location', ascending=False)\n\n# Create bar plot\nplt.bar(location_counts['location'], location_counts['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Party Count by Location')\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "A bar chart about how many hosts does each nationality have ? List the nationality and the count , and order in ascending by the names .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nHOST = pd.read_sql(\"SELECT * FROM HOST\", conn)\nHOST.columns = HOST.columns.str.lower()\n\n# Grouping the data by nationality and counting the occurrences\nnationality_counts = HOST.groupby('nationality').size().reset_index(name='count')\n\n# Sorting the data by nationality in ascending order\nnationality_counts = nationality_counts.sort_values('nationality')\n\n# Creating the bar plot\nplt.bar(nationality_counts['nationality'], nationality_counts['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Hosts by Nationality')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Show me a bar chart displaying the count of performances attended by each member, ranked in descending order of the count.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmember_attendance = pd.read_sql(\"SELECT * FROM member_attendance\", conn)\nmember = pd.read_sql(\"SELECT * FROM member\", conn)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\nmember_attendance.columns = member_attendance.columns.str.lower()\nmember.columns = member.columns.str.lower()\nperformance.columns = performance.columns.str.lower()\n\n# Perform the join operation\nmerged_data = pd.merge(member_attendance, member, on='member_id')\nmerged_data = pd.merge(merged_data, performance, on='performance_id')\n\n# Group by member name and count the number of performances attended\ngrouped_data = merged_data.groupby('name').size().reset_index(name='count')\n\n# Sort the data by count in descending order\nsorted_data = grouped_data.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data['name'], sorted_data['count'])\nplt.xlabel('Member Name')\nplt.ylabel('Number of Performances Attended')\nplt.title('Number of Performances Attended by Members')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "school_player",
    "question": "What is the distribution of players across different denominations of schools, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nschool = pd.read_sql(\"SELECT * FROM school\", conn)\nplayer.columns = player.columns.str.lower()\nschool.columns = school.columns.str.lower()\n\n# Perform the join operation\nmerged_data = pd.merge(player, school, on='school_id')\n\n# Group by denomination and count the number of players\ngrouped_data = merged_data.groupby('denomination').size().reset_index(name='count')\n\n# Create a pie chart\nplt.pie(grouped_data['count'], labels=grouped_data['denomination'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Display the chart\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "Show me a bar chart displaying the count of entrepreneurs for each investor, excluding \"Rachel Elnaugh\".",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(entrepreneur, people, on='people_id')\n\n# Filter out the rows where investor is not 'rachel elnaugh'\nfiltered_df = merged_df[merged_df['investor'] != 'rachel elnaugh']\n\n# Group by investor and count the number of occurrences\ngrouped_df = filtered_df.groupby('investor').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['investor'], grouped_df['count'])\nplt.xlabel('Investor')\nplt.ylabel('Count')\nplt.title('Number of Entrepreneurs by Investor (excluding Rachel Elnaugh)')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "company_employee",
    "question": "Show the different headquarters and number of companies at each headquarter with a bar chart , order y axis in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompany = pd.read_sql(\"SELECT * FROM company\", conn)\ncompany.columns = company.columns.str.lower()\n\n# Group by headquarters and count the number of companies\nheadquarters_count = company.groupby('headquarters').size().reset_index(name='count')\n\n# Sort the dataframe by count in ascending order\nheadquarters_count = headquarters_count.sort_values('count')\n\n# Create a bar plot\nplt.bar(headquarters_count['headquarters'], headquarters_count['count'])\nplt.xlabel('Headquarters')\nplt.ylabel('Count')\nplt.title('Number of Companies by Headquarters')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "Bar chart x axis nationality y axis the total number , could you list in ascending by the y axis ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nHOST = pd.read_sql(\"SELECT * FROM HOST\", conn)\nHOST.columns = HOST.columns.str.lower()\n\n# Grouping the data by nationality and counting the occurrences\nnationality_counts = HOST.groupby('nationality').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nnationality_counts = nationality_counts.sort_values('count')\n\n# Creating the bar plot\nplt.bar(nationality_counts['nationality'], nationality_counts['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Hosts by Nationality')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Draw a bar chart for what are the different ship flags, and how many ships have each?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the 'ship' table into a pandas DataFrame\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\n\n# Perform the SQL query\nresult = ship_df.groupby('flag').size()\n\n# Plot the bar chart\nplt.bar(result.index, result.values)\nplt.xlabel('Flag')\nplt.ylabel('Count')\nplt.title('Number of Ships by Flag')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Please tell me the total star ratings of each movie title using a bar chart, and order bar in ascending order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\nmovie_df.columns = map(str.lower, movie_df.columns)\n\n# Merge the Rating and Movie tables on mID column\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Group by title and calculate the sum of stars\ngrouped_df = merged_df.groupby(\"title\")[\"stars\"].sum().reset_index()\n\n# Sort the dataframe by title in ascending order\nsorted_df = grouped_df.sort_values(\"title\", ascending=True)\n\n# Plot the bar chart\nplt.bar(sorted_df[\"title\"], sorted_df[\"stars\"])\nplt.xlabel(\"Movie Title\")\nplt.ylabel(\"Total Stars\")\nplt.title(\"Total Stars by Movie Title\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "A bar chart showing how many representatives in each party, show y-axis in desc order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the representative table\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\n\n# Convert column names to lowercase\nrepresentative.columns = representative.columns.str.lower()\n\n# Perform the SQL query\nparty_counts = representative.groupby('party').size().reset_index(name='count')\nparty_counts = party_counts.sort_values('count', ascending=False)\n\n# Generate the bar chart\nplt.bar(party_counts['party'], party_counts['count'])\nplt.xlabel('Party')\nplt.ylabel('Count')\nplt.title('Number of Representatives by Party')\nplt.show()"
  },
  {
    "db_id": "county_public_safety",
    "question": "What is the scatter plot of crime rates in counties where the percentage of white population in at least one city is more than 90?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncounty_public_safety = pd.read_sql(\"SELECT * FROM county_public_safety\", conn)\ncity.columns = city.columns.str.lower()\ncounty_public_safety.columns = county_public_safety.columns.str.lower()\n\n# Merge city and county_public_safety dataframes\nmerged_df = pd.merge(city, county_public_safety, on='county_id')\n\n# Filter data where white population is greater than 90\nfiltered_df = merged_df[merged_df['white'] > 90]\n\n# Create scatter plot\nplt.scatter(filtered_df['white'], filtered_df['crime_rate'])\nplt.xlabel('White Population')\nplt.ylabel('Crime Rate')\nplt.title('Scatter Plot of White Population vs Crime Rate')\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Bar chart x axis nominee y axis the total number",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Group by nominee and count the number of occurrences\nnominee_counts = musical.groupby('nominee').size().reset_index(name='count')\n\n# Create a bar plot\nplt.bar(nominee_counts['nominee'], nominee_counts['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "What is the average weeks on top of volumes associated with each artist aged 25 or younger, visualized in a scatter chart?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nvolume = pd.read_sql(\"SELECT * FROM volume\", conn)\nartist.columns = artist.columns.str.lower()\nvolume.columns = volume.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(artist, volume, on='artist_id')\n\n# Filter the data based on age <= 25\nfiltered_df = merged_df[merged_df['age'] <= 25]\n\n# Group by age and calculate average weeks_on_top\ngrouped_df = filtered_df.groupby('age').agg({'weeks_on_top': 'mean'}).reset_index()\n\n# Create scatter plot\nplt.scatter(grouped_df['age'], grouped_df['weeks_on_top'])\nplt.xlabel('Age')\nplt.ylabel('Average Weeks on Top')\nplt.title('Average Weeks on Top by Age')\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "What is the total number of captains with different classes ? , sort by the bars in desc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\ncaptain.columns = captain.columns.str.lower()\n\n# Group by 'class' and count the occurrences\nclass_counts = captain.groupby('class').size().reset_index(name='count')\n\n# Sort the dataframe by 'class' in descending order\nclass_counts = class_counts.sort_values('class', ascending=False)\n\n# Create a bar plot\nplt.bar(class_counts['class'], class_counts['count'])\nplt.xlabel('Class')\nplt.ylabel('Count')\nplt.title('Count of each class')\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Bar chart x axis sportname y axis the total number",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nSportsinfo.columns = Sportsinfo.columns.str.lower()\n\n# Grouping the data by sportname and counting the occurrences\nsport_counts = Sportsinfo.groupby('sportname').size().reset_index(name='count')\n\n# Creating the bar plot\nplt.bar(sport_counts['sportname'], sport_counts['count'])\nplt.xlabel('Sport Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Sport')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Compare the lowest rating among all movies by each title using a bar, list from low to high by the title.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\nmovie_df.columns = map(str.lower, movie_df.columns)\n\n# Merge the Rating and Movie tables on mID column\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Group by title and calculate the minimum stars for each movie\ngrouped_df = merged_df.groupby(\"title\")[\"stars\"].min().reset_index()\n\n# Sort the dataframe by title in ascending order\nsorted_df = grouped_df.sort_values(\"title\", ascending=True)\n\n# Plot the bar chart\nplt.bar(sorted_df[\"title\"], sorted_df[\"stars\"])\nplt.xlabel(\"Movie Title\")\nplt.ylabel(\"Minimum Stars\")\nplt.title(\"Minimum Stars for Each Movie\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Show the stars of each director by a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating and Movie tables\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\n\n# Convert column names to lowercase\nrating_df.columns = rating_df.columns.str.lower()\nmovie_df.columns = movie_df.columns.str.lower()\n\n# Merge the Rating and Movie tables on the mID column\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Group by director and stars, and count the number of occurrences\ngrouped_df = merged_df.groupby([\"director\", \"stars\"]).size().reset_index(name=\"count\")\n\n# Create a pie chart\nplt.pie(grouped_df[\"count\"], labels=grouped_df[\"director\"], autopct=\"%1.1f%%\")\nplt.axis(\"equal\")\nplt.title(\"Distribution of Directors\")\nplt.show()"
  },
  {
    "db_id": "voter_2",
    "question": "A scatter chart about how many students does each advisor have ?",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nSTUDENT.columns = STUDENT.columns.str.lower()\n\n# Assuming the table data is stored in a DataFrame called STUDENT\n\n# Grouping the data by advisor and counting the number of students for each advisor\nadvisor_counts = STUDENT.groupby('advisor').size().reset_index(name='count')\n\n# Creating a scatter plot\nplt.scatter(advisor_counts['advisor'], advisor_counts['count'])\n\n# Adding labels and title\nplt.xlabel('Advisor')\nplt.ylabel('Count')\nplt.title('Number of Students per Advisor')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "voter_2",
    "question": "What is the count of students for each distinct advisor who have treasurer votes in the spring election cycle, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nVOTING_RECORD = pd.read_sql(\"SELECT * FROM VOTING_RECORD\", conn)\nSTUDENT.columns = STUDENT.columns.str.lower()\nVOTING_RECORD.columns = VOTING_RECORD.columns.str.lower()\n\n# Merge the STUDENT and VOTING_RECORD dataframes\nmerged_df = pd.merge(STUDENT, VOTING_RECORD, left_on='stuid', right_on='treasurer_vote')\n\n# Filter the merged dataframe for the specified election cycle\nfiltered_df = merged_df[merged_df['election_cycle'] == 'Spring']\n\n# Group by advisor and count the number of records\ngrouped_df = filtered_df.groupby('advisor').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['advisor'], grouped_df['count'])\nplt.xlabel('Advisor')\nplt.ylabel('Count')\nplt.title('Number of Students by Advisor')\nplt.show()"
  },
  {
    "db_id": "scientist_1",
    "question": "What are the names of projects that require more than 300 hours, and how many scientists are assigned to each, and show bar in ascending order.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the projects table\nprojects = pd.read_sql(\"SELECT * FROM projects\", conn)\nprojects.columns = map(str.lower, projects.columns)\n\n# Read the assignedto table\nassignedto = pd.read_sql(\"SELECT * FROM assignedto\", conn)\nassignedto.columns = map(str.lower, assignedto.columns)\n\n# Merge the projects and assignedto tables\nmerged = pd.merge(projects, assignedto, left_on=\"code\", right_on=\"project\")\n\n# Filter the merged table based on hours > 300\nfiltered = merged[merged[\"hours\"] > 300]\n\n# Group by project name and count the number of occurrences\ngrouped = filtered.groupby(\"name\").size().reset_index(name=\"count\")\n\n# Sort the grouped table by name in ascending order\nsorted_table = grouped.sort_values(\"name\", ascending=True)\n\n# Generate the bar chart\nplt.bar(sorted_table[\"name\"], sorted_table[\"count\"])\nplt.xlabel(\"Project Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Projects with Hours > 300\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Visualize names and market shares of furnitures which no any company is producing in our records by a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the furniture table\nfurniture = pd.read_sql(\"SELECT * FROM furniture\", conn)\n\n# Read the furniture_manufacte table\nfurniture_manufacte = pd.read_sql(\"SELECT * FROM furniture_manufacte\", conn)\n\n# Perform the SQL query\nquery = \"\"\"\nSELECT Name, Market_Rate\nFROM furniture\nWHERE Furniture_ID NOT IN (\n    SELECT Furniture_ID\n    FROM furniture_manufacte\n)\n\"\"\"\nresult = pd.read_sql(query, conn)\n\n# Convert column names to lowercase\nresult.columns = result.columns.str.lower()\n\n# Plot the pie chart\nplt.pie(result['market_rate'], labels=result['name'], autopct='%1.1f%%')\nplt.title('Market Rate of Furniture without Manufacture')\nplt.show()\n\n# Close the database connection\nconn.close()"
  },
  {
    "db_id": "scientist_1",
    "question": "Show me a bar chart displaying the project name and the number of scientists involved for each project, sorted in ascending order by the number of scientists.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nprojects = pd.read_sql(\"SELECT * FROM projects\", conn)\nassignedto = pd.read_sql(\"SELECT * FROM assignedto\", conn)\nprojects.columns = projects.columns.str.lower()\nassignedto.columns = assignedto.columns.str.lower()\n\n# Merge the projects and assignedto dataframes\nmerged_df = pd.merge(projects, assignedto, left_on='code', right_on='project')\n\n# Group by project name and count the number of scientists\nscientists_count = merged_df.groupby('name').size().reset_index(name='scientists')\n\n# Sort the dataframe by scientists count in ascending order\nscientists_count = scientists_count.sort_values('scientists')\n\n# Plot the bar chart\nplt.bar(scientists_count['name'], scientists_count['scientists'])\nplt.xlabel('Project Name')\nplt.ylabel('Number of Scientists')\nplt.title('Number of Scientists per Project')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Who is the reviewer with the most ratings, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nReviewer = pd.read_sql(\"SELECT * FROM Reviewer\", conn)\nRating.columns = Rating.columns.str.lower()\nReviewer.columns = Reviewer.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Rating, Reviewer, on='rid')\n\n# Group by reviewer name and count the number of ratings\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['name'], sorted_df['count'])\nplt.xlabel('Reviewer Name')\nplt.ylabel('Number of Ratings')\nplt.title('Number of Ratings by Reviewer')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Give me a pie to show the total number from different flag .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Grouping the data by 'flag' and counting the occurrences\nship_grouped = ship.groupby('flag').size().reset_index(name='count')\n\n# Creating a pie chart\nplt.pie(ship_grouped['count'], labels=ship_grouped['flag'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Displaying the chart\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "Return the categories of music festivals that have the result \"Awarded\", and count them by a bar chart, and order by the y axis from high to low.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the music_festival table\nmusic_festival = pd.read_sql(\"SELECT * FROM music_festival\", conn)\n\n# Convert column names to lowercase\nmusic_festival.columns = music_festival.columns.str.lower()\n\n# Filter the data for \"Awarded\" results\nawarded_data = music_festival[music_festival[\"result\"] == \"Awarded\"]\n\n# Group by category and count the occurrences\ncategory_counts = awarded_data.groupby(\"category\").size().reset_index(name=\"count\")\n\n# Sort the counts in descending order\ncategory_counts = category_counts.sort_values(\"count\", ascending=False)\n\n# Create a bar plot\nplt.bar(category_counts[\"category\"], category_counts[\"count\"])\nplt.xlabel(\"Category\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Awards by Category\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Give me a bar for what are the types of competition and number of competitions for that type ? , and order in asc by the the total number please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the number of occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort the counts in ascending order\ncompetition_counts = competition_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Type')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "company_employee",
    "question": "Bar chart x axis industry y axis the number of industry, display by the the number of industry from low to high please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"company\" table\ncompany_data = pd.read_sql(\"SELECT * FROM company\", conn)\n\n# Convert column names to lowercase\ncompany_data.columns = company_data.columns.str.lower()\n\n# Perform the SQL query\nindustry_counts = company_data.groupby('industry').size().reset_index(name='count')\nindustry_counts = industry_counts.sort_values('count')\n\n# Create the bar plot\nplt.bar(industry_counts['industry'], industry_counts['count'])\nplt.xlabel('Industry')\nplt.ylabel('Count')\nplt.title('Number of Companies by Industry')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Bar graph to show the number of rank from different rank , and display by the Rank in descending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\ncaptain.columns = captain.columns.str.lower()\n\n# Group by rank and count the occurrences\nrank_counts = captain.groupby('rank').size().reset_index(name='count')\n\n# Sort the dataframe by rank in descending order\nrank_counts = rank_counts.sort_values('rank', ascending=False)\n\n# Create a bar plot\nplt.bar(rank_counts['rank'], rank_counts['count'])\n\n# Set the x-axis label\nplt.xlabel('Rank')\n\n# Set the y-axis label\nplt.ylabel('Count')\n\n# Set the title of the plot\nplt.title('Count of Captains by Rank')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "local_govt_mdm",
    "question": "What is the breakdown of the CMI masters with the cross reference code 'Tax' and their frequency in the database, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nCustomer_Master_Index = pd.read_sql(\"SELECT * FROM Customer_Master_Index\", conn)\nCMI_Cross_References = pd.read_sql(\"SELECT * FROM CMI_Cross_References\", conn)\nCustomer_Master_Index.columns = Customer_Master_Index.columns.str.lower()\nCMI_Cross_References.columns = CMI_Cross_References.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Customer_Master_Index, CMI_Cross_References, on='master_customer_id')\n\n# Filter the data based on the condition\nfiltered_df = merged_df[merged_df['source_system_code'] == 'Tax']\n\n# Group by cmi_details and count the occurrences\ngrouped_df = filtered_df.groupby('cmi_details').size().reset_index(name='count')\n\n# Sort the data by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['cmi_details'], sorted_df['count'])\nplt.xlabel('cmi_details')\nplt.ylabel('Count')\nplt.title('Count of cmi_details for source_system_code = Tax')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Show different locations and the number of performances at each location Visualize by bar chart , and sort x axis in desc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\nperformance.columns = performance.columns.str.lower()\n\n# Group by location and count the number of occurrences\nlocation_counts = performance.groupby('location').size().reset_index(name='count')\n\n# Sort the data by location in descending order\nlocation_counts = location_counts.sort_values('location', ascending=False)\n\n# Create a bar plot\nplt.bar(location_counts['location'], location_counts['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Performances by Location')\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "Return the number of the lot details of lots that belong to investors with details \"l\"?, and show in desc by the x axis.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the INVESTORS table\ninvestors = pd.read_sql(\"SELECT * FROM INVESTORS\", conn)\ninvestors.columns = map(str.lower, investors.columns)\n\n# Read the data from the LOTS table\nlots = pd.read_sql(\"SELECT * FROM LOTS\", conn)\nlots.columns = map(str.lower, lots.columns)\n\n# Merge the INVESTORS and LOTS tables on investor_id\nmerged_data = pd.merge(investors, lots, on=\"investor_id\")\n\n# Filter the merged data based on Investor_details = \"l\"\nfiltered_data = merged_data[merged_data[\"investor_details\"] == \"l\"]\n\n# Group the filtered data by lot_details and count the occurrences\ngrouped_data = filtered_data.groupby(\"lot_details\").size().reset_index(name=\"count\")\n\n# Sort the grouped data by lot_details in descending order\nsorted_data = grouped_data.sort_values(\"lot_details\", ascending=False)\n\n# Generate the bar plot\nplt.bar(sorted_data[\"lot_details\"], sorted_data[\"count\"])\nplt.xlabel(\"Lot Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Bar Plot of Lot Details\")\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "Find the organisation ids and details of the organisations which are involved i. Visualize by bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Grants table\ngrants = pd.read_sql(\"SELECT * FROM Grants\", conn)\n\n# Read the Organisations table\norganisations = pd.read_sql(\"SELECT * FROM Organisations\", conn)\n\n# Convert column names to lowercase\ngrants.columns = grants.columns.str.lower()\norganisations.columns = organisations.columns.str.lower()\n\n# merge the grants and organisations tables on organisation_id\nmerged_data = pd.merge(grants, organisations, on='organisation_id')\n\n# group by organisation_details and count the number of grants\ngrouped_data = merged_data.groupby('organisation_details').size()\n\n# plot the bar chart\nplt.bar(grouped_data.index, grouped_data.values)\nplt.xlabel('Organisation Details')\nplt.ylabel('Number of Grants')\nplt.title('Number of Grants by Organisation Details')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "performance_attendance",
    "question": "Show different locations and the number of performances at each location by a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\nperformance.columns = performance.columns.str.lower()\n\n# Group by location and count the number of records\nlocation_counts = performance.groupby('location').size()\n\n# Create a bar plot\nplt.bar(location_counts.index, location_counts.values)\n\n# Set the labels and title\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Records by Location')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "Find the organisation ids and details of the organisations which are involved i Visualize by bar chart, list by the x axis in descending.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Grants table\ngrants = pd.read_sql(\"SELECT * FROM Grants\", conn)\ngrants.columns = map(str.lower, grants.columns)\n\n# Read the Organisations table\norganisations = pd.read_sql(\"SELECT * FROM Organisations\", conn)\norganisations.columns = map(str.lower, organisations.columns)\n\n# Merge the Grants and Organisations tables\nmerged_data = pd.merge(grants, organisations, on=\"organisation_id\")\n\n# Group by organisation_details and count the number of grants\ngrouped_data = merged_data.groupby(\"organisation_details\").size().reset_index(name=\"count\")\n\n# Sort the data by organisation_details in descending order\nsorted_data = grouped_data.sort_values(\"organisation_details\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"organisation_details\"], sorted_data[\"count\"])\nplt.xlabel(\"Organisation Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Grants by Organisation Details\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Calculate the number of actors in each duration of actors using a bar chart , rank from low to high by the names please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nactor = pd.read_sql(\"SELECT * FROM actor\", conn)\nactor.columns = actor.columns.str.lower()\n\n# Group by duration and count the occurrences\nduration_counts = actor.groupby('duration').size().reset_index(name='count')\n\n# Sort by duration in ascending order\nduration_counts = duration_counts.sort_values('duration')\n\n# Plot the bar chart\nplt.bar(duration_counts['duration'], duration_counts['count'])\nplt.xlabel('Duration')\nplt.ylabel('Count')\nplt.title('Distribution of Durations')\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 . Visualize by bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry.columns = country.columns.str.lower()\n\n# Group by governmentform and calculate the sum of population\ngrouped_data = country.groupby('governmentform')['population'].sum()\n\n# Convert the grouped data into a dataframe\ndf = pd.DataFrame(grouped_data).reset_index()\n\n# Plot the bar chart\nplt.bar(df['governmentform'], df['population'])\nplt.xlabel('Government Form')\nplt.ylabel('Population')\nplt.title('Population by Government Form')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Plot how many class by grouped by class as a bar graph",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\ncaptain.columns = captain.columns.str.lower()\n\n# Group by 'class' and count the occurrences\nclass_counts = captain.groupby('class').size()\n\n# Create a bar plot\nplt.bar(class_counts.index, class_counts.values)\n\n# Set the labels and title\nplt.xlabel('Class')\nplt.ylabel('Count')\nplt.title('Count of Class')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes' by a pie chart.",
    "chart": "Pie",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the department and management tables\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\nmanagement = pd.read_sql(\"SELECT * FROM management\", conn)\n\n# Convert column names to lowercase\ndepartment.columns = department.columns.str.lower()\nmanagement.columns = management.columns.str.lower()\n\n# Merge the department and management tables\nmerged_data = pd.merge(department, management, on=\"department_id\")\n\n# Filter the merged data for temporary acting departments\ntemporary_acting_data = merged_data[merged_data[\"temporary_acting\"] == \"Yes\"]\n\n# Group by department name and calculate the sum of num_employees\ngrouped_data = temporary_acting_data.groupby(\"name\")[\"num_employees\"].sum()\n\n# Plot the pie chart\nplt.pie(grouped_data, labels=grouped_data.index, autopct=\"%1.1f%%\")\nplt.title(\"Temporary Acting Departments\")\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "What is the distribution of entrepreneurs' heights across different companies? Show it using a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Merge the entrepreneur and people dataframes on the people_id column\nmerged_df = pd.merge(entrepreneur, people, on='people_id')\n\n# Select the company and height columns\ndf = merged_df[['company', 'height']]\n\n# Plot a bar chart of the height for each company\nplt.bar(df['company'], df['height'])\nplt.xlabel('Company')\nplt.ylabel('Height')\nplt.title('Height of Entrepreneurs by Company')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "county_public_safety",
    "question": "How many counties correspond to each police force , and order bars in asc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncounty_public_safety = pd.read_sql(\"SELECT * FROM county_public_safety\", conn)\ncounty_public_safety.columns = county_public_safety.columns.str.lower()\n\n# Group by police_force and count the occurrences\ndf = county_public_safety.groupby('police_force').size().reset_index(name='count')\n\n# Sort by police_force in ascending order\ndf = df.sort_values('police_force')\n\n# Create a bar plot\nplt.bar(df['police_force'], df['count'])\nplt.xlabel('Police Force')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Police Force')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Visualize the name and their component amounts with a bar chart for all furnitures that have more than 10 components , order by the X in desc please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nfurniture = pd.read_sql(\"SELECT * FROM furniture\", conn)\nfurniture.columns = furniture.columns.str.lower()\n\n# Filter the dataframe\nfiltered_df = furniture[furniture['num_of_component'] > 10]\n\n# Sort the dataframe by name in descending order\nsorted_df = filtered_df.sort_values('name', ascending=False)\n\n# Create the bar plot\nplt.bar(sorted_df['name'], sorted_df['num_of_component'])\n\n# Add labels and title\nplt.xlabel('Name')\nplt.ylabel('Number of Components')\nplt.title('Furniture with More than 10 Components')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "How many musicals has each nominee been nominated for . Plot them as bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Group by nominee and count the number of occurrences\nnominee_counts = musical.groupby('nominee').size().reset_index(name='count')\n\n# Create a bar plot\nplt.bar(nominee_counts['nominee'], nominee_counts['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "How many templates with version number later than 5 for each template type code? Show me a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Templates table into a DataFrame\ntemplates_df = pd.read_sql(\"SELECT * FROM Templates\", conn)\n\n# Convert column names to lowercase\ntemplates_df.columns = templates_df.columns.str.lower()\n\n# Filter the DataFrame for version_number > 5\nfiltered_df = templates_df[templates_df['version_number'] > 5]\n\n# Group by Template_Type_Code and count occurrences\ngrouped_df = filtered_df.groupby('template_type_code').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['template_type_code'], grouped_df['count'])\nplt.xlabel('Template Type Code')\nplt.ylabel('Count')\nplt.title('Number of Templates by Template Type Code')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return a bar chart showing the number of templates with a version number greater than 5 for each template type code, and order y-axis in ascending order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Templates table into a DataFrame\ntemplates_df = pd.read_sql(\"SELECT * FROM Templates\", conn)\n\n# Convert column names to lowercase\ntemplates_df.columns = templates_df.columns.str.lower()\n\n# Filter the DataFrame for version_number > 5\nfiltered_df = templates_df[templates_df['version_number'] > 5]\n\n# Group by Template_Type_Code and count occurrences\ngrouped_df = filtered_df.groupby('template_type_code').size().reset_index(name='count')\n\n# Sort by count in ascending order\nsorted_df = grouped_df.sort_values('count', ascending=True)\n\n# Generate the bar plot\nplt.bar(sorted_df['template_type_code'], sorted_df['count'])\nplt.xlabel('Template Type Code')\nplt.ylabel('Count')\nplt.title('Count of Template Type Codes (Version > 5)')\nplt.show()"
  },
  {
    "db_id": "county_public_safety",
    "question": "Display a bar chart for how many counties correspond to each police force?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the county_public_safety table\ncounty_public_safety = pd.read_sql(\"SELECT * FROM county_public_safety\", conn)\n\n# Convert column names to lowercase\ncounty_public_safety.columns = county_public_safety.columns.str.lower()\n\n# Perform the SQL query\nresult = county_public_safety.groupby('police_force').size()\n\n# Create a bar plot\nplt.bar(result.index, result.values)\nplt.xlabel('Police Force')\nplt.ylabel('Count')\nplt.title('Number of Incidents by Police Force')\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "How many representatives in each party received more than 10,000 votes, visualized in a scatter chart?",
    "chart": "Scatter",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nelection = pd.read_sql(\"SELECT * FROM election\", conn)\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\nelection.columns = election.columns.str.lower()\nrepresentative.columns = representative.columns.str.lower()\n\n# Merge the election and representative dataframes\nmerged_df = pd.merge(election, representative, on='representative_id')\n\n# Filter the merged dataframe for votes greater than 10000\nfiltered_df = merged_df[merged_df['votes'] > 10000]\n\n# Group the filtered dataframe by party and count the number of occurrences\ngrouped_df = filtered_df.groupby('party').size().reset_index(name='count')\n\n# Sort the grouped dataframe by party in ascending order\nsorted_df = grouped_df.sort_values('party')\n\n# Create a scatter plot of party vs count\nplt.scatter(sorted_df['party'], sorted_df['count'])\nplt.xlabel('Party')\nplt.ylabel('Count')\nplt.title('Number of Representatives by Party')\nplt.show()"
  },
  {
    "db_id": "insurance_fnol",
    "question": "List all the customers in increasing order of IDs . Show me a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\ncustomers.columns = customers.columns.str.lower()\n\n# Assuming customers is a DataFrame containing the table data\n\n# Sort the DataFrame by customer_id in ascending order\nsorted_customers = customers.sort_values('customer_id')\n\n# Extract the customer_name and customer_id columns\ncustomer_names = sorted_customers['customer_name']\ncustomer_ids = sorted_customers['customer_id']\n\n# Create a bar plot\nplt.bar(customer_names, customer_ids)\n\n# Set the x-axis label\nplt.xlabel('Customer Name')\n\n# Set the y-axis label\nplt.ylabel('Customer ID')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "How many competitions for each country ? , and list by the total number in asc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by country and count the occurrences\ncountry_counts = competition.groupby('country').size().reset_index(name='count')\n\n# Sort the counts in ascending order\ncountry_counts = country_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(country_counts['country'], country_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "Draw a bar chart of investor versus the total number , and could you list bars from high to low order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\n\n# Grouping the data by 'investor' and counting the occurrences\ngrouped_data = entrepreneur.groupby('investor').size().reset_index(name='count')\n\n# Sorting the data by 'investor' in descending order\nsorted_data = grouped_data.sort_values('investor', ascending=False)\n\n# Creating the bar plot\nplt.bar(sorted_data['investor'], sorted_data['count'])\nplt.xlabel('Investor')\nplt.ylabel('Count')\nplt.title('Number of Entrepreneurs by Investor')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "coffee_shop",
    "question": "Bar graph to show the total number from different address , and could you sort in ascending by the y axis ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmember = pd.read_sql(\"SELECT * FROM member\", conn)\nmember.columns = member.columns.str.lower()\n\n# Group by address and count the number of occurrences\naddress_counts = member.groupby('address').size().reset_index(name='count')\n\n# Sort the counts in ascending order\naddress_counts = address_counts.sort_values('count')\n\n# Plot the bar chart\nplt.bar(address_counts['address'], address_counts['count'])\nplt.xlabel('Address')\nplt.ylabel('Count')\nplt.title('Number of Members by Address')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "Show me a bar chart displaying the location and name of the host for each party, sorted in ascending order of the host's age.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nparty_host = pd.read_sql(\"SELECT * FROM party_host\", conn)\nHOST = pd.read_sql(\"SELECT * FROM HOST\", conn)\nparty = pd.read_sql(\"SELECT * FROM party\", conn)\nparty_host.columns = party_host.columns.str.lower()\nHOST.columns = HOST.columns.str.lower()\nparty.columns = party.columns.str.lower()\n\n# Joining the tables\nresult = pd.merge(party_host, HOST, on='host_id')\nresult = pd.merge(result, party, on='party_id')\n\n# Sorting the result by age in ascending order\nresult = result.sort_values(by='age')\n\n# Creating the bar plot\nplt.bar(result['location'], result['name'])\nplt.xlabel('Location')\nplt.ylabel('Host Name')\nplt.title('Host Name by Location')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "riding_club",
    "question": "Compare the distribution of the players' gender using a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the player table\nplayer_df = pd.read_sql(\"SELECT * FROM player\", conn)\n\n# Convert column names to lowercase\nplayer_df.columns = player_df.columns.str.lower()\n\n# Perform the SQL query\ngender_count = player_df.groupby('gender').size().reset_index(name='count')\n\n# Generate the bar plot\nplt.bar(gender_count['gender'], gender_count['count'])\nplt.xlabel('Gender')\nplt.ylabel('Count')\nplt.title('Gender Distribution')\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "How many competitions are held in each city? Draw a bar chart, list by the x axis in asc.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the city and farm_competition tables\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\nfarm_competition = pd.read_sql(\"SELECT * FROM farm_competition\", conn)\n\n# Convert column names to lowercase\ncity.columns = city.columns.str.lower()\nfarm_competition.columns = farm_competition.columns.str.lower()\n\n# Merge the city and farm_competition tables on City_ID and Host_city_ID columns\nmerged_data = pd.merge(city, farm_competition, left_on=\"city_id\", right_on=\"host_city_id\")\n\n# Perform the SQL query and group by Official_Name, count the occurrences\nresult = merged_data.groupby(\"official_name\").size().reset_index(name=\"count\")\n\n# Sort the result by Official_Name in ascending order\nresult = result.sort_values(\"official_name\", ascending=True)\n\n# Plot the bar chart\nplt.bar(result[\"official_name\"], result[\"count\"])\nplt.xlabel(\"Official Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Farm Competitions by Official Name\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Show different nominees and the number of musicals they have been nominated Plot them as bar chart , and could you order the total number in desc order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Group by nominee and count the occurrences\ngrouped = musical.groupby('nominee').size().reset_index(name='count')\n\n# Sort by count in descending order\nsorted_grouped = grouped.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_grouped['nominee'], sorted_grouped['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show the relationship between version number and template id in a scatter chart.",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Templates table\ntemplates_df = pd.read_sql(\"SELECT * FROM Templates\", conn)\n\n# Convert column names to lowercase\ntemplates_df.columns = templates_df.columns.str.lower()\n\n# Scatter plot\nplt.scatter(templates_df['template_id'], templates_df['version_number'])\nplt.xlabel('Template ID')\nplt.ylabel('Version Number')\nplt.title('Scatter Plot of Template ID vs Version Number')\nplt.show()"
  },
  {
    "db_id": "scientist_1",
    "question": "Show me a bar chart displaying the number of scientists involved in each project.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nprojects = pd.read_sql(\"SELECT * FROM projects\", conn)\nassignedto = pd.read_sql(\"SELECT * FROM assignedto\", conn)\nprojects.columns = projects.columns.str.lower()\nassignedto.columns = assignedto.columns.str.lower()\n\n# Merge projects and assignedto dataframes\nmerged_df = pd.merge(projects, assignedto, left_on='code', right_on='project')\n\n# Group by project name and count the number of scientists\nscientists_count = merged_df.groupby('name').size().reset_index(name='scientists')\n\n# Plot the bar chart\nplt.bar(scientists_count['name'], scientists_count['scientists'])\nplt.xlabel('Project Name')\nplt.ylabel('Number of Scientists')\nplt.title('Number of Scientists per Project')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Show the title and the lowest rating among all movies in a bar chart, order in desc by the Y-axis please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\n\n# Convert column names to lowercase\nrating_df.columns = rating_df.columns.str.lower()\nmovie_df.columns = movie_df.columns.str.lower()\n\n# merge the rating and movie tables on mid\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# group by title and calculate the minimum stars for each movie\ngrouped_df = merged_df.groupby(\"title\")[\"stars\"].min().reset_index()\n\n# sort the dataframe by minimum stars in descending order\nsorted_df = grouped_df.sort_values(\"stars\", ascending=False)\n\n# plot the bar chart\nplt.bar(sorted_df[\"title\"], sorted_df[\"stars\"])\nplt.xlabel(\"Movie Title\")\nplt.ylabel(\"Minimum Stars\")\nplt.title(\"Minimum Stars for Each Movie\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "company_employee",
    "question": "Can you create a scatter chart displaying the names of companies and employees from the employment, people, and company tables?",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nemployment = pd.read_sql(\"SELECT * FROM employment\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\ncompany = pd.read_sql(\"SELECT * FROM company\", conn)\nemployment.columns = employment.columns.str.lower()\npeople.columns = people.columns.str.lower()\ncompany.columns = company.columns.str.lower()\n\n# Perform the join operation\nmerged_data = pd.merge(pd.merge(employment, people, on='people_id'), company, on='company_id')\n\n# Create a scatter plot\nplt.scatter(merged_data['name_x'], merged_data['name_y'])\nplt.xlabel('Company')\nplt.ylabel('People')\nplt.title('Company and People Relationship')\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Show different nominees and the number of musicals they have been nominated in a bar chart , show Nominee from low to high order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Group by nominee and count the occurrences\ngrouped = musical.groupby('nominee').size().reset_index(name='count')\n\n# Sort by nominee in ascending order\ngrouped = grouped.sort_values('nominee')\n\n# Create bar plot\nplt.bar(grouped['nominee'], grouped['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "Display a bar chart for the names and the ages of editors , and I want to rank bars from high to low order .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\neditor.columns = editor.columns.str.lower()\n\n# Assuming the data is already loaded into a dataframe called 'editor'\n\n# Sort the dataframe by name in descending order\nsorted_df = editor.sort_values(by='name', ascending=False)\n\n# Extract the name and age columns\nname = sorted_df['name']\nage = sorted_df['age']\n\n# Create a bar plot\nplt.bar(name, age)\n\n# Add labels and title\nplt.xlabel('Name')\nplt.ylabel('Age')\nplt.title('Age by Name')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "What are the types of competition and number of competitions for that type Show bar chart , and display names in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the number of occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort the dataframe by competition_type in ascending order\ncompetition_counts = competition_counts.sort_values('competition_type')\n\n# Create a bar plot\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Type')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Show me a bar chart for how many movie reviews does each director get?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Movie and Rating tables\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\n\n# Convert column names to lowercase\nmovie_df.columns = movie_df.columns.str.lower()\nrating_df.columns = rating_df.columns.str.lower()\n\n# merge the movie and rating tables on mid\nmerged_df = pd.merge(movie_df, rating_df, on='mid')\n\n# group by director and count the number of movies\ndirector_count = merged_df.groupby('director').size().reset_index(name='count')\n\n# plot the bar chart\nplt.bar(director_count['director'], director_count['count'])\nplt.xlabel('Director')\nplt.ylabel('Number of Movies')\nplt.title('Number of Movies by Director')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "movie_1",
    "question": "What is the count of movies for each year that have received a rating of 4 or higher, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nMovie = pd.read_sql(\"SELECT * FROM Movie\", conn)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nMovie.columns = Movie.columns.str.lower()\nRating.columns = Rating.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(Movie, Rating, on='mid')\n\n# Filtering the data\nfiltered_df = merged_df[merged_df['stars'] >= 4]\n\n# Grouping by year and counting the number of movies\ngrouped_df = filtered_df.groupby('year').size().reset_index(name='count')\n\n# Creating the bar plot\nplt.bar(grouped_df['year'], grouped_df['count'])\nplt.xlabel('Year')\nplt.ylabel('Count')\nplt.title('Number of Movies with Rating >= 4 by Year')\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "A bar chart about what are the statuses and average populations of each city ? , and sort names in descending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncity.columns = city.columns.str.lower()\n\n# Group by status and calculate average population\ngrouped_data = city.groupby('status')['population'].mean()\n\n# Sort the data by status in descending order\nsorted_data = grouped_data.sort_index(ascending=False)\n\n# Create a bar plot\nplt.bar(sorted_data.index, sorted_data.values)\n\n# Set the labels and title\nplt.xlabel('Status')\nplt.ylabel('Average Population')\nplt.title('Average Population by Status')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "For each director, return the director's name together with  the highest rating among all of their movies and ignore movies whose director is NULL. Could you plot the result with a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\n\n# Merge the Rating and Movie tables on mID\nmerged_df = pd.merge(rating_df, movie_df, on=\"mID\")\n\n# Filter out rows where director is not null\nfiltered_df = merged_df[merged_df[\"director\"] != \"null\"]\n\n# Group by director and find the maximum stars for each director\ngrouped_df = filtered_df.groupby(\"director\")[\"stars\"].max().reset_index()\n\n# Rename the column to \"max_stars\"\ngrouped_df.rename(columns={\"stars\": \"max_stars\"}, inplace=True)\n\n# Plot the pie chart\nplt.pie(grouped_df[\"max_stars\"], labels=grouped_df[\"director\"], autopct=\"%1.1f%%\")\nplt.title(\"Maximum Stars by Director\")\nplt.show()\n"
  },
  {
    "db_id": "musical",
    "question": "How many musicals has each nominee been nominated for Plot them as bar chart , show in asc by the total number .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Group by nominee and count the occurrences\ngrouped = musical.groupby('nominee').size().reset_index(name='count')\n\n# Sort by count in ascending order\nsorted_grouped = grouped.sort_values('count')\n\n# Create bar plot\nplt.bar(sorted_grouped['nominee'], sorted_grouped['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "How many competitions are held in each city? Draw a bar chart, and could you display bar in descending order?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the city and farm_competition tables\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\nfarm_competition = pd.read_sql(\"SELECT * FROM farm_competition\", conn)\n\n# Convert column names to lowercase\ncity.columns = city.columns.str.lower()\nfarm_competition.columns = farm_competition.columns.str.lower()\n\n# Merge the city and farm_competition tables on City_ID and Host_city_ID columns\nmerged_data = pd.merge(city, farm_competition, left_on=\"city_id\", right_on=\"host_city_id\")\n\n# Perform the SQL query and group by Official_Name, count the occurrences\nresult = merged_data.groupby(\"official_name\").size().reset_index(name=\"count\")\n\n# Sort the result by Official_Name in descending order\nresult = result.sort_values(\"official_name\", ascending=False)\n\n# Plot the bar chart\nplt.bar(result[\"official_name\"], result[\"count\"])\nplt.xlabel(\"Official Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Farm Competitions by Official Name\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "what is the number of players who have points less than 30 for each position ?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nplayer.columns = player.columns.str.lower()\n\n# Filter the dataframe based on the condition\nfiltered_player = player[player['points'] < 30]\n\n# Group the filtered dataframe by position and count the number of occurrences\nposition_counts = filtered_player.groupby('position').size()\n\n# Create a pie chart\nplt.pie(position_counts, labels=position_counts.index, autopct='%1.1f%%')\nplt.title('Distribution of Players by Position (Points < 30)')\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Compare the total number of different ranks using a bar graph, could you order X in desc order?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the captain table\ncaptain_df = pd.read_sql(\"SELECT * FROM captain\", conn)\n\n# Convert column names to lowercase\ncaptain_df.columns = captain_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = captain_df.groupby('rank').size().reset_index(name='count').sort_values('rank', ascending=False)\n\n# Generate the bar plot\nplt.bar(result_df['rank'], result_df['count'])\nplt.xlabel('Rank')\nplt.ylabel('Count')\nplt.title('Count of Ranks')\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Compare the total number of captains with different classes using a bar graph , and display total number from low to high order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\ncaptain.columns = captain.columns.str.lower()\n\n# Group by 'class' and count the occurrences\nclass_counts = captain.groupby('class').size().reset_index(name='count')\n\n# Sort the counts in ascending order\nclass_counts = class_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(class_counts['class'], class_counts['count'])\nplt.xlabel('Class')\nplt.ylabel('Count')\nplt.title('Count of each class')\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "What are the different parties of representative ? Show the party name and the number of representatives in each party , list by the x axis in ascending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\nrepresentative.columns = representative.columns.str.lower()\n\n# Group by party and count the number of representatives in each party\nparty_counts = representative.groupby('party').size().reset_index(name='count')\n\n# Sort the parties in ascending order\nparty_counts = party_counts.sort_values('party')\n\n# Create a bar plot\nplt.bar(party_counts['party'], party_counts['count'])\nplt.xlabel('Party')\nplt.ylabel('Count')\nplt.title('Number of Representatives by Party')\nplt.show()"
  },
  {
    "db_id": "company_employee",
    "question": "Show the number of headquarters from each headquarters , and I want to rank by the X in asc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompany = pd.read_sql(\"SELECT * FROM company\", conn)\ncompany.columns = company.columns.str.lower()\n\n# Group by headquarters and count the number of companies\nheadquarters_count = company.groupby('headquarters').size().reset_index(name='count')\n\n# Sort the data by headquarters in ascending order\nheadquarters_count = headquarters_count.sort_values('headquarters')\n\n# Create a bar plot\nplt.bar(headquarters_count['headquarters'], headquarters_count['count'])\nplt.xlabel('Headquarters')\nplt.ylabel('Count')\nplt.title('Number of Companies by Headquarters')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Compare the total number of locations in each location using a bar graph , and display x axis from high to low order please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\nperformance.columns = performance.columns.str.lower()\n\n# Group by location and count the occurrences\nlocation_counts = performance.groupby('location').size().reset_index(name='count')\n\n# Sort by location in descending order\nlocation_counts = location_counts.sort_values('location', ascending=False)\n\n# Plot the bar chart\nplt.bar(location_counts['location'], location_counts['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Location Counts')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Show me a bar chart of the count of ratings given by each reviewer who had given higher than 3 star ratings, in descending order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nReviewer = pd.read_sql(\"SELECT * FROM Reviewer\", conn)\nRating.columns = Rating.columns.str.lower()\nReviewer.columns = Reviewer.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Rating, Reviewer, on='rid')\n\n# Filter the data based on the condition\nfiltered_df = merged_df[merged_df['stars'] > 3]\n\n# Group by reviewer name and count the number of ratings\ngrouped_df = filtered_df.groupby('name').size().reset_index(name='count')\n\n# Sort the data by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['name'], sorted_df['count'])\nplt.xlabel('Reviewer Name')\nplt.ylabel('Number of Ratings')\nplt.title('Number of Ratings by Reviewer')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Group and count the durations for each actor with a bar graph , sort from low to high by the bar please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nactor = pd.read_sql(\"SELECT * FROM actor\", conn)\nactor.columns = actor.columns.str.lower()\n\n# Group by duration and count the occurrences\nduration_counts = actor.groupby('duration').size().reset_index(name='count')\n\n# Sort by duration in ascending order\nduration_counts = duration_counts.sort_values('duration')\n\n# Plot the bar chart\nplt.bar(duration_counts['duration'], duration_counts['count'])\nplt.xlabel('Duration')\nplt.ylabel('Count')\nplt.title('Distribution of Durations')\nplt.show()"
  },
  {
    "db_id": "insurance_fnol",
    "question": "Draw a bar chart for what is the ordered list of customer ids ?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\ncustomers.columns = customers.columns.str.lower()\n\n# Assuming customers is a DataFrame containing the table data\n\n# Sort the DataFrame by customer_id in ascending order\nsorted_customers = customers.sort_values('customer_id')\n\n# Extract the customer_name and customer_id columns\ncustomer_names = sorted_customers['customer_name']\ncustomer_ids = sorted_customers['customer_id']\n\n# Create a bar plot\nplt.bar(customer_names, customer_ids)\n\n# Set the x-axis label\nplt.xlabel('Customer Name')\n\n# Set the y-axis label\nplt.ylabel('Customer ID')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "county_public_safety",
    "question": "Display a bar chart for how many counties correspond to each police force?, and I want to rank by the the total number in ascending please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the county_public_safety table\ncounty_public_safety = pd.read_sql(\"SELECT * FROM county_public_safety\", conn)\n\n# Convert column names to lowercase\ncounty_public_safety.columns = county_public_safety.columns.str.lower()\n\n# Perform the SQL query\nresult = county_public_safety.groupby('police_force').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result['police_force'], result['count'])\nplt.xlabel('Police Force')\nplt.ylabel('Count')\nplt.title('Number of Incidents by Police Force')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "car_1",
    "question": "what are the countries having at least one car maker? List name and id.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the COUNTRIES table\ncountries = pd.read_sql(\"SELECT * FROM COUNTRIES\", conn)\ncountries.columns = map(str.lower, countries.columns)\n\n# Read the CAR_MAKERS table\ncar_makers = pd.read_sql(\"SELECT * FROM CAR_MAKERS\", conn)\ncar_makers.columns = map(str.lower, car_makers.columns)\n\n# Merge the two tables on CountryId\nmerged_data = pd.merge(countries, car_makers, left_on='countryid', right_on='country')\n\n# Group by CountryName and count the number of car makers\ncar_makers_count = merged_data.groupby('countryname').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(car_makers_count['countryname'], car_makers_count['count'])\nplt.xlabel('Country Name')\nplt.ylabel('Number of Car Makers')\nplt.title('Number of Car Makers by Country')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "department_management",
    "question": "How many departments are built in each year? Group by creation time in a line chart, display from high to low by the X.",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the department table\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\n\n# Convert column names to lowercase\ndepartment.columns = department.columns.str.lower()\n\n# Perform the SQL query\nresult = department.groupby('creation').size().reset_index(name='count').sort_values('creation', ascending=False)\n\n# Plot the line chart\nplt.plot(result['creation'], result['count'])\nplt.xlabel('Creation')\nplt.ylabel('Count')\nplt.title('Department Creation')\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Find the number of funiture types produced by each manufacturer as well as the company names Show bar chart, and sort in descending by the Y-axis.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the manufacturer table\nmanufacturer = pd.read_sql(\"SELECT * FROM manufacturer\", conn)\nmanufacturer.columns = map(str.lower, manufacturer.columns)\n\n# Read the furniture_manufacte table\nfurniture_manufacte = pd.read_sql(\"SELECT * FROM furniture_manufacte\", conn)\nfurniture_manufacte.columns = map(str.lower, furniture_manufacte.columns)\n\n# Merge the two tables on manufacturer_id\nmerged_data = pd.merge(manufacturer, furniture_manufacte, on=\"manufacturer_id\")\n\n# Perform the group by and count\ngrouped_data = merged_data.groupby(\"name\").size().reset_index(name=\"count\")\nsorted_data = grouped_data.sort_values(by=\"count\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"name\"], sorted_data[\"count\"])\nplt.xlabel(\"Manufacturer\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Furniture by Manufacturer\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "A bar chart for returning the number of the lot details of lots that belong to investors with details \"l\"?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the INVESTORS table\ninvestors = pd.read_sql(\"SELECT * FROM INVESTORS\", conn)\ninvestors.columns = map(str.lower, investors.columns)\n\n# Read the data from the LOTS table\nlots = pd.read_sql(\"SELECT * FROM LOTS\", conn)\nlots.columns = map(str.lower, lots.columns)\n\n# Merge the two tables on investor_id\nmerged_data = pd.merge(investors, lots, on=\"investor_id\")\n\n# Filter the merged data based on Investor_details\nfiltered_data = merged_data[merged_data[\"investor_details\"] == \"l\"]\n\n# Group by lot_details and count the occurrences\ngrouped_data = filtered_data.groupby(\"lot_details\").size().reset_index(name=\"count\")\n\n# Plot the bar chart\nplt.bar(grouped_data[\"lot_details\"], grouped_data[\"count\"])\nplt.xlabel(\"Lot Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Bar Chart of Lot Details\")\nplt.show()"
  },
  {
    "db_id": "voter_2",
    "question": "Which city has the highest number of students who have class senator votes in the spring election cycle, represented by a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nVOTING_RECORD = pd.read_sql(\"SELECT * FROM VOTING_RECORD\", conn)\nSTUDENT.columns = STUDENT.columns.str.lower()\nVOTING_RECORD.columns = VOTING_RECORD.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(STUDENT, VOTING_RECORD, left_on='stuid', right_on='class_senator_vote')\n\n# Filtering the data for spring election cycle\nfiltered_df = merged_df[merged_df['election_cycle'] == 'Spring']\n\n# Grouping by city_code and counting the number of records\ngrouped_df = filtered_df.groupby('city_code').size().reset_index(name='count')\n\n# Sorting the data by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plotting the bar chart\nplt.bar(sorted_df['city_code'], sorted_df['count'])\nplt.xlabel('City Code')\nplt.ylabel('Count')\nplt.title('Number of Students by City Code')\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Show the total number from each flag, and sort by the y axis in ascending.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ship table\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = ship_df.groupby('flag').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result_df['flag'], result_df['count'])\nplt.xlabel('Flag')\nplt.ylabel('Count')\nplt.title('Number of Ships by Flag')\nplt.show()"
  },
  {
    "db_id": "coffee_shop",
    "question": "Bar graph to show the total number from different address, and could you sort in ascending by the y axis?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the member table\nmember_df = pd.read_sql(\"SELECT * FROM member\", conn)\n\n# Convert column names to lowercase\nmember_df.columns = member_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = member_df.groupby('address').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar plot\nplt.bar(result_df['address'], result_df['count'])\nplt.xlabel('Address')\nplt.ylabel('Count')\nplt.title('Number of Members by Address')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "voter_2",
    "question": "Show me a bar chart displaying the count of votes for each distinct first name of the students who have class senator votes.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nVOTING_RECORD = pd.read_sql(\"SELECT * FROM VOTING_RECORD\", conn)\nSTUDENT.columns = STUDENT.columns.str.lower()\nVOTING_RECORD.columns = VOTING_RECORD.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(STUDENT, VOTING_RECORD, left_on='stuid', right_on='class_senator_vote')\n\n# Group by fname and count the number of records\ngrouped_df = merged_df.groupby('fname').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['fname'], grouped_df['count'])\nplt.xlabel('First Name')\nplt.ylabel('Count')\nplt.title('Number of Records by First Name')\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "Show the average of population from each status , and rank by the Y in descending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncity.columns = city.columns.str.lower()\n\n# Group by status and calculate average population\ngrouped_city = city.groupby('status')['population'].mean()\n\n# Sort by average population in descending order\nsorted_city = grouped_city.sort_values(ascending=False)\n\n# Create bar plot\nplt.bar(sorted_city.index, sorted_city.values)\n\n# Set labels and title\nplt.xlabel('Status')\nplt.ylabel('Average Population')\nplt.title('Average Population by Status')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Draw a bar chart for what is the average rating star for each reviewer?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating and Reviewer tables\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nreviewer_df = pd.read_sql(\"SELECT * FROM Reviewer\", conn)\n\n# Convert column names to lowercase\nrating_df.columns = rating_df.columns.str.lower()\nreviewer_df.columns = reviewer_df.columns.str.lower()\n\n# Merge the Rating and Reviewer tables on rID\nmerged_df = pd.merge(rating_df, reviewer_df, on=\"rid\")\n\n# Calculate the average stars for each reviewer\navg_stars_by_reviewer = merged_df.groupby(\"name\")[\"stars\"].mean()\n\n# Create a bar plot\nplt.bar(avg_stars_by_reviewer.index, avg_stars_by_reviewer.values)\nplt.xlabel(\"Reviewer Name\")\nplt.ylabel(\"Average Stars\")\nplt.title(\"Average Stars by Reviewer\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "coffee_shop",
    "question": "A scatter chart showing the correlation between age and purchase time .",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nmember = pd.read_sql(\"SELECT * FROM member\", conn)\nmember.columns = member.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called 'member'\nplt.scatter(member['time_of_purchase'], member['age'])\nplt.xlabel('Time of Purchase')\nplt.ylabel('Age')\nplt.title('Scatter plot of Time of Purchase vs Age')\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes' by a bar chart, I want to order from high to low by the bars please.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the department table\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = map(str.lower, department.columns)\n\n# Read the management table\nmanagement = pd.read_sql(\"SELECT * FROM management\", conn)\nmanagement.columns = map(str.lower, management.columns)\n\n# Merge the department and management tables\nmerged_data = pd.merge(department, management, on=\"department_id\")\n\n# Filter the merged data for temporary acting departments\ntemporary_acting_data = merged_data[merged_data[\"temporary_acting\"] == \"Yes\"]\n\n# Calculate the average number of employees for each department\navg_num_employees = temporary_acting_data.groupby(\"name\")[\"num_employees\"].mean()\n\n# Sort the departments in descending order\navg_num_employees = avg_num_employees.sort_index(ascending=False)\n\n# Create a bar plot\nplt.bar(avg_num_employees.index, avg_num_employees.values)\nplt.xlabel(\"Department\")\nplt.ylabel(\"Average Number of Employees\")\nplt.title(\"Average Number of Employees in Temporary Acting Departments\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Visualize a bar chart for how many students play each sport ? , and show total number from low to high order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nSportsinfo.columns = Sportsinfo.columns.str.lower()\n\n# Grouping the data by sportname and counting the occurrences\nsport_counts = Sportsinfo.groupby('sportname').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nsport_counts = sport_counts.sort_values('count')\n\n# Creating the bar plot\nplt.bar(sport_counts['sportname'], sport_counts['count'])\nplt.xlabel('Sport Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Sport Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Show different locations and the number of performances at each location by a bar chart , sort x-axis in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\nperformance.columns = performance.columns.str.lower()\n\n# Group by location and count the number of occurrences\nlocation_counts = performance.groupby('location').size().reset_index(name='count')\n\n# Sort the data by location in ascending order\nlocation_counts = location_counts.sort_values('location')\n\n# Create a bar plot\nplt.bar(location_counts['location'], location_counts['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Performances by Location')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Show average of budget in different year and group by department creation time with a line chart.",
    "chart": "Line",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the department table\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\n\n# Convert column names to lowercase\ndepartment.columns = department.columns.str.lower()\n\n# Group by Creation and calculate average budget\navg_budget = department.groupby(\"creation\")[\"budget_in_billions\"].mean().reset_index()\n\n# Plot the line chart\nplt.plot(avg_budget[\"creation\"], avg_budget[\"budget_in_billions\"])\nplt.xlabel(\"Creation\")\nplt.ylabel(\"Average Budget (in Billions)\")\nplt.title(\"Average Budget by Creation\")\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Calculate the number of actors in each duration of actors using a bar chart , could you list X-axis in desc order please ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nactor = pd.read_sql(\"SELECT * FROM actor\", conn)\nactor.columns = actor.columns.str.lower()\n\n# Grouping the data by duration and counting the occurrences\ngrouped_data = actor.groupby('duration').size().reset_index(name='count')\n\n# Sorting the data by duration in descending order\nsorted_data = grouped_data.sort_values('duration', ascending=False)\n\n# Creating the bar plot\nplt.bar(sorted_data['duration'], sorted_data['count'])\n\n# Adding labels and title\nplt.xlabel('Duration')\nplt.ylabel('Count')\nplt.title('Distribution of Durations')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "coffee_shop",
    "question": "Find the number of members living in each address Show bar chart , list in desc by the bar .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmember = pd.read_sql(\"SELECT * FROM member\", conn)\nmember.columns = member.columns.str.lower()\n\n# Grouping the data by address and counting the number of occurrences\naddress_counts = member.groupby('address').size().reset_index(name='count')\n\n# Sorting the data by address in descending order\naddress_counts = address_counts.sort_values('address', ascending=False)\n\n# Creating the bar plot\nplt.bar(address_counts['address'], address_counts['count'])\nplt.xlabel('Address')\nplt.ylabel('Count')\nplt.title('Number of Members by Address')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "What are the issue dates of volumes associated with the artist aged 23 or younger, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nvolume = pd.read_sql(\"SELECT * FROM volume\", conn)\nartist.columns = artist.columns.str.lower()\nvolume.columns = volume.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(artist, volume, on='artist_id')\n\n# Filter the data based on age condition\nfiltered_df = merged_df[merged_df['age'] <= 23]\n\n# Group by issue_date and count the occurrences\ngrouped_df = filtered_df.groupby('issue_date').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['issue_date'], grouped_df['count'])\nplt.xlabel('Issue Date')\nplt.ylabel('Count')\nplt.title('Number of Issues by Date')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "List the types of competition and the number of competitions of each type Visualize by bar chart , and I want to order the total number from high to low order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the number of occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort the counts in descending order\ncompetition_counts = competition_counts.sort_values(by='count', ascending=False)\n\n# Create a bar plot\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Type')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "What is the bar chart displaying the company names of entrepreneurs based on their height, with the entrepreneur having the greatest height highlighted?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(entrepreneur, people, on='people_id')\n\n# Group by company and find the maximum height\ngrouped_df = merged_df.groupby('company')['height'].max().reset_index()\n\n# Plot the bar chart\nplt.bar(grouped_df['company'], grouped_df['height'])\nplt.xlabel('Company')\nplt.ylabel('Maximum Height')\nplt.title('Maximum Height by Company')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Plot how many class by grouped by class as a bar graph , and display by the X-axis in descending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\ncaptain.columns = captain.columns.str.lower()\n\n# Group by 'class' and count the occurrences\nclass_counts = captain.groupby('class').size().reset_index(name='count')\n\n# Sort the dataframe by 'class' in descending order\nclass_counts = class_counts.sort_values('class', ascending=False)\n\n# Create a bar plot\nplt.bar(class_counts['class'], class_counts['count'])\nplt.xlabel('Class')\nplt.ylabel('Count')\nplt.title('Count of each class')\nplt.show()"
  },
  {
    "db_id": "school_player",
    "question": "For each denomination , return the denomination and the count of schools with that denomination Visualize by bar chart , order X-axis in desc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nschool = pd.read_sql(\"SELECT * FROM school\", conn)\nschool.columns = school.columns.str.lower()\n\n# Grouping the data by denomination and counting the number of occurrences\ndenomination_counts = school.groupby('denomination').size().reset_index(name='count')\n\n# Sorting the data by denomination in descending order\ndenomination_counts = denomination_counts.sort_values('denomination', ascending=False)\n\n# Creating the bar plot\nplt.bar(denomination_counts['denomination'], denomination_counts['count'])\nplt.xlabel('Denomination')\nplt.ylabel('Count')\nplt.title('Number of Schools by Denomination')\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "What is the average number of weeks on top for volumes by artists grouped by their age, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nvolume = pd.read_sql(\"SELECT * FROM volume\", conn)\nartist.columns = artist.columns.str.lower()\nvolume.columns = volume.columns.str.lower()\n\n# Perform the join operation\nresult = pd.merge(artist, volume, on='artist_id')\n\n# Calculate the average weeks_on_top for each age group\navg_weeks_on_top = result.groupby('age')['weeks_on_top'].mean()\n\n# Create a bar plot\nplt.bar(avg_weeks_on_top.index, avg_weeks_on_top.values)\nplt.xlabel('Age')\nplt.ylabel('Average Weeks on Top')\nplt.title('Average Weeks on Top by Age')\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Tell me the proportion of the total number of different ranks using a bar graph.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the captain table\ncaptain_df = pd.read_sql(\"SELECT * FROM captain\", conn)\n\n# Convert column names to lowercase\ncaptain_df.columns = captain_df.columns.str.lower()\n\n# Perform the SQL query\nresult = captain_df.groupby('rank').size()\n\n# Plot the pie chart\nplt.pie(result, labels=result.index, autopct='%1.1f%%')\nplt.title('Distribution of Ranks')\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Show different locations and the number of performances at each location Visualize by bar chart, I want to display from low to high by the x-axis.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the performance table\nperformance_df = pd.read_sql(\"SELECT * FROM performance\", conn)\n\n# Convert column names to lowercase\nperformance_df.columns = performance_df.columns.str.lower()\n\n# Perform the SQL query\nresult = performance_df.groupby('location').size().reset_index(name='count').sort_values('location')\n\n# Generate the bar plot\nplt.bar(result['location'], result['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Performances by Location')\nplt.show()"
  },
  {
    "db_id": "voter_2",
    "question": "What is the pie chart representation of the percentage of each distinct first name among the students who have vice president votes and whose city code is not PIT?",
    "chart": "Pie",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nVOTING_RECORD = pd.read_sql(\"SELECT * FROM VOTING_RECORD\", conn)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nVOTING_RECORD = pd.read_sql(\"SELECT * FROM VOTING_RECORD\", conn)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nSTUDENT.columns = STUDENT.columns.str.lower()\nVOTING_RECORD.columns = VOTING_RECORD.columns.str.lower()\nSTUDENT.columns = STUDENT.columns.str.lower()\nSTUDENT.columns = STUDENT.columns.str.lower()\nVOTING_RECORD.columns = VOTING_RECORD.columns.str.lower()\nSTUDENT.columns = STUDENT.columns.str.lower()\n\n# Perform the SQL query\nquery = \"\"\"\nselect fname, count(fname)*100.0/(select count(*) from (select distinct t1.fname from student as t1 join voting_record as t2 on t1.stuid = t2.vice_president_vote except select distinct fname from student where city_code = 'pit')) as percentage \nfrom (select distinct t1.fname from student as t1 join voting_record as t2 on t1.stuid = t2.vice_president_vote except select distinct fname from student where city_code = 'pit') \ngroup by fname\n\"\"\"\n\nresult = pd.read_sql_query(query, conn)\n\n# Visualize the result as a pie chart\nplt.pie(result['percentage'], labels=result['fname'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "For each director, return the director's name together with the value of that rating and ignore movies whose director is NULL. Could you plot the result with a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating and Movie tables\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\n\n# Convert column names to lowercase\nrating_df.columns = rating_df.columns.str.lower()\nmovie_df.columns = movie_df.columns.str.lower()\n\n# Merge the Rating and Movie tables on mID column\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Filter out rows where director is not null\nfiltered_df = merged_df[merged_df[\"director\"] != \"null\"]\n\n# Group by director and count the number of movies for each director\ndirector_counts = filtered_df[\"director\"].value_counts()\n\n# Plot the pie chart\nplt.pie(director_counts, labels=director_counts.index, autopct=\"%1.1f%%\")\nplt.title(\"Distribution of Movies by Director\")\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "What are the names and areas of countries with the top 5 largest area .",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry.columns = country.columns.str.lower()\n\n# Selecting the top 5 countries with largest surface area\ntop_countries = country.nlargest(5, 'surfacearea')\n\n# Creating a pie chart\nplt.pie(top_countries['surfacearea'], labels=top_countries['name'], autopct='%1.1f%%')\nplt.title('Top 5 Countries by Surface Area')\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Show me mean age by born state in a bar, and could you order from low to high by the bars please?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the \"head\" table\nhead_df = pd.read_sql(\"SELECT * FROM head\", conn)\n\n# Convert column names to lowercase\nhead_df.columns = head_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = head_df.groupby(\"born_state\").agg({\"age\": \"mean\"}).reset_index().sort_values(\"born_state\")\n\n# Generate the bar plot\nplt.bar(result_df[\"born_state\"], result_df[\"age\"])\nplt.xlabel(\"Born State\")\nplt.ylabel(\"Average Age\")\nplt.title(\"Average Age by Born State\")\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "Return the number of music festivals of each category in a bar chart, could you show by the Y in asc?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the music_festival table\nmusic_festival = pd.read_sql(\"SELECT * FROM music_festival\", conn)\n\n# Convert column names to lowercase\nmusic_festival.columns = music_festival.columns.str.lower()\n\n# Perform the SQL query\nresult = music_festival.groupby('category').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result['category'], result['count'])\nplt.xlabel('Category')\nplt.ylabel('Count')\nplt.title('Music Festival by Category')\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Show the average age of heads of departments born in each state with a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the \"head\" table\nhead_df = pd.read_sql(\"SELECT * FROM head\", conn)\n\n# Convert column names to lowercase\nhead_df.columns = head_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = head_df.groupby(\"born_state\").agg({\"age\": \"mean\"}).reset_index()\n\n# Visualize the result using a bar chart\nplt.bar(result_df[\"born_state\"], result_df[\"age\"])\nplt.xlabel(\"Born State\")\nplt.ylabel(\"Average Age\")\nplt.title(\"Average Age by Born State\")\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "Visualize a bar chart to show editors' names and their ages , and sort Y-axis in desc order .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\neditor.columns = editor.columns.str.lower()\n\n# Assuming the data is already loaded into a dataframe called 'editor'\n\n# Sort the dataframe by age in descending order\nsorted_df = editor.sort_values(by='age', ascending=False)\n\n# Extract the name and age columns\nnames = sorted_df['name']\nages = sorted_df['age']\n\n# Create a bar plot\nplt.bar(names, ages)\n\n# Add labels and title\nplt.xlabel('Name')\nplt.ylabel('Age')\nplt.title('Age Distribution')\n\n# Rotate x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "coffee_shop",
    "question": "Find the address and staff number of the shops that do not have any happy hour Visualize by bar chart, list in asc by the X please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the shop table\nshop_df = pd.read_sql(\"SELECT * FROM shop\", conn)\n\n# Read the happy_hour table\nhappy_hour_df = pd.read_sql(\"SELECT * FROM happy_hour\", conn)\n\n# Convert column names to lowercase\nshop_df.columns = shop_df.columns.str.lower()\nhappy_hour_df.columns = happy_hour_df.columns.str.lower()\n\n# filter shops that are not in happy_hour table\nfiltered_shop_df = shop_df[~shop_df[\"shop_id\"].isin(happy_hour_df[\"shop_id\"])]\n\n# sort the filtered shops by address\nsorted_shop_df = filtered_shop_df.sort_values(\"address\", ascending=True)\n\n# plot the bar chart\nplt.bar(sorted_shop_df[\"address\"], sorted_shop_df[\"num_of_staff\"])\nplt.xlabel(\"Address\")\nplt.ylabel(\"Number of Staff\")\nplt.title(\"Number of Staff in Shops without Happy Hour\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "entrepreneur",
    "question": "Show me a bar chart displaying the weights of entrepreneurs and the corresponding count of entrepreneurs for each weight, ranked in descending order of the count.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(entrepreneur, people, on='people_id')\n\n# Group by weight and count the occurrences\ngrouped_df = merged_df.groupby('weight').size().reset_index(name='count')\n\n# Sort by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['weight'], sorted_df['count'])\nplt.xlabel('Weight')\nplt.ylabel('Count')\nplt.title('Count of Entrepreneurs by Weight')\nplt.show()"
  },
  {
    "db_id": "riding_club",
    "question": "For players whose occupation is not \"Researcher\", tell me the distribution of their residences with a bar chart, and order bars in desc order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the player table\nplayer_df = pd.read_sql(\"SELECT * FROM player\", conn)\n\n# Convert column names to lowercase\nplayer_df.columns = player_df.columns.str.lower()\n\n# Filter out rows where Occupation is not \"Researcher\"\nfiltered_df = player_df[player_df[\"occupation\"] != \"Researcher\"]\n\n# Group by Residence and count the occurrences\ngrouped_df = filtered_df.groupby(\"residence\").size().reset_index(name=\"count\")\n\n# Sort by Residence in descending order\nsorted_df = grouped_df.sort_values(\"residence\", ascending=False)\n\n# Create the bar plot\nplt.bar(sorted_df[\"residence\"], sorted_df[\"count\"])\nplt.xlabel(\"Residence\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Players by Residence (excluding Researchers)\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "Show different nationalities along with the number of hosts of each nationality in a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the HOST table\nhost_df = pd.read_sql(\"SELECT * FROM HOST\", conn)\n\n# Convert column names to lowercase\nhost_df.columns = host_df.columns.str.lower()\n\n# Perform the query\nresult = host_df.groupby('nationality').size()\n\n# Create the bar plot\nplt.bar(result.index, result.values)\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Hosts by Nationality')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "scientist_1",
    "question": "Show me a bar chart displaying the number of scientists involved for each project name, sorted in descending order by the number of scientists.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nprojects = pd.read_sql(\"SELECT * FROM projects\", conn)\nassignedto = pd.read_sql(\"SELECT * FROM assignedto\", conn)\nprojects.columns = projects.columns.str.lower()\nassignedto.columns = assignedto.columns.str.lower()\n\n# Merge projects and assignedto tables\nmerged_df = pd.merge(projects, assignedto, left_on='code', right_on='project')\n\n# Group by project name and count the number of scientists\nscientists_count = merged_df.groupby('name').size().reset_index(name='scientists')\n\n# Sort by scientists count in descending order\nscientists_count = scientists_count.sort_values('scientists', ascending=False)\n\n# Plot the bar chart\nplt.bar(scientists_count['name'], scientists_count['scientists'])\nplt.xlabel('Project Name')\nplt.ylabel('Number of Scientists')\nplt.title('Scientists per Project')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "company_employee",
    "question": "A pie chart showing the number of companies for each industry .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompany = pd.read_sql(\"SELECT * FROM company\", conn)\ncompany.columns = company.columns.str.lower()\n\n# Group by industry and count the number of companies in each industry\nindustry_counts = company.groupby('industry').size().reset_index(name='count')\n\n# Plot a pie chart\nplt.pie(industry_counts['count'], labels=industry_counts['industry'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Bar chart x axis location y axis how many location , and order by the Y-axis from low to high .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\nperformance.columns = performance.columns.str.lower()\n\n# Group by location and count the occurrences\nlocation_counts = performance.groupby('location').size().reset_index(name='count')\n\n# Sort the counts in ascending order\nlocation_counts = location_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(location_counts['location'], location_counts['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Location Counts')\nplt.show()"
  },
  {
    "db_id": "riding_club",
    "question": "For players whose occupation is not \"Researcher\", tell me the proportion of their residences with a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the player table\nplayer_df = pd.read_sql(\"SELECT * FROM player\", conn)\n\n# Convert column names to lowercase\nplayer_df.columns = player_df.columns.str.lower()\n\n# Filter out rows where Occupation is not \"Researcher\"\nfiltered_df = player_df[player_df[\"occupation\"] != \"Researcher\"]\n\n# Group by Residence and count the occurrences\ngrouped_df = filtered_df.groupby(\"residence\").size().reset_index(name=\"count\")\n\n# Plot the pie chart\nplt.pie(grouped_df[\"count\"], labels=grouped_df[\"residence\"], autopct=\"%1.1f%%\")\nplt.title(\"Residence Distribution (Excluding Researchers)\")\nplt.show()"
  },
  {
    "db_id": "county_public_safety",
    "question": "Show me a bar chart displaying the count of cities in each county, sorted in ascending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncounty_public_safety = pd.read_sql(\"SELECT * FROM county_public_safety\", conn)\ncity.columns = city.columns.str.lower()\ncounty_public_safety.columns = county_public_safety.columns.str.lower()\n\n# Joining the city and county_public_safety tables\nmerged_df = pd.merge(city, county_public_safety, on='county_id')\n\n# Grouping by county name and counting the occurrences\ngrouped_df = merged_df.groupby('name_y').count()\n\n# Sorting the dataframe by count in ascending order\nsorted_df = grouped_df.sort_values('name_x')\n\n# Plotting the bar chart\nplt.bar(sorted_df.index, sorted_df['name_x'])\nplt.xlabel('County Name')\nplt.ylabel('Count')\nplt.title('Number of Cities in Each County')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Give me a bar for what are the types of competition and number of competitions for that type ? , order X in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the number of occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort the dataframe by competition_type in ascending order\ncompetition_counts = competition_counts.sort_values('competition_type')\n\n# Create a bar plot\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Type')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "List the types of competition and the number of competitions of each type Visualize by bar chart , list from high to low by the names .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the number of occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort the dataframe by competition_type in descending order\ncompetition_counts = competition_counts.sort_values('competition_type', ascending=False)\n\n# Create a bar plot\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Type')\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor , and show by the bars from low to high .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\n\n# Grouping the data by 'investor' and counting the occurrences\ngrouped_data = entrepreneur.groupby('investor').size().reset_index(name='count')\n\n# Sorting the data by 'investor' in ascending order\nsorted_data = grouped_data.sort_values('investor')\n\n# Creating the bar plot\nplt.bar(sorted_data['investor'], sorted_data['count'])\nplt.xlabel('Investor')\nplt.ylabel('Count')\nplt.title('Number of Entrepreneurs by Investor')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "Give me a bar chart, that group by location and count them, and sort by the the number of location from low to high please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the party table\nparty_df = pd.read_sql(\"SELECT * FROM party\", conn)\n\n# Convert column names to lowercase\nparty_df.columns = party_df.columns.str.lower()\n\n# Perform the SQL query\nresult = party_df.groupby('location').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result['location'], result['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Party Count by Location')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Compare the lowest rating among all movies by each title using a histogram.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\n\n# Merge the Rating and Movie tables on mID\nmerged_df = pd.merge(rating_df, movie_df, on=\"mID\")\n\n# Group by title and calculate the minimum stars for each movie\ngrouped_df = merged_df.groupby(\"title\")[\"stars\"].min().reset_index()\n\n# Convert column names to lowercase\ngrouped_df.columns = grouped_df.columns.str.lower()\n\n# Plot the bar chart\nplt.bar(grouped_df[\"title\"], grouped_df[\"stars\"])\nplt.xlabel(\"Movie Title\")\nplt.ylabel(\"Minimum Stars\")\nplt.title(\"Minimum Stars for Each Movie\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Please tell me the average star ratings of each movie title using a bar chart, and could you show by the bar in desc?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\nmovie_df.columns = map(str.lower, movie_df.columns)\n\n# Merge the Rating and Movie tables on mID column\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Calculate the average stars for each movie title\navg_stars_df = merged_df.groupby(\"title\")[\"stars\"].mean().reset_index()\n\n# Sort the dataframe by title in descending order\navg_stars_df = avg_stars_df.sort_values(\"title\", ascending=False)\n\n# Plot the bar chart\nplt.bar(avg_stars_df[\"title\"], avg_stars_df[\"stars\"])\nplt.xlabel(\"Movie Title\")\nplt.ylabel(\"Average Stars\")\nplt.title(\"Average Stars for Each Movie\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "What is the distribution of attendance for each member in a pie chart, and how are the members ordered based on their sum of attendance in descending order?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmember_attendance = pd.read_sql(\"SELECT * FROM member_attendance\", conn)\nmember = pd.read_sql(\"SELECT * FROM member\", conn)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\nmember_attendance.columns = member_attendance.columns.str.lower()\nmember.columns = member.columns.str.lower()\nperformance.columns = performance.columns.str.lower()\n\n# Perform the join operation\nmerged_data = pd.merge(member_attendance, member, on='member_id')\nmerged_data = pd.merge(merged_data, performance, on='performance_id')\n\n# Group by member name and calculate the sum of attendance\ngrouped_data = merged_data.groupby('name')['attendance'].sum().reset_index()\n\n# Sort the data by sum of attendance in descending order\nsorted_data = grouped_data.sort_values('attendance', ascending=False)\n\n# Plot the pie chart\nplt.pie(sorted_data['attendance'], labels=sorted_data['name'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Draw a pie chart for how many musicals has each nominee been nominated for ?",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Assuming the data is already loaded into a dataframe called 'musical'\n\n# Grouping the data by 'nominee' and counting the occurrences\ngrouped_data = musical.groupby('nominee').size().reset_index(name='count')\n\n# Creating a pie chart\nplt.pie(grouped_data['count'], labels=grouped_data['nominee'], autopct='%1.1f%%')\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "What is the number of types of competition?, order in asc by the names.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the competition table\ncompetition_df = pd.read_sql(\"SELECT * FROM competition\", conn)\n\n# Convert column names to lowercase\ncompetition_df.columns = competition_df.columns.str.lower()\n\n# Perform the SQL query\nresult = competition_df.groupby('competition_type').size().reset_index(name='count').sort_values('competition_type')\n\n# Generate the bar plot\nplt.bar(result['competition_type'], result['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Type')\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Can you create a pie chart displaying the distribution of last names among students on scholarship, along with the count of students with each last name?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nStudent = pd.read_sql(\"SELECT * FROM Student\", conn)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nStudent.columns = Student.columns.str.lower()\nSportsinfo.columns = Sportsinfo.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Student, Sportsinfo, on='stuid')\n\n# Filter the data based on the condition\nfiltered_df = merged_df[merged_df['onscholarship'] == 'Y']\n\n# Group the data by lname and count the number of occurrences\ngrouped_df = filtered_df.groupby('lname').size().reset_index(name='count')\n\n# Create a pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['lname'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "company_employee",
    "question": "What is the number of companies for each headquarter ? Visualize by bar chart , could you sort by the Headquarters in desc ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompany = pd.read_sql(\"SELECT * FROM company\", conn)\ncompany.columns = company.columns.str.lower()\n\n# Group by headquarters and count the number of companies\nheadquarters_count = company.groupby('headquarters').size().reset_index(name='count')\n\n# Sort the data by headquarters in descending order\nheadquarters_count = headquarters_count.sort_values('headquarters', ascending=False)\n\n# Create a bar plot\nplt.bar(headquarters_count['headquarters'], headquarters_count['count'])\nplt.xlabel('Headquarters')\nplt.ylabel('Count')\nplt.title('Number of Companies by Headquarters')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "coffee_shop",
    "question": "Find the number of members living in each address. Plot them as pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the member table\nmember_df = pd.read_sql(\"SELECT * FROM member\", conn)\n\n# Convert column names to lowercase\nmember_df.columns = member_df.columns.str.lower()\n\n# Perform the SQL query\nresult = member_df.groupby('address').size()\n\n# Plot the pie chart\nplt.pie(result, labels=result.index, autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Compare the lowest rating among all movies by each director using a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\n\n# Merge the Rating and Movie tables on mID\nmerged_df = pd.merge(rating_df, movie_df, on=\"mID\")\n\n# Group by director and find the minimum stars\ngrouped_df = merged_df.groupby(\"director\").stars.min().reset_index()\n\n# Convert column names to lowercase\ngrouped_df.columns = grouped_df.columns.str.lower()\n\n# Plot the bar chart\nplt.bar(grouped_df[\"director\"], grouped_df[\"stars\"])\nplt.xlabel(\"Director\")\nplt.ylabel(\"Minimum Stars\")\nplt.title(\"Minimum Stars by Director\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "coffee_shop",
    "question": "Find the number of members living in each address Show bar chart , and rank by the Y in desc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmember = pd.read_sql(\"SELECT * FROM member\", conn)\nmember.columns = member.columns.str.lower()\n\n# Group by address and count the number of occurrences\naddress_counts = member.groupby('address').size().reset_index(name='count')\n\n# Sort the counts in descending order\naddress_counts = address_counts.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(address_counts['address'], address_counts['count'])\nplt.xlabel('Address')\nplt.ylabel('Count')\nplt.title('Number of Members by Address')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "voter_2",
    "question": "What is the bar chart displaying the frequency of each last name among the students who have class president votes?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nVOTING_RECORD = pd.read_sql(\"SELECT * FROM VOTING_RECORD\", conn)\nSTUDENT.columns = STUDENT.columns.str.lower()\nVOTING_RECORD.columns = VOTING_RECORD.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(STUDENT, VOTING_RECORD, left_on='stuid', right_on='class_president_vote')\n\n# Group by lname and count the frequency\ngrouped_df = merged_df.groupby('lname').size().reset_index(name='frequency')\n\n# Sort by frequency in descending order\nsorted_df = grouped_df.sort_values('frequency', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['lname'], sorted_df['frequency'])\nplt.xlabel('Last Name')\nplt.ylabel('Frequency')\nplt.title('Frequency of Last Names')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "Which representatives received more than 10000 votes in the election, and what is the total number of votes they received? Show the results in a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nelection = pd.read_sql(\"SELECT * FROM election\", conn)\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\nelection.columns = election.columns.str.lower()\nrepresentative.columns = representative.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(election, representative, on='representative_id')\n\n# Filter the data based on votes > 10000\nfiltered_df = merged_df[merged_df['votes'] > 10000]\n\n# Group by representative name and calculate the sum of votes\ngrouped_df = filtered_df.groupby('name').agg({'votes': 'sum'}).reset_index()\n\n# Plot the bar chart\nplt.bar(grouped_df['name'], grouped_df['votes'])\nplt.xlabel('Representative Name')\nplt.ylabel('Total Votes')\nplt.title('Total Votes by Representative')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Show me a bar chart comparing the total number of captains in each rank , and rank total number in descending order please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\ncaptain.columns = captain.columns.str.lower()\n\n# Group by rank and count the occurrences\nrank_counts = captain.groupby('rank').size().reset_index(name='count')\n\n# Sort by count in descending order\nrank_counts = rank_counts.sort_values('count', ascending=False)\n\n# Create bar plot\nplt.bar(rank_counts['rank'], rank_counts['count'])\nplt.xlabel('Rank')\nplt.ylabel('Count')\nplt.title('Rank Counts')\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Show me a bar chart displaying the total attendance for each performance date, ranked in descending order of total attendance.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmember_attendance = pd.read_sql(\"SELECT * FROM member_attendance\", conn)\nmember = pd.read_sql(\"SELECT * FROM member\", conn)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\nmember_attendance.columns = member_attendance.columns.str.lower()\nmember.columns = member.columns.str.lower()\nperformance.columns = performance.columns.str.lower()\n\n# Perform the join operation\nmerged_data = pd.merge(member_attendance, member, on='member_id')\nmerged_data = pd.merge(merged_data, performance, on='performance_id')\n\n# Group by date and calculate the sum of attendance\ngrouped_data = merged_data.groupby('date')['attendance'].sum().reset_index()\n\n# Sort the data by sum of attendance in descending order\nsorted_data = grouped_data.sort_values('attendance', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data['date'], sorted_data['attendance'])\nplt.xlabel('Date')\nplt.ylabel('Sum of Attendance')\nplt.title('Sum of Attendance by Date')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "scientist_1",
    "question": "Find the number of scientists involved for each project name, and display by the y-axis in ascending.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the projects table\nprojects = pd.read_sql(\"SELECT * FROM projects\", conn)\n\n# Read the assignedto table\nassignedto = pd.read_sql(\"SELECT * FROM assignedto\", conn)\n\n# Convert column names to lowercase\nprojects.columns = projects.columns.str.lower()\nassignedto.columns = assignedto.columns.str.lower()\n\n# merge the projects and assignedto tables on the code column\nmerged_data = pd.merge(projects, assignedto, left_on=\"code\", right_on=\"project\")\n\n# group by project name and count the number of occurrences\ngrouped_data = merged_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# sort the data by count in ascending order\nsorted_data = grouped_data.sort_values(\"count\")\n\n# plot the bar chart\nplt.bar(sorted_data[\"name\"], sorted_data[\"count\"])\nplt.xlabel(\"Project Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Assignments per Project\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "party_host",
    "question": "Show me a bar chart displaying the party ID and the count of hosts for each party, sorted in descending order by the count of hosts.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nparty_host = pd.read_sql(\"SELECT * FROM party_host\", conn)\nHOST = pd.read_sql(\"SELECT * FROM HOST\", conn)\nparty = pd.read_sql(\"SELECT * FROM party\", conn)\nparty_host.columns = party_host.columns.str.lower()\nHOST.columns = HOST.columns.str.lower()\nparty.columns = party.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(party_host, HOST, on='host_id')\nmerged_df = pd.merge(merged_df, party, on='party_id')\n\n# Grouping and counting\ngrouped_df = merged_df.groupby('party_id').count().reset_index()\n\n# Sorting by count in descending order\nsorted_df = grouped_df.sort_values('host_id', ascending=False)\n\n# Plotting the bar chart\nplt.bar(sorted_df['party_id'], sorted_df['host_id'])\nplt.xlabel('Party ID')\nplt.ylabel('Number of Hosts')\nplt.title('Number of Hosts per Party')\nplt.show()"
  },
  {
    "db_id": "coffee_shop",
    "question": "Find the address and staff number of the shops that do not have any happy hour Visualize by bar chart, order y-axis from low to high order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the shop table\nshop_df = pd.read_sql(\"SELECT * FROM shop\", conn)\n\n# Read the happy_hour table\nhappy_hour_df = pd.read_sql(\"SELECT * FROM happy_hour\", conn)\n\n# Convert column names to lowercase\nshop_df.columns = shop_df.columns.str.lower()\nhappy_hour_df.columns = happy_hour_df.columns.str.lower()\n\n# filter the shops that are not in the happy_hour table\nfiltered_shop_df = shop_df[~shop_df['shop_id'].isin(happy_hour_df['shop_id'])]\n\n# sort the filtered shops by the number of staff in ascending order\nsorted_shop_df = filtered_shop_df.sort_values('num_of_staff')\n\n# create the bar plot\nplt.bar(sorted_shop_df['address'], sorted_shop_df['num_of_staff'])\nplt.xlabel('Address')\nplt.ylabel('Number of Staff')\nplt.title('Number of Staff in Shops without Happy Hour')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "music_4",
    "question": "Give me a pie to show the total number from different category .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nmusic_festival = pd.read_sql(\"SELECT * FROM music_festival\", conn)\nmusic_festival.columns = music_festival.columns.str.lower()\n\n# Group by category and count the number of occurrences\ncategory_counts = music_festival.groupby('category').size().reset_index(name='count')\n\n# Create a pie chart\nplt.pie(category_counts['count'], labels=category_counts['category'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Display the chart\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "List the types of competition and the number of competitions of each type in a bar chart , sort Y-axis in descending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the number of occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort the counts in descending order\ncompetition_counts = competition_counts.sort_values(by='count', ascending=False)\n\n# Create a bar plot\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Type')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all template type codes and the number of documents using each type Visualize by bar chart, rank Template_Type_Code in asc order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Templates table\ntemplates = pd.read_sql(\"SELECT * FROM Templates\", conn)\ntemplates.columns = map(str.lower, templates.columns)\n\n# Read the Documents table\ndocuments = pd.read_sql(\"SELECT * FROM Documents\", conn)\ndocuments.columns = map(str.lower, documents.columns)\n\n# Merge the Templates and Documents tables on template_id\nmerged_data = pd.merge(templates, documents, on=\"template_id\")\n\n# Group by Template_Type_Code and count the number of occurrences\ngrouped_data = merged_data.groupby(\"template_type_code\").size().reset_index(name=\"count\")\n\n# Sort the data by Template_Type_Code in ascending order\nsorted_data = grouped_data.sort_values(\"template_type_code\")\n\n# Generate the bar chart\nplt.bar(sorted_data[\"template_type_code\"], sorted_data[\"count\"])\nplt.xlabel(\"Template Type Code\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Templates by Template Type Code\")\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Give me a bar for how many students play each sport ?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nSportsinfo.columns = Sportsinfo.columns.str.lower()\n\n# Grouping the data by sportname and counting the occurrences\nsport_counts = Sportsinfo.groupby('sportname').size().reset_index(name='count')\n\n# Creating the bar plot\nplt.bar(sport_counts['sportname'], sport_counts['count'])\nplt.xlabel('Sport Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Sport')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Show the title and score of the movie with a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\n\n# Convert column names to lowercase\nrating_df.columns = rating_df.columns.str.lower()\nmovie_df.columns = movie_df.columns.str.lower()\n\n# merge the rating and movie tables on mid\nmerged_df = pd.merge(rating_df, movie_df, on='mid')\n\n# group by title and calculate the sum of stars for each movie\ngrouped_df = merged_df.groupby('title')['stars'].sum()\n\n# plot the pie chart\nplt.pie(grouped_df, labels=grouped_df.index, autopct='%1.1f%%')\nplt.title('Distribution of Stars by Movie Title')\nplt.show()\n"
  },
  {
    "db_id": "election_representative",
    "question": "Bar chart of the total number from each party , show total number in asc order please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\nrepresentative.columns = representative.columns.str.lower()\n\n# Group by party and count the number of representatives\nparty_counts = representative.groupby('party').size()\n\n# Sort the counts in ascending order\nparty_counts = party_counts.sort_values()\n\n# Create a bar plot\nplt.bar(party_counts.index, party_counts.values)\n\n# Set the x-axis label\nplt.xlabel('Party')\n\n# Set the y-axis label\nplt.ylabel('Count')\n\n# Set the title of the plot\nplt.title('Number of Representatives by Party')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "company_employee",
    "question": "What is the number of companies for each headquarter? Visualize by bar chart, and could you order by the total number in ascending?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the company table\ncompany = pd.read_sql(\"SELECT * FROM company\", conn)\n\n# Convert column names to lowercase\ncompany.columns = company.columns.str.lower()\n\n# Perform the SQL query\nresult = company.groupby('headquarters').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result['headquarters'], result['count'])\nplt.xlabel('Headquarters')\nplt.ylabel('Count')\nplt.title('Number of Companies by Headquarters')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "How many hosts does each nationality have? List the nationality and the count Visualize by bar chart, could you list in ascending by the y axis?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the HOST table\nhost_df = pd.read_sql(\"SELECT * FROM HOST\", conn)\n\n# Convert column names to lowercase\nhost_df.columns = host_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = host_df.groupby('nationality').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result_df['nationality'], result_df['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Hosts by Nationality')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "county_public_safety",
    "question": "Create a bar chart showing the total number across police force , and sort by the X from low to high please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncounty_public_safety = pd.read_sql(\"SELECT * FROM county_public_safety\", conn)\ncounty_public_safety.columns = county_public_safety.columns.str.lower()\n\n# Group by police_force and count the occurrences\ndf = county_public_safety.groupby('police_force').size().reset_index(name='count')\n\n# Sort by police_force in ascending order\ndf = df.sort_values('police_force')\n\n# Create a bar plot\nplt.bar(df['police_force'], df['count'])\nplt.xlabel('Police Force')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Police Force')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "What is the count of entrepreneurs for each name, displayed in a scatter chart, and ordered in descending order by the count?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(entrepreneur, people, on='people_id')\n\n# Group by name and count the occurrences\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Sort by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the scatter plot\nplt.scatter(sorted_df['name'], sorted_df['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Count of Entrepreneurs by Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "For each director, return the director's name together with the highest rating among all of their movies and ignore movies whose director is NULL Could you plot the result with a bar chart?, order by the y axis from high to low.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\nmovie_df.columns = map(str.lower, movie_df.columns)\n\n# Merge the Rating and Movie tables on mID\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Filter out rows with director as \"null\"\nfiltered_df = merged_df[merged_df[\"director\"] != \"null\"]\n\n# Group by director and calculate the maximum stars for each director\ngrouped_df = filtered_df.groupby(\"director\")[\"stars\"].max().reset_index()\n\n# Sort the dataframe by maximum stars in descending order\nsorted_df = grouped_df.sort_values(by=\"stars\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df[\"director\"], sorted_df[\"stars\"])\nplt.xlabel(\"Director\")\nplt.ylabel(\"Maximum Stars\")\nplt.title(\"Maximum Stars by Director\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "What is the movie title with the highest average rating and what is the rating, represented by a line chart?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nMovie = pd.read_sql(\"SELECT * FROM Movie\", conn)\nRating.columns = Rating.columns.str.lower()\nMovie.columns = Movie.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Rating, Movie, on='mid')\n\n# Calculate the average stars for each movie\navg_stars = merged_df.groupby('mid')['stars'].mean()\n\n# Sort the movies by average stars in descending order\nsorted_avg_stars = avg_stars.sort_values(ascending=False)\n\n# Get the movie titles corresponding to the sorted average stars\nmovie_titles = merged_df.loc[merged_df['mid'].isin(sorted_avg_stars.index), 'title']\n\n# Plot the line chart\nplt.plot(movie_titles, sorted_avg_stars)\nplt.xlabel('Movie Title')\nplt.ylabel('Average Stars')\nplt.title('Average Stars for Each Movie')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "For all organizations that have grants of more than 6000 dollars, compare the number of details of the organizations with a bar chart, order by the y axis in descending.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Grants table\ngrants = pd.read_sql(\"SELECT * FROM Grants\", conn)\n\n# Read the Organisations table\norganisations = pd.read_sql(\"SELECT * FROM Organisations\", conn)\n\n# Convert column names to lowercase\ngrants.columns = grants.columns.str.lower()\norganisations.columns = organisations.columns.str.lower()\n\n# merge the grants and organisations tables on organisation_id\nmerged_data = pd.merge(grants, organisations, on=\"organisation_id\")\n\n# group by organisation_details and count the occurrences\ngrouped_data = merged_data.groupby(\"organisation_details\").size().reset_index(name=\"count\")\n\n# sort the data by count in descending order\nsorted_data = grouped_data.sort_values(by=\"count\", ascending=False)\n\n# plot the bar chart\nplt.bar(sorted_data[\"organisation_details\"], sorted_data[\"count\"])\nplt.xlabel(\"Organisation Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Grants by Organisation Details\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "sports_competition",
    "question": "List the position of players and the average number of points of players of each position by a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nplayer.columns = player.columns.str.lower()\n\n# Calculate average points by position\navg_points_by_position = player.groupby('position')['points'].mean()\n\n# Create bar plot\nplt.bar(avg_points_by_position.index, avg_points_by_position.values)\nplt.xlabel('Position')\nplt.ylabel('Average Points')\nplt.title('Average Points by Position')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "List the types of competition and the number of competitions of each type in a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the competition table\ncompetition_df = pd.read_sql(\"SELECT * FROM competition\", conn)\n\n# Convert column names to lowercase\ncompetition_df.columns = competition_df.columns.str.lower()\n\n# Perform the SQL query\nresult = competition_df.groupby('competition_type').size()\n\n# Create the bar plot\nplt.bar(result.index, result.values)\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Type')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "car_1",
    "question": "Draw a bar chart for what are the names and ids of all makers with more than 3 models?, list y axis in asc order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read data from the CAR_MAKERS table\ncar_makers = pd.read_sql(\"SELECT * FROM CAR_MAKERS\", conn)\ncar_makers.columns = map(str.lower, car_makers.columns)\n\n# Read data from the MODEL_LIST table\nmodel_list = pd.read_sql(\"SELECT * FROM MODEL_LIST\", conn)\nmodel_list.columns = map(str.lower, model_list.columns)\n\n# Merge the two tables on the 'id' column\nmerged_data = pd.merge(car_makers, model_list, left_on='id', right_on='maker')\n\n# Sort the merged data by 'id' in ascending order\nsorted_data = merged_data.sort_values('id')\n\n# Create a bar plot of 'fullname' and 'id'\nplt.bar(sorted_data['fullname'], sorted_data['id'])\nplt.xlabel('Car Maker')\nplt.ylabel('ID')\nplt.title('Car Makers and IDs')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Show different locations and the number of performances at each location by a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the performance table\nperformance_df = pd.read_sql(\"SELECT * FROM performance\", conn)\n\n# Convert column names to lowercase\nperformance_df.columns = performance_df.columns.str.lower()\n\n# Group by location and count the number of occurrences\ngrouped_df = performance_df.groupby('location').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['location'], grouped_df['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Performances by Location')\nplt.show()\n\n# Close the database connection\nconn.close()"
  },
  {
    "db_id": "journal_committee",
    "question": "Draw a bar chart of name versus age , and I want to list in desc by the x axis .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\neditor.columns = editor.columns.str.lower()\n\n# Assuming the data is already loaded into a dataframe called 'editor'\n\n# Sort the dataframe by name in descending order\nsorted_df = editor.sort_values(by='name', ascending=False)\n\n# Extract the name and age columns\nname = sorted_df['name']\nage = sorted_df['age']\n\n# Create a bar plot\nplt.bar(name, age)\n\n# Add labels and title\nplt.xlabel('Name')\nplt.ylabel('Age')\nplt.title('Age by Name')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , sort by the sum population in asc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry.columns = country.columns.str.lower()\n\n# Group by governmentform and calculate the sum of population\ngrouped_data = country.groupby('governmentform')['population'].sum()\n\n# Sort the data in ascending order\nsorted_data = grouped_data.sort_values()\n\n# Create a bar plot\nplt.bar(sorted_data.index, sorted_data.values)\n\n# Set the x-axis label\nplt.xlabel('Government Form')\n\n# Set the y-axis label\nplt.ylabel('Population')\n\n# Set the title of the plot\nplt.title('Population by Government Form')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "What are the project ids and the count of tasks for the projects that are detailed as 'omnis' or have at least 3 outcomes? Show the results in a bar chart.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nTasks = pd.read_sql(\"SELECT * FROM Tasks\", conn)\nProjects = pd.read_sql(\"SELECT * FROM Projects\", conn)\nProject_outcomes = pd.read_sql(\"SELECT * FROM Project_outcomes\", conn)\nTasks.columns = Tasks.columns.str.lower()\nProjects.columns = Projects.columns.str.lower()\nProject_outcomes.columns = Project_outcomes.columns.str.lower()\n\n# Joining tables\nmerged_df = pd.merge(Tasks, Projects, on='project_id')\n\n# Filtering data\nfiltered_df = merged_df[(merged_df['project_details'] == 'omnis') | \n                        (merged_df['project_id'].isin(Project_outcomes.groupby('project_id').filter(lambda x: len(x) > 2)['project_id']))]\n\n# Grouping and counting\ngrouped_df = filtered_df.groupby('project_id').size().reset_index(name='count')\n\n# Sorting by count\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plotting bar chart\nplt.bar(sorted_df['project_id'], sorted_df['count'])\nplt.xlabel('Project ID')\nplt.ylabel('Count')\nplt.title('Number of Tasks per Project')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Draw a bar chart for what is the average number of stars that each reviewer awards for a movie?, and show in descending by the Y-axis.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating and Reviewer tables\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nreviewer_df = pd.read_sql(\"SELECT * FROM Reviewer\", conn)\n\n# Convert column names to lowercase\nrating_df.columns = rating_df.columns.str.lower()\nreviewer_df.columns = reviewer_df.columns.str.lower()\n\n# Merge the Rating and Reviewer tables on rID\nmerged_df = pd.merge(rating_df, reviewer_df, on=\"rid\")\n\n# Calculate the average stars for each reviewer\navg_stars_df = merged_df.groupby(\"name\")[\"stars\"].mean().reset_index()\n\n# Sort the dataframe by average stars in descending order\nsorted_df = avg_stars_df.sort_values(\"stars\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df[\"name\"], sorted_df[\"stars\"])\nplt.xlabel(\"Reviewer Name\")\nplt.ylabel(\"Average Stars\")\nplt.title(\"Average Stars by Reviewer\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "A bar chart showing the number of different competition types .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Competition Type Counts')\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "Show the average amount of transactions for different investors . Plot them as scatter chart .",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nTRANSACTIONS = pd.read_sql(\"SELECT * FROM TRANSACTIONS\", conn)\nTRANSACTIONS.columns = TRANSACTIONS.columns.str.lower()\n\n# Group transactions by investor_id and calculate average amount_of_transaction\ngrouped_transactions = TRANSACTIONS.groupby('investor_id')['amount_of_transaction'].mean()\n\n# Convert the grouped transactions to a dataframe\ndf = pd.DataFrame(grouped_transactions).reset_index()\n\n# Scatter plot\nplt.scatter(df['investor_id'], df['amount_of_transaction'])\nplt.xlabel('Investor ID')\nplt.ylabel('Average Amount of Transaction')\nplt.title('Scatter Plot of Average Amount of Transaction by Investor ID')\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "What is the total money requested by entrepreneurs who are taller than 1.85, visualized in a scatter chart?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Joining the entrepreneur and people tables\nmerged_df = pd.merge(entrepreneur, people, on='people_id')\n\n# Filtering for people with height greater than 1.85\nfiltered_df = merged_df[merged_df['height'] > 1.85]\n\n# Grouping by height and calculating total money requested\ngrouped_df = filtered_df.groupby('height').agg({'money_requested': 'sum'}).reset_index()\n\n# Creating scatter plot\nplt.scatter(grouped_df['height'], grouped_df['money_requested'])\nplt.xlabel('Height')\nplt.ylabel('Total Money Requested')\nplt.title('Scatter Plot of Total Money Requested vs Height')\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "What are the task details and the count of tasks for projects that are detailed as 'omnis' or have at least 3 outcomes? Show the information in a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nTasks = pd.read_sql(\"SELECT * FROM Tasks\", conn)\nProjects = pd.read_sql(\"SELECT * FROM Projects\", conn)\nProject_outcomes = pd.read_sql(\"SELECT * FROM Project_outcomes\", conn)\nTasks.columns = Tasks.columns.str.lower()\nProjects.columns = Projects.columns.str.lower()\nProject_outcomes.columns = Project_outcomes.columns.str.lower()\n\n# Merge tasks and projects dataframes\nmerged_df = pd.merge(Tasks, Projects, on='project_id')\n\n# Filter projects with project_details = 'omnis' or project_id in project_outcomes with count > 2\nfiltered_df = merged_df[(merged_df['project_details'] == 'omnis') | \n                        (merged_df['project_id'].isin(Project_outcomes.groupby('project_id').size().loc[lambda x: x > 2].index))]\n\n# Group by task_details and count the number of occurrences\ngrouped_df = filtered_df.groupby('task_details').size().reset_index(name='count')\n\n# Plot pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['task_details'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.title('Task Details Distribution')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Give me a bar for what is the number of players who have points less than 30 for each position?, show y axis from low to high order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the player table\nplayer_df = pd.read_sql(\"SELECT * FROM player\", conn)\n\n# Convert column names to lowercase\nplayer_df.columns = player_df.columns.str.lower()\n\n# Filter the data where points < 30\nfiltered_df = player_df[player_df['points'] < 30]\n\n# Group by position and count the number of players\ngrouped_df = filtered_df.groupby('position').size().reset_index(name='count')\n\n# Sort the dataframe by count in ascending order\nsorted_df = grouped_df.sort_values('count')\n\n# Create a bar plot\nplt.bar(sorted_df['position'], sorted_df['count'])\nplt.xlabel('Position')\nplt.ylabel('Count')\nplt.title('Number of Players with Points < 30 by Position')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Show the title and score of the movie with a bar chart, I want to display in asc by the x-axis.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\nmovie_df.columns = map(str.lower, movie_df.columns)\n\n# Merge the Rating and Movie tables on mID column\nmerged_df = pd.merge(rating_df, movie_df, on='mid')\n\n# Sort the merged dataframe by title column in ascending order\nsorted_df = merged_df.sort_values('title')\n\n# Extract the required columns\ntitle = sorted_df['title']\nstars = sorted_df['stars']\n\n# Create a bar plot\nplt.bar(title, stars)\nplt.xlabel('Movie Title')\nplt.ylabel('Stars')\nplt.title('Movie Ratings')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "csu_1",
    "question": "What is the scatter of the number of faculty members and the number of degrees conferred by the university in 2002?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nfaculty = pd.read_sql(\"SELECT * FROM faculty\", conn)\ndegrees = pd.read_sql(\"SELECT * FROM degrees\", conn)\nfaculty.columns = faculty.columns.str.lower()\ndegrees.columns = degrees.columns.str.lower()\n\n# Merge faculty and degrees dataframes on the 'year' column\nmerged_df = pd.merge(faculty, degrees, on='year')\n\n# Filter the merged dataframe for the year 2002\nfiltered_df = merged_df[merged_df['year'] == 2002]\n\n# Create a scatter plot of faculty vs degrees\nplt.scatter(filtered_df['faculty'], filtered_df['degrees'])\n\n# Set the labels for x and y axes\nplt.xlabel('Faculty')\nplt.ylabel('Degrees')\n\n# Set the title of the plot\nplt.title('Faculty vs Degrees in 2002')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "Show me a line chart of the start dates for grants that have descriptions of Regular and Initial Applications.",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nGrants = pd.read_sql(\"SELECT * FROM Grants\", conn)\nDocuments = pd.read_sql(\"SELECT * FROM Documents\", conn)\nDocument_Types = pd.read_sql(\"SELECT * FROM Document_Types\", conn)\nGrants.columns = Grants.columns.str.lower()\nDocuments.columns = Documents.columns.str.lower()\nDocument_Types.columns = Document_Types.columns.str.lower()\n\n# Merge the tables\nmerged_df = pd.merge(Grants, Documents, on='grant_id')\nmerged_df = pd.merge(merged_df, Document_Types, on='document_type_code')\n\n# Filter the data\nfiltered_df = merged_df[merged_df['document_description'].isin(['Regular', 'Initial Application'])]\n\n# Sort the data\nsorted_df = filtered_df.sort_values('grant_start_date')\n\n# Plot the data\nplt.plot(sorted_df['grant_start_date'], sorted_df['document_description'])\nplt.xlabel('Grant Start Date')\nplt.ylabel('Document Description')\nplt.title('Documents by Grant Start Date')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "For each director, return the director's name together with the highest rating among all of their movies and ignore movies whose director is NULL Could you plot the result with a bar chart?, and I want to list x-axis in ascending order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\nmovie_df.columns = map(str.lower, movie_df.columns)\n\n# Merge the Rating and Movie tables on mID\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Filter out rows with director as \"null\"\nfiltered_df = merged_df[merged_df[\"director\"] != \"null\"]\n\n# Group by director and find the maximum stars for each director\ngrouped_df = filtered_df.groupby(\"director\")[\"stars\"].max().reset_index()\n\n# Sort the dataframe by director in ascending order\nsorted_df = grouped_df.sort_values(\"director\", ascending=True)\n\n# Plot the bar chart\nplt.bar(sorted_df[\"director\"], sorted_df[\"stars\"])\nplt.xlabel(\"Director\")\nplt.ylabel(\"Maximum Stars\")\nplt.title(\"Maximum Stars by Director\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "How many templates with version number later than 5 for each template type code? Give me a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Templates table into a DataFrame\ntemplates_df = pd.read_sql(\"SELECT * FROM Templates\", conn)\n\n# Convert column names to lowercase\ntemplates_df.columns = templates_df.columns.str.lower()\n\n# Filter the DataFrame for version_number > 5\nfiltered_df = templates_df[templates_df['version_number'] > 5]\n\n# Group by Template_Type_Code and count occurrences\ngrouped_df = filtered_df.groupby('template_type_code').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['template_type_code'], autopct='%1.1f%%')\nplt.title('Template Type Distribution')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Return a pie chart on how many movie reviews does each director get?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Movie and Rating tables\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\n\n# Convert column names to lowercase\nmovie_df.columns = movie_df.columns.str.lower()\nrating_df.columns = rating_df.columns.str.lower()\n\n# merge the movie and rating tables on mid\nmerged_df = pd.merge(movie_df, rating_df, on='mid')\n\n# group by director and count the number of movies\ndirector_count = merged_df.groupby('director').size()\n\n# plot the pie chart\nplt.pie(director_count, labels=director_count.index, autopct='%1.1f%%')\nplt.title('Number of Movies by Director')\nplt.show()\n"
  },
  {
    "db_id": "journal_committee",
    "question": "Compare each editors' ages using a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\neditor.columns = editor.columns.str.lower()\n\n# Assuming the data is already loaded into a dataframe called 'editor'\n\n# Selecting the columns 'name' and 'age'\ndf = editor[['name', 'age']]\n\n# Plotting a bar chart\nplt.bar(df['name'], df['age'])\nplt.xlabel('Name')\nplt.ylabel('Age')\nplt.title('Age by Name')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Plot the total number by grouped by competition type as a bar graph , and display names in descending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the number of occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort the dataframe by competition_type in descending order\ncompetition_counts = competition_counts.sort_values('competition_type', ascending=False)\n\n# Create a bar plot\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Type')\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "Please give me a bar chart to show the distribution of results of all music festival, and display by the Y-axis from low to high.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the music_festival table\nmusic_festival = pd.read_sql(\"SELECT * FROM music_festival\", conn)\n\n# Convert column names to lowercase\nmusic_festival.columns = music_festival.columns.str.lower()\n\n# Perform the SQL query\nresult_counts = music_festival.groupby('result').size().reset_index(name='count')\nresult_counts = result_counts.sort_values('count')\n\n# Generate the bar plot\nplt.bar(result_counts['result'], result_counts['count'])\nplt.xlabel('Result')\nplt.ylabel('Count')\nplt.title('Music Festival Result Counts')\nplt.show()"
  },
  {
    "db_id": "scientist_1",
    "question": "How many scientists are assigned to each project, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nassignedto = pd.read_sql(\"SELECT * FROM assignedto\", conn)\nprojects = pd.read_sql(\"SELECT * FROM projects\", conn)\nassignedto.columns = assignedto.columns.str.lower()\nprojects.columns = projects.columns.str.lower()\n\n# Perform the join operation\nresult = pd.merge(assignedto, projects, left_on='project', right_on='code')\n\n# Group by project code and count the number of occurrences\ngrouped = result.groupby('code').size().reset_index(name='count')\n\n# Create a pie chart\nplt.pie(grouped['count'], labels=grouped['code'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Display the chart\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "What is the scatter plot of the count of editors for each age group?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\njournal_committee = pd.read_sql(\"SELECT * FROM journal_committee\", conn)\neditor.columns = editor.columns.str.lower()\njournal_committee.columns = journal_committee.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(editor, journal_committee, on='editor_id')\n\n# Grouping by age and counting\ngrouped_df = merged_df.groupby('age').size().reset_index(name='count')\n\n# Scatter plot\nplt.scatter(grouped_df['age'], grouped_df['count'])\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.title('Count of Editors by Age')\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Show sum of budget in different year and group by department creation time with a line chart .",
    "chart": "Line",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = department.columns.str.lower()\n\n# Assuming 'department' is a DataFrame containing the table data\n\n# Grouping the data by 'creation' and calculating the sum of 'budget_in_billions'\ngrouped_data = department.groupby('creation')['budget_in_billions'].sum()\n\n# Converting the grouped data into a DataFrame\ndf = pd.DataFrame({'creation': grouped_data.index, 'sum_budget_in_billions': grouped_data.values})\n\n# Sorting the DataFrame by 'creation' column\ndf = df.sort_values('creation')\n\n# Plotting the line chart\nplt.plot(df['creation'], df['sum_budget_in_billions'])\nplt.xlabel('Creation')\nplt.ylabel('Sum of Budget (in billions)')\nplt.title('Sum of Budget by Creation')\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "Bar chart of the total number from each party , and could you order by the bars in asc ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\nrepresentative.columns = representative.columns.str.lower()\n\n# Group by party and count the number of representatives in each party\nparty_counts = representative.groupby('party').size().reset_index(name='count')\n\n# Sort the parties in ascending order\nparty_counts = party_counts.sort_values('party')\n\n# Create a bar plot\nplt.bar(party_counts['party'], party_counts['count'])\nplt.xlabel('Party')\nplt.ylabel('Count')\nplt.title('Number of Representatives by Party')\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Give me the names and prices of furnitures which some companies are manufacturing with a bar chart, and I want to list x-axis in ascending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the furniture table\nfurniture = pd.read_sql(\"SELECT * FROM furniture\", conn)\nfurniture.columns = map(str.lower, furniture.columns)\n\n# Read the furniture_manufacte table\nfurniture_manufacte = pd.read_sql(\"SELECT * FROM furniture_manufacte\", conn)\nfurniture_manufacte.columns = map(str.lower, furniture_manufacte.columns)\n\n# Merge the two tables on Furniture_ID\nmerged_data = pd.merge(furniture, furniture_manufacte, on=\"furniture_id\")\n\n# Sort the merged data by Name in ascending order\nsorted_data = merged_data.sort_values(by=\"name\")\n\n# Extract the required columns\nname = sorted_data[\"name\"]\nprice_in_dollar = sorted_data[\"price_in_dollar\"]\n\n# Create a bar plot\nplt.bar(name, price_in_dollar)\nplt.xlabel(\"Name\")\nplt.ylabel(\"Price in Dollar\")\nplt.title(\"Furniture Prices\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes' by a bar chart, and rank from high to low by the mean num employees please.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the department table\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = map(str.lower, department.columns)\n\n# Read the management table\nmanagement = pd.read_sql(\"SELECT * FROM management\", conn)\nmanagement.columns = map(str.lower, management.columns)\n\n# Merge the department and management tables\nmerged_data = pd.merge(department, management, on=\"department_id\")\n\n# Filter the merged data for temporary acting departments\ntemporary_acting_data = merged_data[merged_data[\"temporary_acting\"] == \"Yes\"]\n\n# Calculate the average number of employees per department\navg_employees = temporary_acting_data.groupby(\"name\")[\"num_employees\"].mean().reset_index()\n\n# Sort the data by average number of employees in descending order\nsorted_data = avg_employees.sort_values(\"num_employees\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"name\"], sorted_data[\"num_employees\"])\nplt.xlabel(\"Department\")\nplt.ylabel(\"Average Number of Employees\")\nplt.title(\"Average Number of Employees in Temporary Acting Departments\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return a bar chart on what are the different template type codes , and how many templates correspond to each ? , and list by the Template_Type_Code in descending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nTemplates = pd.read_sql(\"SELECT * FROM Templates\", conn)\nTemplates.columns = Templates.columns.str.lower()\n\n# Grouping the data by template_type_code and counting the occurrences\ntemplate_counts = Templates.groupby('template_type_code').size().reset_index(name='count')\n\n# Sorting the data by template_type_code in descending order\ntemplate_counts = template_counts.sort_values('template_type_code', ascending=False)\n\n# Creating the bar plot\nplt.bar(template_counts['template_type_code'], template_counts['count'])\nplt.xlabel('Template Type Code')\nplt.ylabel('Count')\nplt.title('Template Type Code Counts')\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "What is the distribution of grant amounts for documents with a grant amount greater than 5000, granted by organisations of type 'Research', grouped by the send date of the documents, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ndocuments = pd.read_sql(\"SELECT * FROM documents\", conn)\nGrants = pd.read_sql(\"SELECT * FROM Grants\", conn)\nOrganisations = pd.read_sql(\"SELECT * FROM Organisations\", conn)\norganisation_Types = pd.read_sql(\"SELECT * FROM organisation_Types\", conn)\ndocuments.columns = documents.columns.str.lower()\nGrants.columns = Grants.columns.str.lower()\nOrganisations.columns = Organisations.columns.str.lower()\norganisation_Types.columns = organisation_Types.columns.str.lower()\n\n# Merge tables\nmerged_data = pd.merge(documents, Grants, on='grant_id')\nmerged_data = pd.merge(merged_data, Organisations, on='organisation_id')\nmerged_data = pd.merge(merged_data, organisation_Types, on='organisation_type')\n\n# Filter data\nfiltered_data = merged_data[(merged_data['grant_amount'] > 5000) & (merged_data['organisation_type_description'] == 'Research')]\n\n# Group by sent_date and calculate sum of grant_amount\ngrouped_data = filtered_data.groupby('sent_date')['grant_amount'].sum().reset_index()\n\n# Plot pie chart\nplt.pie(grouped_data['grant_amount'], labels=grouped_data['sent_date'], autopct='%1.1f%%')\nplt.title('Total Grant Amount by Sent Date')\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "Show me a bar chart of the organization ids and their total grant amounts, where the total grant amount is greater than 6000 dollars. Please order the bars in descending order based on the total grant amount.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nGrants = pd.read_sql(\"SELECT * FROM Grants\", conn)\nOrganisations = pd.read_sql(\"SELECT * FROM Organisations\", conn)\nGrants.columns = Grants.columns.str.lower()\nOrganisations.columns = Organisations.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Grants, Organisations, on='organisation_id')\n\n# Group by organisation_id and calculate the total grant amount\ngrouped_df = merged_df.groupby('organisation_id').agg({'grant_amount': 'sum'}).reset_index()\n\n# Filter the organisations with total grant amount greater than 6000\nfiltered_df = grouped_df[grouped_df['grant_amount'] > 6000]\n\n# Sort the dataframe by total grant amount in descending order\nsorted_df = filtered_df.sort_values('grant_amount', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['organisation_id'], sorted_df['grant_amount'])\nplt.xlabel('Organisation ID')\nplt.ylabel('Total Grant Amount')\nplt.title('Total Grant Amount by Organisation')\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "Who is the entrepreneur with the highest weight, and can you represent their weight using a scatter chart?",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Merge the entrepreneur and people dataframes\nmerged_df = pd.merge(entrepreneur, people, on='people_id')\n\n# Create a scatter plot\nplt.scatter(merged_df['name'], merged_df['weight'])\n\n# Set the x-axis label\nplt.xlabel('Name')\n\n# Set the y-axis label\nplt.ylabel('Weight')\n\n# Set the title\nplt.title('Scatter Plot of Name vs Weight')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Visualize a bar chart for how many students play each sport ? , and sort bars in descending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nSportsinfo.columns = Sportsinfo.columns.str.lower()\n\n# Grouping the data by sportname and counting the occurrences\nsport_counts = Sportsinfo.groupby('sportname').size().reset_index(name='count')\n\n# Sorting the data by sportname in descending order\nsport_counts = sport_counts.sort_values('sportname', ascending=False)\n\n# Creating the bar plot\nplt.bar(sport_counts['sportname'], sport_counts['count'])\nplt.xlabel('Sport Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Sport Name')\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "A bar chart for showing the number of the dates of performances with attending members whose roles are \"Violin\".",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the tables from the database\nmember_attendance = pd.read_sql(\"SELECT * FROM member_attendance\", conn)\nmember = pd.read_sql(\"SELECT * FROM member\", conn)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\n\n# Convert column names to lowercase\nmember_attendance.columns = member_attendance.columns.str.lower()\nmember.columns = member.columns.str.lower()\nperformance.columns = performance.columns.str.lower()\n\n# Merge the tables\nmerged_data = pd.merge(member_attendance, member, on=\"member_id\")\nmerged_data = pd.merge(merged_data, performance, on=\"performance_id\")\n\n# Filter the data for role \"Violin\"\nfiltered_data = merged_data[merged_data[\"role\"] == \"violin\"]\n\n# Group by date and count the occurrences\ngrouped_data = filtered_data.groupby(\"date\").size().reset_index(name=\"count\")\n\n# Plot the bar chart\nplt.bar(grouped_data[\"date\"], grouped_data[\"count\"])\nplt.xlabel(\"Date\")\nplt.ylabel(\"Count\")\nplt.title(\"Attendance Count by Date for Violin Role\")\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Show different locations and the number of performances at each location Visualize by bar chart , I want to display from low to high by the x-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\nperformance.columns = performance.columns.str.lower()\n\n# Group by location and count the number of occurrences\nlocation_counts = performance.groupby('location').size().reset_index(name='count')\n\n# Sort the data by location in ascending order\nlocation_counts = location_counts.sort_values('location')\n\n# Create a bar plot\nplt.bar(location_counts['location'], location_counts['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Performances by Location')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes', and could you rank in ascending by the Y-axis?",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the department table\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = map(str.lower, department.columns)\n\n# Read the management table\nmanagement = pd.read_sql(\"SELECT * FROM management\", conn)\nmanagement.columns = map(str.lower, management.columns)\n\n# Merge the department and management tables\nmerged_data = pd.merge(department, management, on=\"department_id\")\n\n# Filter the merged data for temporary acting departments\nfiltered_data = merged_data[merged_data[\"temporary_acting\"] == \"Yes\"]\n\n# Group by department name and calculate the sum of num_employees\ngrouped_data = filtered_data.groupby(\"name\")[\"num_employees\"].sum().reset_index()\n\n# Sort the data by the sum of num_employees in ascending order\nsorted_data = grouped_data.sort_values(\"num_employees\")\n\n# Plot the bar chart\nplt.bar(sorted_data[\"name\"], sorted_data[\"num_employees\"])\nplt.xlabel(\"Department Name\")\nplt.ylabel(\"Total Number of Employees\")\nplt.title(\"Total Number of Employees in Temporary Acting Departments\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "Give me a bar chart , that group by location and count them .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nparty = pd.read_sql(\"SELECT * FROM party\", conn)\nparty.columns = party.columns.str.lower()\n\n# Grouping the data by location and counting the occurrences\nlocation_counts = party.groupby('location').size().reset_index(name='count')\n\n# Creating the bar plot\nplt.bar(location_counts['location'], location_counts['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Party Count by Location')\nplt.show()"
  },
  {
    "db_id": "school_player",
    "question": "For each denomination , return the denomination and the count of schools with that denomination Visualize by bar chart , list from low to high by the Y .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nschool = pd.read_sql(\"SELECT * FROM school\", conn)\nschool.columns = school.columns.str.lower()\n\n# Group by denomination and count the number of occurrences\ndenomination_counts = school.groupby('denomination').size().reset_index(name='count')\n\n# Sort the counts in ascending order\ndenomination_counts = denomination_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(denomination_counts['denomination'], denomination_counts['count'])\nplt.xlabel('Denomination')\nplt.ylabel('Count')\nplt.title('Number of Schools by Denomination')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "How many furniture types are produced by each manufacturer, and what are the company names, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmanufacturer = pd.read_sql(\"SELECT * FROM manufacturer\", conn)\nfurniture_manufacte = pd.read_sql(\"SELECT * FROM furniture_manufacte\", conn)\nmanufacturer.columns = manufacturer.columns.str.lower()\nfurniture_manufacte.columns = furniture_manufacte.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(manufacturer, furniture_manufacte, on='manufacturer_id')\n\n# Group by manufacturer name and count the number of occurrences\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['name'], sorted_df['count'])\nplt.xlabel('Manufacturer')\nplt.ylabel('Count')\nplt.title('Number of Furniture by Manufacturer')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "What are the renowned titles of the artists linked to volumes with over 2 weeks at the pinnacle, and what is the frequency of each title's appearance? Show the results in a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nvolume = pd.read_sql(\"SELECT * FROM volume\", conn)\nartist.columns = artist.columns.str.lower()\nvolume.columns = volume.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(artist, volume, on='artist_id')\n\n# Filter the data based on the condition\nfiltered_df = merged_df[merged_df['weeks_on_top'] > 2]\n\n# Group by famous_title and count the occurrences\ngrouped_df = filtered_df.groupby('famous_title').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['famous_title'], grouped_df['count'])\nplt.xlabel('Famous Title')\nplt.ylabel('Count')\nplt.title('Number of Occurrences of Famous Titles')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "voter_2",
    "question": "What is the count of students for each distinct age who have secretary votes in the fall election cycle, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nVOTING_RECORD = pd.read_sql(\"SELECT * FROM VOTING_RECORD\", conn)\nSTUDENT.columns = STUDENT.columns.str.lower()\nVOTING_RECORD.columns = VOTING_RECORD.columns.str.lower()\n\n# Merge the STUDENT and VOTING_RECORD dataframes\nmerged_df = pd.merge(STUDENT, VOTING_RECORD, left_on='stuid', right_on='secretary_vote')\n\n# Filter the merged dataframe for 'fall' election cycle\nfiltered_df = merged_df[merged_df['election_cycle'] == 'Fall']\n\n# Group by age and count the number of records\ngrouped_df = filtered_df.groupby('age').size().reset_index(name='count')\n\n# Sort the dataframe by age in ascending order\nsorted_df = grouped_df.sort_values('age')\n\n# Plot the bar chart\nplt.bar(sorted_df['age'], sorted_df['count'])\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.title('Number of Students by Age')\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "Show me a bar chart displaying the project ID and the count of outcomes for each project in the database, sorted in ascending order by project ID.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nTasks = pd.read_sql(\"SELECT * FROM Tasks\", conn)\nProjects = pd.read_sql(\"SELECT * FROM Projects\", conn)\nProject_outcomes = pd.read_sql(\"SELECT * FROM Project_outcomes\", conn)\nTasks.columns = Tasks.columns.str.lower()\nProjects.columns = Projects.columns.str.lower()\nProject_outcomes.columns = Project_outcomes.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(pd.merge(Tasks, Projects, on='project_id'), Project_outcomes, on='project_id')\n\n# Group by project_id and count\ngrouped_df = merged_df.groupby('project_id').size().reset_index(name='count')\n\n# Sort by project_id\nsorted_df = grouped_df.sort_values('project_id')\n\n# Plot bar chart\nplt.bar(sorted_df['project_id'], sorted_df['count'])\nplt.xlabel('Project ID')\nplt.ylabel('Count')\nplt.title('Number of Tasks per Project')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "What is the number of types of competition ?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Competition Type Counts')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all template type codes and number of templates for each in a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Templates table into a DataFrame\ntemplates_df = pd.read_sql(\"SELECT * FROM Templates\", conn)\n\n# Convert column names to lowercase\ntemplates_df.columns = templates_df.columns.str.lower()\n\n# Perform the SQL query and group by template_type_code\ngrouped_df = templates_df.groupby('template_type_code').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['template_type_code'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "coffee_shop",
    "question": "A bar chart showing the average purchase time for each coffee shop address.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the member table\nmember_df = pd.read_sql(\"SELECT * FROM member\", conn)\n\n# Convert column names to lowercase\nmember_df.columns = member_df.columns.str.lower()\n\n# Perform the query\nresult_df = member_df.groupby(\"address\")[\"time_of_purchase\"].mean().reset_index()\nresult_df = result_df.sort_values(\"time_of_purchase\")\n\n# Generate the bar plot\nplt.bar(result_df[\"address\"], result_df[\"time_of_purchase\"])\nplt.xlabel(\"Address\")\nplt.ylabel(\"Average Time of Purchase\")\nplt.title(\"Average Time of Purchase by Address\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Show different locations and the number of performances at each location .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\nperformance.columns = performance.columns.str.lower()\n\n# Group by location and count the number of occurrences\nlocation_counts = performance.groupby('location').size()\n\n# Create a pie chart\nplt.pie(location_counts, labels=location_counts.index, autopct='%1.1f%%')\nplt.axis('equal')\n\n# Display the chart\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Show me a bar chart of the number of reviews given by reviewers who have rated 3 or 4 stars, along with their names.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nReviewer = pd.read_sql(\"SELECT * FROM Reviewer\", conn)\nRating.columns = Rating.columns.str.lower()\nReviewer.columns = Reviewer.columns.str.lower()\n\n# Merge Rating and Reviewer tables\nmerged_df = pd.merge(Rating, Reviewer, on='rid')\n\n# Filter rows with stars equal to 3 or 4\nfiltered_df = merged_df[merged_df['stars'].isin([3, 4])]\n\n# Group by reviewer name and count the number of reviews\ngrouped_df = filtered_df.groupby('name').size().reset_index(name='num_reviews')\n\n# Sort by num_reviews in descending order\nsorted_df = grouped_df.sort_values('num_reviews', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['name'], sorted_df['num_reviews'])\nplt.xlabel('Reviewer Name')\nplt.ylabel('Number of Reviews')\nplt.title('Number of Reviews by Reviewer')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Return a bar on what are the types of competition and number of competitions for that type?, I want to display total number in desc order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the competition table\ncompetition_df = pd.read_sql(\"SELECT * FROM competition\", conn)\n\n# Convert column names to lowercase\ncompetition_df.columns = competition_df.columns.str.lower()\n\n# Perform the SQL query\nresult = competition_df.groupby('competition_type').size().reset_index(name='count').sort_values('count', ascending=False)\n\n# Generate the bar plot\nplt.bar(result['competition_type'], result['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Competition Type Count')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "For each position , what is the average number of points for players in that position Plot them as bar chart , order by the x axis in descending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nplayer.columns = player.columns.str.lower()\n\n# Calculate average points by position\navg_points = player.groupby('position')['points'].mean()\n\n# Sort positions in descending order\navg_points = avg_points.sort_index(ascending=False)\n\n# Create bar plot\nplt.bar(avg_points.index, avg_points.values)\n\n# Set labels and title\nplt.xlabel('Position')\nplt.ylabel('Average Points')\nplt.title('Average Points by Position')\n\n# Show plot\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "What is the name and rating count of each reviewer who has rated 3 or more movies, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nReviewer = pd.read_sql(\"SELECT * FROM Reviewer\", conn)\nRating.columns = Rating.columns.str.lower()\nReviewer.columns = Reviewer.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Rating, Reviewer, on='rid')\n\n# Group by reviewer name and count the number of ratings\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Filter the reviewers with count >= 3\nfiltered_df = grouped_df[grouped_df['count'] >= 3]\n\n# Plot the bar chart\nplt.bar(filtered_df['name'], filtered_df['count'])\nplt.xlabel('Reviewer Name')\nplt.ylabel('Count')\nplt.title('Number of Ratings by Reviewer')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "What are the songs in volumes associated with the artist aged 32 or older, and how many times each song appears in the volumes? Show the results in a bar chart.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nvolume = pd.read_sql(\"SELECT * FROM volume\", conn)\nartist.columns = artist.columns.str.lower()\nvolume.columns = volume.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(artist, volume, on='artist_id')\n\n# Filter the data based on age condition\nfiltered_df = merged_df[merged_df['age'] >= 32]\n\n# Group by song and count the occurrences\ngrouped_df = filtered_df.groupby('song').size().reset_index(name='count')\n\n# Sort the data by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['song'], sorted_df['count'])\nplt.xlabel('Song')\nplt.ylabel('Count')\nplt.title('Number of Songs by Artist')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "Create a bar chart showing how many location across location , sort X from low to high order please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nparty = pd.read_sql(\"SELECT * FROM party\", conn)\nparty.columns = party.columns.str.lower()\n\n# Group by location and count the occurrences\nlocation_counts = party.groupby('location').size().reset_index(name='count')\n\n# Sort by location in ascending order\nlocation_counts = location_counts.sort_values('location')\n\n# Create bar plot\nplt.bar(location_counts['location'], location_counts['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Party Count by Location')\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "How many representatives in each party? Visualize with a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the representative table\nrepresentative_df = pd.read_sql(\"SELECT * FROM representative\", conn)\n\n# Convert column names to lowercase\nrepresentative_df.columns = representative_df.columns.str.lower()\n\n# Perform the SQL query\nparty_counts = representative_df.groupby('party').size()\n\n# Create a pie chart\nplt.pie(party_counts, labels=party_counts.index, autopct='%1.1f%%')\nplt.title('Party Distribution')\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "Show me a bar chart displaying the names of representatives and their corresponding votes, ranked in descending order of votes.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nelection = pd.read_sql(\"SELECT * FROM election\", conn)\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\nelection.columns = election.columns.str.lower()\nrepresentative.columns = representative.columns.str.lower()\n\n# Perform the join operation\nresult = pd.merge(election, representative, on='representative_id')\n\n# Sort the result by votes in descending order\nresult = result.sort_values(by='votes', ascending=False)\n\n# Create the bar plot\nplt.bar(result['name'], result['votes'])\nplt.xlabel('Representative')\nplt.ylabel('Votes')\nplt.title('Votes by Representative')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "how many entrepreneurs correspond to each investor ? , and sort Y in asc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\n\n# Grouping the data by 'investor' and counting the occurrences\ngrouped_data = entrepreneur.groupby('investor').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nsorted_data = grouped_data.sort_values('count')\n\n# Creating the bar plot\nplt.bar(sorted_data['investor'], sorted_data['count'])\nplt.xlabel('Investor')\nplt.ylabel('Count')\nplt.title('Number of Entrepreneurs by Investor')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Show the number of different competition types with a bar graph , and I want to display from high to low by the Competition_type .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort by competition_type in descending order\ncompetition_counts = competition_counts.sort_values('competition_type', ascending=False)\n\n# Plot the bar chart\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Competition Type Counts')\nplt.show()"
  },
  {
    "db_id": "scientist_1",
    "question": "What is the name and count of scientists assigned to the project with the greatest number of scientists assigned, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nprojects = pd.read_sql(\"SELECT * FROM projects\", conn)\nassignedto = pd.read_sql(\"SELECT * FROM assignedto\", conn)\nprojects.columns = projects.columns.str.lower()\nassignedto.columns = assignedto.columns.str.lower()\n\n# Merge projects and assignedto tables\nmerged_df = pd.merge(projects, assignedto, left_on='code', right_on='project')\n\n# Group by project and count the number of scientists assigned\nscientists_assigned = merged_df.groupby('project')['name'].count().reset_index()\nscientists_assigned = scientists_assigned.rename(columns={'name': 'scientists_assigned'})\n\n# Sort by scientists_assigned in descending order and select the top 1\ntop_project = scientists_assigned.sort_values('scientists_assigned', ascending=False).head(1)\n\n# Visualize the result using a bar chart\nplt.bar(top_project['project'], top_project['scientists_assigned'])\nplt.xlabel('Project')\nplt.ylabel('Scientists Assigned')\nplt.title('Number of Scientists Assigned to Each Project')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show the number of template type code from each template type code, I want to sort in ascending by the Y-axis please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Templates table into a DataFrame\ntemplates_df = pd.read_sql(\"SELECT * FROM Templates\", conn)\n\n# Convert column names to lowercase\ntemplates_df.columns = templates_df.columns.str.lower()\n\n# Group by Template_Type_Code and count the occurrences\ngrouped_df = templates_df.groupby('template_type_code').size().reset_index(name='count')\n\n# Sort the DataFrame by count in ascending order\nsorted_df = grouped_df.sort_values('count')\n\n# Create a bar plot\nplt.bar(sorted_df['template_type_code'], sorted_df['count'])\nplt.xlabel('Template Type Code')\nplt.ylabel('Count')\nplt.title('Number of Templates by Template Type Code')\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "What are the different parties of representative ? Show the party name and the number of representatives in each party .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\nrepresentative.columns = representative.columns.str.lower()\n\n# Group by party and count the number of representatives\nparty_counts = representative.groupby('party').size()\n\n# Create a bar plot\nplt.bar(party_counts.index, party_counts.values)\n\n# Set the labels and title\nplt.xlabel('Party')\nplt.ylabel('Count')\nplt.title('Number of Representatives by Party')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "What is the number of types of competition ? , I want to display X-axis from high to low order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort by competition_type in descending order\ncompetition_counts = competition_counts.sort_values('competition_type', ascending=False)\n\n# Plot the bar chart\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Competition Type Counts')\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "What are the number of the descriptions of all the project outcomes?, and I want to show by the bar in ascending.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Research_outcomes table\nresearch_outcomes = pd.read_sql(\"SELECT * FROM Research_outcomes\", conn)\nresearch_outcomes.columns = map(str.lower, research_outcomes.columns)\n\n# Read the Project_outcomes table\nproject_outcomes = pd.read_sql(\"SELECT * FROM Project_outcomes\", conn)\nproject_outcomes.columns = map(str.lower, project_outcomes.columns)\n\n# Merge the two tables on outcome_code\nmerged_data = pd.merge(research_outcomes, project_outcomes, on=\"outcome_code\")\n\n# Perform the SQL query and group by outcome_description\nresult = merged_data.groupby(\"outcome_description\").size().reset_index(name=\"count\")\nresult = result.sort_values(\"outcome_description\")\n\n# Plot the bar chart\nplt.bar(result[\"outcome_description\"], result[\"count\"])\nplt.xlabel(\"Outcome Description\")\nplt.ylabel(\"Count\")\nplt.title(\"Bar Chart of Outcome Descriptions\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "Show the total number of the first year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart, and show by the the number of first year in ascending.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the party table\nparty_df = pd.read_sql(\"SELECT * FROM party\", conn)\n\n# Convert column names to lowercase\nparty_df.columns = party_df.columns.str.lower()\n\n# Filter the data based on Party_Theme\nfiltered_df = party_df[(party_df['party_theme'] == 'Spring') | (party_df['party_theme'] == 'Teqnology')]\n\n# Group by First_year and count the occurrences\ngrouped_df = filtered_df.groupby('first_year').size().reset_index(name='count')\n\n# Sort the data by count in ascending order\nsorted_df = grouped_df.sort_values('count', ascending=True)\n\n# Create a bar plot\nplt.bar(sorted_df['first_year'], sorted_df['count'])\nplt.xlabel('First Year')\nplt.ylabel('Count')\nplt.title('Number of Parties by First Year')\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "Plot how many party by grouped by party as a bar graph",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\nrepresentative.columns = representative.columns.str.lower()\n\n# Group by party and count the number of representatives in each party\nparty_counts = representative.groupby('party').size()\n\n# Create a bar plot\nplt.bar(party_counts.index, party_counts.values)\n\n# Set the labels and title\nplt.xlabel('Party')\nplt.ylabel('Count')\nplt.title('Number of Representatives by Party')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return a bar chart showing the number of templates for each template type code.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Templates table into a DataFrame\ntemplates_df = pd.read_sql(\"SELECT * FROM Templates\", conn)\n\n# Convert column names to lowercase\ntemplates_df.columns = templates_df.columns.str.lower()\n\n# Group by Template_Type_Code and count the occurrences\ngrouped_df = templates_df.groupby('template_type_code').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['template_type_code'], grouped_df['count'])\nplt.xlabel('Template Type Code')\nplt.ylabel('Count')\nplt.title('Number of Templates by Template Type Code')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "What is the official language used in the country the name of whose head of state is Beatrix, and count them by a bar chart, and order by the total number from high to low.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read data from the \"country\" table\ncountry_data = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry_data.columns = map(str.lower, country_data.columns)\n\n# Read data from the \"countrylanguage\" table\ncountrylanguage_data = pd.read_sql(\"SELECT * FROM countrylanguage\", conn)\ncountrylanguage_data.columns = map(str.lower, countrylanguage_data.columns)\n\n# Merge the two tables based on the common column \"code\"\nmerged_data = pd.merge(country_data, countrylanguage_data, left_on=\"code\", right_on=\"countrycode\")\n\n# Filter the merged data based on the conditions\nfiltered_data = merged_data[(merged_data[\"headofstate\"] == \"Beatrix\") & (merged_data[\"isofficial\"] == \"T\")]\n\n# Group the filtered data by language and count the occurrences\ngrouped_data = filtered_data.groupby(\"language\").size().reset_index(name=\"count\")\n\n# Sort the grouped data by count in descending order\nsorted_data = grouped_data.sort_values(by=\"count\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"language\"], sorted_data[\"count\"])\nplt.xlabel(\"Language\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Countries with Official Language by Language\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "What is the count of transactions for each investor who has at least two transactions with type code \"SALE\" over time?",
    "chart": "Line",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nINVESTORS = pd.read_sql(\"SELECT * FROM INVESTORS\", conn)\nTRANSACTIONS = pd.read_sql(\"SELECT * FROM TRANSACTIONS\", conn)\nINVESTORS.columns = INVESTORS.columns.str.lower()\nTRANSACTIONS.columns = TRANSACTIONS.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(INVESTORS, TRANSACTIONS, on='investor_id')\n\n# Filter the transactions for sale type\nfiltered_df = merged_df[merged_df['transaction_type_code'] == 'SALE']\n\n# Group by investor_id and count the number of transactions\ngrouped_df = filtered_df.groupby('investor_id').size().reset_index(name='count')\n\n# Sort the dataframe by count\nsorted_df = grouped_df.sort_values('count')\n\n# Plot the line chart\nplt.plot(sorted_df['investor_id'], sorted_df['count'])\nplt.xlabel('Investor ID')\nplt.ylabel('Count')\nplt.title('Number of Sales Transactions per Investor')\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Return a bar chart on how many musicals has each nominee been nominated for ? , order Y-axis in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Group by nominee and count the occurrences\ngrouped = musical.groupby('nominee').size().reset_index(name='count')\n\n# Sort by count in ascending order\nsorted_grouped = grouped.sort_values('count')\n\n# Create bar plot\nplt.bar(sorted_grouped['nominee'], sorted_grouped['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Show me a bar chart displaying the last names of students who are on scholarship, along with the count of how many students have each last name, in descending order of the count.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nStudent = pd.read_sql(\"SELECT * FROM Student\", conn)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nStudent.columns = Student.columns.str.lower()\nSportsinfo.columns = Sportsinfo.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Student, Sportsinfo, on='stuid')\n\n# Filter the data based on the condition\nfiltered_df = merged_df[merged_df['onscholarship'] == 'Y']\n\n# Group by lname and count the number of occurrences\ngrouped_df = filtered_df.groupby('lname').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['lname'], sorted_df['count'])\nplt.xlabel('Last Name')\nplt.ylabel('Count')\nplt.title('Number of Students on Scholarship by Last Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "scientist_1",
    "question": "Show me a bar chart displaying the count of scientists assigned to each project that requires more than 300 hours.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nprojects = pd.read_sql(\"SELECT * FROM projects\", conn)\nassignedto = pd.read_sql(\"SELECT * FROM assignedto\", conn)\nprojects.columns = projects.columns.str.lower()\nassignedto.columns = assignedto.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(projects, assignedto, left_on='code', right_on='project')\n\n# Filter the data based on the condition\nfiltered_df = merged_df[merged_df['hours'] > 300]\n\n# Group the data and count the occurrences\ngrouped_df = filtered_df.groupby('scientist').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['scientist'], grouped_df['count'])\nplt.xlabel('Scientist')\nplt.ylabel('Count')\nplt.title('Number of Projects with Hours > 300 by Scientist')\nplt.show()"
  },
  {
    "db_id": "riding_club",
    "question": "Compare the distribution of the players' gender using a bar chart, rank by the total number in ascending.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the player table\nplayer_df = pd.read_sql(\"SELECT * FROM player\", conn)\n\n# Convert column names to lowercase\nplayer_df.columns = player_df.columns.str.lower()\n\n# Perform the SQL query\ngender_count = player_df.groupby('gender').size().reset_index(name='count').sort_values('count')\n\n# Create the bar plot\nplt.bar(gender_count['gender'], gender_count['count'])\nplt.xlabel('Gender')\nplt.ylabel('Count')\nplt.title('Gender Distribution')\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "Show the average of population from each status",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncity.columns = city.columns.str.lower()\n\n# Group by status and calculate average population\ngrouped_city = city.groupby('status')['population'].mean()\n\n# Convert the grouped data to a dataframe\ndf = pd.DataFrame(grouped_city).reset_index()\n\n# Plot the bar chart\nplt.bar(df['status'], df['population'])\nplt.xlabel('Status')\nplt.ylabel('Average Population')\nplt.title('Average Population by Status')\nplt.show()"
  },
  {
    "db_id": "school_player",
    "question": "For each denomination , return the denomination and the count of schools with that denomination . Visualize by pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nschool = pd.read_sql(\"SELECT * FROM school\", conn)\nschool.columns = school.columns.str.lower()\n\n# Grouping the data by denomination and counting the number of occurrences\ndenomination_counts = school.groupby('denomination').size()\n\n# Creating a pie chart\nplt.pie(denomination_counts, labels=denomination_counts.index, autopct='%1.1f%%')\nplt.title('Denomination Distribution')\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "Visualize a bar chart to show editors' names and their ages , and I want to sort from low to high by the Name .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\neditor.columns = editor.columns.str.lower()\n\n# Assuming the data is already loaded into a dataframe called 'editor'\n\n# Sort the dataframe by name in ascending order\nsorted_df = editor.sort_values(by='name')\n\n# Extract the name and age columns\nname = sorted_df['name']\nage = sorted_df['age']\n\n# Create a bar plot\nplt.bar(name, age)\n\n# Set the x-axis label\nplt.xlabel('Name')\n\n# Set the y-axis label\nplt.ylabel('Age')\n\n# Set the title of the plot\nplt.title('Age by Name')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Compare the prices of furnitures which some companies are manufacturing by each name using a bar chart, show from low to high by the Name.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the furniture table\nfurniture = pd.read_sql(\"SELECT * FROM furniture\", conn)\nfurniture.columns = map(str.lower, furniture.columns)\n\n# Read the furniture_manufacte table\nfurniture_manufacte = pd.read_sql(\"SELECT * FROM furniture_manufacte\", conn)\nfurniture_manufacte.columns = map(str.lower, furniture_manufacte.columns)\n\n# Merge the two tables on Furniture_ID\nmerged_data = pd.merge(furniture, furniture_manufacte, on=\"furniture_id\")\n\n# Sort the merged data by Name in ascending order\nsorted_data = merged_data.sort_values(by=\"name\")\n\n# Extract the required columns\nname = sorted_data[\"name\"]\nprice_in_dollar = sorted_data[\"price_in_dollar\"]\n\n# Create a bar plot\nplt.bar(name, price_in_dollar)\nplt.xlabel(\"Name\")\nplt.ylabel(\"Price in Dollar\")\nplt.title(\"Furniture Prices\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "Show me a bar chart displaying the count of volumes for each issue date by the artist named Gorgoroth.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nvolume = pd.read_sql(\"SELECT * FROM volume\", conn)\nartist.columns = artist.columns.str.lower()\nvolume.columns = volume.columns.str.lower()\n\n# Perform the join operation\ndf = pd.merge(artist, volume, on='artist_id')\n\n# Filter the data for artist 'Gorgoroth'\ndf_gorgoroth = df[df['artist'] == 'Gorgoroth']\n\n# Group by issue_date and count the number of occurrences\ndf_count = df_gorgoroth.groupby('issue_date').size().reset_index(name='count')\n\n# Sort the data by count in descending order\ndf_count = df_count.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(df_count['issue_date'], df_count['count'])\nplt.xlabel('Issue Date')\nplt.ylabel('Count')\nplt.title('Number of volumes by issue date for artist \"gorgoroth\"')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "Return the lot details of lots that belong to investors with details \"l\", and count them by a bar chart, and order in ascending by the Y-axis.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the INVESTORS table\ninvestors = pd.read_sql(\"SELECT * FROM INVESTORS\", conn)\ninvestors.columns = map(str.lower, investors.columns)\n\n# Read the LOTS table\nlots = pd.read_sql(\"SELECT * FROM LOTS\", conn)\nlots.columns = map(str.lower, lots.columns)\n\n# Merge the INVESTORS and LOTS tables on investor_id\nmerged_data = pd.merge(investors, lots, on=\"investor_id\")\n\n# Filter the merged data based on Investor_details\nfiltered_data = merged_data[merged_data[\"investor_details\"] == \"l\"]\n\n# Group by lot_details and count the occurrences\ngrouped_data = filtered_data.groupby(\"lot_details\").size().reset_index(name=\"count\")\n\n# Sort the grouped data by count in ascending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=True)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"lot_details\"], sorted_data[\"count\"])\nplt.xlabel(\"Lot Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Bar Chart of Lot Details\")\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "Return the lot details , group the lot details , and compute the number of each lot details , and could you show x-axis in descending order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nLOTS = pd.read_sql(\"SELECT * FROM LOTS\", conn)\nLOTS.columns = LOTS.columns.str.lower()\n\n# Grouping the data by 'lot_details' and counting the occurrences\ngrouped_data = LOTS.groupby('lot_details').size().reset_index(name='count')\n\n# Sorting the data by 'lot_details' in descending order\nsorted_data = grouped_data.sort_values('lot_details', ascending=False)\n\n# Creating the bar plot\nplt.bar(sorted_data['lot_details'], sorted_data['count'])\nplt.xlabel('Lot Details')\nplt.ylabel('Count')\nplt.title('Count of Lot Details')\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Find the component amounts and names of all furnitures that have more than 10 components , and could you order by the bar in asc ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nfurniture = pd.read_sql(\"SELECT * FROM furniture\", conn)\nfurniture.columns = furniture.columns.str.lower()\n\n# Filter the dataframe\nfiltered_df = furniture[furniture['num_of_component'] > 10]\n\n# Sort the dataframe by name\nsorted_df = filtered_df.sort_values('name')\n\n# Create the bar plot\nplt.bar(sorted_df['name'], sorted_df['num_of_component'])\n\n# Add labels and title\nplt.xlabel('Name')\nplt.ylabel('Number of Components')\nplt.title('Furniture with More than 10 Components')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Visualize the title and and the total star rating of the movie using a bar chart, show from low to high by the total number.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\nmovie_df.columns = map(str.lower, movie_df.columns)\n\n# Merge the Rating and Movie tables on mID column\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Group by title and calculate the sum of stars for each movie\ngrouped_df = merged_df.groupby(\"title\")[\"stars\"].sum().reset_index()\n\n# Sort the dataframe by the sum of stars in ascending order\nsorted_df = grouped_df.sort_values(\"stars\", ascending=True)\n\n# Plot the bar chart\nplt.bar(sorted_df[\"title\"], sorted_df[\"stars\"])\nplt.xlabel(\"Movie Title\")\nplt.ylabel(\"Sum of Stars\")\nplt.title(\"Sum of Stars for Each Movie\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Bar graph to show the number of rank from different rank , I want to display bar in asc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\ncaptain.columns = captain.columns.str.lower()\n\n# Grouping and counting the ranks\nrank_counts = captain.groupby('rank').size().reset_index(name='count')\n\n# Sorting the ranks in ascending order\nrank_counts = rank_counts.sort_values('rank')\n\n# Creating the bar plot\nplt.bar(rank_counts['rank'], rank_counts['count'])\nplt.xlabel('Rank')\nplt.ylabel('Count')\nplt.title('Rank Distribution')\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Find the component amounts and names of all furnitures that have more than 10 components .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nfurniture = pd.read_sql(\"SELECT * FROM furniture\", conn)\nfurniture.columns = furniture.columns.str.lower()\n\n# Filter the dataframe\nfiltered_df = furniture[furniture['num_of_component'] > 10]\n\n# Create the bar plot\nplt.bar(filtered_df['name'], filtered_df['num_of_component'])\nplt.xlabel('Name')\nplt.ylabel('Number of Components')\nplt.title('Furniture with More than 10 Components')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "Show the number of companies each investor has invested with a bar chart , show by the X from low to high .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\n\n# Grouping and counting the investors\ninvestor_counts = entrepreneur.groupby('investor').size().reset_index(name='count')\n\n# Sorting the data by investor name\ninvestor_counts = investor_counts.sort_values('investor')\n\n# Creating the bar plot\nplt.bar(investor_counts['investor'], investor_counts['count'])\nplt.xlabel('Investor')\nplt.ylabel('Count')\nplt.title('Number of Entrepreneurs by Investor')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "How many lots are there for each lot detail that belong to investors with details \"l\" in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nINVESTORS = pd.read_sql(\"SELECT * FROM INVESTORS\", conn)\nLOTS = pd.read_sql(\"SELECT * FROM LOTS\", conn)\nINVESTORS.columns = INVESTORS.columns.str.lower()\nLOTS.columns = LOTS.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(INVESTORS, LOTS, on='investor_id')\n\n# Filter the data based on the condition\nfiltered_df = merged_df[merged_df['investor_details'] == 'l']\n\n# Group by lot_details and count the number of occurrences\ngrouped_df = filtered_df.groupby('lot_details').size().reset_index(name='count')\n\n# Sort the data by lot_details in descending order\nsorted_df = grouped_df.sort_values('lot_details', ascending=False)\n\n# Create the bar plot\nplt.bar(sorted_df['lot_details'], sorted_df['count'])\nplt.xlabel('Lot Details')\nplt.ylabel('Count')\nplt.title('Count of Lots by Lot Details')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "company_employee",
    "question": "Show the different headquarters and number of companies at each headquarter with a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompany = pd.read_sql(\"SELECT * FROM company\", conn)\ncompany.columns = company.columns.str.lower()\n\n# Group by headquarters and count the number of companies\nheadquarters_count = company.groupby('headquarters').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(headquarters_count['headquarters'], headquarters_count['count'])\nplt.xlabel('Headquarters')\nplt.ylabel('Count')\nplt.title('Number of Companies by Headquarters')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "List the positions of players whose average number of points scored by that position is larger than 20, compare the number of positions, and I want to rank from low to high by the X.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the player table\nplayer_df = pd.read_sql(\"SELECT * FROM player\", conn)\n\n# Convert column names to lowercase\nplayer_df.columns = player_df.columns.str.lower()\n\n# Filter players with average points >= 20\nfiltered_df = player_df.groupby(\"position\").filter(lambda x: x[\"points\"].mean() >= 20)\n\n# Count the number of players for each position\nposition_counts = filtered_df[\"position\"].value_counts().sort_index()\n\n# Plot the bar chart\nplt.bar(position_counts.index, position_counts.values)\nplt.xlabel(\"Position\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Players by Position\")\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "How many competitions for each country ?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by country and count the occurrences\ncountry_counts = competition.groupby('country').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(country_counts['country'], country_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Country')\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "Show me a bar chart displaying the start dates for grants that have descriptions of Regular and Initial Applications, and the corresponding number of grants for each start date.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nGrants = pd.read_sql(\"SELECT * FROM Grants\", conn)\nDocuments = pd.read_sql(\"SELECT * FROM Documents\", conn)\nDocument_Types = pd.read_sql(\"SELECT * FROM Document_Types\", conn)\nGrants = pd.read_sql(\"SELECT * FROM Grants\", conn)\nDocuments = pd.read_sql(\"SELECT * FROM Documents\", conn)\nDocument_Types = pd.read_sql(\"SELECT * FROM Document_Types\", conn)\nGrants.columns = Grants.columns.str.lower()\nDocuments.columns = Documents.columns.str.lower()\nDocument_Types.columns = Document_Types.columns.str.lower()\nGrants.columns = Grants.columns.str.lower()\nDocuments.columns = Documents.columns.str.lower()\nDocument_Types.columns = Document_Types.columns.str.lower()\n\n# Merge the tables\nmerged_df = pd.merge(Grants, Documents, on='grant_id')\nmerged_df = pd.merge(merged_df, Document_Types, on='document_type_code')\n\n# Filter the data\nregular_grants = merged_df[merged_df['document_description'] == 'Regular']\ninitial_application_grants = merged_df[merged_df['document_description'] == 'Initial Application']\n\n# Count the number of grants by start date\nregular_grants_count = regular_grants.groupby('grant_start_date').size()\ninitial_application_grants_count = initial_application_grants.groupby('grant_start_date').size()\n\n# Plot the bar chart\nplt.bar(regular_grants_count.index, regular_grants_count.values, label='Regular Grants')\nplt.bar(initial_application_grants_count.index, initial_application_grants_count.values, label='Initial Application Grants')\n\n# Add labels and title\nplt.xlabel('Grant Start Date')\nplt.ylabel('Count')\nplt.title('Number of Grants by Start Date')\n\n# Add legend\nplt.legend()\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "Return the number of music festivals of each category in a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the music_festival table\nmusic_festival = pd.read_sql(\"SELECT * FROM music_festival\", conn)\n\n# Convert column names to lowercase\nmusic_festival.columns = music_festival.columns.str.lower()\n\n# Perform the SQL query\nresult = music_festival.groupby('category').size()\n\n# Create the bar plot\nplt.bar(result.index, result.values)\nplt.xlabel('Category')\nplt.ylabel('Count')\nplt.title('Music Festival by Category')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "Display a bar chart for what are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor ? , and I want to display in asc by the y axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\n\n# Grouping the data by 'investor' and counting the occurrences\ngrouped_data = entrepreneur.groupby('investor').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nsorted_data = grouped_data.sort_values('count')\n\n# Creating the bar plot\nplt.bar(sorted_data['investor'], sorted_data['count'])\nplt.xlabel('Investor')\nplt.ylabel('Count')\nplt.title('Number of Entrepreneurs by Investor')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "What is the number of types of competition ? , order in asc by the names .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort by competition_type in ascending order\ncompetition_counts = competition_counts.sort_values('competition_type')\n\n# Create a bar plot\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Competition Type Counts')\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "A bar chart about how many captains are in each rank?, show from low to high by the Rank.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the captain table\ncaptain_df = pd.read_sql(\"SELECT * FROM captain\", conn)\n\n# Convert column names to lowercase\ncaptain_df.columns = captain_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = captain_df.groupby('rank').size().reset_index(name='count').sort_values('rank')\n\n# Generate the bar plot\nplt.bar(result_df['rank'], result_df['count'])\nplt.xlabel('Rank')\nplt.ylabel('Count')\nplt.title('Count of Captains by Rank')\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "A bar chart about what are the statuses and average populations of each city ? , could you sort Y from high to low order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncity.columns = city.columns.str.lower()\n\n# Group by status and calculate average population\ngrouped_city = city.groupby('status')['population'].mean()\n\n# Sort by average population in descending order\nsorted_city = grouped_city.sort_values(ascending=False)\n\n# Create bar plot\nplt.bar(sorted_city.index, sorted_city.values)\n\n# Set labels and title\nplt.xlabel('Status')\nplt.ylabel('Average Population')\nplt.title('Average Population by Status')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "How can I visualize the number of transactions with type code \"SALE\" for each investor using a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nINVESTORS = pd.read_sql(\"SELECT * FROM INVESTORS\", conn)\nTRANSACTIONS = pd.read_sql(\"SELECT * FROM TRANSACTIONS\", conn)\nINVESTORS.columns = INVESTORS.columns.str.lower()\nTRANSACTIONS.columns = TRANSACTIONS.columns.str.lower()\n\n# Merge the INVESTORS and TRANSACTIONS dataframes\nmerged_df = pd.merge(INVESTORS, TRANSACTIONS, on='investor_id')\n\n# Filter the merged dataframe for transactions with transaction_type_code = 'SALE'\nfiltered_df = merged_df[merged_df['transaction_type_code'] == 'SALE']\n\n# Group the filtered dataframe by investor_details and count the number of occurrences\ngrouped_df = filtered_df.groupby('investor_details').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['investor_details'], autopct='%1.1f%%')\nplt.title('Distribution of Sales by Investor')\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "Draw a bar chart of name versus age , sort Y-axis in ascending order please .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\neditor.columns = editor.columns.str.lower()\n\n# Assuming the data is already loaded into a dataframe called 'editor'\n\n# Sort the dataframe by age in ascending order\nsorted_df = editor.sort_values(by='age')\n\n# Extract the name and age columns\nname = sorted_df['name']\nage = sorted_df['age']\n\n# Create a bar plot\nplt.bar(name, age)\n\n# Add labels and title\nplt.xlabel('Name')\nplt.ylabel('Age')\nplt.title('Age Distribution')\n\n# Rotate x-axis labels if needed\nplt.xticks(rotation=90)\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry.columns = country.columns.str.lower()\n\n# Group by governmentform and calculate the sum of population\ngrouped_data = country.groupby('governmentform')['population'].sum()\n\n# Convert the grouped data into a dataframe\ndf = pd.DataFrame(grouped_data).reset_index()\n\n# Plot the bar chart\nplt.bar(df['governmentform'], df['population'])\nplt.xlabel('Government Form')\nplt.ylabel('Population')\nplt.title('Population by Government Form')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Visualize names and market shares of furnitures which no any company is producing in our records by a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the furniture table\nfurniture = pd.read_sql(\"SELECT * FROM furniture\", conn)\n\n# Read the furniture_manufacte table\nfurniture_manufacte = pd.read_sql(\"SELECT * FROM furniture_manufacte\", conn)\n\n# Merge the two tables on Furniture_ID\nmerged_data = pd.merge(furniture, furniture_manufacte, on='Furniture_ID', how='left')\n\n# Filter the merged data to exclude Furniture_IDs present in furniture_manufacte\nfiltered_data = merged_data[~merged_data['Furniture_ID'].isin(furniture_manufacte['Furniture_ID'])]\n\n# Convert column names to lowercase\nfiltered_data.columns = map(str.lower, filtered_data.columns)\n\n# Create a bar plot\nplt.bar(filtered_data['name'], filtered_data['market_rate'])\nplt.xlabel('Name')\nplt.ylabel('Market Rate')\nplt.title('Market Rate of Furniture without Manufacturer')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Show the stars of each director by a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\n\n# Convert column names to lowercase\nrating_df.columns = rating_df.columns.str.lower()\nmovie_df.columns = movie_df.columns.str.lower()\n\n# merge the rating and movie tables on mid\nmerged_df = pd.merge(rating_df, movie_df, on='mid')\n\n# group by director and calculate the count of stars\ndirector_stars_count = merged_df.groupby('director')['stars'].count()\n\n# plot the bar chart\nplt.bar(director_stars_count.index, director_stars_count.values)\nplt.xlabel('Director')\nplt.ylabel('Number of Stars')\nplt.title('Number of Stars by Director')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "election_representative",
    "question": "Give me a bar for what are the different parties of representative ? Show the party name and the number of representatives in each party , and sort in desc by the bar .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\nrepresentative.columns = representative.columns.str.lower()\n\n# Group by party and count the number of representatives in each party\nparty_counts = representative.groupby('party').size().reset_index(name='count')\n\n# Sort the parties in descending order\nparty_counts = party_counts.sort_values('party', ascending=False)\n\n# Create a bar plot\nplt.bar(party_counts['party'], party_counts['count'])\nplt.xlabel('Party')\nplt.ylabel('Count')\nplt.title('Number of Representatives by Party')\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "Return the number of the lot details of lots that belong to investors with details \"l\"?, and order in desc by the y axis please.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the INVESTORS table\ninvestors = pd.read_sql(\"SELECT * FROM INVESTORS\", conn)\ninvestors.columns = map(str.lower, investors.columns)\n\n# Read the data from the LOTS table\nlots = pd.read_sql(\"SELECT * FROM LOTS\", conn)\nlots.columns = map(str.lower, lots.columns)\n\n# Merge the INVESTORS and LOTS tables on investor_id\nmerged_data = pd.merge(investors, lots, on=\"investor_id\")\n\n# Filter the merged data based on Investor_details = \"l\"\nfiltered_data = merged_data[merged_data[\"investor_details\"] == \"l\"]\n\n# Group the data by lot_details and count the occurrences\ngrouped_data = filtered_data.groupby(\"lot_details\").size().reset_index(name=\"count\")\n\n# Sort the data by count in descending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"lot_details\"], sorted_data[\"count\"])\nplt.xlabel(\"Lot Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Bar Chart of Lot Details\")\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "How can I create a pie chart to visualize the number of elections each representative participated in?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nelection = pd.read_sql(\"SELECT * FROM election\", conn)\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\nelection.columns = election.columns.str.lower()\nrepresentative.columns = representative.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(election, representative, on='representative_id')\n\n# Group by representative name and count the number of occurrences\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Create a pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['name'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Display the chart\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "Create a bar chart showing how many location across location , and display by the total number from low to high .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nparty = pd.read_sql(\"SELECT * FROM party\", conn)\nparty.columns = party.columns.str.lower()\n\n# Group by location and count the occurrences\nlocation_counts = party.groupby('location').size().reset_index(name='count')\n\n# Sort the counts in ascending order\nlocation_counts = location_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(location_counts['location'], location_counts['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Party Count by Location')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "For each director, return the director's name together with the highest rating among all of their movies and ignore movies whose director is NULL. Could you plot the result with a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\n\n# Merge the Rating and Movie tables on mID\nmerged_df = pd.merge(rating_df, movie_df, on=\"mID\")\n\n# Filter out rows with director as \"null\"\nfiltered_df = merged_df[merged_df[\"director\"] != \"null\"]\n\n# Group by director and find the maximum stars for each director\ngrouped_df = filtered_df.groupby(\"director\")[\"stars\"].max().reset_index()\n\n# Convert column names to lowercase\ngrouped_df.columns = grouped_df.columns.str.lower()\n\n# Plot the bar chart\nplt.bar(grouped_df[\"director\"], grouped_df[\"stars\"])\nplt.xlabel(\"Director\")\nplt.ylabel(\"Maximum Stars\")\nplt.title(\"Maximum Stars by Director\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "I want to see trend of the number of creation by creation",
    "chart": "Line",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = department.columns.str.lower()\n\n# Assuming 'department' is a DataFrame containing the table data\n\n# Grouping the data by 'creation' and counting the occurrences\ngrouped_data = department.groupby('creation').size().reset_index(name='count')\n\n# Sorting the data by 'creation' in ascending order\nsorted_data = grouped_data.sort_values('creation')\n\n# Creating a line plot\nplt.plot(sorted_data['creation'], sorted_data['count'])\n\n# Adding labels and title\nplt.xlabel('Creation')\nplt.ylabel('Count')\nplt.title('Count of Creation')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "county_public_safety",
    "question": "Show me a bar chart of the white percentages of cities, along with the corresponding crime rates of the counties they correspond to, ordered by white percentage in descending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncounty_public_safety = pd.read_sql(\"SELECT * FROM county_public_safety\", conn)\ncity.columns = city.columns.str.lower()\ncounty_public_safety.columns = county_public_safety.columns.str.lower()\n\n# Merge the city and county_public_safety dataframes on county_id\nmerged_df = pd.merge(city, county_public_safety, on='county_id')\n\n# Sort the merged dataframe by white in descending order\nsorted_df = merged_df.sort_values('white', ascending=False)\n\n# Select the white and crime_rate columns\nselected_df = sorted_df[['white', 'crime_rate']]\n\n# Plot the bar chart\nplt.bar(selected_df['white'], selected_df['crime_rate'])\nplt.xlabel('White Population')\nplt.ylabel('Crime Rate')\nplt.title('Crime Rate vs White Population')\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "Give me a bar for what are the statuses and average populations of each city ? , list by the names in desc please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncity.columns = city.columns.str.lower()\n\n# Group by status and calculate average population\ngrouped_data = city.groupby('status')['population'].mean()\n\n# Sort the data by status in descending order\nsorted_data = grouped_data.sort_index(ascending=False)\n\n# Create a bar plot\nplt.bar(sorted_data.index, sorted_data.values)\n\n# Set the labels and title\nplt.xlabel('Status')\nplt.ylabel('Average Population')\nplt.title('Average Population by Status')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Bar chart x axis location y axis how many location",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\nperformance.columns = performance.columns.str.lower()\n\n# Group by location and count the occurrences\nlocation_counts = performance.groupby('location').size()\n\n# Create a bar plot\nplt.bar(location_counts.index, location_counts.values)\n\n# Set the labels and title\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Performance by Location')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "A bar chart for what are the number of the purchase details of transactions with amount bigger than 10000?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the PURCHASES and TRANSACTIONS tables\npurchases = pd.read_sql(\"SELECT * FROM PURCHASES\", conn)\ntransactions = pd.read_sql(\"SELECT * FROM TRANSACTIONS\", conn)\n\n# Convert column names to lowercase\npurchases.columns = purchases.columns.str.lower()\ntransactions.columns = transactions.columns.str.lower()\n\n# Merge the PURCHASES and TRANSACTIONS tables on the purchase_transaction_id column\nmerged_data = pd.merge(purchases, transactions, left_on=\"purchase_transaction_id\", right_on=\"transaction_id\")\n\n# Filter the merged data for transactions with amount_of_transaction > 10000\nfiltered_data = merged_data[merged_data[\"amount_of_transaction\"] > 10000]\n\n# Group the filtered data by purchase_details and count the occurrences\ngrouped_data = filtered_data.groupby(\"purchase_details\").size().reset_index(name=\"count\")\n\n# Plot the bar chart\nplt.bar(grouped_data[\"purchase_details\"], grouped_data[\"count\"])\nplt.xlabel(\"Purchase Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Bar Chart of Purchase Details with Amount > 10000\")\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Find the component amounts and names of all furnitures that have more than 10 components . Show me the proportion of component amounts using a pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nfurniture = pd.read_sql(\"SELECT * FROM furniture\", conn)\nfurniture.columns = furniture.columns.str.lower()\n\n# Assuming furniture is a DataFrame containing the table data\n\n# Filter the DataFrame to select rows where num_of_component > 10\nfiltered_df = furniture[furniture['num_of_component'] > 10]\n\n# Create a pie chart using the filtered DataFrame\nplt.pie(filtered_df['num_of_component'], labels=filtered_df['name'])\n\n# Display the pie chart\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "Give me a bar for what are the statuses and average populations of each city ? , I want to sort by the the average of population in ascending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncity.columns = city.columns.str.lower()\n\n# Group by status and calculate average population\ngrouped_city = city.groupby('status')['population'].mean()\n\n# Sort by average population in ascending order\nsorted_city = grouped_city.sort_values()\n\n# Create bar plot\nplt.bar(sorted_city.index, sorted_city.values)\n\n# Set labels and title\nplt.xlabel('Status')\nplt.ylabel('Average Population')\nplt.title('Average Population by Status')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "voter_2",
    "question": "What is the count of male students who had class senator votes in the fall election cycle, grouped by the election cycle, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nVOTING_RECORD = pd.read_sql(\"SELECT * FROM VOTING_RECORD\", conn)\nSTUDENT.columns = STUDENT.columns.str.lower()\nVOTING_RECORD.columns = VOTING_RECORD.columns.str.lower()\n\n# Merge the STUDENT and VOTING_RECORD dataframes\nmerged_df = pd.merge(STUDENT, VOTING_RECORD, left_on='stuid', right_on='class_senator_vote')\n\n# Filter the merged dataframe for male students and fall election cycle\nfiltered_df = merged_df[(merged_df['sex'] == 'M') & (merged_df['election_cycle'] == 'Fall')]\n\n# Group by election cycle and count the number of records\ngrouped_df = filtered_df.groupby('election_cycle').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['election_cycle'], grouped_df['count'])\nplt.xlabel('Election Cycle')\nplt.ylabel('Count')\nplt.title('Number of Male Students in Fall Election Cycle')\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "What are the different parties of representative? Show the party name and the number of representatives in each party, sort names in descending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the representative table\nrepresentative_df = pd.read_sql(\"SELECT * FROM representative\", conn)\n\n# Convert column names to lowercase\nrepresentative_df.columns = representative_df.columns.str.lower()\n\n# Perform the SQL query\nparty_count_df = representative_df.groupby('party').size().reset_index(name='count')\nparty_count_df = party_count_df.sort_values('party', ascending=False)\n\n# Generate the bar plot\nplt.bar(party_count_df['party'], party_count_df['count'])\nplt.xlabel('Party')\nplt.ylabel('Count')\nplt.title('Number of Representatives by Party')\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "Show different nationalities along with the number of hosts of each nationality by a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the HOST table\nhost_df = pd.read_sql(\"SELECT * FROM HOST\", conn)\n\n# Convert column names to lowercase\nhost_df.columns = host_df.columns.str.lower()\n\n# Perform the SQL query\nnationality_count = host_df.groupby('nationality').size()\n\n# Plot the pie chart\nplt.pie(nationality_count, labels=nationality_count.index, autopct='%1.1f%%')\nplt.title('Nationality Distribution')\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "Show the names of editors that are on the committee of journals with sales bigger than 3000, and count them by a bar chart, order Name from low to high order.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the tables\njournal_committee = pd.read_sql(\"SELECT * FROM journal_committee\", conn)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\njournal = pd.read_sql(\"SELECT * FROM journal\", conn)\n\n# Convert column names to lowercase\njournal_committee.columns = journal_committee.columns.str.lower()\neditor.columns = editor.columns.str.lower()\njournal.columns = journal.columns.str.lower()\n\n# Merge the tables\nmerged_data = pd.merge(journal_committee, editor, on=\"editor_id\")\nmerged_data = pd.merge(merged_data, journal, on=\"journal_id\")\n\n# Filter the data\nfiltered_data = merged_data[merged_data[\"sales\"] > 3000]\n\n# Group by Name and count occurrences\ngrouped_data = filtered_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# Sort the data by Name\nsorted_data = grouped_data.sort_values(\"name\")\n\n# Plot the bar chart\nplt.bar(sorted_data[\"name\"], sorted_data[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of Names with Sales > 3000\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Show the director and their lowest rating among all movies in a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\n\n# Merge the Rating and Movie tables on mID\nmerged_df = pd.merge(rating_df, movie_df, on=\"mID\")\n\n# Group by director and find the minimum stars\ngrouped_df = merged_df.groupby(\"director\").stars.min().reset_index()\n\n# Convert column names to lowercase\ngrouped_df.columns = grouped_df.columns.str.lower()\n\n# Plot the bar chart\nplt.bar(grouped_df[\"director\"], grouped_df[\"stars\"])\nplt.xlabel(\"Director\")\nplt.ylabel(\"Minimum Stars\")\nplt.title(\"Minimum Stars by Director\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Show all sport name and the number of students in a bar chart , and sort bars in descending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nSportsinfo.columns = Sportsinfo.columns.str.lower()\n\n# Grouping the data by sportname and counting the occurrences\nsport_counts = Sportsinfo.groupby('sportname').size().reset_index(name='count')\n\n# Sorting the data by sportname in descending order\nsport_counts = sport_counts.sort_values('sportname', ascending=False)\n\n# Creating the bar plot\nplt.bar(sport_counts['sportname'], sport_counts['count'])\nplt.xlabel('Sport Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Sport Name')\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 Visualize by bar chart , sort names in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry.columns = country.columns.str.lower()\n\n# Group by governmentform and calculate the sum of population\ngrouped_data = country.groupby('governmentform')['population'].sum()\n\n# Sort the data by governmentform in ascending order\nsorted_data = grouped_data.sort_index()\n\n# Create a bar plot\nplt.bar(sorted_data.index, sorted_data.values)\n\n# Set the x-axis label\nplt.xlabel('Government Form')\n\n# Set the y-axis label\nplt.ylabel('Population')\n\n# Set the title of the plot\nplt.title('Population by Government Form')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "insurance_fnol",
    "question": "Can you create a pie chart to display the distribution of policies among customers and the number of policies each customer has?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\ncustomers_policies = pd.read_sql(\"SELECT * FROM customers_policies\", conn)\ncustomers.columns = customers.columns.str.lower()\ncustomers_policies.columns = customers_policies.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(customers, customers_policies, on='customer_id')\n\n# Group by customer_name and count the number of occurrences\ngrouped_df = merged_df.groupby('customer_name').size().reset_index(name='count')\n\n# Create a pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['customer_name'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Display the chart\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "Scatter chart. how many staff does each project has? List the project id and the number in an ascending order.",
    "chart": "Scatter",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the tables\nproject_staff = pd.read_sql(\"SELECT * FROM Project_Staff\", conn)\nprojects = pd.read_sql(\"SELECT * FROM Projects\", conn)\n\n# Convert column names to lowercase\nproject_staff.columns = project_staff.columns.str.lower()\nprojects.columns = projects.columns.str.lower()\n\n# Merge the tables on project_id\nmerged_data = pd.merge(project_staff, projects, on=\"project_id\")\n\n# Perform the group by and count\ngrouped_data = merged_data.groupby(\"project_id\").size().reset_index(name=\"count\")\n\n# Sort the data by count in ascending order\nsorted_data = grouped_data.sort_values(\"count\")\n\n# Scatter plot\nplt.scatter(sorted_data[\"project_id\"], sorted_data[\"count\"])\nplt.xlabel(\"Project ID\")\nplt.ylabel(\"Count\")\nplt.title(\"Scatter Plot of Project Staff Count\")\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Show different locations and the number of performances at each location Visualize by bar chart , display the total number from low to high order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\nperformance.columns = performance.columns.str.lower()\n\n# Group by location and count the number of occurrences\nlocation_counts = performance.groupby('location').size().reset_index(name='count')\n\n# Sort the counts in ascending order\nlocation_counts = location_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(location_counts['location'], location_counts['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Location')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "A bar chart about what are the statuses and average populations of each city ?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncity.columns = city.columns.str.lower()\n\n# Group by status and calculate average population\ngrouped_city = city.groupby('status')['population'].mean()\n\n# Convert the grouped data to a dataframe\ndf = pd.DataFrame(grouped_city).reset_index()\n\n# Plot the bar chart\nplt.bar(df['status'], df['population'])\nplt.xlabel('Status')\nplt.ylabel('Average Population')\nplt.title('Average Population by Status')\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Give me a bar for how many musicals has each nominee been nominated for ? , show Y in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Group by nominee and count the occurrences\ngrouped = musical.groupby('nominee').size().reset_index(name='count')\n\n# Sort by count in ascending order\nsorted_grouped = grouped.sort_values('count')\n\n# Create bar plot\nplt.bar(sorted_grouped['nominee'], sorted_grouped['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Which reviewers, represented by points on a scatter plot, have consistently given an average rating of 3 or 4 stars for their reviews?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nReviewer = pd.read_sql(\"SELECT * FROM Reviewer\", conn)\nRating.columns = Rating.columns.str.lower()\nReviewer.columns = Reviewer.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Rating, Reviewer, on='rid')\n\n# Filter the data for stars 3 and 4\nfiltered_df = merged_df[merged_df['stars'].isin([3, 4])]\n\n# Calculate the average rating for each reviewer\navg_rating_df = filtered_df.groupby('name')['stars'].mean().reset_index()\n\n# Create scatter plot\nplt.scatter(avg_rating_df['name'], avg_rating_df['stars'])\nplt.xlabel('Reviewer Name')\nplt.ylabel('Average Rating')\nplt.title('Average Rating for Reviewers with Stars 3 and 4')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "How many editors are assigned to each journal theme in the journal committee, visualized as a scatter plot?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\njournal_committee = pd.read_sql(\"SELECT * FROM journal_committee\", conn)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\njournal = pd.read_sql(\"SELECT * FROM journal\", conn)\njournal_committee.columns = journal_committee.columns.str.lower()\neditor.columns = editor.columns.str.lower()\njournal.columns = journal.columns.str.lower()\n\n# Merge tables\nmerged_df = pd.merge(pd.merge(journal_committee, editor, on='editor_id'), journal, on='journal_id')\n\n# Group by theme and count editors\ngrouped_df = merged_df.groupby('theme').agg({'editor_id': 'count'}).reset_index()\ngrouped_df.columns = ['theme', 'editors']\n\n# Scatter plot\nplt.scatter(grouped_df['theme'], grouped_df['editors'])\nplt.xlabel('Theme')\nplt.ylabel('Number of Editors')\nplt.title('Number of Editors by Theme')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "What are the titles and average ratings for all movies that have the lowest average rating, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nMovie = pd.read_sql(\"SELECT * FROM Movie\", conn)\nRating.columns = Rating.columns.str.lower()\nMovie.columns = Movie.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Rating, Movie, on='mid')\n\n# Calculate the average stars for each movie\navg_stars = merged_df.groupby('mid')['stars'].mean()\n\n# Sort the movies by average stars in ascending order\nsorted_avg_stars = avg_stars.sort_values()\n\n# Plot the bar chart\nplt.bar(sorted_avg_stars.index, sorted_avg_stars.values)\nplt.xlabel('Movie Title')\nplt.ylabel('Average Stars')\nplt.title('Average Stars for Each Movie')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "how many entrepreneurs correspond to each investor ? , show from high to low by the bars please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\n\n# Grouping the data by 'investor' and counting the occurrences\ngrouped_data = entrepreneur.groupby('investor').size().reset_index(name='count')\n\n# Sorting the data by 'investor' in descending order\nsorted_data = grouped_data.sort_values('investor', ascending=False)\n\n# Creating the bar plot\nplt.bar(sorted_data['investor'], sorted_data['count'])\nplt.xlabel('Investor')\nplt.ylabel('Count')\nplt.title('Number of Entrepreneurs by Investor')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes' by a bar chart, and could you order in asc by the x axis?",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the department table\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = map(str.lower, department.columns)\n\n# Read the management table\nmanagement = pd.read_sql(\"SELECT * FROM management\", conn)\nmanagement.columns = map(str.lower, management.columns)\n\n# Merge the department and management tables\nmerged_data = pd.merge(department, management, on=\"department_id\")\n\n# Filter the merged data for temporary acting departments\ntemporary_acting_data = merged_data[merged_data[\"temporary_acting\"] == \"Yes\"]\n\n# Calculate the average number of employees per department\navg_employees = temporary_acting_data.groupby(\"name\")[\"num_employees\"].mean()\n\n# Sort the data by department name\nsorted_data = avg_employees.sort_index()\n\n# Create a bar plot\nplt.bar(sorted_data.index, sorted_data.values)\nplt.xlabel(\"Department\")\nplt.ylabel(\"Average Number of Employees\")\nplt.title(\"Average Number of Employees in Temporary Acting Departments\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Give me a bar chart for mean points of each position , and I want to order in descending by the x axis please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nplayer.columns = player.columns.str.lower()\n\n# Calculate average points by position\navg_points = player.groupby('position')['points'].mean()\n\n# Sort positions in descending order\navg_points = avg_points.sort_index(ascending=False)\n\n# Create bar plot\nplt.bar(avg_points.index, avg_points.values)\n\n# Set labels and title\nplt.xlabel('Position')\nplt.ylabel('Average Points')\nplt.title('Average Points by Position')\n\n# Show plot\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "What is the count of famous titles for each artist who has volumes that lasted more than 2 weeks on top or volumes that lasted less than 2 weeks on top, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nvolume = pd.read_sql(\"SELECT * FROM volume\", conn)\nartist.columns = artist.columns.str.lower()\nvolume.columns = volume.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(artist, volume, on='artist_id')\n\n# Filter the data based on the condition\nfiltered_df = merged_df[(merged_df['weeks_on_top'] > 2) | (merged_df['weeks_on_top'] < 2)]\n\n# Group by famous_title and count the occurrences\ngrouped_df = filtered_df.groupby('famous_title').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['famous_title'], grouped_df['count'])\nplt.xlabel('Famous Title')\nplt.ylabel('Count')\nplt.title('Number of Occurrences of Famous Titles')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "Can you create a scatter plot displaying the themes of competitions and the population of host cities with populations exceeding 1000?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\nfarm_competition = pd.read_sql(\"SELECT * FROM farm_competition\", conn)\ncity.columns = city.columns.str.lower()\nfarm_competition.columns = farm_competition.columns.str.lower()\n\n# Merge city and farm_competition tables\nmerged_df = pd.merge(city, farm_competition, left_on='city_id', right_on='host_city_id')\n\n# Filter rows where population is greater than 1000\nfiltered_df = merged_df[merged_df['population'] > 1000]\n\n# Create scatter plot\nplt.scatter(filtered_df['theme'], filtered_df['population'])\nplt.xlabel('Theme')\nplt.ylabel('Population')\nplt.title('Scatter Plot of Theme vs Population')\nplt.show()"
  },
  {
    "db_id": "company_employee",
    "question": "What is the number of companies for each headquarter? Visualize by bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"company\" table\ncompany_data = pd.read_sql(\"SELECT * FROM company\", conn)\n\n# Convert column names to lowercase\ncompany_data.columns = company_data.columns.str.lower()\n\n# Perform the SQL query\nresult = company_data.groupby('headquarters').size()\n\n# Plot the bar chart\nplt.bar(result.index, result.values)\nplt.xlabel('Headquarters')\nplt.ylabel('Count')\nplt.title('Number of Companies by Headquarters')\nplt.show()"
  },
  {
    "db_id": "car_1",
    "question": "Pie chart. what are the names and ids of all makers with more than 3 models?",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the CAR_MAKERS table\ncar_makers = pd.read_sql(\"SELECT * FROM CAR_MAKERS\", conn)\ncar_makers.columns = map(str.lower, car_makers.columns)\n\n# Read the MODEL_LIST table\nmodel_list = pd.read_sql(\"SELECT * FROM MODEL_LIST\", conn)\nmodel_list.columns = map(str.lower, model_list.columns)\n\n# Merge the two tables on the 'id' column\nmerged_data = pd.merge(car_makers, model_list, left_on='id', right_on='maker')\n\n# Group by 'fullname' and count the number of occurrences\ngrouped_data = merged_data.groupby('fullname').size()\n\n# Plot the pie chart\nplt.pie(grouped_data, labels=grouped_data.index, autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "coffee_shop",
    "question": "I want to know the proportion of the number of members for each address .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmember = pd.read_sql(\"SELECT * FROM member\", conn)\nmember.columns = member.columns.str.lower()\n\n# Grouping the data by address and counting the occurrences\naddress_counts = member.groupby('address').size().reset_index(name='count')\n\n# Creating a pie chart\nplt.pie(address_counts['count'], labels=address_counts['address'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Displaying the chart\nplt.show()"
  },
  {
    "db_id": "county_public_safety",
    "question": "Create a bar chart showing the total number across police force, and sort by the X from low to high please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"county_public_safety\" table\ndf = pd.read_sql(\"SELECT * FROM county_public_safety\", conn)\n\n# Convert column names to lowercase\ndf.columns = df.columns.str.lower()\n\n# Perform the SQL query\nresult = df.groupby('police_force').size().reset_index(name='count').sort_values('police_force')\n\n# Generate the bar chart\nplt.bar(result['police_force'], result['count'])\nplt.xlabel('Police Force')\nplt.ylabel('Count')\nplt.title('Number of Incidents by Police Force')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Show last names for all student who are on scholarship, and count them by a bar chart, and could you sort in descending by the y-axis?",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Sportsinfo table\nsportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\n# Convert column names to lowercase\nsportsinfo.columns = sportsinfo.columns.str.lower()\n\n# Read the Student table\nstudent = pd.read_sql(\"SELECT * FROM Student\", conn)\n# Convert column names to lowercase\nstudent.columns = student.columns.str.lower()\n\n# Merge the Sportsinfo and Student tables on StuID\nmerged_data = pd.merge(sportsinfo, student, on=\"stuid\")\n\n# Filter the merged data for rows where onscholarship is 'Y'\nfiltered_data = merged_data[merged_data[\"onscholarship\"] == \"Y\"]\n\n# Group by LName and count the occurrences\ngrouped_data = filtered_data.groupby(\"lname\").size().reset_index(name=\"count\")\n\n# Sort the grouped data by count in descending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"lname\"], sorted_data[\"count\"])\nplt.xlabel(\"LName\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Students on Scholarship by Last Name\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "Give me a bar for what are the different parties of representative? Show the party name and the number of representatives in each party, and show total number in asc order please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the representative table\nrepresentative_df = pd.read_sql(\"SELECT * FROM representative\", conn)\n\n# Convert column names to lowercase\nrepresentative_df.columns = map(str.lower, representative_df.columns)\n\n# Perform the SQL query\nparty_count_df = representative_df.groupby('party').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(party_count_df['party'], party_count_df['count'])\nplt.xlabel('Party')\nplt.ylabel('Count')\nplt.title('Number of Representatives by Party')\nplt.show()"
  },
  {
    "db_id": "school_player",
    "question": "For each denomination, return the denomination and the count of schools with that denomination. Visualize by pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"school\" table\nschool_data = pd.read_sql(\"SELECT * FROM school\", conn)\n\n# Convert column names to lowercase\nschool_data.columns = school_data.columns.str.lower()\n\n# Perform the SQL query and group by \"denomination\"\ngrouped_data = school_data.groupby(\"denomination\").size().reset_index(name=\"count\")\n\n# Plot the pie chart\nplt.pie(grouped_data[\"count\"], labels=grouped_data[\"denomination\"], autopct=\"%1.1f%%\")\nplt.title(\"Distribution of Schools by Denomination\")\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "Bar graph to show total number of population from different governmentform , I want to list bars in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry.columns = country.columns.str.lower()\n\n# Grouping the data by governmentform and calculating the sum of population\ngrouped_data = country.groupby('governmentform')['population'].sum()\n\n# Sorting the data by governmentform in ascending order\nsorted_data = grouped_data.sort_index()\n\n# Creating a bar plot\nplt.bar(sorted_data.index, sorted_data.values)\n\n# Adding labels and title\nplt.xlabel('Government Form')\nplt.ylabel('Population')\nplt.title('Population by Government Form')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Bar chart x axis nominee y axis the total number , I want to show by the x-axis in descending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Group by nominee and count the occurrences\ngrouped = musical.groupby('nominee').size().reset_index(name='count')\n\n# Sort by nominee in descending order\ngrouped = grouped.sort_values('nominee', ascending=False)\n\n# Create bar plot\nplt.bar(grouped['nominee'], grouped['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "insurance_fnol",
    "question": "What are the names of the services that have been used for more than 2 times in the first notification of loss, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nfirst_notification_of_loss = pd.read_sql(\"SELECT * FROM first_notification_of_loss\", conn)\nservices = pd.read_sql(\"SELECT * FROM services\", conn)\nfirst_notification_of_loss.columns = first_notification_of_loss.columns.str.lower()\nservices.columns = services.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(first_notification_of_loss, services, on='service_id')\n\n# Group by service_name and count the occurrences\ngrouped_df = merged_df.groupby('service_name').size().reset_index(name='count')\n\n# Filter the groups with count > 2\nfiltered_df = grouped_df[grouped_df['count'] > 2]\n\n# Plot the bar chart\nplt.bar(filtered_df['service_name'], filtered_df['count'])\nplt.xlabel('Service Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences for Services with Count > 2')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "For all organizations that have grants of more than 6000 dollars, compare the number of details of the organizations with a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Grants table\ngrants = pd.read_sql(\"SELECT * FROM Grants\", conn)\n\n# Read the Organisations table\norganisations = pd.read_sql(\"SELECT * FROM Organisations\", conn)\n\n# Convert column names to lowercase\ngrants.columns = grants.columns.str.lower()\norganisations.columns = organisations.columns.str.lower()\n\n# merge the grants and organisations tables on organisation_id\nmerged_data = pd.merge(grants, organisations, on=\"organisation_id\")\n\n# group by organisation_details and count the occurrences\ngrouped_data = merged_data.groupby(\"organisation_details\").size().reset_index(name=\"count\")\n\n# plot the bar chart\nplt.bar(grouped_data[\"organisation_details\"], grouped_data[\"count\"])\nplt.xlabel(\"Organisation Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Grants by Organisation Details\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "department_management",
    "question": "How many departments are built in each year ? Group by creation time in a line chart , order from low to high by the X .",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = department.columns.str.lower()\n\n# Assuming 'department' is a DataFrame containing the table data\n\n# Perform the SQL query\nresult = department.groupby('creation').size().reset_index(name='count').sort_values('creation')\n\n# Plot the line chart\nplt.plot(result['creation'], result['count'])\nplt.xlabel('Creation')\nplt.ylabel('Count')\nplt.title('Line Chart of Creation Count')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "What is the number of types of competition?, sort the number of competition type from high to low order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the competition table\ncompetition_df = pd.read_sql(\"SELECT * FROM competition\", conn)\n\n# Convert column names to lowercase\ncompetition_df.columns = competition_df.columns.str.lower()\n\n# Perform the SQL query\nresult = competition_df.groupby('competition_type').size().reset_index(name='count').sort_values('count', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['competition_type'], result['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Competition Type Count')\nplt.show()"
  },
  {
    "db_id": "car_1",
    "question": "Draw a bar chart for what are the names and ids of all makers with more than 3 models?, could you sort by the Y from high to low?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read data from the CAR_MAKERS table\ncar_makers = pd.read_sql(\"SELECT * FROM CAR_MAKERS\", conn)\ncar_makers.columns = map(str.lower, car_makers.columns)\n\n# Read data from the MODEL_LIST table\nmodel_list = pd.read_sql(\"SELECT * FROM MODEL_LIST\", conn)\nmodel_list.columns = map(str.lower, model_list.columns)\n\n# Merge the two tables on the 'id' column\nmerged_data = pd.merge(car_makers, model_list, left_on='id', right_on='maker')\n\n# Sort the merged data by 'id' in descending order\nsorted_data = merged_data.sort_values('id', ascending=False)\n\n# Extract the 'fullname' and 'id' columns\nfullname = sorted_data['fullname']\nid = sorted_data['id']\n\n# Create a bar plot\nplt.bar(fullname, id)\nplt.xlabel('Full Name')\nplt.ylabel('ID')\nplt.title('Car Makers and IDs')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Show me the number of born state by born state in a bar , show by the y axis from low to high .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nhead = pd.read_sql(\"SELECT * FROM head\", conn)\nhead.columns = head.columns.str.lower()\n\nresult = head.groupby('born_state').size().reset_index(name='count').sort_values('count')\n\nplt.bar(result['born_state'], result['count'])\nplt.xlabel('born_state')\nplt.ylabel('count')\nplt.title('Count of born_state')\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Compare the total number of captains with different classes using a bar graph.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the captain table\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\n\n# Convert column names to lowercase\ncaptain.columns = captain.columns.str.lower()\n\n# Perform the SQL query\nresult = captain.groupby('class').size()\n\n# Generate the bar chart\nplt.bar(result.index, result.values)\nplt.xlabel('Class')\nplt.ylabel('Count')\nplt.title('Number of Captains by Class')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Show the number of different competition types with a bar graph.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the competition table\ncompetition_df = pd.read_sql(\"SELECT * FROM competition\", conn)\n\n# Convert column names to lowercase\ncompetition_df.columns = competition_df.columns.str.lower()\n\n# Perform the SQL query\nresult = competition_df.groupby('competition_type').size()\n\n# Create the bar plot\nplt.bar(result.index, result.values)\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Type')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "What is the movie title and average rating of the movie with the lowest average rating, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nMovie = pd.read_sql(\"SELECT * FROM Movie\", conn)\nRating.columns = Rating.columns.str.lower()\nMovie.columns = Movie.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(Rating, Movie, on='mid')\n\n# Grouping by movie and calculating average stars\ngrouped_df = merged_df.groupby('title')['stars'].mean().reset_index()\n\n# Sorting by average stars in ascending order\nsorted_df = grouped_df.sort_values('stars')\n\n# Selecting the movie with the lowest average stars\nlowest_avg_stars = sorted_df.head(1)\n\n# Plotting the bar chart\nplt.bar(lowest_avg_stars['title'], lowest_avg_stars['stars'])\nplt.xlabel('Movie Title')\nplt.ylabel('Average Stars')\nplt.title('Movie with the Lowest Average Stars')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "What are the number of the titles of all movies that have between 3 and 5 stars?, and show names in descending order.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\nmovie_df.columns = map(str.lower, movie_df.columns)\n\n# Merge the Rating and Movie tables on mID\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Filter the merged table for stars between 3 and 5\nfiltered_df = merged_df[(merged_df[\"stars\"] >= 3) & (merged_df[\"stars\"] <= 5)]\n\n# Group by title and count the occurrences\ngrouped_df = filtered_df.groupby(\"title\").size().reset_index(name=\"count\")\n\n# Sort the grouped table by title in descending order\nsorted_df = grouped_df.sort_values(\"title\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df[\"title\"], sorted_df[\"count\"])\nplt.xlabel(\"Title\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Ratings for Movies with Stars between 3 and 5\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "For each reviewer id, show their corresponding the smallest rating for the movie in a scatter chart.",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\n\n# Convert column names to lowercase\nrating_df.columns = rating_df.columns.str.lower()\nmovie_df.columns = movie_df.columns.str.lower()\n\n# merge the rating and movie tables on mid\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# group by rid and calculate the minimum stars for each rid\ngrouped_df = merged_df.groupby(\"rid\")[\"stars\"].min().reset_index()\n\n# scatter plot\nplt.scatter(grouped_df[\"rid\"], grouped_df[\"stars\"])\nplt.xlabel(\"rID\")\nplt.ylabel(\"Minimum Stars\")\nplt.title(\"Scatter Plot of Minimum Stars by rID\")\n\n# Show the plot\nplt.show()\n"
  },
  {
    "db_id": "ship_1",
    "question": "Compare the total number of different ranks using a bar graph .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\ncaptain.columns = captain.columns.str.lower()\n\n# Grouping the data by rank and counting the occurrences\nrank_counts = captain.groupby('rank').size().reset_index(name='count')\n\n# Creating the bar plot\nplt.bar(rank_counts['rank'], rank_counts['count'])\nplt.xlabel('Rank')\nplt.ylabel('Count')\nplt.title('Count of Captains by Rank')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Show the title and the lowest rating among all movies in a bar chart, order names from high to low order please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\nmovie_df.columns = map(str.lower, movie_df.columns)\n\n# Merge the Rating and Movie tables on mID column\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Group by title and calculate the minimum stars for each movie\ngrouped_df = merged_df.groupby(\"title\")[\"stars\"].min().reset_index()\n\n# Sort the dataframe by title in descending order\nsorted_df = grouped_df.sort_values(\"title\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df[\"title\"], sorted_df[\"stars\"])\nplt.xlabel(\"Movie Title\")\nplt.ylabel(\"Minimum Stars\")\nplt.title(\"Minimum Stars for Each Movie\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all template type codes and number of templates for each Visualize by bar chart , order X-axis in descending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nTemplates = pd.read_sql(\"SELECT * FROM Templates\", conn)\nTemplates.columns = Templates.columns.str.lower()\n\n# Grouping the data by template_type_code and counting the occurrences\ntemplate_counts = Templates.groupby('template_type_code').size().reset_index(name='count')\n\n# Sorting the data by template_type_code in descending order\ntemplate_counts = template_counts.sort_values('template_type_code', ascending=False)\n\n# Creating the bar plot\nplt.bar(template_counts['template_type_code'], template_counts['count'])\nplt.xlabel('Template Type Code')\nplt.ylabel('Count')\nplt.title('Template Type Code Counts')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Compare the total number of competitions for each country .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by country and count the occurrences\ncountry_counts = competition.groupby('country').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(country_counts['country'], country_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Country')\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 Visualize by bar chart , and display Y-axis in asc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry.columns = country.columns.str.lower()\n\n# Group by governmentform and calculate the sum of population\ngrouped_data = country.groupby('governmentform')['population'].sum()\n\n# Sort the data in ascending order\nsorted_data = grouped_data.sort_values()\n\n# Create a bar plot\nplt.bar(sorted_data.index, sorted_data.values)\n\n# Set the x-axis label\nplt.xlabel('Government Form')\n\n# Set the y-axis label\nplt.ylabel('Population')\n\n# Set the title of the plot\nplt.title('Population by Government Form')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "A bar chart about what are the statuses and average populations of each city?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the city table\ncity_df = pd.read_sql(\"SELECT * FROM city\", conn)\n\n# Convert column names to lowercase\ncity_df.columns = city_df.columns.str.lower()\n\n# Group by Status and calculate average Population\ngrouped_df = city_df.groupby('status')['population'].mean().reset_index()\n\n# Plot the bar chart\nplt.bar(grouped_df['status'], grouped_df['population'])\nplt.xlabel('Status')\nplt.ylabel('Average Population')\nplt.title('Average Population by Status')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Show the title and score of the movie with a bar chart, show X-axis in descending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\nmovie_df.columns = map(str.lower, movie_df.columns)\n\n# Merge the Rating and Movie tables on mID column\nmerged_df = pd.merge(rating_df, movie_df, on='mid')\n\n# Sort the merged dataframe by title in descending order\nsorted_df = merged_df.sort_values(by='title', ascending=False)\n\n# Extract the required columns for visualization\ntitle = sorted_df['title']\nstars = sorted_df['stars']\n\n# Create a bar plot\nplt.bar(title, stars)\nplt.xlabel('Movie Title')\nplt.ylabel('Stars')\nplt.title('Movie Ratings')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "What are the different parties of representative? Show the party name and the number of representatives in each party, and could you show total number in descending order?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the representative table\nrepresentative_df = pd.read_sql(\"SELECT * FROM representative\", conn)\n\n# Convert column names to lowercase\nrepresentative_df.columns = representative_df.columns.str.lower()\n\n# Perform the SQL query\nparty_count_df = representative_df.groupby('party').size().reset_index(name='count')\nparty_count_df = party_count_df.sort_values('count', ascending=False)\n\n# Generate the bar plot\nplt.bar(party_count_df['party'], party_count_df['count'])\nplt.xlabel('Party')\nplt.ylabel('Count')\nplt.title('Number of Representatives by Party')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "school_player",
    "question": "For each denomination, return the denomination and the count of schools with that denomination Visualize by bar chart, and rank total number from high to low order please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the \"school\" table into a pandas DataFrame\nschool_df = pd.read_sql(\"SELECT * FROM school\", conn)\n\n# Convert column names to lowercase\nschool_df.columns = school_df.columns.str.lower()\n\n# Perform the SQL query\nresult = school_df.groupby('denomination').size().reset_index(name='count').sort_values(by='count', ascending=False)\n\n# Generate the bar plot\nplt.bar(result['denomination'], result['count'])\nplt.xlabel('Denomination')\nplt.ylabel('Count')\nplt.title('Number of Schools by Denomination')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "List the position of players and the average number of points of players of each position Visualize by bar chart , and order by the names in ascending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nplayer.columns = player.columns.str.lower()\n\n# Calculate average points by position\navg_points_by_position = player.groupby('position')['points'].mean()\n\n# Sort positions in ascending order\navg_points_by_position = avg_points_by_position.sort_index()\n\n# Create bar plot\nplt.bar(avg_points_by_position.index, avg_points_by_position.values)\nplt.xlabel('Position')\nplt.ylabel('Average Points')\nplt.title('Average Points by Position')\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Show different locations and the number of performances at each location by a bar chart , and I want to sort by the bars from high to low .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\nperformance.columns = performance.columns.str.lower()\n\n# Group by location and count the number of occurrences\nlocation_counts = performance.groupby('location').size().reset_index(name='count')\n\n# Sort the data by location in descending order\nlocation_counts = location_counts.sort_values('location', ascending=False)\n\n# Create a bar plot\nplt.bar(location_counts['location'], location_counts['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Performance by Location')\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Show different nominees and the number of musicals they have been nominated in a pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Assuming the data is already loaded into a dataframe called 'musical'\n\n# Grouping the data by 'nominee' and counting the occurrences\ngrouped_data = musical.groupby('nominee').size().reset_index(name='count')\n\n# Creating a pie chart\nplt.pie(grouped_data['count'], labels=grouped_data['nominee'], autopct='%1.1f%%')\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes', could you rank by the names from low to high please?",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the department table\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = map(str.lower, department.columns)\n\n# Read the management table\nmanagement = pd.read_sql(\"SELECT * FROM management\", conn)\nmanagement.columns = map(str.lower, management.columns)\n\n# Merge the department and management tables\nmerged_data = pd.merge(department, management, on=\"department_id\")\n\n# Filter the merged data for temporary acting departments\nfiltered_data = merged_data[merged_data[\"temporary_acting\"] == \"Yes\"]\n\n# Group by department name and calculate the sum of num_employees\ngrouped_data = filtered_data.groupby(\"name\")[\"num_employees\"].sum().reset_index()\n\n# Sort the data by department name in ascending order\nsorted_data = grouped_data.sort_values(\"name\", ascending=True)\n\n# Create a bar plot\nplt.bar(sorted_data[\"name\"], sorted_data[\"num_employees\"])\nplt.xlabel(\"Department Name\")\nplt.ylabel(\"Total Number of Employees\")\nplt.title(\"Total Number of Employees in Temporary Acting Departments\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Show me mean age by born state in a bar , and could you order from low to high by the bars please ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nhead = pd.read_sql(\"SELECT * FROM head\", conn)\nhead.columns = head.columns.str.lower()\n\nresult = head.groupby('born_state')['age'].mean().reset_index().sort_values('born_state')\n\nplt.bar(result['born_state'], result['age'])\nplt.xlabel('Born State')\nplt.ylabel('Average Age')\nplt.title('Average Age by Born State')\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "How does the number of staff vary over time for each project?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nProject_Staff = pd.read_sql(\"SELECT * FROM Project_Staff\", conn)\nProjects = pd.read_sql(\"SELECT * FROM Projects\", conn)\nProject_Staff.columns = Project_Staff.columns.str.lower()\nProjects.columns = Projects.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Project_Staff, Projects, on='project_id')\n\n# Group by project_id and count the number of rows\ngrouped_df = merged_df.groupby('project_id').size().reset_index(name='count')\n\n# Plot the line chart\nplt.plot(grouped_df['project_id'], grouped_df['count'])\nplt.xlabel('Project ID')\nplt.ylabel('Count')\nplt.title('Number of Staff per Project')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Show me a bar chart displaying the names of different reviewers who rated Gone with the Wind and the corresponding number of times each reviewer rated it.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nMovie = pd.read_sql(\"SELECT * FROM Movie\", conn)\nReviewer = pd.read_sql(\"SELECT * FROM Reviewer\", conn)\nRating.columns = Rating.columns.str.lower()\nMovie.columns = Movie.columns.str.lower()\nReviewer.columns = Reviewer.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(pd.merge(Rating, Movie, on='mid'), Reviewer, on='rid')\n\n# Filter by movie title\nfiltered_df = merged_df[merged_df['title'] == 'Gone with the Wind']\n\n# Group by reviewer name and count ratings\ngrouped_df = filtered_df.groupby('name').size().reset_index(name='count')\n\n# Plot bar chart\nplt.bar(grouped_df['name'], grouped_df['count'])\nplt.xlabel('Reviewer Name')\nplt.ylabel('Count')\nplt.title('Number of Ratings for \"Gone with the Wind\" by Reviewer')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "How many music festivals have a duration of more than 2 weeks for each ceremony date, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmusic_festival = pd.read_sql(\"SELECT * FROM music_festival\", conn)\nvolume = pd.read_sql(\"SELECT * FROM volume\", conn)\nmusic_festival.columns = music_festival.columns.str.lower()\nvolume.columns = volume.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(music_festival, volume, left_on='volume', right_on='volume_id')\n\n# Filtering the data\nfiltered_df = merged_df[merged_df['weeks_on_top'] > 2]\n\n# Grouping and counting\ngrouped_df = filtered_df.groupby('date_of_ceremony').size().reset_index(name='count')\n\n# Sorting the data\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plotting the bar chart\nplt.bar(sorted_df['date_of_ceremony'], sorted_df['count'])\nplt.xlabel('Date of Ceremony')\nplt.ylabel('Count')\nplt.title('Number of Music Festivals by Date of Ceremony')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Show all sport name and the number of students Show bar chart , rank by the X from high to low .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nSportsinfo.columns = Sportsinfo.columns.str.lower()\n\n# Grouping the data by sportname and counting the occurrences\nsport_counts = Sportsinfo.groupby('sportname').size().reset_index(name='count')\n\n# Sorting the data by sportname in descending order\nsport_counts = sport_counts.sort_values('sportname', ascending=False)\n\n# Creating the bar plot\nplt.bar(sport_counts['sportname'], sport_counts['count'])\nplt.xlabel('Sport Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Sport Name')\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Plot the average of budget in billions over creation in a line chart , and show Creation in asc order .",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = department.columns.str.lower()\n\n# Assuming 'department' is a DataFrame containing the table data\n\n# Grouping by 'creation' and calculating the average of 'budget_in_billions'\navg_budget = department.groupby('creation')['budget_in_billions'].mean()\n\n# Sorting the data by 'creation' in ascending order\navg_budget = avg_budget.sort_index()\n\n# Creating a line plot\nplt.plot(avg_budget.index, avg_budget.values)\n\n# Adding labels and title\nplt.xlabel('Creation')\nplt.ylabel('Average Budget (in billions)')\nplt.title('Average Budget by Creation')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "List the budget of each department in a bar chart, and list by the X-axis in descending.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the department table\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\n\n# Convert column names to lowercase\ndepartment.columns = department.columns.str.lower()\n\n# Sort the department table by name in descending order\ndepartment_sorted = department.sort_values(by='name', ascending=False)\n\n# Extract the Name and Budget_in_Billions columns\nname = department_sorted['name']\nbudget = department_sorted['budget_in_billions']\n\n# Create a bar plot\nplt.bar(name, budget)\nplt.xlabel('Department Name')\nplt.ylabel('Budget in Billions')\nplt.title('Department Budgets')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "county_public_safety",
    "question": "Return a bar chart on how many counties correspond to each police force ? , display in descending by the Police_force please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncounty_public_safety = pd.read_sql(\"SELECT * FROM county_public_safety\", conn)\ncounty_public_safety.columns = county_public_safety.columns.str.lower()\n\n# Group by police_force and count the occurrences\ndf_grouped = county_public_safety.groupby('police_force').size().reset_index(name='count')\n\n# Sort by police_force in descending order\ndf_sorted = df_grouped.sort_values('police_force', ascending=False)\n\n# Create bar plot\nplt.bar(df_sorted['police_force'], df_sorted['count'])\nplt.xlabel('Police Force')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Police Force')\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Calculate the number of actors in each duration of actors using a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the actor table\nactor_df = pd.read_sql(\"SELECT * FROM actor\", conn)\n\n# Convert column names to lowercase\nactor_df.columns = actor_df.columns.str.lower()\n\n# Group by Duration and count the occurrences\nduration_counts = actor_df.groupby('duration').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(duration_counts['duration'], duration_counts['count'])\nplt.xlabel('Duration')\nplt.ylabel('Count')\nplt.title('Bar Chart of Duration Counts')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Give me a bar chart for how many competition type of each competition type , and I want to order in desc by the x axis please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort by competition_type in descending order\ncompetition_counts = competition_counts.sort_values('competition_type', ascending=False)\n\n# Plot the bar chart\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Competition Type Counts')\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "What are the category of music festivals with result \"Awarded\", and count them by a bar chart, show from low to high by the y axis.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the music_festival table\nmusic_festival = pd.read_sql(\"SELECT * FROM music_festival\", conn)\n\n# Convert column names to lowercase\nmusic_festival.columns = music_festival.columns.str.lower()\n\n# Filter the data for \"Awarded\" results\nawarded_data = music_festival[music_festival[\"result\"] == \"Awarded\"]\n\n# Group by category and count the occurrences\ncategory_counts = awarded_data.groupby(\"category\").size().reset_index(name=\"count\")\n\n# Sort the data by count in ascending order\ncategory_counts = category_counts.sort_values(\"count\")\n\n# Create a bar plot\nplt.bar(category_counts[\"category\"], category_counts[\"count\"])\nplt.xlabel(\"Category\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Awards by Category\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "insurance_fnol",
    "question": "How many customers have policies of each policy type, and which policy type has the highest number of customers, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\ncustomers_policies = pd.read_sql(\"SELECT * FROM customers_policies\", conn)\navailable_policies = pd.read_sql(\"SELECT * FROM available_policies\", conn)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\ncustomers_policies = pd.read_sql(\"SELECT * FROM customers_policies\", conn)\ncustomers.columns = customers.columns.str.lower()\ncustomers_policies.columns = customers_policies.columns.str.lower()\navailable_policies.columns = available_policies.columns.str.lower()\ncustomers.columns = customers.columns.str.lower()\ncustomers_policies.columns = customers_policies.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(customers, customers_policies, on='customer_id')\nmerged_df = pd.merge(merged_df, available_policies, on='policy_id')\n\n# Get customer name with the highest count\ntop_customer_name = merged_df.groupby('customer_name').size().sort_values(ascending=False).index[0]\n\n# Filter data for the top customer\nfiltered_df = merged_df[merged_df['customer_name'] == top_customer_name]\n\n# Group by policy type code and count distinct customer IDs\nresult_df = filtered_df.groupby('policy_type_code')['customer_id'].nunique().reset_index()\nresult_df.columns = ['policy_type_code', 'customer_count']\n\n# Sort by customer count in descending order\nresult_df = result_df.sort_values('customer_count', ascending=False)\n\n# Plot the bar chart\nplt.bar(result_df['policy_type_code'], result_df['customer_count'])\nplt.xlabel('Policy Type Code')\nplt.ylabel('Customer Count')\nplt.title('Customer Count by Policy Type Code for {}'.format(top_customer_name))\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "What is the scatter plot of population and number of competitions hosted in each city?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\nfarm_competition = pd.read_sql(\"SELECT * FROM farm_competition\", conn)\ncity.columns = city.columns.str.lower()\nfarm_competition.columns = farm_competition.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(city, farm_competition, left_on='city_id', right_on='host_city_id')\n\n# Group by city_id and calculate the count of competitions\ncompetition_count = merged_df.groupby('city_id').size().reset_index(name='competition_count')\n\n# Merge with city dataframe to get population\nresult_df = pd.merge(city, competition_count, on='city_id')\n\n# Scatter plot\nplt.scatter(result_df['population'], result_df['competition_count'])\nplt.xlabel('Population')\nplt.ylabel('Competition Count')\nplt.title('Population vs Competition Count')\nplt.show()"
  },
  {
    "db_id": "county_public_safety",
    "question": "Show me a bar chart displaying the count of cities in each county, ordered in descending order by the count.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncounty_public_safety = pd.read_sql(\"SELECT * FROM county_public_safety\", conn)\ncity.columns = city.columns.str.lower()\ncounty_public_safety.columns = county_public_safety.columns.str.lower()\n\n# Joining the city and county_public_safety tables\nmerged_df = pd.merge(city, county_public_safety, on='county_id')\n\n# Grouping by county name and counting the occurrences\ngrouped_df = merged_df.groupby('name_y').size().reset_index(name='count')\n\n# Sorting the dataframe by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plotting the bar chart\nplt.bar(sorted_df['name_y'], sorted_df['count'])\nplt.xlabel('County Name')\nplt.ylabel('Count')\nplt.title('Number of Cities in Each County')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "Return the results of all music festivals using a bar chart , and I want to rank x-axis from low to high order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmusic_festival = pd.read_sql(\"SELECT * FROM music_festival\", conn)\nmusic_festival.columns = music_festival.columns.str.lower()\n\n# Group by 'result' and count the occurrences\nresult_counts = music_festival.groupby('result').size().reset_index(name='count')\n\n# Sort the result_counts by 'result' in ascending order\nresult_counts = result_counts.sort_values('result')\n\n# Create a bar plot\nplt.bar(result_counts['result'], result_counts['count'])\nplt.xlabel('Result')\nplt.ylabel('Count')\nplt.title('Music Festival Results')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Return me a scatter chart to show the smallest rating of the movie for each reviewer.",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\n\n# Convert column names to lowercase\nrating_df.columns = rating_df.columns.str.lower()\nmovie_df.columns = movie_df.columns.str.lower()\n\n# merge the rating and movie tables on mid\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# group by rid and calculate the minimum stars for each rid\ngrouped_df = merged_df.groupby(\"rid\")[\"stars\"].min().reset_index()\n\n# scatter plot\nplt.scatter(grouped_df[\"rid\"], grouped_df[\"stars\"])\nplt.xlabel(\"rID\")\nplt.ylabel(\"Minimum Stars\")\nplt.title(\"Scatter Plot of Minimum Stars by rID\")\n\n# Show the plot\nplt.show()\n"
  },
  {
    "db_id": "music_4",
    "question": "Plot the number of result by grouped by result as a bar graph , could you order bar from low to high order please ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmusic_festival = pd.read_sql(\"SELECT * FROM music_festival\", conn)\nmusic_festival.columns = music_festival.columns.str.lower()\n\n# Group by 'result' and count the occurrences\nresult_counts = music_festival.groupby('result').size().reset_index(name='count')\n\n# Sort the result_counts by 'result' in ascending order\nresult_counts = result_counts.sort_values('result')\n\n# Create a bar plot\nplt.bar(result_counts['result'], result_counts['count'])\nplt.xlabel('Result')\nplt.ylabel('Count')\nplt.title('Music Festival Results')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Show the title and score of the movie with a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\nmovie_df.columns = map(str.lower, movie_df.columns)\n\n# Merge the Rating and Movie tables on mID column\nmerged_df = pd.merge(rating_df, movie_df, on='mid')\n\n# Select the required columns\nselected_df = merged_df[['title', 'stars']]\n\n# Group by title and calculate the average stars\ngrouped_df = selected_df.groupby('title').mean()\n\n# Plot the bar chart\nplt.bar(grouped_df.index, grouped_df['stars'])\nplt.xlabel('Movie Title')\nplt.ylabel('Average Stars')\nplt.title('Average Stars for Each Movie')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Can you create a bar chart displaying the game names and the total hours played for games that have been played for at least 1000 hours?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nPlays_games = pd.read_sql(\"SELECT * FROM Plays_games\", conn)\nVideo_games = pd.read_sql(\"SELECT * FROM Video_games\", conn)\nPlays_games.columns = Plays_games.columns.str.lower()\nVideo_games.columns = Video_games.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Plays_games, Video_games, on='gameid')\n\n# Group by gameid and calculate the sum of hours_played\ngrouped_df = merged_df.groupby('gameid').agg({'gname': 'first', 'hours_played': 'sum'})\n\n# Filter the games with sum(hours_played) >= 1000\nfiltered_df = grouped_df[grouped_df['hours_played'] >= 1000]\n\n# Plot the bar chart\nplt.bar(filtered_df['gname'], filtered_df['hours_played'])\nplt.xlabel('Game Name')\nplt.ylabel('Total Hours Played')\nplt.title('Total Hours Played for Games with >= 1000 Hours')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "How many students play each sport Show bar chart , sort bars in descending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nSportsinfo.columns = Sportsinfo.columns.str.lower()\n\n# Grouping the data by sportname and counting the occurrences\nsport_counts = Sportsinfo.groupby('sportname').size().reset_index(name='count')\n\n# Sorting the data by sportname in descending order\nsport_counts = sport_counts.sort_values('sportname', ascending=False)\n\n# Creating the bar plot\nplt.bar(sport_counts['sportname'], sport_counts['count'])\nplt.xlabel('Sport Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Sport Name')\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "Can you create a scatter plot to display the names of representatives and the corresponding dates of elections they participated in?",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nelection = pd.read_sql(\"SELECT * FROM election\", conn)\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\nelection.columns = election.columns.str.lower()\nrepresentative.columns = representative.columns.str.lower()\n\n# Merge the election and representative tables\nmerged_df = pd.merge(election, representative, on='representative_id')\n\n# Create a scatter plot\nplt.scatter(merged_df['name'], merged_df['date'])\nplt.xlabel('Representative Name')\nplt.ylabel('Election Date')\nplt.title('Scatter Plot of Representative Name vs Election Date')\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "Show me a bar chart displaying the staff ID and the count of projects for each staff ID, sorted in descending order by the count of projects.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nProject_Staff = pd.read_sql(\"SELECT * FROM Project_Staff\", conn)\nProject_outcomes = pd.read_sql(\"SELECT * FROM Project_outcomes\", conn)\nProject_Staff.columns = Project_Staff.columns.str.lower()\nProject_outcomes.columns = Project_outcomes.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Project_Staff, Project_outcomes, on='project_id')\n\n# Perform the group by and count operation\ngrouped_df = merged_df.groupby('staff_id').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['staff_id'], sorted_df['count'])\nplt.xlabel('Staff ID')\nplt.ylabel('Count')\nplt.title('Number of Projects per Staff')\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "Just compare the number of journal committees of each editor using a histogram.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the editor and journal_committee tables\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\njournal_committee = pd.read_sql(\"SELECT * FROM journal_committee\", conn)\n\n# Convert column names to lowercase\neditor.columns = editor.columns.str.lower()\njournal_committee.columns = journal_committee.columns.str.lower()\n\n# merge the editor and journal_committee tables on editor_id\nmerged_data = pd.merge(editor, journal_committee, on=\"editor_id\")\n\n# group by editor_id and count the number of occurrences\ngrouped_data = merged_data.groupby(\"editor_id\").size().reset_index(name=\"count\")\n\n# plot the bar chart\nplt.bar(grouped_data[\"editor_id\"], grouped_data[\"count\"])\nplt.xlabel(\"Editor ID\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of occurrences per Editor ID\")\nplt.show()\n"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show the number of documents for each document name in a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the Paragraphs table\nparagraphs = pd.read_sql(\"SELECT * FROM Paragraphs\", conn)\n\n# Read the data from the Documents table\ndocuments = pd.read_sql(\"SELECT * FROM Documents\", conn)\n\n# Convert column names to lowercase\nparagraphs.columns = paragraphs.columns.str.lower()\ndocuments.columns = documents.columns.str.lower()\n\n# merge the two tables on the document_id column\nmerged_data = pd.merge(paragraphs, documents, on=\"document_id\")\n\n# group the data by document_name and count the number of occurrences\ngrouped_data = merged_data.groupby(\"document_name\").size().reset_index(name=\"count\")\n\n# plot the bar chart\nplt.bar(grouped_data[\"document_name\"], grouped_data[\"count\"])\nplt.xlabel(\"Document Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Paragraphs per Document\")\nplt.show()\n"
  },
  {
    "db_id": "manufacturer",
    "question": "Compare the prices of furnitures which some companies are manufacturing by each name using a bar chart, rank in descending by the Price_in_Dollar.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the furniture table\nfurniture = pd.read_sql(\"SELECT * FROM furniture\", conn)\nfurniture.columns = map(str.lower, furniture.columns)\n\n# Read the furniture_manufacte table\nfurniture_manufacte = pd.read_sql(\"SELECT * FROM furniture_manufacte\", conn)\nfurniture_manufacte.columns = map(str.lower, furniture_manufacte.columns)\n\n# Merge the two tables on Furniture_ID\nmerged_data = pd.merge(furniture, furniture_manufacte, on=\"furniture_id\")\n\n# Sort the merged data by Price_in_Dollar in descending order\nsorted_data = merged_data.sort_values(by=\"price_in_dollar\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"name\"], sorted_data[\"price_in_dollar\"])\nplt.xlabel(\"Furniture Name\")\nplt.ylabel(\"Price in Dollar\")\nplt.title(\"Furniture Prices\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "How many grants have both 'Regular' and 'Initial Application' documents, and what is the count for each grant start date? Show the results in a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nGrants = pd.read_sql(\"SELECT * FROM Grants\", conn)\nDocuments = pd.read_sql(\"SELECT * FROM Documents\", conn)\nDocument_Types = pd.read_sql(\"SELECT * FROM Document_Types\", conn)\nGrants.columns = Grants.columns.str.lower()\nDocuments.columns = Documents.columns.str.lower()\nDocument_Types.columns = Document_Types.columns.str.lower()\n\n# Merge tables\nmerged_df = pd.merge(Grants, Documents, on='grant_id')\nmerged_df = pd.merge(merged_df, Document_Types, on='document_type_code')\n\n# Filter documents with document_description as 'Regular' or 'Initial Application'\nfiltered_df = merged_df[merged_df['document_description'].isin(['Regular', 'Initial Application'])]\n\n# Group by grant_start_date and count the number of documents\ngrouped_df = filtered_df.groupby('grant_start_date').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['grant_start_date'], grouped_df['count'])\nplt.xlabel('Grant Start Date')\nplt.ylabel('Count')\nplt.title('Number of Documents by Grant Start Date')\nplt.xticks(rotation=45)\nplt.show()\n"
  },
  {
    "db_id": "entrepreneur",
    "question": "How many entrepreneurs correspond to each investor, and order by the names in asc.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the entrepreneur table\nentrepreneur_df = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\n\n# Convert column names to lowercase\nentrepreneur_df.columns = entrepreneur_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = entrepreneur_df.groupby('investor').size().reset_index(name='count').sort_values('investor')\n\n# Generate the bar plot\nplt.bar(result_df['investor'], result_df['count'])\nplt.xlabel('Investor')\nplt.ylabel('Count')\nplt.title('Number of Entrepreneurs per Investor')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "What is the bar chart depicting the status of the city that has hosted the greatest number of competitions?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\nfarm_competition = pd.read_sql(\"SELECT * FROM farm_competition\", conn)\ncity.columns = city.columns.str.lower()\nfarm_competition.columns = farm_competition.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(city, farm_competition, left_on='city_id', right_on='host_city_id')\n\n# Group by status and count the number of competitions\ngrouped_df = merged_df.groupby('status').size().reset_index(name='numcompetitions')\n\n# Sort by numcompetitions in descending order and select the top 1\nsorted_df = grouped_df.sort_values('numcompetitions', ascending=False).head(1)\n\n# Plot the bar chart\nplt.bar(sorted_df['status'], sorted_df['numcompetitions'])\nplt.xlabel('Status')\nplt.ylabel('Number of Competitions')\nplt.title('Number of Competitions by Status')\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "How many furniture types are produced by each manufacturer, and what are the company names, represented in a line chart?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmanufacturer = pd.read_sql(\"SELECT * FROM manufacturer\", conn)\nfurniture_manufacte = pd.read_sql(\"SELECT * FROM furniture_manufacte\", conn)\nmanufacturer.columns = manufacturer.columns.str.lower()\nfurniture_manufacte.columns = furniture_manufacte.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(manufacturer, furniture_manufacte, on='manufacturer_id')\n\n# Group by manufacturer name and count the number of occurrences\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Sort the dataframe by manufacturer name in ascending order\nsorted_df = grouped_df.sort_values('name')\n\n# Plot the line chart\nplt.plot(sorted_df['name'], sorted_df['count'])\nplt.xlabel('Manufacturer')\nplt.ylabel('Count')\nplt.title('Number of Furniture by Manufacturer')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "What is the official language spoken in the country whose head of state is Beatrix, and count them by a bar chart, and sort x-axis in asc order.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the country table\ncountry_data = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry_data.columns = map(str.lower, country_data.columns)\n\n# Read the data from the countrylanguage table\ncountrylanguage_data = pd.read_sql(\"SELECT * FROM countrylanguage\", conn)\ncountrylanguage_data.columns = map(str.lower, countrylanguage_data.columns)\n\n# Merge the two tables on the CountryCode column\nmerged_data = pd.merge(country_data, countrylanguage_data, left_on=\"code\", right_on=\"countrycode\")\n\n# Filter the merged data based on the conditions\nfiltered_data = merged_data[(merged_data[\"headofstate\"] == \"Beatrix\") & (merged_data[\"isofficial\"] == \"T\")]\n\n# Group the filtered data by Language and count the occurrences\ngrouped_data = filtered_data.groupby(\"language\").size().reset_index(name=\"count\")\n\n# Sort the grouped data by Language in ascending order\nsorted_data = grouped_data.sort_values(\"language\")\n\n# Plot the bar chart\nplt.bar(sorted_data[\"language\"], sorted_data[\"count\"])\nplt.xlabel(\"Language\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Countries with Official Language by Language\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show me the total number by template type code in a bar , and list by the Template_Type_Code in descending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nTemplates = pd.read_sql(\"SELECT * FROM Templates\", conn)\nTemplates.columns = Templates.columns.str.lower()\n\n# Grouping the data by template_type_code and counting the occurrences\ntemplate_counts = Templates.groupby('template_type_code').size().reset_index(name='count')\n\n# Sorting the data by template_type_code in descending order\ntemplate_counts = template_counts.sort_values('template_type_code', ascending=False)\n\n# Creating the bar plot\nplt.bar(template_counts['template_type_code'], template_counts['count'])\nplt.xlabel('Template Type Code')\nplt.ylabel('Count')\nplt.title('Template Type Counts')\nplt.show()"
  },
  {
    "db_id": "coffee_shop",
    "question": "Find the address and staff number of the shops that do not have any happy hour Visualize by bar chart, I want to display Num_of_staff in descending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the shop table\nshop_data = pd.read_sql(\"SELECT * FROM shop\", conn)\n\n# Read the data from the happy_hour table\nhappy_hour_data = pd.read_sql(\"SELECT * FROM happy_hour\", conn)\n\n# Convert column names to lowercase\nshop_data.columns = shop_data.columns.str.lower()\nhappy_hour_data.columns = happy_hour_data.columns.str.lower()\n\n# filter the shop data based on the condition\nfiltered_shop_data = shop_data[~shop_data[\"shop_id\"].isin(happy_hour_data[\"shop_id\"])]\n\n# sort the filtered shop data by num_of_staff in descending order\nsorted_shop_data = filtered_shop_data.sort_values(\"num_of_staff\", ascending=False)\n\n# extract the required columns\naddress = sorted_shop_data[\"address\"]\nnum_of_staff = sorted_shop_data[\"num_of_staff\"]\n\n# create a bar plot\nplt.bar(address, num_of_staff)\nplt.xlabel(\"Address\")\nplt.ylabel(\"Number of Staff\")\nplt.title(\"Number of Staff in Shops without Happy Hour\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "entrepreneur",
    "question": "How many entrepreneurs correspond to each investor , and order by the names in asc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\n\n# Grouping the data by 'investor' and counting the occurrences\ngrouped_data = entrepreneur.groupby('investor').size().reset_index(name='count')\n\n# Sorting the data by 'investor' in ascending order\nsorted_data = grouped_data.sort_values('investor')\n\n# Creating the bar plot\nplt.bar(sorted_data['investor'], sorted_data['count'])\nplt.xlabel('Investor')\nplt.ylabel('Count')\nplt.title('Number of Entrepreneurs by Investor')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "I want to see trend of the number of creation by creation , order from low to high by the X .",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = department.columns.str.lower()\n\n# Assuming 'department' is a DataFrame containing the table data\n\n# Perform the SQL query\nresult = department.groupby('creation').size().reset_index(name='count').sort_values('creation')\n\n# Plot the line chart\nplt.plot(result['creation'], result['count'])\nplt.xlabel('Creation')\nplt.ylabel('Count')\nplt.title('Line Chart of Creation Count')\nplt.show()"
  },
  {
    "db_id": "local_govt_mdm",
    "question": "How does the distribution of business rates related to each master customer id look like when visualized as a scatter plot?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nBusiness_Rates = pd.read_sql(\"SELECT * FROM Business_Rates\", conn)\nCMI_Cross_References = pd.read_sql(\"SELECT * FROM CMI_Cross_References\", conn)\nBusiness_Rates.columns = Business_Rates.columns.str.lower()\nCMI_Cross_References.columns = CMI_Cross_References.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Business_Rates, CMI_Cross_References, on='cmi_cross_ref_id')\n\n# Group by master_customer_id and count the number of occurrences\ngrouped_df = merged_df.groupby('master_customer_id').size().reset_index(name='count')\n\n# Create scatter plot\nplt.scatter(grouped_df['master_customer_id'], grouped_df['count'])\nplt.xlabel('Master Customer ID')\nplt.ylabel('Count')\nplt.title('Scatter Plot of Count by Master Customer ID')\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "Show me a bar chart displaying the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\", and indicate the number of entrepreneurs who share each date of birth.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Joining entrepreneur and people tables\nmerged_df = pd.merge(entrepreneur, people, on='people_id')\n\n# Filtering data for specific investors\nfiltered_df = merged_df[(merged_df['investor'] == 'Simon Woodroffe') | (merged_df['investor'] == 'Peter Jones')]\n\n# Grouping by date_of_birth and counting occurrences\ngrouped_df = filtered_df.groupby('date_of_birth').size().reset_index(name='count')\n\n# Sorting by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plotting the bar chart\nplt.bar(sorted_df['date_of_birth'], sorted_df['count'])\nplt.xlabel('Date of Birth')\nplt.ylabel('Count')\nplt.title('Count of Entrepreneurs by Date of Birth')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "Can you create a scatter plot to display the project details and the count of outcomes for each project?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nProjects = pd.read_sql(\"SELECT * FROM Projects\", conn)\nProject_outcomes = pd.read_sql(\"SELECT * FROM Project_outcomes\", conn)\nProjects.columns = Projects.columns.str.lower()\nProject_outcomes.columns = Project_outcomes.columns.str.lower()\n\n# Merge Projects and Project_outcomes dataframes\nmerged_df = pd.merge(Projects, Project_outcomes, on='project_id')\n\n# Group by project_details and count the number of occurrences\ngrouped_df = merged_df.groupby('project_details').size().reset_index(name='count')\n\n# Scatter plot\nplt.scatter(grouped_df['project_details'], grouped_df['count'])\nplt.xlabel('Project Details')\nplt.ylabel('Count')\nplt.title('Number of Projects by Details')\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Bar chart x axis sportname y axis the total number , order by the y axis in ascending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nSportsinfo.columns = Sportsinfo.columns.str.lower()\n\n# Grouping the data by sportname and counting the occurrences\nsport_counts = Sportsinfo.groupby('sportname').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nsport_counts = sport_counts.sort_values('count')\n\n# Creating the bar plot\nplt.bar(sport_counts['sportname'], sport_counts['count'])\nplt.xlabel('Sport Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Sport Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "company_employee",
    "question": "Show the different headquarters and number of companies at each headquarter, and could you list in ascending by the X please?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the company table\ncompany = pd.read_sql(\"SELECT * FROM company\", conn)\n\n# Convert column names to lowercase\ncompany.columns = company.columns.str.lower()\n\n# Perform the SQL query\nresult = company.groupby('headquarters').size().reset_index(name='count').sort_values('headquarters')\n\n# Generate the bar chart\nplt.bar(result['headquarters'], result['count'])\nplt.xlabel('Headquarters')\nplt.ylabel('Count')\nplt.title('Number of Companies by Headquarters')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "What are the descriptions of all the project outcomes, and count them by a pie chart",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Research_outcomes table\nresearch_outcomes = pd.read_sql(\"SELECT * FROM Research_outcomes\", conn)\n\n# Read the Project_outcomes table\nproject_outcomes = pd.read_sql(\"SELECT * FROM Project_outcomes\", conn)\n\n# Convert column names to lowercase\nresearch_outcomes.columns = research_outcomes.columns.str.lower()\nproject_outcomes.columns = project_outcomes.columns.str.lower()\n\n# merge the two tables on outcome_code\nmerged_data = pd.merge(research_outcomes, project_outcomes, on=\"outcome_code\")\n\n# group by outcome_description and count the occurrences\ngrouped_data = merged_data.groupby(\"outcome_description\").size().reset_index(name=\"count\")\n\n# plot the pie chart\nplt.pie(grouped_data[\"count\"], labels=grouped_data[\"outcome_description\"], autopct=\"%1.1f%%\")\nplt.axis(\"equal\")\nplt.show()\n"
  },
  {
    "db_id": "ship_1",
    "question": "Compare the total number of captains with different classes using a bar graph , and I want to order by the x axis from high to low .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\ncaptain.columns = captain.columns.str.lower()\n\n# Group by 'class' and count the occurrences\nclass_counts = captain.groupby('class').size().reset_index(name='count')\n\n# Sort the dataframe by 'class' in descending order\nclass_counts = class_counts.sort_values('class', ascending=False)\n\n# Create a bar plot\nplt.bar(class_counts['class'], class_counts['count'])\nplt.xlabel('Class')\nplt.ylabel('Count')\nplt.title('Count of each class')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Show me a bar chart of the top 10 movies based on their average rating.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nrating = pd.read_sql(\"SELECT * FROM rating\", conn)\nmovie = pd.read_sql(\"SELECT * FROM movie\", conn)\nrating.columns = rating.columns.str.lower()\nmovie.columns = movie.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(rating, movie, on='mid')\n\n# Group by movie title and calculate average stars\ngrouped_df = merged_df.groupby('title')['stars'].mean()\n\n# Sort by average stars in descending order and select top 10\ntop_10_movies = grouped_df.sort_values(ascending=False).head(10)\n\n# Plot the bar chart\nplt.bar(top_10_movies.index, top_10_movies.values)\nplt.xlabel('Movie Title')\nplt.ylabel('Average Stars')\nplt.title('Top 10 Movies by Average Stars')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "coffee_shop",
    "question": "Show the number of purchases for each coffee shop address in a pie chart .",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmember = pd.read_sql(\"SELECT * FROM member\", conn)\nmember.columns = member.columns.str.lower()\n\n# Grouping the data by address and counting the occurrences\naddress_counts = member.groupby('address').size().reset_index(name='count')\n\n# Sorting the data by time_of_purchase\naddress_counts = address_counts.sort_values('count', ascending=False)\n\n# Plotting the pie chart\nplt.pie(address_counts['count'], labels=address_counts['address'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "How many departments are built in each year ? Group by creation time in a line chart , and rank x axis from high to low order .",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = department.columns.str.lower()\n\n# Assuming 'department' is a DataFrame containing the table data\n\n# Grouping the data by 'creation' and counting the occurrences\ngrouped_data = department.groupby('creation').size().reset_index(name='count')\n\n# Sorting the data by 'creation' in descending order\nsorted_data = grouped_data.sort_values('creation', ascending=False)\n\n# Plotting the line chart\nplt.plot(sorted_data['creation'], sorted_data['count'])\nplt.xlabel('Creation')\nplt.ylabel('Count')\nplt.title('Line Chart of Creation Counts')\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "A pie chart for showing the number of the dates of performances with attending members whose roles are \"Violin\".",
    "chart": "Pie",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the tables from the database\nmember_attendance = pd.read_sql(\"SELECT * FROM member_attendance\", conn)\nmember = pd.read_sql(\"SELECT * FROM member\", conn)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\n\n# Convert column names to lowercase\nmember_attendance.columns = member_attendance.columns.str.lower()\nmember.columns = member.columns.str.lower()\nperformance.columns = performance.columns.str.lower()\n\n# Merge the tables\nmerged_data = pd.merge(member_attendance, member, on=\"member_id\")\nmerged_data = pd.merge(merged_data, performance, on=\"performance_id\")\n\n# Filter the data for role \"Violin\"\nfiltered_data = merged_data[merged_data[\"role\"] == \"violin\"]\n\n# Group by date and count the occurrences\ngrouped_data = filtered_data.groupby(\"date\").size()\n\n# Plot the pie chart\nplt.pie(grouped_data, labels=grouped_data.index, autopct=\"%1.1f%%\")\nplt.title(\"Attendance by Date for Violin Role\")\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Return a pie on how many captains are in each rank?",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the captain table\ncaptain_df = pd.read_sql(\"SELECT * FROM captain\", conn)\n\n# Convert column names to lowercase\ncaptain_df.columns = captain_df.columns.str.lower()\n\n# Perform the SQL query\nresult = captain_df.groupby('rank').size()\n\n# Create a pie chart\nplt.pie(result, labels=result.index, autopct='%1.1f%%')\nplt.title('Distribution of Ranks')\nplt.show()"
  },
  {
    "db_id": "scientist_1",
    "question": "What are the names of projects that require more than 300 hours, and how many scientists are assigned to each, and display by the total number in asc.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the projects table\nprojects = pd.read_sql(\"SELECT * FROM projects\", conn)\nprojects.columns = map(str.lower, projects.columns)\n\n# Read the assignedto table\nassignedto = pd.read_sql(\"SELECT * FROM assignedto\", conn)\nassignedto.columns = map(str.lower, assignedto.columns)\n\n# Merge the projects and assignedto tables\nmerged = pd.merge(projects, assignedto, left_on=\"code\", right_on=\"project\")\n\n# Filter the merged table based on hours > 300\nfiltered = merged[merged[\"hours\"] > 300]\n\n# Group by project name and count the number of occurrences\ngrouped = filtered.groupby(\"name\").size().reset_index(name=\"count\")\n\n# Sort the grouped table by count in ascending order\nsorted_table = grouped.sort_values(\"count\", ascending=True)\n\n# Generate the bar plot\nplt.bar(sorted_table[\"name\"], sorted_table[\"count\"])\nplt.xlabel(\"Project Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Assignments for Projects with Hours > 300\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "coffee_shop",
    "question": "Show me a scatter plot of time of purchase and age for .",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nmember = pd.read_sql(\"SELECT * FROM member\", conn)\nmember.columns = member.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called 'member'\nplt.scatter(member['time_of_purchase'], member['age'])\nplt.xlabel('Time of Purchase')\nplt.ylabel('Age')\nplt.title('Scatter plot of Time of Purchase vs Age')\nplt.show()"
  },
  {
    "db_id": "insurance_fnol",
    "question": "Which customers have a first notification of loss record? Show me a bar chart displaying the count of customers with a first notification of loss record.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\nfirst_notification_of_loss = pd.read_sql(\"SELECT * FROM first_notification_of_loss\", conn)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\nfirst_notification_of_loss = pd.read_sql(\"SELECT * FROM first_notification_of_loss\", conn)\ncustomers.columns = customers.columns.str.lower()\nfirst_notification_of_loss.columns = first_notification_of_loss.columns.str.lower()\ncustomers.columns = customers.columns.str.lower()\nfirst_notification_of_loss.columns = first_notification_of_loss.columns.str.lower()\n\n# Merge customers and first_notification_of_loss tables\nmerged_df = pd.merge(customers, first_notification_of_loss, on='customer_id', how='left')\n\n# Count the number of customers with first notification of loss\nhas_notification_count = merged_df['customer_id'].count()\n\n# Count the number of customers without first notification of loss\nno_notification_count = customers['customer_id'].count() - has_notification_count\n\n# Create a dataframe for visualization\ndata = {'label': ['has first notification of loss', 'no first notification of loss'],\n        'count': [has_notification_count, no_notification_count]}\ndf = pd.DataFrame(data)\n\n# Plot the bar chart\nplt.bar(df['label'], df['count'])\nplt.xlabel('Label')\nplt.ylabel('Count')\nplt.title('Customers with/without First Notification of Loss')\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "Give me a bar chart , that group by location and count them , and sort by the the number of location from low to high please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nparty = pd.read_sql(\"SELECT * FROM party\", conn)\nparty.columns = party.columns.str.lower()\n\n# Group by location and count the occurrences\nlocation_counts = party.groupby('location').size().reset_index(name='count')\n\n# Sort the counts in ascending order\nlocation_counts = location_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(location_counts['location'], location_counts['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Party Count by Location')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "What are the last names for all scholarship students, and count them by a bar chart, I want to rank x axis in desc order.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Sportsinfo table\nsportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\n\n# Read the Student table\nstudent = pd.read_sql(\"SELECT * FROM Student\", conn)\n\n# Convert column names to lowercase\nsportsinfo.columns = sportsinfo.columns.str.lower()\nstudent.columns = student.columns.str.lower()\n\n# merge the sportsinfo and student tables on stuid\nmerged_data = pd.merge(sportsinfo, student, on=\"stuid\")\n\n# filter the merged data for students on scholarship\nfiltered_data = merged_data[merged_data[\"onscholarship\"] == \"Y\"]\n\n# group by lname and count the occurrences\ngrouped_data = filtered_data.groupby(\"lname\").size().reset_index(name=\"count\")\n\n# sort the grouped data by lname in descending order\nsorted_data = grouped_data.sort_values(\"lname\", ascending=False)\n\n# plot the bar chart\nplt.bar(sorted_data[\"lname\"], sorted_data[\"count\"])\nplt.xlabel(\"Last Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Students on Scholarship by Last Name\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "sports_competition",
    "question": "How many competitions for each country?, and list by the total number in asc.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the competition table\ncompetition_df = pd.read_sql(\"SELECT * FROM competition\", conn)\n\n# Convert column names to lowercase\ncompetition_df.columns = competition_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = competition_df.groupby('country').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result_df['country'], result_df['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "Show different nationalities along with the number of hosts of each nationality in a bar chart , and could you sort by the X in asc ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nHOST = pd.read_sql(\"SELECT * FROM HOST\", conn)\nHOST.columns = HOST.columns.str.lower()\n\n# Grouping the data by nationality and counting the occurrences\nnationality_counts = HOST.groupby('nationality').size().reset_index(name='count')\n\n# Sorting the data by nationality in ascending order\nnationality_counts = nationality_counts.sort_values('nationality')\n\n# Creating the bar plot\nplt.bar(nationality_counts['nationality'], nationality_counts['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Hosts by Nationality')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "scientist_1",
    "question": "How many projects require more than 300 hours and how many scientists are involved in each of these projects? Visualize the data using a scatter plot.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nprojects = pd.read_sql(\"SELECT * FROM projects\", conn)\nassignedto = pd.read_sql(\"SELECT * FROM assignedto\", conn)\nprojects.columns = projects.columns.str.lower()\nassignedto.columns = assignedto.columns.str.lower()\n\n# Merge projects and assignedto tables\nmerged_df = pd.merge(projects, assignedto, left_on='code', right_on='project')\n\n# Filter rows where hours > 300\nfiltered_df = merged_df[merged_df['hours'] > 300]\n\n# Group by hours and count the number of rows\ngrouped_df = filtered_df.groupby('hours').size().reset_index(name='count')\n\n# Scatter plot\nplt.scatter(grouped_df['hours'], grouped_df['count'])\nplt.xlabel('Hours')\nplt.ylabel('Count')\nplt.title('Scatter plot of hours vs count')\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Bar chart x axis sportname y axis the total number , and display from low to high by the bar .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nSportsinfo.columns = Sportsinfo.columns.str.lower()\n\n# Grouping the data by sportname and counting the occurrences\nsport_counts = Sportsinfo.groupby('sportname').size().reset_index(name='count')\n\n# Sorting the data by sportname in ascending order\nsport_counts = sport_counts.sort_values('sportname')\n\n# Creating the bar plot\nplt.bar(sport_counts['sportname'], sport_counts['count'])\nplt.xlabel('Sport Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Sport Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "What is the distribution of the total number of hours per week and number of games played by students under 20, represented in a bar chart, and sorted by hours per week in descending order?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nStudent = pd.read_sql(\"SELECT * FROM Student\", conn)\nSportsinfo.columns = Sportsinfo.columns.str.lower()\nStudent.columns = Student.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Sportsinfo, Student, on='stuid')\n\n# Filter the data based on age condition\nfiltered_df = merged_df[merged_df['age'] < 20]\n\n# Group the data by hoursperweek and gamesplayed, and calculate the sum\ngrouped_df = filtered_df.groupby(['hoursperweek', 'gamesplayed']).sum().reset_index()\n\n# Sort the data by hoursperweek in descending order\nsorted_df = grouped_df.sort_values('hoursperweek', ascending=False)\n\n# Create the bar plot\nplt.bar(sorted_df['hoursperweek'], sorted_df['gamesplayed'])\n\n# Set the labels and title\nplt.xlabel('Hours per Week')\nplt.ylabel('Games Played')\nplt.title('Sum of Hours per Week and Games Played')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "Which organization type has the highest number of research staff, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nOrganisations = pd.read_sql(\"SELECT * FROM Organisations\", conn)\nResearch_Staff = pd.read_sql(\"SELECT * FROM Research_Staff\", conn)\nOrganisations.columns = Organisations.columns.str.lower()\nResearch_Staff.columns = Research_Staff.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Organisations, Research_Staff, left_on='organisation_id', right_on='employer_organisation_id')\n\n# Group by organisation type and count the number of occurrences\ngrouped_df = merged_df.groupby('organisation_type').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['organisation_type'], sorted_df['count'])\nplt.xlabel('Organisation Type')\nplt.ylabel('Count')\nplt.title('Number of Research Staff by Organisation Type')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "riding_club",
    "question": "Compare the distribution of the players' gender using a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nplayer.columns = player.columns.str.lower()\n\n# Grouping the data by gender and counting the occurrences\ngender_count = player.groupby('gender').size()\n\n# Creating a bar plot\nplt.bar(gender_count.index, gender_count.values)\n\n# Adding labels and title\nplt.xlabel('Gender')\nplt.ylabel('Count')\nplt.title('Gender Distribution')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "Plot how many party by grouped by party as a bar graph , could you rank by the total number from low to high ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\nrepresentative.columns = representative.columns.str.lower()\n\n# Group by party and count the number of representatives in each party\nparty_counts = representative.groupby('party').size().reset_index(name='count')\n\n# Sort the parties by count in ascending order\nparty_counts = party_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(party_counts['party'], party_counts['count'])\nplt.xlabel('Party')\nplt.ylabel('Count')\nplt.title('Number of Representatives by Party')\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Show the average age of heads of departments born in each state with a bar chart , and show in asc by the born_state .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nhead = pd.read_sql(\"SELECT * FROM head\", conn)\nhead.columns = head.columns.str.lower()\n\nresult = head.groupby('born_state')['age'].mean().reset_index().sort_values('born_state')\n\nplt.bar(result['born_state'], result['age'])\nplt.xlabel('Born State')\nplt.ylabel('Average Age')\nplt.title('Average Age by Born State')\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "Give me a bar for what are the different parties of representative? Show the party name and the number of representatives in each party.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the representative table\nrepresentative_df = pd.read_sql(\"SELECT * FROM representative\", conn)\n\n# Convert column names to lowercase\nrepresentative_df.columns = map(str.lower, representative_df.columns)\n\n# Perform the SQL query\nparty_count_df = representative_df.groupby('party').size().reset_index(name='count')\n\n# Generate the bar chart\nplt.bar(party_count_df['party'], party_count_df['count'])\nplt.xlabel('Party')\nplt.ylabel('Count')\nplt.title('Number of Representatives by Party')\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Which actors have performed in the musical \"The Phantom of the Opera\" and what is the frequency of their appearances, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nactor = pd.read_sql(\"SELECT * FROM actor\", conn)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nactor.columns = actor.columns.str.lower()\nmusical.columns = musical.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(actor, musical, on='musical_id')\n\n# Filter the data for the specified musical name\nfiltered_df = merged_df[merged_df['name_y'] == 'The Phantom of the Opera']\n\n# Group by actor name and count the occurrences\ngrouped_df = filtered_df.groupby('name_x').size().reset_index(name='count')\n\n# Sort the data by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['name_x'], sorted_df['count'])\nplt.xlabel('Actor Name')\nplt.ylabel('Count')\nplt.title('Number of Appearances in \"The Phantom of the Opera\"')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Show different nominees and the number of musicals they have been nominated in a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the musical table\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\n\n# Convert column names to lowercase\nmusical.columns = musical.columns.str.lower()\n\n# Perform the SQL query\nresult = musical.groupby('nominee').size()\n\n# Plot the pie chart\nplt.pie(result, labels=result.index, autopct='%1.1f%%')\nplt.title('Nominee Distribution')\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Show different nominees and the number of musicals they have been nominated in a bar chart , and order by the the total number in asc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Group by nominee and count the occurrences\ngrouped = musical.groupby('nominee').size().reset_index(name='count')\n\n# Sort by count in ascending order\nsorted_grouped = grouped.sort_values('count')\n\n# Create bar plot\nplt.bar(sorted_grouped['nominee'], sorted_grouped['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "voter_2",
    "question": "Show me a bar chart displaying the number of students for each distinct age who have secretary votes in the fall election cycle.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nVOTING_RECORD = pd.read_sql(\"SELECT * FROM VOTING_RECORD\", conn)\nSTUDENT.columns = STUDENT.columns.str.lower()\nVOTING_RECORD.columns = VOTING_RECORD.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(STUDENT, VOTING_RECORD, left_on='stuid', right_on='secretary_vote')\n\n# Filter the data for fall election cycle\nfiltered_df = merged_df[merged_df['election_cycle'] == 'Fall']\n\n# Group by age and count the number of records\ngrouped_df = filtered_df.groupby('age').size().reset_index(name='count')\n\n# Sort the data by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['age'], sorted_df['count'])\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.title('Number of Students by Age in Fall Election Cycle')\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "What is the frequency of each game played by Linda Smith, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nPlays_games = pd.read_sql(\"SELECT * FROM Plays_games\", conn)\nVideo_games = pd.read_sql(\"SELECT * FROM Video_games\", conn)\nStudent = pd.read_sql(\"SELECT * FROM Student\", conn)\n\nPlays_games.columns = Plays_games.columns.str.lower()\nVideo_games.columns = Video_games.columns.str.lower()\nStudent.columns = Student.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(pd.merge(Plays_games, Video_games, on='gameid'), Student, on='stuid')\n\n# Filter the data for the specific student\nfiltered_df = merged_df[(merged_df['lname'] == 'Smith') & (merged_df['fname'] == 'Linda')]\n\n# Group by game name and count the number of occurrences\ngrouped_df = filtered_df.groupby('gname').size().reset_index(name='count')\n\n# Sort the data by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['gname'], sorted_df['count'])\nplt.xlabel('Game Name')\nplt.ylabel('Count')\nplt.title('Number of Games Played by Linda Smith')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Show me a bar chart comparing the total number of captains of different classes .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\ncaptain.columns = captain.columns.str.lower()\n\n# Group by 'class' and count the occurrences\nclass_counts = captain.groupby('class').size()\n\n# Create a bar plot\nplt.bar(class_counts.index, class_counts.values)\n\n# Set the labels and title\nplt.xlabel('Class')\nplt.ylabel('Count')\nplt.title('Count of Class')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Find the component amounts and names of all furnitures that have more than 10 components , and sort X from high to low order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nfurniture = pd.read_sql(\"SELECT * FROM furniture\", conn)\nfurniture.columns = furniture.columns.str.lower()\n\n# Filter the dataframe\nfiltered_df = furniture[furniture['num_of_component'] > 10]\n\n# Sort the dataframe by name in descending order\nsorted_df = filtered_df.sort_values('name', ascending=False)\n\n# Create the bar plot\nplt.bar(sorted_df['name'], sorted_df['num_of_component'])\n\n# Set the x-axis label\nplt.xlabel('Name')\n\n# Set the y-axis label\nplt.ylabel('Number of Components')\n\n# Set the title\nplt.title('Furniture with More than 10 Components')\n\n# Rotate the x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the number of documents for each document name? Return a bar chart, I want to order names in ascending order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the Paragraphs table\nparagraphs = pd.read_sql(\"SELECT * FROM Paragraphs\", conn)\n\n# Read the data from the Documents table\ndocuments = pd.read_sql(\"SELECT * FROM Documents\", conn)\n\n# Convert column names to lowercase\nparagraphs.columns = paragraphs.columns.str.lower()\ndocuments.columns = documents.columns.str.lower()\n\n# merge the two tables on the document_id column\nmerged_data = pd.merge(paragraphs, documents, on=\"document_id\")\n\n# group the data by document_name and count the number of occurrences\ngrouped_data = merged_data.groupby(\"document_name\").size().reset_index(name=\"count\")\n\n# sort the data by document_name in ascending order\nsorted_data = grouped_data.sort_values(\"document_name\")\n\n# plot the bar chart\nplt.bar(sorted_data[\"document_name\"], sorted_data[\"count\"])\nplt.xlabel(\"Document Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Paragraphs per Document\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "sports_competition",
    "question": "what is the number of players who have points less than 30 for each position?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the player table\nplayer_df = pd.read_sql(\"SELECT * FROM player\", conn)\n\n# Convert column names to lowercase\nplayer_df.columns = player_df.columns.str.lower()\n\n# Filter the data based on the condition\nfiltered_df = player_df[player_df['points'] < 30]\n\n# Group by position and count the number of players\ngrouped_df = filtered_df.groupby('position').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['position'], autopct='%1.1f%%')\nplt.title('Distribution of Players by Position (Points < 30)')\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Compute the total the number of location across location as a pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\nperformance.columns = performance.columns.str.lower()\n\n# Group by location and count the occurrences\nlocation_counts = performance.groupby('location').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(location_counts['count'], labels=location_counts['location'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "riding_club",
    "question": "Show different occupations along with the number of players in each occupation Show bar chart, and show x-axis from high to low order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the player table\nplayer_df = pd.read_sql(\"SELECT * FROM player\", conn)\n\n# Convert column names to lowercase\nplayer_df.columns = player_df.columns.str.lower()\n\n# Perform the SQL query\noccupation_count = player_df.groupby('occupation').size().reset_index(name='count')\noccupation_count = occupation_count.sort_values('occupation', ascending=False)\n\n# Generate the bar plot\nplt.bar(occupation_count['occupation'], occupation_count['count'])\nplt.xlabel('Occupation')\nplt.ylabel('Count')\nplt.title('Occupation Count')\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "What are the last year of the parties whose theme is \"Spring\" or \"Teqnology\"? Count the last year for a bar chart, could you list by the Y in asc?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the party table\nparty_df = pd.read_sql(\"SELECT * FROM party\", conn)\n\n# Convert column names to lowercase\nparty_df.columns = party_df.columns.str.lower()\n\n# Filter the data based on Party_Theme\nfiltered_df = party_df[(party_df['party_theme'] == 'Spring') | (party_df['party_theme'] == 'Teqnology')]\n\n# Group by Last_year and count the occurrences\ngrouped_df = filtered_df.groupby('last_year').size().reset_index(name='count')\n\n# Sort the data by count in ascending order\nsorted_df = grouped_df.sort_values('count', ascending=True)\n\n# Plot the bar chart\nplt.bar(sorted_df['last_year'], sorted_df['count'])\nplt.xlabel('Last Year')\nplt.ylabel('Count')\nplt.title('Party Count by Last Year')\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "Which songs have been nominated at music festivals, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmusic_festival = pd.read_sql(\"SELECT * FROM music_festival\", conn)\nvolume = pd.read_sql(\"SELECT * FROM volume\", conn)\nmusic_festival.columns = music_festival.columns.str.lower()\nvolume.columns = volume.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(music_festival, volume, left_on='volume', right_on='volume_id')\n\n# Filter the data based on the condition\nfiltered_df = merged_df[merged_df['result'] == 'Nominated']\n\n# Group by song and count the occurrences\ngrouped_df = filtered_df.groupby('song').size().reset_index(name='count')\n\n# Sort the data by count in ascending order\nsorted_df = grouped_df.sort_values('count', ascending=True)\n\n# Plot the bar chart\nplt.bar(sorted_df['song'], sorted_df['count'])\nplt.xlabel('Song')\nplt.ylabel('Count')\nplt.title('Number of Nominated Songs')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Plot a scatter chart , major by maximal age .",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nStudent = pd.read_sql(\"SELECT * FROM Student\", conn)\nStudent.columns = Student.columns.str.lower()\n\n# Group by major and find the maximum age\nmax_age_by_major = Student.groupby('major')['age'].max()\n\n# Create a scatter plot\nplt.scatter(max_age_by_major.index, max_age_by_major.values)\n\n# Set the labels and title\nplt.xlabel('Major')\nplt.ylabel('Max Age')\nplt.title('Max Age by Major')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "Give me a bar for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , and rank in ascending by the Y .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry.columns = country.columns.str.lower()\n\n# Group by governmentform and calculate the sum of population\ngrouped_data = country.groupby('governmentform')['population'].sum()\n\n# Sort the data in ascending order\nsorted_data = grouped_data.sort_values()\n\n# Create a bar plot\nplt.bar(sorted_data.index, sorted_data.values)\n\n# Set the x-axis label\nplt.xlabel('Government Form')\n\n# Set the y-axis label\nplt.ylabel('Population')\n\n# Set the title of the plot\nplt.title('Population by Government Form')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "What are the number of the titles of all movies that have rating star is between 3 and 5?, list by the y axis in desc.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating and Movie tables\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\n\n# Convert column names to lowercase\nrating_df.columns = rating_df.columns.str.lower()\nmovie_df.columns = movie_df.columns.str.lower()\n\n# Merge the Rating and Movie tables on mID\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Filter the merged dataframe for stars between 3 and 5\nfiltered_df = merged_df[(merged_df[\"stars\"] >= 3) & (merged_df[\"stars\"] <= 5)]\n\n# Group by title and count the occurrences\ngrouped_df = filtered_df.groupby(\"title\").size().reset_index(name=\"count\")\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values(\"count\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df[\"title\"], sorted_df[\"count\"])\nplt.xlabel(\"Movie Title\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Ratings for Movies with Stars between 3 and 5\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "A bar chart showing the number of different competition types, display from high to low by the x axis.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the competition table\ncompetition_df = pd.read_sql(\"SELECT * FROM competition\", conn)\n\n# Convert column names to lowercase\ncompetition_df.columns = competition_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = competition_df.groupby('competition_type').size().reset_index(name='count')\nresult_df = result_df.sort_values('competition_type', ascending=False)\n\n# Generate the bar plot\nplt.bar(result_df['competition_type'], result_df['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Type')\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Give me the names and prices of furnitures which some companies are manufacturing with a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the furniture table\nfurniture = pd.read_sql(\"SELECT * FROM furniture\", conn)\nfurniture.columns = map(str.lower, furniture.columns)\n\n# Read the furniture_manufacte table\nfurniture_manufacte = pd.read_sql(\"SELECT * FROM furniture_manufacte\", conn)\nfurniture_manufacte.columns = map(str.lower, furniture_manufacte.columns)\n\n# Merge the two tables on Furniture_ID\nmerged_data = pd.merge(furniture, furniture_manufacte, on='furniture_id')\n\n# Select the columns for visualization\ndata = merged_data[['name', 'price_in_dollar']]\n\n# Plot the bar chart\nplt.bar(data['name'], data['price_in_dollar'])\nplt.xlabel('Furniture Name')\nplt.ylabel('Price in Dollar')\nplt.title('Furniture Prices')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "What is the count of actors for each year their musical is awarded, shown in a line chart?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nactor = pd.read_sql(\"SELECT * FROM actor\", conn)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nactor.columns = actor.columns.str.lower()\nmusical.columns = musical.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(actor, musical, on='musical_id')\n\n# Group by year and count the number of records\ngrouped_df = merged_df.groupby('year').size().reset_index(name='count')\n\n# Plot the line chart\nplt.plot(grouped_df['year'], grouped_df['count'])\nplt.xlabel('Year')\nplt.ylabel('Count')\nplt.title('Number of Actors in Musicals by Year')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Please give me a bar chart to compare the stars by directors, list by the y-axis in desc.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\nmovie_df.columns = map(str.lower, movie_df.columns)\n\n# Merge the Rating and Movie tables on mID column\nmerged_df = pd.merge(rating_df, movie_df, on='mid')\n\n# Sort the merged dataframe by stars in descending order\nsorted_df = merged_df.sort_values(by='stars', ascending=False)\n\n# Convert the director column to strings\nsorted_df['director'] = sorted_df['director'].astype(str)\n\n# Plot the bar chart\nplt.bar(sorted_df['director'], sorted_df['stars'])\nplt.xlabel('Director')\nplt.ylabel('Stars')\nplt.title('Top Rated Movies by Director')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "election_representative",
    "question": "Plot how many party by grouped by party as a bar graph , list bar in asc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\nrepresentative.columns = representative.columns.str.lower()\n\n# Group by party and count the number of representatives in each party\nparty_counts = representative.groupby('party').size().reset_index(name='count')\n\n# Sort the parties in ascending order\nparty_counts = party_counts.sort_values('party')\n\n# Create a bar plot\nplt.bar(party_counts['party'], party_counts['count'])\nplt.xlabel('Party')\nplt.ylabel('Count')\nplt.title('Number of Representatives by Party')\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Show different nominees and the number of musicals they have been nominated Plot them as bar chart , and list Y-axis in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Group by nominee and count the occurrences\ngrouped = musical.groupby('nominee').size().reset_index(name='count')\n\n# Sort by count in ascending order\nsorted_grouped = grouped.sort_values('count')\n\n# Create bar plot\nplt.bar(sorted_grouped['nominee'], sorted_grouped['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "Give me a bar chart, that group by location and count them.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the party table into a pandas DataFrame\nparty_df = pd.read_sql(\"SELECT * FROM party\", conn)\n\n# Convert column names to lowercase\nparty_df.columns = party_df.columns.str.lower()\n\n# Perform the SQL query\nresult = party_df.groupby('location').size()\n\n# Create the bar plot\nplt.bar(result.index, result.values)\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Party Locations')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "For each position, what is the average number of points for players in that position Plot them as bar chart, I want to order x axis in asc order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the player table\nplayer_df = pd.read_sql(\"SELECT * FROM player\", conn)\n\n# Convert column names to lowercase\nplayer_df.columns = player_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = player_df.groupby('position')['points'].mean().reset_index().sort_values('position')\n\n# Create the bar plot\nplt.bar(result_df['position'], result_df['points'])\nplt.xlabel('Position')\nplt.ylabel('Average Points')\nplt.title('Average Points by Position')\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Show all sport name and the number of students Show bar chart , and sort in asc by the bar .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nSportsinfo.columns = Sportsinfo.columns.str.lower()\n\n# Grouping the data by sportname and counting the occurrences\nsport_counts = Sportsinfo.groupby('sportname').size().reset_index(name='count')\n\n# Sorting the data by sportname in ascending order\nsport_counts = sport_counts.sort_values('sportname')\n\n# Creating the bar plot\nplt.bar(sport_counts['sportname'], sport_counts['count'])\nplt.xlabel('Sport Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Sport Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "What is the total number of captains with different classes ? , I want to rank from low to high by the the number of class .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\ncaptain.columns = captain.columns.str.lower()\n\n# Group by 'class' and count the occurrences\nclass_counts = captain.groupby('class').size().reset_index(name='count')\n\n# Sort the counts in ascending order\nclass_counts = class_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(class_counts['class'], class_counts['count'])\nplt.xlabel('Class')\nplt.ylabel('Count')\nplt.title('Count of each class')\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Compare the total number of locations in each location using a bar graph , and list bars in asc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\nperformance.columns = performance.columns.str.lower()\n\n# Group by location and count the occurrences\nlocation_counts = performance.groupby('location').size().reset_index(name='count')\n\n# Sort by location in ascending order\nlocation_counts = location_counts.sort_values('location')\n\n# Create bar plot\nplt.bar(location_counts['location'], location_counts['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Location Counts')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return a bar chart on what are the different template type codes , and how many templates correspond to each ? , order from low to high by the X .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nTemplates = pd.read_sql(\"SELECT * FROM Templates\", conn)\nTemplates.columns = Templates.columns.str.lower()\n\n# Group by template_type_code and count the number of occurrences\ntemplate_counts = Templates.groupby('template_type_code').size().reset_index(name='count')\n\n# Sort the dataframe by template_type_code in ascending order\ntemplate_counts = template_counts.sort_values('template_type_code')\n\n# Create a bar plot\nplt.bar(template_counts['template_type_code'], template_counts['count'])\nplt.xlabel('Template Type Code')\nplt.ylabel('Count')\nplt.title('Number of Templates by Template Type Code')\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "Show me a bar chart displaying the count of party themes for each party host.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nparty_host = pd.read_sql(\"SELECT * FROM party_host\", conn)\nHOST = pd.read_sql(\"SELECT * FROM HOST\", conn)\nparty = pd.read_sql(\"SELECT * FROM party\", conn)\nparty_host.columns = party_host.columns.str.lower()\nHOST.columns = HOST.columns.str.lower()\nparty.columns = party.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(party_host, HOST, on='host_id')\nmerged_df = pd.merge(merged_df, party, on='party_id')\n\n# Group by host name and count party themes\ngrouped_df = merged_df.groupby('name').agg({'party_theme': 'count'}).reset_index()\n\n# Plot the bar chart\nplt.bar(grouped_df['name'], grouped_df['party_theme'])\nplt.xlabel('Host Name')\nplt.ylabel('Number of Party Themes')\nplt.title('Number of Party Themes per Host')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "Return a pie on what are the names and areas of countries with the top 5 largest area ?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry.columns = country.columns.str.lower()\n\n# Selecting the top 5 countries with largest surface area\ntop_countries = country.nlargest(5, 'surfacearea')\n\n# Creating a pie chart\nplt.pie(top_countries['surfacearea'], labels=top_countries['name'], autopct='%1.1f%%')\nplt.title('Top 5 Countries by Surface Area')\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Give me a bar for how many students play each sport ? , and show X-axis in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nSportsinfo.columns = Sportsinfo.columns.str.lower()\n\n# Grouping the data by sportname and counting the occurrences\nsport_counts = Sportsinfo.groupby('sportname').size().reset_index(name='count')\n\n# Sorting the data by sportname in ascending order\nsport_counts = sport_counts.sort_values('sportname')\n\n# Creating the bar plot\nplt.bar(sport_counts['sportname'], sport_counts['count'])\nplt.xlabel('Sport Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Sport Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Show me a bar chart comparing the total number of captains in each rank , sort by the Rank in descending please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\ncaptain.columns = captain.columns.str.lower()\n\n# Group by rank and count the occurrences\nrank_counts = captain.groupby('rank').size().reset_index(name='count')\n\n# Sort the dataframe by rank in descending order\nrank_counts = rank_counts.sort_values('rank', ascending=False)\n\n# Create a bar plot\nplt.bar(rank_counts['rank'], rank_counts['count'])\n\n# Set the x-axis label\nplt.xlabel('Rank')\n\n# Set the y-axis label\nplt.ylabel('Count')\n\n# Set the title of the plot\nplt.title('Count of Captains by Rank')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "What are the different ship flags, and how many ships have each Plot them as bar chart, rank Y-axis in descending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ship table\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = ship_df.groupby('flag').size().reset_index(name='count').sort_values(by='count', ascending=False)\n\n# Generate the bar plot\nplt.bar(result_df['flag'], result_df['count'])\nplt.xlabel('Flag')\nplt.ylabel('Count')\nplt.title('Number of Ships by Flag')\nplt.show()"
  },
  {
    "db_id": "scientist_1",
    "question": "How many scientists are assigned to each project that requires more than 300 hours? Show the distribution using a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nprojects = pd.read_sql(\"SELECT * FROM projects\", conn)\nassignedto = pd.read_sql(\"SELECT * FROM assignedto\", conn)\nprojects.columns = projects.columns.str.lower()\nassignedto.columns = assignedto.columns.str.lower()\n\n# Merge projects and assignedto tables\nmerged_df = pd.merge(projects, assignedto, left_on='code', right_on='project')\n\n# Filter projects with hours > 300\nfiltered_df = merged_df[merged_df['hours'] > 300]\n\n# Group by project name and count\ngrouped_df = filtered_df.groupby('name').size().reset_index(name='count')\n\n# Plot pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['name'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "How many companies each investor has invested? Show me a bar chart, and I want to show Y in asc order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the entrepreneur table\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\n\n# Convert column names to lowercase\nentrepreneur.columns = entrepreneur.columns.str.lower()\n\n# Perform the SQL query\nresult = entrepreneur.groupby('investor').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result['investor'], result['count'])\nplt.xlabel('Investor')\nplt.ylabel('Count')\nplt.title('Number of Entrepreneurs per Investor')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "Group and count the name attribute for visualizing a bar chart , display in ascending by the Name .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\neditor.columns = editor.columns.str.lower()\n\n# Assuming the table data is stored in a dataframe called 'editor'\n\n# Perform the SQL query\nresult = editor.groupby('name').size().reset_index(name='count').sort_values('name')\n\n# Generate the bar plot\nplt.bar(result['name'], result['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Count of Names')\nplt.show()"
  },
  {
    "db_id": "scientist_1",
    "question": "What are the names of projects that require more than 300 hours, and how many scientists are assigned to each, list by the x-axis in descending please.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the projects table\nprojects = pd.read_sql(\"SELECT * FROM projects\", conn)\nprojects.columns = map(str.lower, projects.columns)\n\n# Read the assignedto table\nassignedto = pd.read_sql(\"SELECT * FROM assignedto\", conn)\nassignedto.columns = map(str.lower, assignedto.columns)\n\n# Merge the projects and assignedto tables\nmerged = pd.merge(projects, assignedto, left_on=\"code\", right_on=\"project\")\n\n# Filter the merged table based on hours > 300\nfiltered = merged[merged[\"hours\"] > 300]\n\n# Group by project name and count the number of occurrences\ngrouped = filtered.groupby(\"name\").size().reset_index(name=\"count\")\n\n# Sort the grouped table by name in descending order\nsorted_table = grouped.sort_values(\"name\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_table[\"name\"], sorted_table[\"count\"])\nplt.xlabel(\"Project Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Projects with Hours > 300\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "car_1",
    "question": "How many models does each car maker produce? List id and the number in a scatter chart.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read data from the CAR_MAKERS table\ncar_makers = pd.read_sql(\"SELECT * FROM CAR_MAKERS\", conn)\ncar_makers.columns = map(str.lower, car_makers.columns)\n\n# Read data from the MODEL_LIST table\nmodel_list = pd.read_sql(\"SELECT * FROM MODEL_LIST\", conn)\nmodel_list.columns = map(str.lower, model_list.columns)\n\n# Merge the two tables on the 'id' column\nmerged_data = pd.merge(car_makers, model_list, left_on='id', right_on='maker')\n\n# Perform the aggregation and count the number of records for each car maker\naggregated_data = merged_data.groupby('id').size().reset_index(name='count')\n\n# Scatter plot\nplt.scatter(aggregated_data['id'], aggregated_data['count'])\nplt.xlabel('Car Maker ID')\nplt.ylabel('Count')\nplt.title('Number of Models per Car Maker')\nplt.show()"
  },
  {
    "db_id": "local_govt_mdm",
    "question": "Show me a bar chart of the top 10 CMI cross reference IDs with the highest count of related council tax entries.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nCMI_Cross_References = pd.read_sql(\"SELECT * FROM CMI_Cross_References\", conn)\nCouncil_Tax = pd.read_sql(\"SELECT * FROM Council_Tax\", conn)\nCMI_Cross_References.columns = CMI_Cross_References.columns.str.lower()\nCouncil_Tax.columns = Council_Tax.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(CMI_Cross_References, Council_Tax, on='cmi_cross_ref_id')\n\n# Group by cmi_cross_ref_id and count the occurrences\ngrouped_df = merged_df.groupby('cmi_cross_ref_id').size().reset_index(name='count')\n\n# Sort by count in descending order and select the top 10 rows\ntop_10_df = grouped_df.sort_values('count', ascending=False).head(10)\n\n# Create the bar plot\nplt.bar(top_10_df['cmi_cross_ref_id'], top_10_df['count'])\nplt.xlabel('cmi_cross_ref_id')\nplt.ylabel('Count')\nplt.title('Top 10 cmi_cross_ref_id with the highest count')\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Return a scatter chart showing the relationship between major id and maximum age .",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nStudent = pd.read_sql(\"SELECT * FROM Student\", conn)\nStudent.columns = Student.columns.str.lower()\n\n# Group by major and find the maximum age\nmax_age_by_major = Student.groupby('major')['age'].max()\n\n# Create a scatter plot\nplt.scatter(max_age_by_major.index, max_age_by_major.values)\n\n# Set the labels and title\nplt.xlabel('Major')\nplt.ylabel('Max Age')\nplt.title('Max Age by Major')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "A bar chart showing the number of different competition types , could you show from low to high by the bar please ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort by competition_type in ascending order\ncompetition_counts = competition_counts.sort_values('competition_type')\n\n# Create a bar plot\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Competition Type Counts')\nplt.show()"
  },
  {
    "db_id": "company_employee",
    "question": "Show the number of headquarters from each headquarters, and I want to rank by the X in asc.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"company\" table\ncompany_data = pd.read_sql(\"SELECT * FROM company\", conn)\n\n# Convert column names to lowercase\ncompany_data.columns = company_data.columns.str.lower()\n\n# Perform the SQL query\nresult = company_data.groupby('headquarters').size().reset_index(name='count').sort_values('headquarters')\n\n# Generate the bar chart\nplt.bar(result['headquarters'], result['count'])\nplt.xlabel('Headquarters')\nplt.ylabel('Count')\nplt.title('Number of Companies by Headquarters')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Show me a bar chart of the movies with the highest average rating.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nMovie = pd.read_sql(\"SELECT * FROM Movie\", conn)\nRating.columns = Rating.columns.str.lower()\nMovie.columns = Movie.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Rating, Movie, on='mid')\n\n# Group by movie and calculate average stars\ngrouped_df = merged_df.groupby('title')['stars'].mean().reset_index()\n\n# Sort by average stars in descending order and select the top 1\ntop_movie = grouped_df.sort_values('stars', ascending=False).head(1)\n\n# Plot the bar chart\nplt.bar(top_movie['title'], top_movie['stars'])\nplt.xlabel('Movie')\nplt.ylabel('Average Stars')\nplt.title('Top Movie by Average Stars')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "List the position of players and the average number of points of players of each position by a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the player table\nplayer_df = pd.read_sql(\"SELECT * FROM player\", conn)\n\n# Convert column names to lowercase\nplayer_df.columns = player_df.columns.str.lower()\n\n# Group by position and calculate average points\navg_points_df = player_df.groupby('position')['points'].mean().reset_index()\n\n# Plot the bar chart\nplt.bar(avg_points_df['position'], avg_points_df['points'])\nplt.xlabel('Position')\nplt.ylabel('Average Points')\nplt.title('Average Points by Position')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "For each director, return the director's name together with the highest rating among all of their movies and ignore movies whose director is NULL Could you plot the result with a bar chart?, list by the x-axis in descending please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\nmovie_df.columns = map(str.lower, movie_df.columns)\n\n# Merge the Rating and Movie tables on mID\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Filter out rows with director as \"null\"\nfiltered_df = merged_df[merged_df[\"director\"] != \"null\"]\n\n# Group by director and find the maximum stars for each director\ngrouped_df = filtered_df.groupby(\"director\")[\"stars\"].max().reset_index()\n\n# Sort the dataframe by director in descending order\nsorted_df = grouped_df.sort_values(\"director\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df[\"director\"], sorted_df[\"stars\"])\nplt.xlabel(\"Director\")\nplt.ylabel(\"Maximum Stars\")\nplt.title(\"Maximum Stars by Director\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Show me the number of country by country in a bar , and I want to sort in desc by the x axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by country and count the occurrences\ncountry_counts = competition.groupby('country').size().reset_index(name='count')\n\n# Sort by country in descending order\ncountry_counts = country_counts.sort_values('country', ascending=False)\n\n# Plot the bar chart\nplt.bar(country_counts['country'], country_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Country')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "What is the average rating star for each movie that is not reviewed by Brittany Harris, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nReviewer = pd.read_sql(\"SELECT * FROM Reviewer\", conn)\nRating.columns = Rating.columns.str.lower()\nRating.columns = Rating.columns.str.lower()\nReviewer.columns = Reviewer.columns.str.lower()\n\n# Perform the SQL query\nresult = pd.merge(Rating, Reviewer, left_on='rid', right_on='rid', how='left')\nresult = result[result['name'] != 'brittany harris']\nresult = result.groupby('mid')['stars'].mean().reset_index()\n\n# Visualize the result using a bar chart\nplt.bar(result['mid'], result['stars'])\nplt.xlabel('Movie ID')\nplt.ylabel('Average Rating')\nplt.title('Average Rating of Movies')\nplt.show()"
  },
  {
    "db_id": "student_1",
    "question": "For each grade, report the correlation between grade and the total number of students in the grade.",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"list\" table\nlist_data = pd.read_sql(\"SELECT * FROM list\", conn)\n\n# Convert column names to lowercase\nlist_data.columns = list_data.columns.str.lower()\n\n# Perform the SQL query\ngrouped_data = list_data.groupby('grade').size().reset_index(name='count')\n\n# Generate scatter plot\nplt.scatter(grouped_data['grade'], grouped_data['count'])\nplt.xlabel('Grade')\nplt.ylabel('Count')\nplt.title('Count of Students by Grade')\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "How many players participate in each game, represented by a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nVideo_games = pd.read_sql(\"SELECT * FROM Video_games\", conn)\nPlays_games = pd.read_sql(\"SELECT * FROM Plays_games\", conn)\nVideo_games.columns = Video_games.columns.str.lower()\nPlays_games.columns = Plays_games.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Video_games, Plays_games, on='gameid')\n\n# Group by gname and count the number of occurrences\ngrouped_df = merged_df.groupby('gname').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['gname'], grouped_df['count'])\nplt.xlabel('Game Name')\nplt.ylabel('Count')\nplt.title('Number of Plays per Game')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "For each director, return the director's name together with the highest rating among all of their movies and ignore movies whose director is NULL Could you plot the result with a bar chart?, and could you display by the Y in ascending?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\nmovie_df.columns = map(str.lower, movie_df.columns)\n\n# Merge the Rating and Movie tables on mID\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Filter out rows with director as \"null\"\nfiltered_df = merged_df[merged_df[\"director\"] != \"null\"]\n\n# Group by director and calculate the maximum stars\ngrouped_df = filtered_df.groupby(\"director\")[\"stars\"].max().reset_index()\n\n# Sort the dataframe by maximum stars in ascending order\nsorted_df = grouped_df.sort_values(\"stars\", ascending=True)\n\n# Plot the bar chart\nplt.bar(sorted_df[\"director\"], sorted_df[\"stars\"])\nplt.xlabel(\"Director\")\nplt.ylabel(\"Maximum Stars\")\nplt.title(\"Maximum Stars by Director\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "A bar chart showing how many representatives in each party , order X in asc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\nrepresentative.columns = representative.columns.str.lower()\n\n# Group by party and count the number of representatives in each party\nparty_counts = representative.groupby('party').size().reset_index(name='count')\n\n# Sort the parties in ascending order\nparty_counts = party_counts.sort_values('party')\n\n# Create a bar plot\nplt.bar(party_counts['party'], party_counts['count'])\nplt.xlabel('Party')\nplt.ylabel('Count')\nplt.title('Number of Representatives by Party')\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "What is the count of volumes associated with artists aged 25 or younger, grouped by the range of weeks on top (0-4, 5-8, 9-12, 13+), represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nvolume = pd.read_sql(\"SELECT * FROM volume\", conn)\nartist.columns = artist.columns.str.lower()\nvolume.columns = volume.columns.str.lower()\n\n# Perform the SQL query\nresult = pd.merge(artist, volume, on='artist_id')\nresult = result[result['age'] <= 25]\nresult['week_range'] = pd.cut(result['weeks_on_top'], bins=[0, 4, 8, 12, float('inf')], labels=['0-4', '5-8', '9-12', '13+'])\nresult = result.groupby('week_range').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(result['count'], labels=result['week_range'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Show the number of heads of departments born in each state with a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the \"head\" table\nhead_df = pd.read_sql(\"SELECT * FROM head\", conn)\n\n# Convert column names to lowercase\nhead_df.columns = head_df.columns.str.lower()\n\n# Perform the SQL query\nborn_state_counts = head_df.groupby('born_state').size().reset_index(name='count')\n\n# Create the bar plot\nplt.bar(born_state_counts['born_state'], born_state_counts['count'])\nplt.xlabel('Born State')\nplt.ylabel('Count')\nplt.title('Number of People Born in Each State')\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , and could you show by the y axis from high to low ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry.columns = country.columns.str.lower()\n\n# Group by governmentform and calculate the sum of population\ngrouped_data = country.groupby('governmentform')['population'].sum()\n\n# Sort the data in descending order\nsorted_data = grouped_data.sort_values(ascending=False)\n\n# Create a bar plot\nplt.bar(sorted_data.index, sorted_data.values)\n\n# Set the x-axis label\nplt.xlabel('Government Form')\n\n# Set the y-axis label\nplt.ylabel('Population')\n\n# Set the title of the plot\nplt.title('Population by Government Form')\n\n# Rotate the x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "car_1",
    "question": "How many countries does each continent have? Return a bar chart listing the continent name and the number of countries, and I want to display the total number from high to low order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the CONTINENTS table\ncontinents = pd.read_sql(\"SELECT * FROM continents\", conn)\ncontinents.columns = map(str.lower, continents.columns)\n\n# Read the COUNTRIES table\ncountries = pd.read_sql(\"SELECT * FROM countries\", conn)\ncountries.columns = map(str.lower, countries.columns)\n\n# Merge the CONTINENTS and COUNTRIES tables\nmerged_data = pd.merge(continents, countries, left_on=\"contid\", right_on=\"continent\")\n\n# Perform the aggregation and sorting\naggregated_data = merged_data.groupby(\"contid\").size().reset_index(name=\"count\").sort_values(\"count\", ascending=False)\n\n# Generate the bar plot\nplt.bar(aggregated_data[\"contid\"], aggregated_data[\"count\"])\nplt.xlabel(\"Continent\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Countries per Continent\")\nplt.show()\n"
  },
  {
    "db_id": "party_host",
    "question": "How many parties are there for each age group of hosts, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nparty_host = pd.read_sql(\"SELECT * FROM party_host\", conn)\nHOST = pd.read_sql(\"SELECT * FROM HOST\", conn)\nparty = pd.read_sql(\"SELECT * FROM party\", conn)\nparty_host.columns = party_host.columns.str.lower()\nHOST.columns = HOST.columns.str.lower()\nparty.columns = party.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(party_host, HOST, on='host_id')\nmerged_df = pd.merge(merged_df, party, on='party_id')\n\n# Group by age and count\ngrouped_df = merged_df.groupby('age').size().reset_index(name='count')\n\n# Plot pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['age'], autopct='%1.1f%%')\nplt.title('Distribution of Party Hosts by Age')\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "What are the names and ages of editors ? Show me a bar chart , and sort in descending by the y-axis .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\neditor.columns = editor.columns.str.lower()\n\n# Assuming the data is already loaded into a dataframe called 'editor'\n\n# Sort the dataframe by age in descending order\nsorted_df = editor.sort_values(by='age', ascending=False)\n\n# Extract the name and age columns\nnames = sorted_df['name']\nages = sorted_df['age']\n\n# Create a bar plot\nplt.bar(names, ages)\n\n# Add labels and title\nplt.xlabel('Name')\nplt.ylabel('Age')\nplt.title('Age Distribution')\n\n# Rotate x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Can you create a line chart displaying the count of attending members for each date of performances where their roles are \"Violin\"?",
    "chart": "Line",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nmember_attendance = pd.read_sql(\"SELECT * FROM member_attendance\", conn)\nmember = pd.read_sql(\"SELECT * FROM member\", conn)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\nmember_attendance.columns = member_attendance.columns.str.lower()\nmember.columns = member.columns.str.lower()\nperformance.columns = performance.columns.str.lower()\n\n# Merge the tables\nmerged_df = pd.merge(member_attendance, member, on='member_id')\nmerged_df = pd.merge(merged_df, performance, on='performance_id')\n\n# Filter the data for role = 'Violin'\nfiltered_df = merged_df[merged_df['role'] == 'Violin']\n\n# Group by date and count the number of records\ngrouped_df = filtered_df.groupby('date').size().reset_index(name='count')\n\n# Sort the data by date\nsorted_df = grouped_df.sort_values('date')\n\n# Plot the line chart\nplt.plot(sorted_df['date'], sorted_df['count'])\nplt.xlabel('Date')\nplt.ylabel('Count')\nplt.title('Attendance Count for Violinists')\nplt.show()\n"
  },
  {
    "db_id": "journal_committee",
    "question": "Show the number of the names of editors that are on the committee of journals with sales bigger than 3000, display by the how many name in asc please.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the tables\njournal_committee = pd.read_sql(\"SELECT * FROM journal_committee\", conn)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\njournal = pd.read_sql(\"SELECT * FROM journal\", conn)\n\n# Convert column names to lowercase\njournal_committee.columns = journal_committee.columns.str.lower()\neditor.columns = editor.columns.str.lower()\njournal.columns = journal.columns.str.lower()\n\n# Merge the tables\nmerged_data = pd.merge(journal_committee, editor, on=\"editor_id\")\nmerged_data = pd.merge(merged_data, journal, on=\"journal_id\")\n\n# Filter the data\nfiltered_data = merged_data[merged_data[\"sales\"] > 3000]\n\n# Group by Name and count occurrences\ngrouped_data = filtered_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# Sort the data by count in ascending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=True)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"name\"], sorted_data[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of Names in Journal Committee\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "How many departments are built in each year? Group by creation time in a line chart.",
    "chart": "Line",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the department table\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\n\n# Convert column names to lowercase\ndepartment.columns = department.columns.str.lower()\n\n# Perform the SQL query\nresult = department.groupby('creation').size().reset_index(name='count')\n\n# Plot the line chart\nplt.plot(result['creation'], result['count'])\nplt.xlabel('Creation')\nplt.ylabel('Count')\nplt.title('Department Creation')\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "A pie chart about what are the names and areas of countries with the top 5 largest area ?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry.columns = country.columns.str.lower()\n\n# Selecting the top 5 countries with largest surface area\ntop_countries = country.nlargest(5, 'surfacearea')\n\n# Creating a pie chart\nplt.pie(top_countries['surfacearea'], labels=top_countries['name'], autopct='%1.1f%%')\nplt.title('Top 5 Countries by Surface Area')\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "Return a bar on what are the names and areas of countries with the top 5 largest area ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry.columns = country.columns.str.lower()\n\n# Sort the dataframe by surfacearea in descending order and select the top 5 rows\ntop_countries = country.sort_values(by='surfacearea', ascending=False).head(5)\n\n# Create a bar plot\nplt.bar(top_countries['name'], top_countries['surfacearea'])\n\n# Set the x-axis label\nplt.xlabel('Country')\n\n# Set the y-axis label\nplt.ylabel('Surface Area')\n\n# Set the title of the plot\nplt.title('Top 5 Countries by Surface Area')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "Show me a line chart displaying the count of transactions for each date where the amount of transaction is less than 3000.",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsales = pd.read_sql(\"SELECT * FROM sales\", conn)\ntransactions = pd.read_sql(\"SELECT * FROM transactions\", conn)\nsales.columns = sales.columns.str.lower()\ntransactions.columns = transactions.columns.str.lower()\n\n# Merge sales and transactions tables\nmerged_df = pd.merge(sales, transactions, left_on='sales_transaction_id', right_on='transaction_id')\n\n# Filter data where amount_of_transaction < 3000\nfiltered_df = merged_df[merged_df['amount_of_transaction'] < 3000]\n\n# Group by date_of_transaction and count the number of transactions\ngrouped_df = filtered_df.groupby('date_of_transaction').size().reset_index(name='count')\n\n# Plot line chart\nplt.plot(grouped_df['date_of_transaction'], grouped_df['count'])\nplt.xlabel('Date of Transaction')\nplt.ylabel('Count')\nplt.title('Number of Transactions by Date')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "List the position of players and the average number of points of players of each position by a bar chart , and display from low to high by the X .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nplayer.columns = player.columns.str.lower()\n\n# Calculate average points by position\navg_points_by_position = player.groupby('position')['points'].mean()\n\n# Sort positions in ascending order\navg_points_by_position = avg_points_by_position.sort_index()\n\n# Create bar plot\nplt.bar(avg_points_by_position.index, avg_points_by_position.values)\nplt.xlabel('Position')\nplt.ylabel('Average Points')\nplt.title('Average Points by Position')\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes' Visualize by bar chart, rank bar in descending order.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the department table\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = map(str.lower, department.columns)\n\n# Read the management table\nmanagement = pd.read_sql(\"SELECT * FROM management\", conn)\nmanagement.columns = map(str.lower, management.columns)\n\n# Merge the department and management tables\nmerged_data = pd.merge(department, management, on=\"department_id\")\n\n# Filter the merged data for temporary acting departments\ntemporary_acting_data = merged_data[merged_data[\"temporary_acting\"] == \"Yes\"]\n\n# Calculate the average number of employees for each department\navg_num_employees = temporary_acting_data.groupby(\"name\")[\"num_employees\"].mean()\n\n# Sort the departments in descending order\navg_num_employees = avg_num_employees.sort_index(ascending=False)\n\n# Create a bar plot\nplt.bar(avg_num_employees.index, avg_num_employees.values)\nplt.xlabel(\"Department\")\nplt.ylabel(\"Average Number of Employees\")\nplt.title(\"Average Number of Employees in Temporary Acting Departments\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "Bar chart of the total number from each party , I want to sort Y from high to low order please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\nrepresentative.columns = representative.columns.str.lower()\n\n# Group by party and count the number of representatives in each party\nparty_counts = representative.groupby('party').size().reset_index(name='count')\n\n# Sort the parties by count in descending order\nparty_counts = party_counts.sort_values(by='count', ascending=False)\n\n# Create a bar plot\nplt.bar(party_counts['party'], party_counts['count'])\nplt.xlabel('Party')\nplt.ylabel('Count')\nplt.title('Number of Representatives by Party')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Visualize the title and and the total star rating of the movie using a bar chart, and could you order in desc by the y axis please?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\n\n# Convert column names to lowercase\nrating_df.columns = rating_df.columns.str.lower()\nmovie_df.columns = movie_df.columns.str.lower()\n\n# merge the rating and movie tables on mid\nmerged_df = pd.merge(rating_df, movie_df, on='mid')\n\n# group by title and calculate the sum of stars\ngrouped_df = merged_df.groupby('title')['stars'].sum().reset_index()\n\n# sort the dataframe by the sum of stars in descending order\nsorted_df = grouped_df.sort_values('stars', ascending=False)\n\n# plot the bar chart\nplt.bar(sorted_df['title'], sorted_df['stars'])\nplt.xlabel('Movie Title')\nplt.ylabel('Sum of Stars')\nplt.title('Sum of Stars by Movie Title')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "entrepreneur",
    "question": "Draw a bar chart of investor versus the total number , show total number in ascending order please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\n\n# Grouping the data by 'investor' and counting the occurrences\ngrouped_data = entrepreneur.groupby('investor').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nsorted_data = grouped_data.sort_values('count')\n\n# Creating the bar plot\nplt.bar(sorted_data['investor'], sorted_data['count'])\nplt.xlabel('Investor')\nplt.ylabel('Count')\nplt.title('Number of Entrepreneurs by Investor')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "Show the average of population from each status, rank from low to high by the X.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the city table\ncity_df = pd.read_sql(\"SELECT * FROM city\", conn)\n\n# Convert column names to lowercase\ncity_df.columns = city_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = city_df.groupby(\"status\").agg({\"population\": \"mean\"}).reset_index().sort_values(\"status\")\n\n# Generate the bar plot\nplt.bar(result_df[\"status\"], result_df[\"population\"])\nplt.xlabel(\"Status\")\nplt.ylabel(\"Average Population\")\nplt.title(\"Average Population by Status\")\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "List the types of competition and the number of competitions of each type in a bar chart , display by the x-axis in descending please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the number of occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort the dataframe by competition_type in descending order\ncompetition_counts = competition_counts.sort_values('competition_type', ascending=False)\n\n# Create a bar plot\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Type')\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "Give me a bar for what are the statuses and average populations of each city ? , rank in ascending by the x-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncity.columns = city.columns.str.lower()\n\n# Group by status and calculate average population\ngrouped_city = city.groupby('status')['population'].mean()\n\n# Sort by status in ascending order\ngrouped_city = grouped_city.sort_index()\n\n# Create bar plot\nplt.bar(grouped_city.index, grouped_city.values)\n\n# Set labels and title\nplt.xlabel('Status')\nplt.ylabel('Average Population')\nplt.title('Average Population by Status')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes' with a bar chart.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the department table\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = map(str.lower, department.columns)\n\n# Read the management table\nmanagement = pd.read_sql(\"SELECT * FROM management\", conn)\nmanagement.columns = map(str.lower, management.columns)\n\n# Merge the department and management tables\nmerged_data = pd.merge(department, management, on=\"department_id\")\n\n# Filter the merged data for temporary acting departments\ntemporary_acting_data = merged_data[merged_data[\"temporary_acting\"] == \"Yes\"]\n\n# Group by department name and calculate the sum of num_employees\ngrouped_data = temporary_acting_data.groupby(\"name\")[\"num_employees\"].sum().reset_index()\n\n# Plot the bar chart\nplt.bar(grouped_data[\"name\"], grouped_data[\"num_employees\"])\nplt.xlabel(\"Department Name\")\nplt.ylabel(\"Total Number of Employees\")\nplt.title(\"Total Number of Employees in Temporary Acting Departments\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show me the total number by template type code in a bar , sort by the X in ascending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nTemplates = pd.read_sql(\"SELECT * FROM Templates\", conn)\nTemplates.columns = Templates.columns.str.lower()\n\n# Grouping the data by template_type_code and counting the occurrences\ntemplate_counts = Templates.groupby('template_type_code').size().reset_index(name='count')\n\n# Sorting the data by template_type_code in ascending order\ntemplate_counts = template_counts.sort_values('template_type_code')\n\n# Creating the bar plot\nplt.bar(template_counts['template_type_code'], template_counts['count'])\nplt.xlabel('Template Type Code')\nplt.ylabel('Count')\nplt.title('Template Type Counts')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "List the types of competition and the number of competitions of each type in a bar chart , show Y in asc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the number of occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort the counts in ascending order\ncompetition_counts = competition_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Type')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Bar graph to show the number of rank from different rank , and rank by the total number in descending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\ncaptain.columns = captain.columns.str.lower()\n\n# Group by rank and count the occurrences\nrank_counts = captain.groupby('rank').size().reset_index(name='count')\n\n# Sort by count in descending order\nrank_counts = rank_counts.sort_values('count', ascending=False)\n\n# Create bar plot\nplt.bar(rank_counts['rank'], rank_counts['count'])\nplt.xlabel('Rank')\nplt.ylabel('Count')\nplt.title('Rank Counts')\nplt.show()"
  },
  {
    "db_id": "school_player",
    "question": "Create a bar chart showing the total number across denomination , I want to sort by the Denomination from high to low .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nschool = pd.read_sql(\"SELECT * FROM school\", conn)\nschool.columns = school.columns.str.lower()\n\n# Grouping the data by denomination and counting the number of occurrences\ndenomination_counts = school.groupby('denomination').size().reset_index(name='count')\n\n# Sorting the data by denomination in descending order\ndenomination_counts = denomination_counts.sort_values('denomination', ascending=False)\n\n# Creating the bar plot\nplt.bar(denomination_counts['denomination'], denomination_counts['count'])\nplt.xlabel('Denomination')\nplt.ylabel('Count')\nplt.title('Number of Schools by Denomination')\nplt.show()"
  },
  {
    "db_id": "insurance_fnol",
    "question": "Which customers have utilized the \"Close a policy\" or \"Upgrade a policy\" services, and how many times have they used these services? Display the results in a bar chart, sorted in ascending order by the count.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\nfirst_notification_of_loss = pd.read_sql(\"SELECT * FROM first_notification_of_loss\", conn)\nservices = pd.read_sql(\"SELECT * FROM services\", conn)\ncustomers.columns = customers.columns.str.lower()\nfirst_notification_of_loss.columns = first_notification_of_loss.columns.str.lower()\nservices.columns = services.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(customers, first_notification_of_loss, on='customer_id')\nmerged_df = pd.merge(merged_df, services, on='service_id')\n\n# Filter rows\nfiltered_df = merged_df[merged_df['service_name'].isin(['Close a policy', 'Upgrade a policy'])]\n\n# Group by customer_name and count occurrences\ngrouped_df = filtered_df.groupby('customer_name').size().reset_index(name='count')\n\n# Sort by count in ascending order\nsorted_df = grouped_df.sort_values('count')\n\n# Plot bar chart\nplt.bar(sorted_df['customer_name'], sorted_df['count'])\nplt.xlabel('Customer Name')\nplt.ylabel('Count')\nplt.title('Number of Close/Upgrade Policy Services per Customer')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "What are the average star ratings of each movie title? Could you return me a bar chart?, and could you list by the title in asc please?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\nmovie_df.columns = map(str.lower, movie_df.columns)\n\n# Merge the Rating and Movie tables on mID\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Calculate the average stars for each movie title\navg_stars_df = merged_df.groupby(\"title\")[\"stars\"].mean().reset_index()\n\n# Sort the dataframe by title in ascending order\navg_stars_df = avg_stars_df.sort_values(\"title\")\n\n# Plot the bar chart\nplt.bar(avg_stars_df[\"title\"], avg_stars_df[\"stars\"])\nplt.xlabel(\"Movie Title\")\nplt.ylabel(\"Average Stars\")\nplt.title(\"Average Stars for Each Movie\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "What is the average rating of movies with stars between 3 and 5, grouped by year and visualized in a line chart, with the years ordered in ascending order?",
    "chart": "Line",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nMovie = pd.read_sql(\"SELECT * FROM Movie\", conn)\nRating.columns = Rating.columns.str.lower()\nMovie.columns = Movie.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Rating, Movie, on='mid')\n\n# Filter the data based on stars between 3 and 5\nfiltered_df = merged_df[(merged_df['stars'] >= 3) & (merged_df['stars'] <= 5)]\n\n# Group by year and calculate the average stars\ngrouped_df = filtered_df.groupby('year')['stars'].mean().reset_index()\n\n# Sort the dataframe by year in ascending order\nsorted_df = grouped_df.sort_values('year')\n\n# Plot the line chart\nplt.plot(sorted_df['year'], sorted_df['stars'])\nplt.xlabel('Year')\nplt.ylabel('Average Stars')\nplt.title('Average Stars by Year')\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "What are the statuses and average populations of each city . Plot them as bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncity.columns = city.columns.str.lower()\n\n# Group by status and calculate average population\ngrouped_city = city.groupby('status')['population'].mean()\n\n# Convert the grouped data to a dataframe\ndf = pd.DataFrame(grouped_city).reset_index()\n\n# Plot the bar chart\nplt.bar(df['status'], df['population'])\nplt.xlabel('Status')\nplt.ylabel('Average Population')\nplt.title('Average Population by Status')\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "How many hosts does each nationality have ? List the nationality and the count with a bar chart , display by the Y in ascending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nHOST = pd.read_sql(\"SELECT * FROM HOST\", conn)\nHOST.columns = HOST.columns.str.lower()\n\n# Grouping the data by nationality and counting the occurrences\nnationality_counts = HOST.groupby('nationality').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nnationality_counts = nationality_counts.sort_values('count')\n\n# Creating the bar plot\nplt.bar(nationality_counts['nationality'], nationality_counts['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Hosts by Nationality')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Return a bar on what are the types of competition and number of competitions for that type ? , I want to list from high to low by the bar .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the number of occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort the dataframe by competition_type in descending order\ncompetition_counts = competition_counts.sort_values('competition_type', ascending=False)\n\n# Create a bar plot\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Type')\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "What insights can be gained from the SQL statement using a bar chart?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\njournal_committee = pd.read_sql(\"SELECT * FROM journal_committee\", conn)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\njournal = pd.read_sql(\"SELECT * FROM journal\", conn)\njournal_committee.columns = journal_committee.columns.str.lower()\neditor.columns = editor.columns.str.lower()\njournal.columns = journal.columns.str.lower()\n\n# Merge tables\ndf = pd.merge(journal_committee, editor, on='editor_id')\ndf = pd.merge(df, journal, on='journal_id')\n\n# Group by editor name and theme\ngrouped = df.groupby(['name', 'theme']).size().reset_index(name='count')\n\n# Plot bar chart\nplt.bar(grouped['name'], grouped['count'])\nplt.xlabel('Editor Name')\nplt.ylabel('Count')\nplt.title('Number of Journals per Editor and Theme')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "insurance_fnol",
    "question": "What are the policy types and their respective counts for the customer with the most policies listed, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\ncustomers_policies = pd.read_sql(\"SELECT * FROM customers_policies\", conn)\navailable_policies = pd.read_sql(\"SELECT * FROM available_policies\", conn)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\ncustomers_policies = pd.read_sql(\"SELECT * FROM customers_policies\", conn)\ncustomers.columns = customers.columns.str.lower()\ncustomers_policies.columns = customers_policies.columns.str.lower()\navailable_policies.columns = available_policies.columns.str.lower()\ncustomers.columns = customers.columns.str.lower()\ncustomers_policies.columns = customers_policies.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(customers, customers_policies, on='customer_id')\nmerged_df = pd.merge(merged_df, available_policies, on='policy_id')\n\n# Get customer name with the highest count of policies\ntop_customer_name = merged_df.groupby('customer_name').size().sort_values(ascending=False).index[0]\n\n# Filter data for the top customer\nfiltered_df = merged_df[merged_df['customer_name'] == top_customer_name]\n\n# Group by policy type code and count the occurrences\ngrouped_df = filtered_df.groupby('policy_type_code').size().reset_index(name='count')\n\n# Sort by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['policy_type_code'], sorted_df['count'])\nplt.xlabel('Policy Type Code')\nplt.ylabel('Count')\nplt.title('Number of Policies by Policy Type for Customer: ' + top_customer_name)\nplt.show()"
  },
  {
    "db_id": "coffee_shop",
    "question": "What is the count of shops that have a happy hour in May, grouped by address, in a bar chart, ordered in descending order?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nshop = pd.read_sql(\"SELECT * FROM shop\", conn)\nhappy_hour = pd.read_sql(\"SELECT * FROM happy_hour\", conn)\nshop.columns = shop.columns.str.lower()\nhappy_hour.columns = happy_hour.columns.str.lower()\n\n# Joining the shop and happy_hour tables\nmerged_df = pd.merge(shop, happy_hour, on='shop_id')\n\n# Filtering the data for the month of May\nmay_data = merged_df[merged_df['month'] == 'May']\n\n# Grouping the data by address and counting the occurrences\ngrouped_df = may_data.groupby('address').size().reset_index(name='count')\n\n# Sorting the data by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plotting the bar chart\nplt.bar(sorted_df['address'], sorted_df['count'])\nplt.xlabel('Address')\nplt.ylabel('Count')\nplt.title('Number of Shops by Address in May')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "What are the number of the descriptions of all the project outcomes?, and sort in descending by the names.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Research_outcomes table\nresearch_outcomes = pd.read_sql(\"SELECT * FROM Research_outcomes\", conn)\nresearch_outcomes.columns = map(str.lower, research_outcomes.columns)\n\n# Read the Project_outcomes table\nproject_outcomes = pd.read_sql(\"SELECT * FROM Project_outcomes\", conn)\nproject_outcomes.columns = map(str.lower, project_outcomes.columns)\n\n# Merge the two tables on outcome_code\nmerged_data = pd.merge(research_outcomes, project_outcomes, on=\"outcome_code\")\n\n# Perform the SQL query and group by outcome_description\nresult = merged_data.groupby(\"outcome_description\").size().reset_index(name=\"count\")\nresult = result.sort_values(\"outcome_description\", ascending=False)\n\n# Plot the bar chart\nplt.bar(result[\"outcome_description\"], result[\"count\"])\nplt.xlabel(\"Outcome Description\")\nplt.ylabel(\"Count\")\nplt.title(\"Bar Chart of Outcome Descriptions\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Draw a bar chart for what is the average rating star for each reviewer?, show from high to low by the bar please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nrating_df.columns = map(str.lower, rating_df.columns)\n\n# Read the Reviewer table\nreviewer_df = pd.read_sql(\"SELECT * FROM Reviewer\", conn)\nreviewer_df.columns = map(str.lower, reviewer_df.columns)\n\n# Merge the Rating and Reviewer tables on rID\nmerged_df = pd.merge(rating_df, reviewer_df, on=\"rid\")\n\n# Calculate the average stars for each reviewer\navg_stars_df = merged_df.groupby(\"name\").stars.mean().reset_index()\n\n# Sort the dataframe by name in descending order\navg_stars_df = avg_stars_df.sort_values(\"name\", ascending=False)\n\n# Plot the bar chart\nplt.bar(avg_stars_df[\"name\"], avg_stars_df[\"stars\"])\nplt.xlabel(\"Reviewer Name\")\nplt.ylabel(\"Average Stars\")\nplt.title(\"Average Stars by Reviewer\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "Show the number of competitions held in each city with a bar chart, and I want to list by the how many official name in asc.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the city and farm_competition tables\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\nfarm_competition = pd.read_sql(\"SELECT * FROM farm_competition\", conn)\n\n# Convert column names to lowercase\ncity.columns = city.columns.str.lower()\nfarm_competition.columns = farm_competition.columns.str.lower()\n\n# Merge the city and farm_competition tables on City_ID and Host_city_ID columns\nmerged_data = pd.merge(city, farm_competition, left_on=\"city_id\", right_on=\"host_city_id\")\n\n# Perform the SQL query and group by Official_Name, count the occurrences\nresult = merged_data.groupby(\"official_name\").size().reset_index(name=\"count\")\n\n# Sort the result by count in ascending order\nresult = result.sort_values(\"count\", ascending=True)\n\n# Plot the bar chart\nplt.bar(result[\"official_name\"], result[\"count\"])\nplt.xlabel(\"Official Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of Official Name in Farm Competition\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "how many entrepreneurs correspond to each investor ? , I want to display by the bar in asc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\n\n# Grouping the data by 'investor' and counting the occurrences\ngrouped_data = entrepreneur.groupby('investor').size().reset_index(name='count')\n\n# Sorting the data by 'investor' in ascending order\nsorted_data = grouped_data.sort_values('investor')\n\n# Creating the bar plot\nplt.bar(sorted_data['investor'], sorted_data['count'])\nplt.xlabel('Investor')\nplt.ylabel('Count')\nplt.title('Number of Entrepreneurs by Investor')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "How many musicals has each nominee been nominated for Plot them as bar chart, rank in descending by the total number.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the musical table\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\n\n# Convert column names to lowercase\nmusical.columns = musical.columns.str.lower()\n\n# Perform the SQL query\nresult = musical.groupby('nominee').size().reset_index(name='count').sort_values('count', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['nominee'], result['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Nominations by Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "county_public_safety",
    "question": "What is the crime rate of counties with a city having a white percentage greater than 90, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncounty_public_safety = pd.read_sql(\"SELECT * FROM county_public_safety\", conn)\ncity.columns = city.columns.str.lower()\ncounty_public_safety.columns = county_public_safety.columns.str.lower()\n\n# Merge city and county_public_safety tables\nmerged_df = pd.merge(city, county_public_safety, on='county_id')\n\n# Filter rows where white population is greater than 90\nfiltered_df = merged_df[merged_df['white'] > 90]\n\n# Select county_id and crime_rate columns\nresult_df = filtered_df[['county_id', 'crime_rate']]\n\n# Plot bar chart\nplt.bar(result_df['county_id'], result_df['crime_rate'])\nplt.xlabel('County ID')\nplt.ylabel('Crime Rate')\nplt.title('Crime Rate by County')\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "Can you create a bar chart displaying the frequency of each project outcome description in the database?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nResearch_outcomes = pd.read_sql(\"SELECT * FROM Research_outcomes\", conn)\nProject_outcomes = pd.read_sql(\"SELECT * FROM Project_outcomes\", conn)\nResearch_outcomes.columns = Research_outcomes.columns.str.lower()\nProject_outcomes.columns = Project_outcomes.columns.str.lower()\n\n# Merge the two dataframes on outcome_code\nmerged_df = pd.merge(Research_outcomes, Project_outcomes, on='outcome_code')\n\n# Group by outcome_description and count the occurrences\noutcome_counts = merged_df['outcome_description'].value_counts().reset_index()\n\n# Rename the columns\noutcome_counts.columns = ['outcome_description', 'count']\n\n# Sort the dataframe by count in descending order\noutcome_counts = outcome_counts.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(outcome_counts['outcome_description'], outcome_counts['count'])\nplt.xlabel('Outcome Description')\nplt.ylabel('Count')\nplt.title('Count of Outcome Descriptions')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Give me a bar for how many musicals has each nominee been nominated for ? , and display from low to high by the x axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Group by nominee and count the occurrences\ngrouped = musical.groupby('nominee').size().reset_index(name='count')\n\n# Sort by nominee in ascending order\ngrouped = grouped.sort_values('nominee')\n\n# Create bar plot\nplt.bar(grouped['nominee'], grouped['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "A bar chart about how many music festivals have had each kind of result, ordered descending by count?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the music_festival table\nmusic_festival = pd.read_sql(\"SELECT * FROM music_festival\", conn)\n\n# Convert column names to lowercase\nmusic_festival.columns = music_festival.columns.str.lower()\n\n# Perform the SQL query\nresult_counts = music_festival.groupby('result').size().reset_index(name='count')\nresult_counts = result_counts.sort_values(by='count', ascending=False)\n\n# Generate the bar plot\nplt.bar(result_counts['result'], result_counts['count'])\nplt.xlabel('Result')\nplt.ylabel('Count')\nplt.title('Music Festival Result Counts')\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Show the number of the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\", I want to sort x axis from high to low order please.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the musical table\nmusical_df = pd.read_sql(\"SELECT * FROM musical\", conn)\n\n# Convert column names to lowercase\nmusical_df.columns = musical_df.columns.str.lower()\n\n# Filter the data based on the conditions\nfiltered_df = musical_df[(musical_df['award'] == \"Tony Award\") | (musical_df['award'] == \"Cleavant Derricks\")]\n\n# Group by nominee and count the occurrences\ngrouped_df = filtered_df.groupby('nominee').size().reset_index(name='count')\n\n# Sort by nominee in descending order\nsorted_df = grouped_df.sort_values('nominee', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['nominee'], sorted_df['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Nominee Count for Tony Award and Cleavant Derricks')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "car_1",
    "question": "For each continent, list its name, and how many countries it has with a bar chart, and rank from high to low by the total number.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the CONTINENTS table\ncontinents = pd.read_sql(\"SELECT * FROM continents\", conn)\ncontinents.columns = map(str.lower, continents.columns)\n\n# Read the COUNTRIES table\ncountries = pd.read_sql(\"SELECT * FROM countries\", conn)\ncountries.columns = map(str.lower, countries.columns)\n\n# Merge the CONTINENTS and COUNTRIES tables\nmerged_data = pd.merge(continents, countries, left_on=\"contid\", right_on=\"continent\")\n\n# Perform the aggregation and sorting\naggregated_data = merged_data.groupby(\"contid\").size().reset_index(name=\"count\").sort_values(\"count\", ascending=False)\n\n# Generate the bar plot\nplt.bar(aggregated_data[\"contid\"], aggregated_data[\"count\"])\nplt.xlabel(\"Continent\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Countries per Continent\")\nplt.show()\n"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "A bar chart for what are the number of the purchase details of transactions with amount bigger than 10000?, and display y-axis from high to low order.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the PURCHASES and TRANSACTIONS tables\npurchases = pd.read_sql(\"SELECT * FROM PURCHASES\", conn)\ntransactions = pd.read_sql(\"SELECT * FROM TRANSACTIONS\", conn)\n\n# Convert column names to lowercase\npurchases.columns = purchases.columns.str.lower()\ntransactions.columns = transactions.columns.str.lower()\n\n# Merge the PURCHASES and TRANSACTIONS tables on the common column\nmerged_data = pd.merge(purchases, transactions, left_on=\"purchase_transaction_id\", right_on=\"transaction_id\")\n\n# Filter the merged data based on the condition\nfiltered_data = merged_data[merged_data[\"amount_of_transaction\"] > 10000]\n\n# Group the data by purchase_details and count the occurrences\ngrouped_data = filtered_data.groupby(\"purchase_details\").size().reset_index(name=\"count\")\n\n# Sort the data by count in descending order\nsorted_data = grouped_data.sort_values(by=\"count\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"purchase_details\"], sorted_data[\"count\"])\nplt.xlabel(\"Purchase Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Bar Chart of Purchase Details\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "How many volumes by artists that are at most 25 years old fall into each category of weeks on top distribution, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nvolume = pd.read_sql(\"SELECT * FROM volume\", conn)\nartist.columns = artist.columns.str.lower()\nvolume.columns = volume.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(artist, volume, on='artist_id')\n\n# Filter the data based on age condition\nfiltered_df = merged_df[merged_df['age'] <= 25]\n\n# Create a new column for weeks distribution\nfiltered_df['weeks_distribution'] = pd.cut(filtered_df['weeks_on_top'], bins=[0, 5, 10, 15, float('inf')], labels=['less than 5 weeks', '5-9 weeks', '10-14 weeks', '15 or more weeks'])\n\n# Group by weeks distribution and count the occurrences\ngrouped_df = filtered_df.groupby('weeks_distribution').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['weeks_distribution'], autopct='%1.1f%%')\nplt.title('Weeks Distribution of Artists with Age <= 25')\nplt.show()"
  },
  {
    "db_id": "car_1",
    "question": "What are the names and ids of all makers with more than 3 models, and display by the FullName in ascending.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the CAR_MAKERS table\ncar_makers = pd.read_sql(\"SELECT * FROM CAR_MAKERS\", conn)\ncar_makers.columns = map(str.lower, car_makers.columns)\n\n# Read the MODEL_LIST table\nmodel_list = pd.read_sql(\"SELECT * FROM MODEL_LIST\", conn)\nmodel_list.columns = map(str.lower, model_list.columns)\n\n# Merge the two tables on the Maker column\nmerged_data = pd.merge(car_makers, model_list, left_on='id', right_on='maker')\n\n# Sort the merged data by FullName in ascending order\nsorted_data = merged_data.sort_values(by='fullname')\n\n# Create a bar plot of FullName and Id\nplt.bar(sorted_data['fullname'], sorted_data['id'])\nplt.xlabel('FullName')\nplt.ylabel('Id')\nplt.title('Car Makers')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "voter_2",
    "question": "Show me a bar chart of the distinct majors of students who have treasurer votes.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nStudent = pd.read_sql(\"SELECT * FROM Student\", conn)\nVoting_Record = pd.read_sql(\"SELECT * FROM Voting_Record\", conn)\nStudent.columns = Student.columns.str.lower()\nVoting_Record.columns = Voting_Record.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Student, Voting_Record, left_on='stuid', right_on='treasurer_vote')\n\n# Group by major and count the occurrences\ngrouped_df = merged_df.groupby('major').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['major'], grouped_df['count'])\nplt.xlabel('Major')\nplt.ylabel('Count')\nplt.title('Number of Students by Major')\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "For the sale details with amount smaller than 3000, visualize a bar chart that x-axis is the sales details and count them as y, and rank by the y axis from low to high please.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the SALES and TRANSACTIONS tables\nsales = pd.read_sql(\"SELECT * FROM sales\", conn)\ntransactions = pd.read_sql(\"SELECT * FROM transactions\", conn)\n\n# Convert column names to lowercase\nsales.columns = sales.columns.str.lower()\ntransactions.columns = transactions.columns.str.lower()\n\n# Merge the SALES and TRANSACTIONS tables on the sales_transaction_id column\nmerged_data = pd.merge(sales, transactions, left_on=\"sales_transaction_id\", right_on=\"transaction_id\")\n\n# Filter the merged data based on the condition\nfiltered_data = merged_data[merged_data[\"amount_of_transaction\"] < 3000]\n\n# Group the filtered data by sales_details and count the occurrences\ngrouped_data = filtered_data.groupby(\"sales_details\").size().reset_index(name=\"count\")\n\n# Sort the grouped data by count in ascending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=True)\n\n# Generate the bar plot\nplt.bar(sorted_data[\"sales_details\"], sorted_data[\"count\"])\nplt.xlabel(\"Sales Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of Sales Details\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "Return a bar on how many entrepreneurs correspond to each investor ? , and could you list bars from high to low order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\n\n# Grouping the data by 'investor' and counting the occurrences\ngrouped_data = entrepreneur.groupby('investor').size().reset_index(name='count')\n\n# Sorting the data by 'investor' in descending order\nsorted_data = grouped_data.sort_values('investor', ascending=False)\n\n# Creating the bar plot\nplt.bar(sorted_data['investor'], sorted_data['count'])\nplt.xlabel('Investor')\nplt.ylabel('Count')\nplt.title('Number of Entrepreneurs by Investor')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "What is the count and description of projects for the research outcomes described with the substring 'Published' in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nProjects = pd.read_sql(\"SELECT * FROM Projects\", conn)\nProject_outcomes = pd.read_sql(\"SELECT * FROM Project_outcomes\", conn)\nResearch_outcomes = pd.read_sql(\"SELECT * FROM Research_outcomes\", conn)\nProjects.columns = Projects.columns.str.lower()\nProject_outcomes.columns = Project_outcomes.columns.str.lower()\nResearch_outcomes.columns = Research_outcomes.columns.str.lower()\n\n# Merge tables\nmerged_df = pd.merge(Projects, Project_outcomes, on='project_id')\nmerged_df = pd.merge(merged_df, Research_outcomes, on='outcome_code')\n\n# Filter by outcome description\nfiltered_df = merged_df[merged_df['outcome_description'].str.contains('published', case=False)]\n\n# Group by outcome description and count project\ngrouped_df = filtered_df.groupby('outcome_description').size().reset_index(name='project_count')\n\n# Sort by project count\nsorted_df = grouped_df.sort_values('project_count', ascending=False)\n\n# Plot bar chart\nplt.bar(sorted_df['outcome_description'], sorted_df['project_count'])\nplt.xlabel('Research Outcome')\nplt.ylabel('Project Count')\nplt.title('Number of Projects by Research Outcome')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "Show me a bar chart of the entrepreneurs and their corresponding investors, with the names ordered in descending order by the amount of money requested.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Perform the join operation\nresult = pd.merge(entrepreneur, people, on='people_id')\n\n# Sort the result by money_requested in descending order\nresult = result.sort_values('money_requested', ascending=False)\n\n# Plot the bar chart\nplt.bar(result['name'], result['company'])\nplt.xlabel('Name')\nplt.ylabel('Company')\nplt.title('Money Requested by Entrepreneurs')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "Show me a bar chart displaying the project id and the count of staff for each project, sorted in ascending order by the count of staff.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nProject_Staff = pd.read_sql(\"SELECT * FROM Project_Staff\", conn)\nProjects = pd.read_sql(\"SELECT * FROM Projects\", conn)\nProject_Staff.columns = Project_Staff.columns.str.lower()\nProjects.columns = Projects.columns.str.lower()\n\n# Perform the join operation\ndf = pd.merge(Project_Staff, Projects, on='project_id')\n\n# Group by project_id and count the number of rows\ndf_grouped = df.groupby('project_id').size().reset_index(name='count')\n\n# Sort the dataframe by count in ascending order\ndf_sorted = df_grouped.sort_values('count')\n\n# Create the bar plot\nplt.bar(df_sorted['project_id'], df_sorted['count'])\nplt.xlabel('Project ID')\nplt.ylabel('Count')\nplt.title('Number of Staff per Project')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Show the title and the lowest rating among all movies in a bar chart, I want to rank in ascending by the Y.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\n\n# Convert column names to lowercase\nrating_df.columns = rating_df.columns.str.lower()\nmovie_df.columns = movie_df.columns.str.lower()\n\n# merge the rating and movie tables on mid\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# group by title and calculate the minimum stars for each movie\ngrouped_df = merged_df.groupby(\"title\")[\"stars\"].min().reset_index()\n\n# sort the dataframe by minimum stars in ascending order\nsorted_df = grouped_df.sort_values(\"stars\")\n\n# plot the bar chart\nplt.bar(sorted_df[\"title\"], sorted_df[\"stars\"])\nplt.xlabel(\"Movie Title\")\nplt.ylabel(\"Minimum Stars\")\nplt.title(\"Minimum Stars for Each Movie\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all template type codes and the number of documents using each type Visualize by bar chart, and could you display in asc by the y-axis?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Templates table\ntemplates = pd.read_sql(\"SELECT * FROM Templates\", conn)\n\n# Read the Documents table\ndocuments = pd.read_sql(\"SELECT * FROM Documents\", conn)\n\n# Convert column names to lowercase\ntemplates.columns = templates.columns.str.lower()\ndocuments.columns = documents.columns.str.lower()\n\n# merge the templates and documents tables on template_id\nmerged_data = pd.merge(templates, documents, on=\"template_id\")\n\n# group by template_type_code and count the number of occurrences\ngrouped_data = merged_data.groupby(\"template_type_code\").size().reset_index(name=\"count\")\n\n# sort the data by count in ascending order\nsorted_data = grouped_data.sort_values(\"count\")\n\n# plot the bar chart\nplt.bar(sorted_data[\"template_type_code\"], sorted_data[\"count\"])\nplt.xlabel(\"Template Type Code\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Templates by Template Type Code\")\nplt.show()\n"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "Find the organisation ids and details of the organisations which are involved i. Visualize by pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Grants table\ngrants = pd.read_sql(\"SELECT * FROM Grants\", conn)\n\n# Read the Organisations table\norganisations = pd.read_sql(\"SELECT * FROM Organisations\", conn)\n\n# Convert column names to lowercase\ngrants.columns = grants.columns.str.lower()\norganisations.columns = organisations.columns.str.lower()\n\n# merge the grants and organisations tables on organisation_id\nmerged_data = pd.merge(grants, organisations, on='organisation_id')\n\n# group by organisation_details and count the number of occurrences\ngrouped_data = merged_data.groupby('organisation_details').size()\n\n# plot the pie chart\nplt.pie(grouped_data, labels=grouped_data.index, autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()\n"
  },
  {
    "db_id": "party_host",
    "question": "Show the total number of the first year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the party table\nparty_df = pd.read_sql(\"SELECT * FROM party\", conn)\n\n# Convert column names to lowercase\nparty_df.columns = party_df.columns.str.lower()\n\n# Filter the data based on Party_Theme\nfiltered_df = party_df[party_df['party_theme'].isin(['Spring', 'Teqnology'])]\n\n# Group by First_year and count the occurrences\ngrouped_df = filtered_df.groupby('first_year').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['first_year'], grouped_df['count'])\nplt.xlabel('First Year')\nplt.ylabel('Count')\nplt.title('Number of Parties by First Year')\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "What is the average number of votes for representatives from the \"Republican\" party shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nelection = pd.read_sql(\"SELECT * FROM election\", conn)\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\nelection.columns = election.columns.str.lower()\nrepresentative.columns = representative.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(election, representative, on='representative_id')\n\n# Filter the data for Republican party\nrepublican_df = merged_df[merged_df['party'] == 'Republican']\n\n# Calculate the average votes for each party\navg_votes_df = republican_df.groupby('party')['votes'].mean().reset_index()\n\n# Sort the data by average votes in descending order\nsorted_df = avg_votes_df.sort_values('votes', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['party'], sorted_df['votes'])\nplt.xlabel('Party')\nplt.ylabel('Average Votes')\nplt.title('Average Votes for Republican Party')\nplt.show()"
  },
  {
    "db_id": "scientist_1",
    "question": "Find the number of scientists involved for each project name, I want to sort the total number in descending order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the projects table\nprojects = pd.read_sql(\"SELECT * FROM projects\", conn)\n\n# Read the assignedto table\nassignedto = pd.read_sql(\"SELECT * FROM assignedto\", conn)\n\n# Convert column names to lowercase\nprojects.columns = projects.columns.str.lower()\nassignedto.columns = assignedto.columns.str.lower()\n\n# merge the projects and assignedto tables on the code column\nmerged_data = pd.merge(projects, assignedto, left_on=\"code\", right_on=\"project\")\n\n# group by project name and count the number of occurrences\ngrouped_data = merged_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# sort the data by count in descending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=False)\n\n# plot the bar chart\nplt.bar(sorted_data[\"name\"], sorted_data[\"count\"])\nplt.xlabel(\"Project Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Assignments per Project\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "journal_committee",
    "question": "How many editors, and what are their names, are on the committee of journals with sales bigger than 3000, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\njournal_committee = pd.read_sql(\"SELECT * FROM journal_committee\", conn)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\njournal = pd.read_sql(\"SELECT * FROM journal\", conn)\njournal_committee.columns = journal_committee.columns.str.lower()\neditor.columns = editor.columns.str.lower()\njournal.columns = journal.columns.str.lower()\n\n# Join tables\ndf = pd.merge(journal_committee, editor, on='editor_id')\ndf = pd.merge(df, journal, on='journal_id')\n\n# Filter data\ndf = df[df['sales'] > 3000]\n\n# Group by editor name and count\ndf_grouped = df.groupby('name').size().reset_index(name='count')\n\n# Plot pie chart\nplt.pie(df_grouped['count'], labels=df_grouped['name'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "Pie. what are the different parties of representative? Show the party name and the number of representatives in each party.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the representative table\nrepresentative_df = pd.read_sql(\"SELECT * FROM representative\", conn)\n\n# Convert column names to lowercase\nrepresentative_df.columns = map(str.lower, representative_df.columns)\n\n# Perform the SQL query\nparty_count_df = representative_df.groupby('party').size().reset_index(name='count')\n\n# Generate the pie chart\nplt.pie(party_count_df['count'], labels=party_count_df['party'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Show me a bar chart comparing the total number of captains of different classes , display total number from low to high order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\ncaptain.columns = captain.columns.str.lower()\n\n# Group by 'class' and count the occurrences\nclass_counts = captain.groupby('class').size().reset_index(name='count')\n\n# Sort the counts in ascending order\nclass_counts = class_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(class_counts['class'], class_counts['count'])\nplt.xlabel('Class')\nplt.ylabel('Count')\nplt.title('Count of each class')\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "A bar chart about how many captains are in each rank?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the captain table\ncaptain_df = pd.read_sql(\"SELECT * FROM captain\", conn)\n\n# Convert column names to lowercase\ncaptain_df.columns = captain_df.columns.str.lower()\n\n# Group by rank and count the number of occurrences\nrank_counts = captain_df.groupby('rank').size()\n\n# Create a bar plot\nplt.bar(rank_counts.index, rank_counts.values)\nplt.xlabel('Rank')\nplt.ylabel('Count')\nplt.title('Number of Captains by Rank')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "For each director, return the director's name together with the value of that rating and ignore movies whose director is NULL. Could you plot the result with a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating and Movie tables\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\n\n# Convert column names to lowercase\nrating_df.columns = rating_df.columns.str.lower()\nmovie_df.columns = movie_df.columns.str.lower()\n\n# Merge the Rating and Movie tables on mID column\nmerged_df = pd.merge(rating_df, movie_df, on=\"mid\")\n\n# Filter out rows where director is not null\nfiltered_df = merged_df[merged_df[\"director\"] != \"null\"]\n\n# Group by director and count the number of stars\ndirector_stars_count = filtered_df.groupby(\"director\")[\"stars\"].count()\n\n# Plot the bar chart\nplt.bar(director_stars_count.index, director_stars_count.values)\nplt.xlabel(\"Director\")\nplt.ylabel(\"Number of Stars\")\nplt.title(\"Number of Stars by Director\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Show me a bar chart displaying the names of furniture and the corresponding count of manufacturing companies for each furniture.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nfurniture = pd.read_sql(\"SELECT * FROM furniture\", conn)\nfurniture_manufacte = pd.read_sql(\"SELECT * FROM furniture_manufacte\", conn)\nfurniture.columns = furniture.columns.str.lower()\nfurniture_manufacte.columns = furniture_manufacte.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(furniture, furniture_manufacte, on='furniture_id')\n\n# Group by name and count the number of occurrences\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['name'], grouped_df['count'])\nplt.xlabel('Furniture Name')\nplt.ylabel('Count')\nplt.title('Number of Furniture by Name')\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": " Count the last year of parties with theme \"Spring\" or \"Teqnology\" with a bar grpah.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the party table\nparty_df = pd.read_sql(\"SELECT * FROM party\", conn)\n\n# Convert column names to lowercase\nparty_df.columns = party_df.columns.str.lower()\n\n# Filter the data based on Party_Theme\nfiltered_df = party_df[party_df['party_theme'].isin(['Spring', 'Teqnology'])]\n\n# Group by Last_year and count the occurrences\ngrouped_df = filtered_df.groupby('last_year').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['last_year'], grouped_df['count'])\nplt.xlabel('Last Year')\nplt.ylabel('Count')\nplt.title('Number of Parties by Last Year')\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "Compare each editors' ages using a bar chart , sort by the Y in asc .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\neditor.columns = editor.columns.str.lower()\n\n# Assuming the data is already loaded into a dataframe called 'editor'\n\n# Sort the dataframe by age in ascending order\nsorted_df = editor.sort_values(by='age')\n\n# Extract the name and age columns\nname = sorted_df['name']\nage = sorted_df['age']\n\n# Create a bar plot\nplt.bar(name, age)\n\n# Add labels and title\nplt.xlabel('Name')\nplt.ylabel('Age')\nplt.title('Age Distribution')\n\n# Rotate x-axis labels if needed\nplt.xticks(rotation=90)\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "voter_2",
    "question": "What is the count of each distinct last name among the students who have president votes and have 8741 as the advisor, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nVOTING_RECORD = pd.read_sql(\"SELECT * FROM VOTING_RECORD\", conn)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nSTUDENT.columns = STUDENT.columns.str.lower()\nVOTING_RECORD.columns = VOTING_RECORD.columns.str.lower()\nSTUDENT.columns = STUDENT.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(STUDENT, VOTING_RECORD, left_on='stuid', right_on='president_vote')\n\n# Filtering the data\nfiltered_df = merged_df[merged_df['advisor'] == '8741']\n\n# Counting the occurrences of each lname\nlname_counts = filtered_df['lname'].value_counts()\n\n# Creating the bar plot\nplt.bar(lname_counts.index, lname_counts.values)\nplt.xlabel('Last Name')\nplt.ylabel('Count')\nplt.title('Number of Students with Last Name')\nplt.show()"
  },
  {
    "db_id": "coffee_shop",
    "question": "Find the number of members living in each address Show bar chart , I want to show by the total number in asc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmember = pd.read_sql(\"SELECT * FROM member\", conn)\nmember.columns = member.columns.str.lower()\n\n# Group by address and count the number of occurrences\naddress_counts = member.groupby('address').size().reset_index(name='count')\n\n# Sort the counts in ascending order\naddress_counts = address_counts.sort_values('count')\n\n# Plot the bar chart\nplt.bar(address_counts['address'], address_counts['count'])\nplt.xlabel('Address')\nplt.ylabel('Count')\nplt.title('Number of Members by Address')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "riding_club",
    "question": "Show different occupations along with the number of players in each occupation with a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the player table\nplayer_df = pd.read_sql(\"SELECT * FROM player\", conn)\n\n# Convert column names to lowercase\nplayer_df.columns = player_df.columns.str.lower()\n\n# Group by Occupation and count the number of occurrences\noccupation_counts = player_df.groupby('occupation').size()\n\n# Create a bar plot\nplt.bar(occupation_counts.index, occupation_counts.values)\nplt.xlabel('Occupation')\nplt.ylabel('Count')\nplt.title('Number of Players by Occupation')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "Return the names and surface areas of the 5 largest countries . Visualize by bar chart .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry.columns = country.columns.str.lower()\n\n# Sort the dataframe by surfacearea in descending order and select the top 5 rows\ntop_countries = country.sort_values(by='surfacearea', ascending=False).head(5)\n\n# Create a bar plot\nplt.bar(top_countries['name'], top_countries['surfacearea'])\n\n# Set the x-axis label\nplt.xlabel('Country')\n\n# Set the y-axis label\nplt.ylabel('Surface Area')\n\n# Set the title of the plot\nplt.title('Top 5 Countries by Surface Area')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Show all sport name and the number of students in a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Sportsinfo table\nsportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\n\n# Convert column names to lowercase\nsportsinfo.columns = map(str.lower, sportsinfo.columns)\n\n# Perform the query\nresult = sportsinfo.groupby('sportname').size().reset_index(name='count')\n\n# Generate the bar chart\nplt.bar(result['sportname'], result['count'])\nplt.xlabel('Sport Name')\nplt.ylabel('Count')\nplt.title('Number of Participants in Each Sport')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Show me the number of country by country in a bar",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by country and count the occurrences\ncountry_counts = competition.groupby('country').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(country_counts['country'], country_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Country')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "How many competitions for each country ? , and list in asc by the X-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by country and count the occurrences\ncountry_counts = competition.groupby('country').size().reset_index(name='count')\n\n# Sort by country in ascending order\ncountry_counts = country_counts.sort_values('country')\n\n# Create bar plot\nplt.bar(country_counts['country'], country_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Compute the total the total number across location as a pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\nperformance.columns = performance.columns.str.lower()\n\n# Group by location and count the number of occurrences\nlocation_counts = performance.groupby('location').size()\n\n# Create a pie chart\nplt.pie(location_counts, labels=location_counts.index, autopct='%1.1f%%')\nplt.axis('equal')\n\n# Display the chart\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "Draw a bar chart of name versus age , and I want to rank by the x axis in asc .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\neditor.columns = editor.columns.str.lower()\n\n# Assuming the data is already loaded into a dataframe called 'editor'\n\n# Sort the dataframe by name in ascending order\nsorted_df = editor.sort_values(by='name')\n\n# Extract the name and age columns\nname = sorted_df['name']\nage = sorted_df['age']\n\n# Create a bar plot\nplt.bar(name, age)\n\n# Set the x-axis label\nplt.xlabel('Name')\n\n# Set the y-axis label\nplt.ylabel('Age')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "Show the average amount of transactions for different lots in a scatter chart",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the TRANSACTIONS table\ntransactions = pd.read_sql(\"SELECT * FROM TRANSACTIONS\", conn)\n\n# Read the Transactions_Lots table\ntransactions_lots = pd.read_sql(\"SELECT * FROM Transactions_Lots\", conn)\n\n# Convert column names to lowercase\ntransactions.columns = transactions.columns.str.lower()\ntransactions_lots.columns = transactions_lots.columns.str.lower()\n\n# merge the two tables on transaction_id\nmerged_data = pd.merge(transactions, transactions_lots, on=\"transaction_id\")\n\n# calculate the average amount of transaction for each lot_id\navg_amount_by_lot = merged_data.groupby(\"lot_id\")[\"amount_of_transaction\"].mean()\n\n# create a scatter plot\nplt.scatter(avg_amount_by_lot.index, avg_amount_by_lot.values)\nplt.xlabel(\"Lot ID\")\nplt.ylabel(\"Average Amount of Transaction\")\nplt.title(\"Scatter Plot of Average Amount of Transaction by Lot ID\")\n\n# Show the plot\nplt.show()\n"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "Return a bar chart on what are the ids and details for all organizations that have grants of more than 6000 dollars?, rank in asc by the X please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Grants table\ngrants = pd.read_sql(\"SELECT * FROM Grants\", conn)\ngrants.columns = map(str.lower, grants.columns)\n\n# Read the Organisations table\norganisations = pd.read_sql(\"SELECT * FROM Organisations\", conn)\norganisations.columns = map(str.lower, organisations.columns)\n\n# Merge the Grants and Organisations tables on organisation_id\nmerged_data = pd.merge(grants, organisations, on=\"organisation_id\")\n\n# Group by organisation_details and count the number of grants for each organisation\ngrouped_data = merged_data.groupby(\"organisation_details\").size().reset_index(name=\"count\")\n\n# Sort the data by organisation_details in ascending order\nsorted_data = grouped_data.sort_values(\"organisation_details\")\n\n# Plot the bar chart\nplt.bar(sorted_data[\"organisation_details\"], sorted_data[\"count\"])\nplt.xlabel(\"Organisation Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Grants per Organisation\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "For each position , what is the average number of points for players in that position Plot them as bar chart , I want to order x axis in asc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nplayer.columns = player.columns.str.lower()\n\n# Calculate average points by position\navg_points_by_position = player.groupby('position')['points'].mean()\n\n# Sort positions in ascending order\navg_points_by_position = avg_points_by_position.sort_index()\n\n# Create bar plot\nplt.bar(avg_points_by_position.index, avg_points_by_position.values)\nplt.xlabel('Position')\nplt.ylabel('Average Points')\nplt.title('Average Points by Position')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Show the number of different competition types with a bar graph , list in asc by the Y please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort the counts in ascending order\ncompetition_counts = competition_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Competition Type Counts')\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "A bar chart for showing the number of the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\", could you sort names from low to high order please?",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the musical table into a DataFrame\nmusical_df = pd.read_sql(\"SELECT * FROM musical\", conn)\n\n# Convert column names to lowercase\nmusical_df.columns = musical_df.columns.str.lower()\n\n# Filter the data based on the conditions\nfiltered_df = musical_df[(musical_df['award'] == 'Tony Award') | (musical_df['award'] == 'Cleavant Derricks')]\n\n# Group by nominee and count the occurrences\ngrouped_df = filtered_df.groupby('nominee').size().reset_index(name='count')\n\n# Sort the DataFrame by nominee in ascending order\nsorted_df = grouped_df.sort_values('nominee', ascending=True)\n\n# Create a bar plot\nplt.bar(sorted_df['nominee'], sorted_df['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Tony Awards and Cleavant Derricks Awards per Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "What are the names and areas of countries with the top 5 largest area . Visualize by bar chart .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry.columns = country.columns.str.lower()\n\n# Sort the dataframe by surfacearea in descending order and select the top 5 rows\ntop_countries = country.sort_values(by='surfacearea', ascending=False).head(5)\n\n# Create a bar plot\nplt.bar(top_countries['name'], top_countries['surfacearea'])\n\n# Set the x-axis label\nplt.xlabel('Country')\n\n# Set the y-axis label\nplt.ylabel('Surface Area')\n\n# Set the title of the plot\nplt.title('Top 5 Countries by Surface Area')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "local_govt_mdm",
    "question": "How many business rates are related to each CMI cross reference, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nBusiness_Rates = pd.read_sql(\"SELECT * FROM Business_Rates\", conn)\nCMI_Cross_References = pd.read_sql(\"SELECT * FROM CMI_Cross_References\", conn)\nBusiness_Rates.columns = Business_Rates.columns.str.lower()\nCMI_Cross_References.columns = CMI_Cross_References.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Business_Rates, CMI_Cross_References, on='cmi_cross_ref_id')\n\n# Group by cmi_cross_ref_id and count the occurrences\ngrouped_df = merged_df.groupby('cmi_cross_ref_id').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['cmi_cross_ref_id'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "Can you create a scatter plot to display the sale details and amounts of transactions with amounts less than 3000?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsales = pd.read_sql(\"SELECT * FROM sales\", conn)\ntransactions = pd.read_sql(\"SELECT * FROM transactions\", conn)\nsales.columns = sales.columns.str.lower()\ntransactions.columns = transactions.columns.str.lower()\n\n# Merge sales and transactions dataframes\nmerged_df = pd.merge(sales, transactions, left_on='sales_transaction_id', right_on='transaction_id')\n\n# Filter data where amount_of_transaction < 3000\nfiltered_df = merged_df[merged_df['amount_of_transaction'] < 3000]\n\n# Create scatter plot\nplt.scatter(filtered_df['sales_details'], filtered_df['amount_of_transaction'])\nplt.xlabel('Sales Details')\nplt.ylabel('Amount of Transaction')\nplt.title('Scatter Plot of Sales Details vs Amount of Transaction')\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "Give me a bar for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?, and rank in ascending by the Y.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the country table\ncountry_df = pd.read_sql(\"SELECT * FROM country\", conn)\n\n# Convert column names to lowercase\ncountry_df.columns = country_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = country_df.groupby('governmentform')['population'].sum().reset_index()\nresult_df = result_df.sort_values('population')\n\n# Create the bar plot\nplt.bar(result_df['governmentform'], result_df['population'])\nplt.xlabel('Government Form')\nplt.ylabel('Population')\nplt.title('Population by Government Form')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "company_employee",
    "question": "What is the number of companies for each headquarter ? Visualize by bar chart , and could you order by the total number in ascending ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompany = pd.read_sql(\"SELECT * FROM company\", conn)\ncompany.columns = company.columns.str.lower()\n\n# Group by headquarters and count the number of occurrences\nheadquarters_count = company.groupby('headquarters').size().reset_index(name='count')\n\n# Sort the dataframe by count in ascending order\nheadquarters_count = headquarters_count.sort_values('count')\n\n# Plot the bar chart\nplt.bar(headquarters_count['headquarters'], headquarters_count['count'])\nplt.xlabel('Headquarters')\nplt.ylabel('Count')\nplt.title('Number of Companies by Headquarters')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "county_public_safety",
    "question": "How many counties correspond to each police force , and display in descending by the Police_force please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncounty_public_safety = pd.read_sql(\"SELECT * FROM county_public_safety\", conn)\ncounty_public_safety.columns = county_public_safety.columns.str.lower()\n\n# Group by police_force and count the occurrences\ndf_grouped = county_public_safety.groupby('police_force').size().reset_index(name='count')\n\n# Sort by police_force in descending order\ndf_sorted = df_grouped.sort_values('police_force', ascending=False)\n\n# Create bar plot\nplt.bar(df_sorted['police_force'], df_sorted['count'])\nplt.xlabel('Police Force')\nplt.ylabel('Count')\nplt.title('Occurrences by Police Force')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "A bar chart showing the number of different competition types , display by the y axis in descending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort by count in descending order\ncompetition_counts = competition_counts.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Competition Type Counts')\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "A bar chart for showing the number of the names of editors that are on the committee of journals with sales bigger than 3000, and could you list from high to low by the Name?",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the tables\njournal_committee = pd.read_sql(\"SELECT * FROM journal_committee\", conn)\neditor = pd.read_sql(\"SELECT * FROM editor\", conn)\njournal = pd.read_sql(\"SELECT * FROM journal\", conn)\n\n# Convert column names to lowercase\njournal_committee.columns = journal_committee.columns.str.lower()\neditor.columns = editor.columns.str.lower()\njournal.columns = journal.columns.str.lower()\n\n# Merge the tables\nmerged_data = pd.merge(journal_committee, editor, on=\"editor_id\")\nmerged_data = pd.merge(merged_data, journal, on=\"journal_id\")\n\n# Filter the data\nfiltered_data = merged_data[merged_data[\"sales\"] > 3000]\n\n# Group by Name and count occurrences\ngrouped_data = filtered_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# Sort by Name in descending order\nsorted_data = grouped_data.sort_values(\"name\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"name\"], sorted_data[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of Names in Journal Committee\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "How many departments are built in each year ? Group by creation time in a line chart , and order by the x axis in asc .",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = department.columns.str.lower()\n\n# Assuming 'department' is a DataFrame containing the table data\n\n# Perform the SQL query\nresult = department.groupby('creation').size().reset_index(name='count').sort_values('creation')\n\n# Plot the line chart\nplt.plot(result['creation'], result['count'])\nplt.xlabel('Creation')\nplt.ylabel('Count')\nplt.title('Line Chart of Creation Count')\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Bar chart of the total number from each location",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\nperformance.columns = performance.columns.str.lower()\n\n# Group by location and count the number of records\nlocation_counts = performance.groupby('location').size()\n\n# Create a bar plot\nplt.bar(location_counts.index, location_counts.values)\n\n# Set the labels and title\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Records by Location')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "car_1",
    "question": "How many countries does each continent have? List the continent id and the number of countries with a scatter chart.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the CONTINENTS table\ncontinents = pd.read_sql(\"SELECT * FROM CONTINENTS\", conn)\ncontinents.columns = map(str.lower, continents.columns)\n\n# Read the COUNTRIES table\ncountries = pd.read_sql(\"SELECT * FROM COUNTRIES\", conn)\ncountries.columns = map(str.lower, countries.columns)\n\n# Merge the CONTINENTS and COUNTRIES tables on the ContId column\nmerged_data = pd.merge(continents, countries, left_on=\"contid\", right_on=\"continent\")\n\n# Group by ContId and count the number of records\ngrouped_data = merged_data.groupby(\"contid\").size().reset_index(name=\"count\")\n\n# Scatter plot\nplt.scatter(grouped_data[\"contid\"], grouped_data[\"count\"])\nplt.xlabel(\"ContId\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Countries per Continent\")\nplt.show()\n"
  },
  {
    "db_id": "department_management",
    "question": "Can you draw the trend of sum budget in billions over the creation?, could you show by the x-axis in asc?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the department table\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\n\n# Convert column names to lowercase\ndepartment.columns = department.columns.str.lower()\n\n# Perform the SQL query\nresult = department.groupby(\"creation\")[\"budget_in_billions\"].sum().reset_index().sort_values(\"creation\")\n\n# Plot the line chart\nplt.plot(result[\"creation\"], result[\"budget_in_billions\"])\nplt.xlabel(\"Creation\")\nplt.ylabel(\"Budget in Billions\")\nplt.title(\"Total Budget by Creation\")\nplt.show()"
  },
  {
    "db_id": "riding_club",
    "question": "Compare the distribution of the players' gender using a bar chart, and rank in descending by the bar please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the player table\nplayer_df = pd.read_sql(\"SELECT * FROM player\", conn)\n\n# Convert column names to lowercase\nplayer_df.columns = player_df.columns.str.lower()\n\n# Perform the SQL query\ngender_count = player_df.groupby('gender').size().reset_index(name='count')\ngender_count = gender_count.sort_values('gender', ascending=False)\n\n# Generate the bar plot\nplt.bar(gender_count['gender'], gender_count['count'])\nplt.xlabel('Gender')\nplt.ylabel('Count')\nplt.title('Gender Distribution')\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Visualize the name and their component amounts with a bar chart for all furnitures that have more than 10 components , could you order by the bar in ascending ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nfurniture = pd.read_sql(\"SELECT * FROM furniture\", conn)\nfurniture.columns = furniture.columns.str.lower()\n\n# Filter the furniture dataframe\nfiltered_furniture = furniture[furniture['num_of_component'] > 10]\n\n# Sort the filtered dataframe by name\nsorted_furniture = filtered_furniture.sort_values('name')\n\n# Create the bar plot\nplt.bar(sorted_furniture['name'], sorted_furniture['num_of_component'])\n\n# Set the x-axis label\nplt.xlabel('Name')\n\n# Set the y-axis label\nplt.ylabel('Number of Components')\n\n# Set the title of the plot\nplt.title('Furniture with More than 10 Components')\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "How many companies each investor has invested ? Show me a bar chart , and show by the X from low to high .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\n\n# Grouping and counting the investors\ninvestor_counts = entrepreneur.groupby('investor').size().reset_index(name='count')\n\n# Sorting the data by investor name\ninvestor_counts = investor_counts.sort_values('investor')\n\n# Creating the bar plot\nplt.bar(investor_counts['investor'], investor_counts['count'])\nplt.xlabel('Investor')\nplt.ylabel('Count')\nplt.title('Number of Entrepreneurs by Investor')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "music_4",
    "question": "Return the number of music festivals of each category, order from high to low by the Y.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the music_festival table\nmusic_festival = pd.read_sql(\"SELECT * FROM music_festival\", conn)\n\n# Convert column names to lowercase\nmusic_festival.columns = music_festival.columns.str.lower()\n\n# Perform the SQL query\nresult = music_festival.groupby('category').size().reset_index(name='count').sort_values('count', ascending=False)\n\n# Generate the bar plot\nplt.bar(result['category'], result['count'])\nplt.xlabel('Category')\nplt.ylabel('Count')\nplt.title('Music Festival by Category')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Show me a bar chart displaying the number of performances attended by each member.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmember_attendance = pd.read_sql(\"SELECT * FROM member_attendance\", conn)\nmember = pd.read_sql(\"SELECT * FROM member\", conn)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\nmember_attendance.columns = member_attendance.columns.str.lower()\nmember.columns = member.columns.str.lower()\nperformance.columns = performance.columns.str.lower()\n\n# Perform the join operation\ndf = pd.merge(member_attendance, member, on='member_id')\ndf = pd.merge(df, performance, on='performance_id')\n\n# Group by name and count the number of locations\nresult = df.groupby('name')['location'].count().reset_index()\n\n# Plot the bar chart\nplt.bar(result['name'], result['location'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Number of Locations Attended by Members')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "What is the game name with the highest number of players, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nPlays_games = pd.read_sql(\"SELECT * FROM Plays_games\", conn)\nVideo_games = pd.read_sql(\"SELECT * FROM Video_games\", conn)\nPlays_games.columns = Plays_games.columns.str.lower()\nVideo_games.columns = Video_games.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Plays_games, Video_games, on='gameid')\n\n# Group by gameid and count the number of occurrences\ngrouped_df = merged_df.groupby('gameid').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Get the game names corresponding to the gameids\nsorted_df['gname'] = merged_df.groupby('gameid')['gname'].first().values\n\n# Plot the bar chart\nplt.bar(sorted_df['gname'], sorted_df['count'])\nplt.xlabel('Game Name')\nplt.ylabel('Count')\nplt.title('Number of Plays per Game')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "What insights can be gained from the SQL statement using a line chart?",
    "chart": "Line",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nfurniture = pd.read_sql(\"SELECT * FROM furniture\", conn)\nfurniture_manufacte = pd.read_sql(\"SELECT * FROM furniture_manufacte\", conn)\nfurniture.columns = furniture.columns.str.lower()\nfurniture_manufacte.columns = furniture_manufacte.columns.str.lower()\n\n# Perform the join operation\nresult = pd.merge(furniture, furniture_manufacte, on='furniture_id')\n\n# Create a line plot\nplt.plot(result['name'], result['price_in_dollar'])\nplt.xlabel('Furniture Name')\nplt.ylabel('Price in Dollar')\nplt.title('Furniture Price')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "party_host",
    "question": "Return a bar on how many hosts does each nationality have ? List the nationality and the count , and sort X-axis from high to low order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nHOST = pd.read_sql(\"SELECT * FROM HOST\", conn)\nHOST.columns = HOST.columns.str.lower()\n\n# Grouping the data by nationality and counting the occurrences\nnationality_counts = HOST.groupby('nationality').size().reset_index(name='count')\n\n# Sorting the data by nationality in descending order\nnationality_counts = nationality_counts.sort_values(by='nationality', ascending=False)\n\n# Creating the bar plot\nplt.bar(nationality_counts['nationality'], nationality_counts['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Hosts by Nationality')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "What is the count of stars for each movie where the director's name aligns with the reviewer's name, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nMovie = pd.read_sql(\"SELECT * FROM Movie\", conn)\nReviewer = pd.read_sql(\"SELECT * FROM Reviewer\", conn)\nRating.columns = Rating.columns.str.lower()\nMovie.columns = Movie.columns.str.lower()\nReviewer.columns = Reviewer.columns.str.lower()\n\n# Joining tables\nmerged_df = pd.merge(pd.merge(Rating, Movie, on='mid'), Reviewer, on='rid')\n\n# Filtering data\nfiltered_df = merged_df[merged_df['director'] == merged_df['name']]\n\n# Grouping and counting\ngrouped_df = filtered_df.groupby('title').size().reset_index(name='count')\n\n# Sorting by title\nsorted_df = grouped_df.sort_values('title')\n\n# Plotting bar chart\nplt.bar(sorted_df['title'], sorted_df['count'])\nplt.xlabel('Movie Title')\nplt.ylabel('Count')\nplt.title('Number of Ratings by Movie Title')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "local_govt_mdm",
    "question": "How many business rates are related to each CMI cross reference, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nBusiness_Rates = pd.read_sql(\"SELECT * FROM Business_Rates\", conn)\nCMI_Cross_References = pd.read_sql(\"SELECT * FROM CMI_Cross_References\", conn)\nBusiness_Rates.columns = Business_Rates.columns.str.lower()\nCMI_Cross_References.columns = CMI_Cross_References.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Business_Rates, CMI_Cross_References, on='cmi_cross_ref_id')\n\n# Group by cmi_cross_ref_id and count the occurrences\ngrouped_df = merged_df.groupby('cmi_cross_ref_id').size().reset_index(name='count')\n\n# Sort by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['cmi_cross_ref_id'], sorted_df['count'])\nplt.xlabel('cmi_cross_ref_id')\nplt.ylabel('Count')\nplt.title('Count of Business Rates by cmi_cross_ref_id')\nplt.show()"
  },
  {
    "db_id": "local_govt_mdm",
    "question": "What are the details of the cmi masters that have the cross reference code 'Tax' represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nCustomer_Master_Index = pd.read_sql(\"SELECT * FROM Customer_Master_Index\", conn)\nCMI_Cross_References = pd.read_sql(\"SELECT * FROM CMI_Cross_References\", conn)\nCustomer_Master_Index.columns = Customer_Master_Index.columns.str.lower()\nCMI_Cross_References.columns = CMI_Cross_References.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Customer_Master_Index, CMI_Cross_References, on='master_customer_id')\n\n# Filter the data based on the condition\nfiltered_df = merged_df[merged_df['source_system_code'] == 'Tax']\n\n# Group by cmi_details and count the occurrences\ngrouped_df = filtered_df.groupby('cmi_details').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['cmi_details'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Ignore movies whose director is NULL. For each director, what are the titles and ratings for all the movies they reviewed? Show the result by a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Rating table\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\n\n# Read the Movie table\nmovie_df = pd.read_sql(\"SELECT * FROM Movie\", conn)\n\n# Convert column names to lowercase\nrating_df.columns = rating_df.columns.str.lower()\nmovie_df.columns = movie_df.columns.str.lower()\n\n# merge the rating and movie tables on mid\nmerged_df = pd.merge(rating_df, movie_df, on='mid')\n\n# filter the merged dataframe to exclude rows with director as \"null\"\nfiltered_df = merged_df[merged_df['director'] != 'null']\n\n# group by title and calculate the sum of stars for each title\ngrouped_df = filtered_df.groupby('title')['stars'].sum().reset_index()\n\n# plot the pie chart\nplt.pie(grouped_df['stars'], labels=grouped_df['title'], autopct='%1.1f%%')\nplt.title('Stars Distribution by Movie Title')\nplt.show()\n"
  },
  {
    "db_id": "department_management",
    "question": "Show the average age of heads of departments born in each state with a bar chart , list by the X-axis in desc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nhead = pd.read_sql(\"SELECT * FROM head\", conn)\nhead.columns = head.columns.str.lower()\n\nresult = head.groupby('born_state')['age'].mean().reset_index().sort_values('born_state', ascending=False)\n\nplt.bar(result['born_state'], result['age'])\nplt.xlabel('Born State')\nplt.ylabel('Average Age')\nplt.title('Average Age by Born State')\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Bar graph to show the number of rank from different rank , and list how many rank in asc order please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\ncaptain.columns = captain.columns.str.lower()\n\n# Group by rank and count the occurrences\nrank_counts = captain.groupby('rank').size().reset_index(name='count')\n\n# Sort the dataframe by count in ascending order\nrank_counts = rank_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(rank_counts['rank'], rank_counts['count'])\nplt.xlabel('Rank')\nplt.ylabel('Count')\nplt.title('Rank Counts')\nplt.show()"
  },
  {
    "db_id": "insurance_fnol",
    "question": "What is the ordered list of customer ids . Visualize them with a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\ncustomers.columns = customers.columns.str.lower()\n\n# Assuming customers is a DataFrame containing the table data\n\n# Sort the DataFrame by customer_id in ascending order\nsorted_customers = customers.sort_values('customer_id')\n\n# Extract the customer_name and customer_id columns\ncustomer_names = sorted_customers['customer_name']\ncustomer_ids = sorted_customers['customer_id']\n\n# Create a bar plot\nplt.bar(customer_names, customer_ids)\n\n# Set the x-axis label\nplt.xlabel('Customer Name')\n\n# Set the y-axis label\nplt.ylabel('Customer ID')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "Show me a bar chart displaying the count of entrepreneurs for each weight category.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(entrepreneur, people, on='people_id')\n\n# Group by weight and count the occurrences\ngrouped_df = merged_df.groupby('weight').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['weight'], grouped_df['count'])\nplt.xlabel('Weight')\nplt.ylabel('Count')\nplt.title('Distribution of Weight')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "For the names and the players of clubs, count the names by names in a bar chart, list from high to low by the x-axis.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the club and player tables\nclub_df = pd.read_sql(\"SELECT * FROM club\", conn)\nplayer_df = pd.read_sql(\"SELECT * FROM player\", conn)\n\n# Convert column names to lowercase\nclub_df.columns = club_df.columns.str.lower()\nplayer_df.columns = player_df.columns.str.lower()\n\n# Merge the club and player tables on the club_id column\nmerged_df = pd.merge(club_df, player_df, on=\"club_id\")\n\n# Group by club_id and count the number of players in each club\ngrouped_df = merged_df.groupby(\"club_id\").size().reset_index(name=\"count\")\n\n# Join the grouped dataframe with the club table to get the club names\ngrouped_df = pd.merge(grouped_df, club_df, on=\"club_id\")\n\n# Sort the dataframe by club name in descending order\nsorted_df = grouped_df.sort_values(\"name\", ascending=False)\n\n# Create a bar plot\nplt.bar(sorted_df[\"name\"], sorted_df[\"count\"])\nplt.xlabel(\"Club Name\")\nplt.ylabel(\"Number of Players\")\nplt.title(\"Number of Players in Each Club\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "game_1",
    "question": "How many students play each sport Show bar chart , and could you sort by the Y-axis in ascending please ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nSportsinfo.columns = Sportsinfo.columns.str.lower()\n\n# Grouping the data by sportname and counting the occurrences\nsport_counts = Sportsinfo.groupby('sportname').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nsport_counts = sport_counts.sort_values('count')\n\n# Creating the bar plot\nplt.bar(sport_counts['sportname'], sport_counts['count'])\nplt.xlabel('Sport Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Sport Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "coffee_shop",
    "question": "Bar graph to show the total number from different address , I want to display names from low to high order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmember = pd.read_sql(\"SELECT * FROM member\", conn)\nmember.columns = member.columns.str.lower()\n\n# Grouping the data by address and counting the number of occurrences\naddress_counts = member.groupby('address').size().reset_index(name='count')\n\n# Sorting the data by address in ascending order\naddress_counts = address_counts.sort_values('address')\n\n# Creating the bar plot\nplt.bar(address_counts['address'], address_counts['count'])\nplt.xlabel('Address')\nplt.ylabel('Count')\nplt.title('Number of Members by Address')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "riding_club",
    "question": "Compare the number of players of different occupations using a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the player table\nplayer_df = pd.read_sql(\"SELECT * FROM player\", conn)\n\n# Convert column names to lowercase\nplayer_df.columns = player_df.columns.str.lower()\n\n# Group by Occupation and count the occurrences\noccupation_counts = player_df.groupby('occupation').size()\n\n# Create a bar plot\nplt.bar(occupation_counts.index, occupation_counts.values)\nplt.xlabel('Occupation')\nplt.ylabel('Count')\nplt.title('Occupation Counts')\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Show the names of members and the location of the performances they attended. Compute the total number of each location using a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the data from the member_attendance table\nmember_attendance = pd.read_sql(\"SELECT * FROM member_attendance\", conn)\n\n# Read the data from the member table\nmember = pd.read_sql(\"SELECT * FROM member\", conn)\n\n# Read the data from the performance table\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\n\n# Convert column names to lowercase\nmember_attendance.columns = member_attendance.columns.str.lower()\nmember.columns = member.columns.str.lower()\nperformance.columns = performance.columns.str.lower()\n\n# merge the tables using the specified join conditions\nmerged_data = pd.merge(member_attendance, member, on=\"member_id\")\nmerged_data = pd.merge(merged_data, performance, on=\"performance_id\")\n\n# perform the group by operation and count the occurrences of each location\ngrouped_data = merged_data.groupby(\"location\").size()\n\n# plot the pie chart\nplt.pie(grouped_data, labels=grouped_data.index, autopct=\"%1.1f%%\")\nplt.title(\"Distribution of Locations\")\nplt.show()\n"
  },
  {
    "db_id": "entrepreneur",
    "question": "How many entrepreneurs correspond to each investor , and show from high to low by the bars please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\n\n# Grouping the data by 'investor' and counting the occurrences\ngrouped_data = entrepreneur.groupby('investor').size().reset_index(name='count')\n\n# Sorting the data by 'investor' in descending order\nsorted_data = grouped_data.sort_values('investor', ascending=False)\n\n# Creating the bar plot\nplt.bar(sorted_data['investor'], sorted_data['count'])\nplt.xlabel('Investor')\nplt.ylabel('Count')\nplt.title('Number of Entrepreneurs by Investor')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "How many competitions are held in each city? Draw a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the city and farm_competition tables\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\nfarm_competition = pd.read_sql(\"SELECT * FROM farm_competition\", conn)\n\n# Convert column names to lowercase\ncity.columns = city.columns.str.lower()\nfarm_competition.columns = farm_competition.columns.str.lower()\n\n# Merge the city and farm_competition tables on City_ID and Host_city_ID columns\nmerged_data = pd.merge(city, farm_competition, left_on=\"city_id\", right_on=\"host_city_id\")\n\n# Perform the group by and count operation\ngrouped_data = merged_data.groupby(\"official_name\").size().reset_index(name=\"count\")\n\n# Plot the bar chart\nplt.bar(grouped_data[\"official_name\"], grouped_data[\"count\"])\nplt.xlabel(\"Official Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Farm Competitions by Official Name\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Compare the total number of competitions for each country , I want to sort in desc by the x axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by country and count the occurrences\ncountry_counts = competition.groupby('country').size().reset_index(name='count')\n\n# Sort by country in descending order\ncountry_counts = country_counts.sort_values('country', ascending=False)\n\n# Plot the bar chart\nplt.bar(country_counts['country'], country_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Country')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "What are the types of competition and number of competitions for that type Show bar chart, and rank Y in ascending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the competition table\ncompetition_df = pd.read_sql(\"SELECT * FROM competition\", conn)\n\n# Convert column names to lowercase\ncompetition_df.columns = competition_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = competition_df.groupby('competition_type').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result_df['competition_type'], result_df['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Competition Type Count')\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "What is the scatter plot of the average rating and number of movies for each director who has created a movie with a 5 star rating?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nMovie = pd.read_sql(\"SELECT * FROM Movie\", conn)\nRating = pd.read_sql(\"SELECT * FROM Rating\", conn)\nMovie.columns = Movie.columns.str.lower()\nRating.columns = Rating.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(Movie, Rating, on='mid')\n\n# Filtering for movies with rating of 5\nfiltered_df = merged_df[merged_df['stars'] == 5]\n\n# Grouping by director and calculating count and average rating\ngrouped_df = filtered_df.groupby('director').agg({'mid': 'count', 'stars': 'mean'}).reset_index()\ngrouped_df.columns = ['director', 'num_movies', 'avg_rating']\n\n# Scatter plot\nplt.scatter(grouped_df['num_movies'], grouped_df['avg_rating'])\nplt.xlabel('Number of Movies')\nplt.ylabel('Average Rating')\nplt.title('Number of Movies vs Average Rating by Director')\nplt.show()"
  },
  {
    "db_id": "car_1",
    "question": "Show me a bar chart for what are the names and ids of all makers with more than 3 models?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the CAR_MAKERS table\ncar_makers = pd.read_sql(\"SELECT * FROM CAR_MAKERS\", conn)\ncar_makers.columns = map(str.lower, car_makers.columns)\n\n# Read the MODEL_LIST table\nmodel_list = pd.read_sql(\"SELECT * FROM MODEL_LIST\", conn)\nmodel_list.columns = map(str.lower, model_list.columns)\n\n# Merge the two tables on the 'id' column\nmerged_data = pd.merge(car_makers, model_list, left_on='id', right_on='maker')\n\n# Plot the bar chart\nplt.bar(merged_data['fullname'], merged_data['id'])\nplt.xlabel('Car Maker')\nplt.ylabel('ID')\nplt.title('Car Maker vs ID')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "A bar chart showing how many representatives in each party , could you order in descending by the x-axis ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\nrepresentative.columns = representative.columns.str.lower()\n\n# Group by party and count the number of representatives in each party\nparty_counts = representative.groupby('party').size().reset_index(name='count')\n\n# Sort the parties in descending order\nparty_counts = party_counts.sort_values('party', ascending=False)\n\n# Create a bar plot\nplt.bar(party_counts['party'], party_counts['count'])\nplt.xlabel('Party')\nplt.ylabel('Count')\nplt.title('Number of Representatives by Party')\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Group and count the durations for each actor with a bar graph , order in descending by the X-axis please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nactor = pd.read_sql(\"SELECT * FROM actor\", conn)\nactor.columns = actor.columns.str.lower()\n\n# Grouping the data by duration and counting the occurrences\ngrouped_data = actor.groupby('duration').size().reset_index(name='count')\n\n# Sorting the data by duration in descending order\nsorted_data = grouped_data.sort_values('duration', ascending=False)\n\n# Creating the bar plot\nplt.bar(sorted_data['duration'], sorted_data['count'])\n\n# Adding labels and title\nplt.xlabel('Duration')\nplt.ylabel('Count')\nplt.title('Distribution of Durations')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Visualize a bar chart for what are the different template type codes, and how many templates correspond to each?, I want to sort from low to high by the x axis.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Templates table\ntemplates = pd.read_sql(\"SELECT * FROM Templates\", conn)\n\n# Convert column names to lowercase\ntemplates.columns = templates.columns.str.lower()\n\n# Perform the SQL query\nresult = templates.groupby('template_type_code').size().reset_index(name='count').sort_values('template_type_code')\n\n# Generate the bar chart\nplt.bar(result['template_type_code'], result['count'])\nplt.xlabel('Template Type Code')\nplt.ylabel('Count')\nplt.title('Number of Templates by Template Type Code')\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Show the average age of heads of departments born in each state with a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nhead = pd.read_sql(\"SELECT * FROM head\", conn)\nhead.columns = head.columns.str.lower()\n\n# Calculate average age by born_state\navg_age_by_state = head.groupby('born_state')['age'].mean()\n\n# Create bar plot\nplt.bar(avg_age_by_state.index, avg_age_by_state.values)\nplt.xlabel('Born State')\nplt.ylabel('Average Age')\nplt.title('Average Age by Born State')\nplt.show()"
  },
  {
    "db_id": "riding_club",
    "question": "How many coaches does each club have, represented in a scatter chart?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\ncoach = pd.read_sql(\"SELECT * FROM coach\", conn)\nclub.columns = club.columns.str.lower()\ncoach.columns = coach.columns.str.lower()\n\n# Joining the club and coach dataframes\nmerged_df = pd.merge(club, coach, on='club_id')\n\n# Grouping by club_id and counting the number of rows\ngrouped_df = merged_df.groupby('club_id').size().reset_index(name='count')\n\n# Creating a scatter plot\nplt.scatter(grouped_df['club_id'], grouped_df['count'])\nplt.xlabel('Club ID')\nplt.ylabel('Count')\nplt.title('Number of Coaches per Club')\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "What are the ids and details for all organizations that have grants of more than 6000 dollars, rank X from low to high order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Grants table\ngrants = pd.read_sql(\"SELECT * FROM Grants\", conn)\ngrants.columns = map(str.lower, grants.columns)\n\n# Read the Organisations table\norganisations = pd.read_sql(\"SELECT * FROM Organisations\", conn)\norganisations.columns = map(str.lower, organisations.columns)\n\n# Merge the Grants and Organisations tables\nmerged_data = pd.merge(grants, organisations, on=\"organisation_id\")\n\n# Group by organisation_details and count the number of grants\ngrouped_data = merged_data.groupby(\"organisation_details\").size().reset_index(name=\"count\")\n\n# Sort the data by organisation_details in ascending order\nsorted_data = grouped_data.sort_values(\"organisation_details\")\n\n# Plot the bar chart\nplt.bar(sorted_data[\"organisation_details\"], sorted_data[\"count\"])\nplt.xlabel(\"Organisation Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Grants by Organisation Details\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "A bar chart groups the lot details, and computes the number of each lot details, and list y axis in asc order please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the LOTS table\nlots = pd.read_sql(\"SELECT * FROM LOTS\", conn)\n\n# Convert column names to lowercase\nlots.columns = lots.columns.str.lower()\n\n# Perform the query\nresult = lots.groupby('lot_details').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar plot\nplt.bar(result['lot_details'], result['count'])\nplt.xlabel('Lot Details')\nplt.ylabel('Count')\nplt.title('Count of Lot Details')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Bar chart x axis sportname y axis the total number, rank X-axis from high to low order please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Sportsinfo table\nsportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\n\n# Convert column names to lowercase\nsportsinfo.columns = map(str.lower, sportsinfo.columns)\n\n# Perform the SQL query\nresult = sportsinfo.groupby('sportname').size().reset_index(name='count').sort_values('sportname', ascending=False)\n\n# Generate the bar plot\nplt.bar(result['sportname'], result['count'])\nplt.xlabel('Sport Name')\nplt.ylabel('Count')\nplt.title('Number of Participants in Each Sport')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "movie_1",
    "question": "Show me the correlation about what is the average rating for each movie that has never been reviewed by Brittany Harris?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Rating and Reviewer tables\nrating_df = pd.read_sql(\"SELECT * FROM Rating\", conn)\nreviewer_df = pd.read_sql(\"SELECT * FROM Reviewer\", conn)\n\n# Convert column names to lowercase\nrating_df.columns = rating_df.columns.str.lower()\nreviewer_df.columns = reviewer_df.columns.str.lower()\n\n# Merge Rating and Reviewer tables\nmerged_df = pd.merge(rating_df, reviewer_df, on=\"rid\")\n\n# Filter out movies rated by Brittany Harris\nfiltered_df = merged_df[merged_df[\"name\"] != \"Brittany Harris\"]\n\n# Calculate average stars per movie\navg_stars_df = filtered_df.groupby(\"mid\")[\"stars\"].mean().reset_index()\n\n# Scatter plot\nplt.scatter(avg_stars_df[\"mid\"], avg_stars_df[\"stars\"])\nplt.xlabel(\"Movie ID\")\nplt.ylabel(\"Average Stars\")\nplt.title(\"Average Stars per Movie (Excluding Brittany Harris)\")\nplt.show()"
  },
  {
    "db_id": "local_govt_mdm",
    "question": "what are the details of the cmi masters that have the cross reference code 'Tax', and count them by a bar chart, and I want to display bars from high to low order.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read data from Customer_Master_Index table\ncustomer_master_index = pd.read_sql(\"SELECT * FROM Customer_Master_Index\", conn)\ncustomer_master_index.columns = map(str.lower, customer_master_index.columns)\n\n# Read data from CMI_Cross_References table\ncmi_cross_references = pd.read_sql(\"SELECT * FROM CMI_Cross_References\", conn)\ncmi_cross_references.columns = map(str.lower, cmi_cross_references.columns)\n\n# Merge the two tables on master_customer_id\nmerged_data = pd.merge(customer_master_index, cmi_cross_references, on=\"master_customer_id\")\n\n# Filter the merged data for source_system_code = 'Tax'\nfiltered_data = merged_data[merged_data[\"source_system_code\"] == \"Tax\"]\n\n# Group by cmi_details and count the occurrences\ngrouped_data = filtered_data.groupby(\"cmi_details\").size().reset_index(name=\"count\")\n\n# Sort the grouped data by cmi_details in descending order\nsorted_data = grouped_data.sort_values(\"cmi_details\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"cmi_details\"], sorted_data[\"count\"])\nplt.xlabel(\"CMI Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Bar Chart of CMI Details\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all template type codes and the number of documents using each type with a bar chart, and sort by the x-axis in ascending.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Templates table\ntemplates = pd.read_sql(\"SELECT * FROM Templates\", conn)\ntemplates.columns = map(str.lower, templates.columns)\n\n# Read the Documents table\ndocuments = pd.read_sql(\"SELECT * FROM Documents\", conn)\ndocuments.columns = map(str.lower, documents.columns)\n\n# Merge the Templates and Documents tables on template_id\nmerged_data = pd.merge(templates, documents, on=\"template_id\")\n\n# Group by Template_Type_Code and count the number of occurrences\ngrouped_data = merged_data.groupby(\"template_type_code\").size().reset_index(name=\"count\")\n\n# Sort the data by Template_Type_Code in ascending order\nsorted_data = grouped_data.sort_values(\"template_type_code\")\n\n# Generate the bar chart\nplt.bar(sorted_data[\"template_type_code\"], sorted_data[\"count\"])\nplt.xlabel(\"Template Type Code\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Templates by Template Type Code\")\nplt.show()"
  },
  {
    "db_id": "journal_committee",
    "question": "Just show the id and name of each editor using a bar chart, rank Name from high to low order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the editor table\neditor_df = pd.read_sql(\"SELECT * FROM editor\", conn)\neditor_df.columns = map(str.lower, editor_df.columns)\n\n# Read the journal_committee table\njournal_committee_df = pd.read_sql(\"SELECT * FROM journal_committee\", conn)\njournal_committee_df.columns = map(str.lower, journal_committee_df.columns)\n\n# Merge the two tables on Editor_ID\nmerged_df = pd.merge(editor_df, journal_committee_df, on=\"editor_id\")\n\n# Sort the merged dataframe by Name in descending order\nsorted_df = merged_df.sort_values(by=\"name\", ascending=False)\n\n# Create a bar plot\nplt.bar(sorted_df[\"name\"], sorted_df[\"editor_id\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Editor ID\")\nplt.title(\"Editor ID by Name\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "List the types of competition and the number of competitions of each type Visualize by bar chart , and order in asc by the the total number please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the number of occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort the counts in ascending order\ncompetition_counts = competition_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Type')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "ship_1",
    "question": "Show me a bar chart comparing the total number of captains of different classes , I want to order by the x axis from high to low .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncaptain = pd.read_sql(\"SELECT * FROM captain\", conn)\ncaptain.columns = captain.columns.str.lower()\n\n# Group by 'class' and count the occurrences\nclass_counts = captain.groupby('class').size().reset_index(name='count')\n\n# Sort the dataframe by 'class' in descending order\nclass_counts = class_counts.sort_values('class', ascending=False)\n\n# Create a bar plot\nplt.bar(class_counts['class'], class_counts['count'])\nplt.xlabel('Class')\nplt.ylabel('Count')\nplt.title('Count of each class')\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "Show me a bar chart displaying the last names of students who are on scholarship, along with the count of how many students have each last name. Please ensure that the bars are sorted in ascending order by the count.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nStudent = pd.read_sql(\"SELECT * FROM Student\", conn)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nStudent.columns = Student.columns.str.lower()\nSportsinfo.columns = Sportsinfo.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Student, Sportsinfo, on='stuid')\n\n# Filter the data based on the condition\nfiltered_df = merged_df[merged_df['onscholarship'] == 'Y']\n\n# Group the data by lname and count the number of occurrences\ngrouped_df = filtered_df.groupby('lname').size().reset_index(name='count')\n\n# Sort the data by count in ascending order\nsorted_df = grouped_df.sort_values('count', ascending=True)\n\n# Plot the bar chart\nplt.bar(sorted_df['lname'], sorted_df['count'])\nplt.xlabel('Last Name')\nplt.ylabel('Count')\nplt.title('Number of Students on Scholarship by Last Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "company_employee",
    "question": "Bar chart x axis headquarters y axis the total number, and sort y-axis in asc order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the company table\ncompany = pd.read_sql(\"SELECT * FROM company\", conn)\n\n# Convert column names to lowercase\ncompany.columns = company.columns.str.lower()\n\n# Perform the SQL query\nresult = company.groupby('headquarters').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result['headquarters'], result['count'])\nplt.xlabel('Headquarters')\nplt.ylabel('Count')\nplt.title('Number of Companies by Headquarters')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "musical",
    "question": "Return a bar chart on how many musicals has each nominee been nominated for ? , and I want to show by the x-axis in descending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmusical = pd.read_sql(\"SELECT * FROM musical\", conn)\nmusical.columns = musical.columns.str.lower()\n\n# Group by nominee and count the occurrences\ngrouped = musical.groupby('nominee').size().reset_index(name='count')\n\n# Sort by nominee in descending order\ngrouped = grouped.sort_values('nominee', ascending=False)\n\n# Create bar plot\nplt.bar(grouped['nominee'], grouped['count'])\nplt.xlabel('Nominee')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Nominee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "student_1",
    "question": "For each classroom, show the classroom number and find how many students are using it. Plot them as scatter chart.",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"list\" table\nlist_data = pd.read_sql(\"SELECT * FROM list\", conn)\n\n# Convert column names to lowercase\nlist_data.columns = list_data.columns.str.lower()\n\n# Perform the query and group by \"classroom\"\ngrouped_data = list_data.groupby(\"classroom\").size().reset_index(name=\"count\")\n\n# Scatter plot\nplt.scatter(grouped_data[\"classroom\"], grouped_data[\"count\"])\nplt.xlabel(\"Classroom\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Students in Each Classroom\")\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "What are the number of the purchase details of transactions with amount bigger than 10000?, I want to list by the y-axis in asc.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the PURCHASES and TRANSACTIONS tables\npurchases = pd.read_sql(\"SELECT * FROM PURCHASES\", conn)\ntransactions = pd.read_sql(\"SELECT * FROM TRANSACTIONS\", conn)\n\n# Convert column names to lowercase\npurchases.columns = purchases.columns.str.lower()\ntransactions.columns = transactions.columns.str.lower()\n\n# Merge the PURCHASES and TRANSACTIONS tables on the purchase_transaction_id column\nmerged_data = pd.merge(purchases, transactions, left_on=\"purchase_transaction_id\", right_on=\"transaction_id\")\n\n# Filter the merged data for transactions with amount_of_transaction > 10000\nfiltered_data = merged_data[merged_data[\"amount_of_transaction\"] > 10000]\n\n# Group the filtered data by purchase_details and count the occurrences\ngrouped_data = filtered_data.groupby(\"purchase_details\").size().reset_index(name=\"count\")\n\n# Sort the grouped data by count in ascending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=True)\n\n# Generate the bar plot\nplt.bar(sorted_data[\"purchase_details\"], sorted_data[\"count\"])\nplt.xlabel(\"Purchase Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of Purchase Details with Amount > 10000\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_grants_for_research",
    "question": "List the number of the description of the outcomes for all projects, and could you sort in ascending by the y axis?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Research_outcomes table\nresearch_outcomes = pd.read_sql(\"SELECT * FROM Research_outcomes\", conn)\nresearch_outcomes.columns = map(str.lower, research_outcomes.columns)\n\n# Read the Project_outcomes table\nproject_outcomes = pd.read_sql(\"SELECT * FROM Project_outcomes\", conn)\nproject_outcomes.columns = map(str.lower, project_outcomes.columns)\n\n# Merge the two tables on outcome_code\nmerged_data = pd.merge(research_outcomes, project_outcomes, on=\"outcome_code\")\n\n# Perform the SQL query and group by outcome_description\nresult = merged_data.groupby(\"outcome_description\").size().reset_index(name=\"count\")\nresult = result.sort_values(\"count\", ascending=True)\n\n# Plot the bar chart\nplt.bar(result[\"outcome_description\"], result[\"count\"])\nplt.xlabel(\"Outcome Description\")\nplt.ylabel(\"Count\")\nplt.title(\"Bar Chart of Outcome Descriptions\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes' by a bar chart.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the department and management tables\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\nmanagement = pd.read_sql(\"SELECT * FROM management\", conn)\n\n# Convert column names to lowercase\ndepartment.columns = department.columns.str.lower()\nmanagement.columns = management.columns.str.lower()\n\n# Merge the department and management tables on department_id\nmerged_data = pd.merge(department, management, on=\"department_id\")\n\n# Filter the merged data for temporary acting departments\ntemporary_acting_data = merged_data[merged_data[\"temporary_acting\"] == \"Yes\"]\n\n# Calculate the average number of employees per department\navg_employees = temporary_acting_data.groupby(\"name\")[\"num_employees\"].mean()\n\n# Create a bar plot\nplt.bar(avg_employees.index, avg_employees.values)\nplt.xlabel(\"Department Name\")\nplt.ylabel(\"Average Number of Employees\")\nplt.title(\"Average Number of Employees in Temporary Acting Departments\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "school_player",
    "question": "Show me a bar chart displaying the number of players in each team, ranked in descending order of player count.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nplayer = pd.read_sql(\"SELECT * FROM player\", conn)\nschool = pd.read_sql(\"SELECT * FROM school\", conn)\nplayer.columns = player.columns.str.lower()\nschool.columns = school.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(player, school, on='school_id')\n\n# Perform the group by and count operation\ngrouped_df = merged_df.groupby('team').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['team'], sorted_df['count'])\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Number of Players by Team')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "Show the average amount of transactions for different investors with a scatter chart .",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nTRANSACTIONS = pd.read_sql(\"SELECT * FROM TRANSACTIONS\", conn)\nTRANSACTIONS.columns = TRANSACTIONS.columns.str.lower()\n\n# Group transactions by investor_id and calculate average amount_of_transaction\ngrouped_transactions = TRANSACTIONS.groupby('investor_id')['amount_of_transaction'].mean()\n\n# Convert the grouped transactions to a dataframe\ndf = pd.DataFrame(grouped_transactions).reset_index()\n\n# Scatter plot\nplt.scatter(df['investor_id'], df['amount_of_transaction'])\nplt.xlabel('Investor ID')\nplt.ylabel('Average Amount of Transaction')\nplt.title('Scatter Plot of Average Amount of Transaction by Investor ID')\nplt.show()"
  },
  {
    "db_id": "farm",
    "question": "How many competitions are there for each theme in cities with populations larger than 1000, represented by a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\nfarm_competition = pd.read_sql(\"SELECT * FROM farm_competition\", conn)\ncity.columns = city.columns.str.lower()\nfarm_competition.columns = farm_competition.columns.str.lower()\n\n# Joining the city and farm_competition tables\nmerged_df = pd.merge(city, farm_competition, left_on='city_id', right_on='host_city_id')\n\n# Filtering cities with population greater than 1000\nfiltered_df = merged_df[merged_df['population'] > 1000]\n\n# Grouping by theme and counting the occurrences\ngrouped_df = filtered_df.groupby('theme').size().reset_index(name='count')\n\n# Creating the bar plot\nplt.bar(grouped_df['theme'], grouped_df['count'])\nplt.xlabel('Theme')\nplt.ylabel('Count')\nplt.title('Farm Competition Themes')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "How many competitions for each country?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the competition table\ncompetition_df = pd.read_sql(\"SELECT * FROM competition\", conn)\n\n# Convert column names to lowercase\ncompetition_df.columns = competition_df.columns.str.lower()\n\n# Perform the SQL query\ncountry_count = competition_df.groupby('country').size()\n\n# Create the bar plot\nplt.bar(country_count.index, country_count.values)\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Competition by Country')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "election_representative",
    "question": "A bar chart showing how many representatives in each party , and I want to display Y-axis from low to high order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nrepresentative = pd.read_sql(\"SELECT * FROM representative\", conn)\nrepresentative.columns = representative.columns.str.lower()\n\n# Group by party and count the number of representatives in each party\nparty_counts = representative.groupby('party').size().reset_index(name='count')\n\n# Sort the parties by count in ascending order\nparty_counts = party_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(party_counts['party'], party_counts['count'])\nplt.xlabel('Party')\nplt.ylabel('Count')\nplt.title('Number of Representatives by Party')\nplt.show()"
  },
  {
    "db_id": "manufacturer",
    "question": "Visualize the name and their component amounts with a bar chart for all furnitures that have more than 10 components , show Y in asc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nfurniture = pd.read_sql(\"SELECT * FROM furniture\", conn)\nfurniture.columns = furniture.columns.str.lower()\n\n# Filter the dataframe\nfiltered_df = furniture[furniture['num_of_component'] > 10]\n\n# Sort the dataframe\nsorted_df = filtered_df.sort_values('num_of_component', ascending=True)\n\n# Create the bar plot\nplt.bar(sorted_df['name'], sorted_df['num_of_component'])\n\n# Add labels and title\nplt.xlabel('Name')\nplt.ylabel('Number of Components')\nplt.title('Furniture with More than 10 Components')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "game_1",
    "question": "How many students under 20 have played a certain number of games, and what is the distribution of students across each category? Show me a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nSportsinfo = pd.read_sql(\"SELECT * FROM Sportsinfo\", conn)\nStudent = pd.read_sql(\"SELECT * FROM Student\", conn)\nSportsinfo.columns = Sportsinfo.columns.str.lower()\nStudent.columns = Student.columns.str.lower()\n\n# Joining tables\nmerged_df = pd.merge(Sportsinfo, Student, on='stuid')\n\n# Filtering data\nfiltered_df = merged_df[merged_df['age'] < 20]\n\n# Grouping and counting\ngrouped_df = filtered_df.groupby('gamesplayed').size().reset_index(name='count')\n\n# Plotting pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['gamesplayed'], autopct='%1.1f%%')\nplt.title('Games Played Distribution')\nplt.show()"
  },
  {
    "db_id": "performance_attendance",
    "question": "Show different locations and the number of performances at each location by a bar chart , and could you list from low to high by the Y ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperformance = pd.read_sql(\"SELECT * FROM performance\", conn)\nperformance.columns = performance.columns.str.lower()\n\n# Group by location and count the number of occurrences\nlocation_counts = performance.groupby('location').size().reset_index(name='count')\n\n# Sort the counts in ascending order\nlocation_counts = location_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(location_counts['location'], location_counts['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Location')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "coffee_shop",
    "question": "Find the number of members living in each address Show bar chart , and I want to show x-axis from low to high order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmember = pd.read_sql(\"SELECT * FROM member\", conn)\nmember.columns = member.columns.str.lower()\n\n# Grouping the data by address and counting the number of occurrences\naddress_counts = member.groupby('address').size().reset_index(name='count')\n\n# Sorting the data by address in ascending order\naddress_counts = address_counts.sort_values('address')\n\n# Creating the bar plot\nplt.bar(address_counts['address'], address_counts['count'])\nplt.xlabel('Address')\nplt.ylabel('Count')\nplt.title('Number of Members by Address')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_share_transactions",
    "question": "Return the lot details, group the lot details, and compute the number of each lot details, list X-axis from low to high order please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the LOTS table\nlots = pd.read_sql(\"SELECT * FROM LOTS\", conn)\n\n# Convert column names to lowercase\nlots.columns = lots.columns.str.lower()\n\n# Perform the SQL query\nresult = lots.groupby('lot_details').size().reset_index(name='count').sort_values('lot_details')\n\n# Generate the bar plot\nplt.bar(result['lot_details'], result['count'])\nplt.xlabel('Lot Details')\nplt.ylabel('Count')\nplt.title('Bar Plot of Lot Details')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show the relationship between document id and the number of paragraphs in each document with a scatter chart.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the 'Paragraphs' table\nparagraphs = pd.read_sql(\"SELECT * FROM paragraphs\", conn)\n\n# Read the 'Documents' table\ndocuments = pd.read_sql(\"SELECT * FROM documents\", conn)\n\n# Convert column names to lowercase\nparagraphs.columns = paragraphs.columns.str.lower()\ndocuments.columns = documents.columns.str.lower()\n\n# merge the two tables on 'document_id'\nmerged_data = pd.merge(paragraphs, documents, on='document_id')\n\n# group by 'document_id' and count the number of rows\ngrouped_data = merged_data.groupby('document_id').size().reset_index(name='count')\n\n# scatter plot\nplt.scatter(grouped_data['document_id'], grouped_data['count'])\nplt.xlabel('Document ID')\nplt.ylabel('Count')\nplt.title('Number of Paragraphs per Document')\nplt.show()\n"
  },
  {
    "db_id": "world_1",
    "question": "Bar graph to show total number of population from different governmentform",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncountry.columns = country.columns.str.lower()\n\n# Group by governmentform and calculate the sum of population\ngrouped_data = country.groupby('governmentform')['population'].sum()\n\n# Convert the grouped data into a dataframe\ndf = pd.DataFrame(grouped_data).reset_index()\n\n# Plot the bar chart\nplt.bar(df['governmentform'], df['population'])\nplt.xlabel('Government Form')\nplt.ylabel('Population')\nplt.title('Population by Government Form')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "world_1",
    "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72. ",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the country table\ncountry_df = pd.read_sql(\"SELECT * FROM country\", conn)\n\n# Convert column names to lowercase\ncountry_df.columns = country_df.columns.str.lower()\n\n# Group by GovernmentForm and calculate the sum of Population\ngrouped_df = country_df.groupby('governmentform')['population'].sum().reset_index()\n\n# Plot the bar chart\nplt.bar(grouped_df['governmentform'], grouped_df['population'])\nplt.xlabel('Government Form')\nplt.ylabel('Population')\nplt.title('Population by Government Form')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Give me a bar for what are the types of competition and number of competitions for that type ? , and display X from high to low order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the number of occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Sort the dataframe by competition_type in descending order\ncompetition_counts = competition_counts.sort_values('competition_type', ascending=False)\n\n# Create a bar plot\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Number of Competitions by Type')\nplt.show()"
  },
  {
    "db_id": "entrepreneur",
    "question": "How much money have entrepreneurs taller than 1.85 requested in total, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nentrepreneur = pd.read_sql(\"SELECT * FROM entrepreneur\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\nentrepreneur.columns = entrepreneur.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Joining entrepreneur and people tables\ndf = pd.merge(entrepreneur, people, on='people_id')\n\n# Filtering data based on height condition\nfiltered_df = df[df['height'] > 1.85]\n\n# Calculating total money requested\ntotal_money = filtered_df['money_requested'].sum()\n\n# Creating a bar plot\nplt.bar(['entrepreneurs'], [total_money])\nplt.xlabel('Category')\nplt.ylabel('Total Money Requested')\nplt.title('Total Money Requested by Entrepreneurs')\nplt.show()"
  },
  {
    "db_id": "sports_competition",
    "question": "Give me a bar chart for how many competition type of each competition type",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncompetition = pd.read_sql(\"SELECT * FROM competition\", conn)\ncompetition.columns = competition.columns.str.lower()\n\n# Group by competition_type and count the occurrences\ncompetition_counts = competition.groupby('competition_type').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(competition_counts['competition_type'], competition_counts['count'])\nplt.xlabel('Competition Type')\nplt.ylabel('Count')\nplt.title('Competition Type Counts')\nplt.show()"
  },
  {
    "db_id": "department_management",
    "question": "Plot the average of budget in billions over creation in a line chart , I want to sort in desc by the Creation .",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndepartment.columns = department.columns.str.lower()\n\n# Assuming 'department' is a DataFrame containing the table data\n\n# Grouping the data by 'creation' and calculating the average of 'budget_in_billions'\ngrouped_data = department.groupby('creation')['budget_in_billions'].mean()\n\n# Sorting the data by 'creation' in descending order\nsorted_data = grouped_data.sort_index(ascending=False)\n\n# Creating a line plot\nplt.plot(sorted_data.index, sorted_data.values)\n\n# Adding labels and title\nplt.xlabel('Creation')\nplt.ylabel('Average Budget (in billions)')\nplt.title('Average Budget by Creation')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all template type codes and the number of documents using each type with a bar chart, display by the x axis in descending.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Templates table\ntemplates = pd.read_sql(\"SELECT * FROM Templates\", conn)\ntemplates.columns = map(str.lower, templates.columns)\n\n# Read the Documents table\ndocuments = pd.read_sql(\"SELECT * FROM Documents\", conn)\ndocuments.columns = map(str.lower, documents.columns)\n\n# Merge the Templates and Documents tables on template_id\nmerged_data = pd.merge(templates, documents, on=\"template_id\")\n\n# Group by Template_Type_Code and count the number of occurrences\ngrouped_data = merged_data.groupby(\"template_type_code\").size().reset_index(name=\"count\")\n\n# Sort the data by Template_Type_Code in descending order\nsorted_data = grouped_data.sort_values(\"template_type_code\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"template_type_code\"], sorted_data[\"count\"])\nplt.xlabel(\"Template Type Code\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Templates by Template Type Code\")\nplt.show()"
  }
]