[
  {
    "db_id": "sakila_1",
    "question": "Show me a bar chart displaying the address and count of customers for each address.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomer = pd.read_sql(\"SELECT * FROM customer\", conn)\naddress = pd.read_sql(\"SELECT * FROM address\", conn)\ncustomer.columns = customer.columns.str.lower()\naddress.columns = address.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(customer, address, on='address_id')\n\n# Group by address and count the number of occurrences\ngrouped_df = merged_df.groupby('address').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['address'], grouped_df['count'])\nplt.xlabel('Address')\nplt.ylabel('Count')\nplt.title('Number of Customers per Address')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "Can you create a pie chart to display the distribution of product ids from orders placed between 1975-01-01 and 1976-01-01?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\norder_items = pd.read_sql(\"SELECT * FROM order_items\", conn)\norders.columns = orders.columns.str.lower()\norder_items.columns = order_items.columns.str.lower()\n\n# Merge orders and order_items dataframes\nmerged_df = pd.merge(orders, order_items, on='order_id')\n\n# Filter data for orders placed between '1975-01-01' and '1976-01-01'\nfiltered_df = merged_df[(merged_df['date_order_placed'] >= '1975-01-01') & (merged_df['date_order_placed'] <= '1976-01-01')]\n\n# Group by product_id and count the number of occurrences\ngrouped_df = filtered_df.groupby('product_id').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['product_id'], autopct='%1.1f%%')\nplt.title('Product Distribution')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Create a bar chart showing the total number across location code, and list by the total number in ascending.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the Document_locations table\ndf = pd.read_sql(\"SELECT * FROM Document_locations\", conn)\n\n# Convert column names to lowercase\ndf.columns = df.columns.str.lower()\n\n# Perform the SQL query\nresult = df.groupby('location_code').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result['location_code'], result['count'])\nplt.xlabel('Location Code')\nplt.ylabel('Count')\nplt.title('Document Locations')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Find dates and attendance for exhibitions that happened in 2004, show me the comparison of attendance by date, list names in descending order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the exhibition_record table\nexhibition_record = pd.read_sql(\"SELECT * FROM exhibition_record\", conn)\nexhibition_record.columns = map(str.lower, exhibition_record.columns)\n\n# Read the exhibition table\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nexhibition.columns = map(str.lower, exhibition.columns)\n\n# Merge the two tables based on exhibition_id\nmerged_data = pd.merge(exhibition_record, exhibition, on=\"exhibition_id\")\n\n# Filter the data for year 2004\nfiltered_data = merged_data[merged_data[\"year\"] == 2004]\n\n# Sort the data by date in descending order\nsorted_data = filtered_data.sort_values(\"date\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"date\"], sorted_data[\"attendance\"])\nplt.xlabel(\"Date\")\nplt.ylabel(\"Attendance\")\nplt.title(\"Exhibition Attendance in 2004\")\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Show the number of venue from each venue, rank by the X in asc.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the workshop table\nworkshop = pd.read_sql(\"SELECT * FROM workshop\", conn)\n\n# Convert column names to lowercase\nworkshop.columns = workshop.columns.str.lower()\n\n# Perform the SQL query\nvenue_counts = workshop.groupby('venue').size().reset_index(name='count')\nvenue_counts = venue_counts.sort_values('venue')\n\n# Generate the bar plot\nplt.bar(venue_counts['venue'], venue_counts['count'])\nplt.xlabel('Venue')\nplt.ylabel('Count')\nplt.title('Workshop Venue Counts')\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Group by the result and count them by a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the acceptance table\nacceptance = pd.read_sql(\"SELECT * FROM acceptance\", conn)\n\n# Convert column names to lowercase\nacceptance.columns = acceptance.columns.str.lower()\n\n# Perform the SQL query\nresult_counts = acceptance.groupby('result').size().reset_index(name='count')\n\n# Generate the bar chart\nplt.bar(result_counts['result'], result_counts['count'])\nplt.xlabel('Result')\nplt.ylabel('Count')\nplt.title('Distribution of Results')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "How many documents for different location code ? Plot a bar chart to show the proportion , and sort in desc by the Location_Code please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDocument_locations = pd.read_sql(\"SELECT * FROM Document_locations\", conn)\nDocument_locations.columns = Document_locations.columns.str.lower()\n\n# Group by location_code and count the occurrences\nlocation_counts = Document_locations.groupby('location_code').size().reset_index(name='count')\n\n# Sort by location_code in descending order\nlocation_counts = location_counts.sort_values('location_code', ascending=False)\n\n# Create bar plot\nplt.bar(location_counts['location_code'], location_counts['count'])\nplt.xlabel('Location Code')\nplt.ylabel('Count')\nplt.title('Document Locations')\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "Which problems were reported prior to the earliest problem reported by staff member Lysanne Turcotte? Please provide a bar chart displaying the problem IDs.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nproblems = pd.read_sql(\"SELECT * FROM problems\", conn)\nstaff = pd.read_sql(\"SELECT * FROM staff\", conn)\nproblems = pd.read_sql(\"SELECT * FROM problems\", conn)\nstaff = pd.read_sql(\"SELECT * FROM staff\", conn)\nproblems.columns = problems.columns.str.lower()\nstaff.columns = staff.columns.str.lower()\nproblems.columns = problems.columns.str.lower()\nstaff.columns = staff.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(problems, staff, left_on='reported_by_staff_id', right_on='staff_id')\n\n# Filter data\nmin_date = merged_df.loc[(merged_df['staff_first_name'] == 'Lysanne') & (merged_df['staff_last_name'] == 'Turcotte'), 'date_problem_reported'].min()\nfiltered_df = merged_df.loc[merged_df['date_problem_reported'] < min_date]\n\n# Group by problem_id and count\ngrouped_df = filtered_df.groupby('problem_id').size().reset_index(name='count')\n\n# Plot bar chart\nplt.bar(grouped_df['problem_id'], grouped_df['count'])\nplt.xlabel('Problem ID')\nplt.ylabel('Count')\nplt.title('Number of Problems Reported by Problem ID')\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "How many staff members are there in each country, represented by a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nAddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\nStaff = pd.read_sql(\"SELECT * FROM Staff\", conn)\nAddresses.columns = Addresses.columns.str.lower()\nStaff.columns = Staff.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Addresses, Staff, left_on='address_id', right_on='staff_address_id')\n\n# Group by country and count the number of occurrences\ngrouped_df = merged_df.groupby('country').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['country'], sorted_df['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Staff by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "A pie chart for what are the number of the names of the technicians that are assigned to repair machines with more point values than 70?",
    "chart": "Pie",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the repair_assignment table\nrepair_assignment = pd.read_sql(\"SELECT * FROM repair_assignment\", conn)\n\n# Read the machine table\nmachine = pd.read_sql(\"SELECT * FROM machine\", conn)\n\n# Read the technician table\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\n\n# Convert column names to lowercase\nrepair_assignment.columns = repair_assignment.columns.str.lower()\nmachine.columns = machine.columns.str.lower()\ntechnician.columns = technician.columns.str.lower()\n\n# merge the tables\nmerged_data = pd.merge(repair_assignment, machine, on=\"machine_id\")\nmerged_data = pd.merge(merged_data, technician, on=\"technician_id\")\n\n# filter the data\nfiltered_data = merged_data[merged_data[\"value_points\"] > 70]\n\n# group by name and count occurrences\ngrouped_data = filtered_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# plot the pie chart\nplt.pie(grouped_data[\"count\"], labels=grouped_data[\"name\"], autopct=\"%1.1f%%\")\nplt.axis(\"equal\")\nplt.show()\n"
  },
  {
    "db_id": "college_3",
    "question": "What is the number of each course name that have at least five enrollments? Show me a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the COURSE table\ncourse_df = pd.read_sql(\"SELECT * FROM COURSE\", conn)\ncourse_df.columns = map(str.lower, course_df.columns)\n\n# Read the ENROLLED_IN table\nenrolled_in_df = pd.read_sql(\"SELECT * FROM ENROLLED_IN\", conn)\nenrolled_in_df.columns = map(str.lower, enrolled_in_df.columns)\n\n# Perform the join and group by\nmerged_df = pd.merge(course_df, enrolled_in_df, on=\"cid\")\ngrouped_df = merged_df.groupby(\"cname\").size().reset_index(name=\"count\")\nfiltered_df = grouped_df[grouped_df[\"count\"] >= 5]\n\n# Plot the bar chart\nplt.bar(filtered_df[\"cname\"], filtered_df[\"count\"])\nplt.xlabel(\"Course Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Enrollments per Course\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "insurance_and_eClaims",
    "question": "Show me a bar chart displaying the count of policies for each customer.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npolicies = pd.read_sql(\"SELECT * FROM policies\", conn)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\npolicies.columns = policies.columns.str.lower()\ncustomers.columns = customers.columns.str.lower()\n\n# Joining policies and customers tables\nmerged_df = pd.merge(policies, customers, on='customer_id')\n\n# Grouping by customer_details and counting the number of occurrences\ngrouped_df = merged_df.groupby('customer_details').size().reset_index(name='count')\n\n# Sorting by customer_details in descending order\nsorted_df = grouped_df.sort_values('customer_details', ascending=False)\n\n# Creating bar plot\nplt.bar(sorted_df['customer_details'], sorted_df['count'])\nplt.xlabel('Customer Details')\nplt.ylabel('Count')\nplt.title('Number of Policies per Customer Details')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Compare the average of artists' age by country in a bar graph , could you rank in ascending by the total number ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Calculate average age by country\navg_age_by_country = artist.groupby('country')['age'].mean().reset_index()\n\n# Sort by average age in ascending order\navg_age_by_country = avg_age_by_country.sort_values('age')\n\n# Plot bar chart\nplt.bar(avg_age_by_country['country'], avg_age_by_country['age'])\nplt.xlabel('Country')\nplt.ylabel('Average Age')\nplt.title('Average Age of Artists by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "small_bank_1",
    "question": "How many accounts have a checking balance below the average checking balance, and can you display the count for each account in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\naccounts.columns = accounts.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\n\n# Joining tables\nmerged_df = pd.merge(accounts, checking, on='custid')\n\n# Calculating average balance\navg_balance = checking['balance'].mean()\n\n# Filtering data\nfiltered_df = merged_df[merged_df['balance'] < avg_balance]\n\n# Grouping and counting by name\ngrouped_df = filtered_df.groupby('name').size().reset_index(name='count')\n\n# Sorting by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plotting bar chart\nplt.bar(sorted_df['name'], sorted_df['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Number of Accounts by Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "Create a bar chart showing how many location across location",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nshop = pd.read_sql(\"SELECT * FROM shop\", conn)\nshop.columns = shop.columns.str.lower()\n\n# Group by location and count the occurrences\nlocation_counts = shop.groupby('location').size().reset_index(name='count')\n\n# Create a bar plot\nplt.bar(location_counts['location'], location_counts['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Shops by Location')\nplt.show()"
  },
  {
    "db_id": "perpetrator",
    "question": "Show me a bar chart displaying the number of incidents for each perpetrator, and list their names in descending order of the year.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\nperpetrator = pd.read_sql(\"SELECT * FROM perpetrator\", conn)\npeople.columns = people.columns.str.lower()\nperpetrator.columns = perpetrator.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(people, perpetrator, on='people_id')\n\n# Group by name and count the occurrences\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Sort by year in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['name'], sorted_df['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "List the number of games in each season with a line chart .",
    "chart": "Line",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\ngame.columns = game.columns.str.lower()\n\n# Grouping the data by season and counting the number of occurrences\nseason_counts = game.groupby('season').size().reset_index(name='count')\n\n# Plotting the line chart\nplt.plot(season_counts['season'], season_counts['count'])\nplt.xlabel('Season')\nplt.ylabel('Count')\nplt.title('Number of Games per Season')\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show different citizenship of singers and the number of singers of each citizenship in a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the singer table into a pandas DataFrame\nsinger_df = pd.read_sql(\"SELECT * FROM singer\", conn)\n\n# Convert column names to lowercase\nsinger_df.columns = singer_df.columns.str.lower()\n\n# Perform the SQL query\nresult = singer_df.groupby('citizenship').size()\n\n# Plot the bar chart\nplt.bar(result.index, result.values)\nplt.xlabel('Citizenship')\nplt.ylabel('Count')\nplt.title('Number of Singers by Citizenship')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show how many premises for different premises type in a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"premises\" table\npremises_data = pd.read_sql(\"SELECT * FROM premises\", conn)\n\n# Convert column names to lowercase\npremises_data.columns = premises_data.columns.str.lower()\n\n# Perform the SQL query and group by premises_type\ngrouped_data = premises_data.groupby('premises_type').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_data['count'], labels=grouped_data['premises_type'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "Which customers have made at least two orders? Give me the number of orders made and the order frequency for each customer in a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\norders.columns = orders.columns.str.lower()\ncustomers.columns = customers.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(orders, customers, on='customer_id')\n\n# Group by customer_id and count the number of orders\ngrouped_df = merged_df.groupby('customer_id').size().reset_index(name='num_of_orders')\n\n# Count the order frequency\ngrouped_df['order_frequency'] = grouped_df['num_of_orders']\n\n# Visualize the data as a pie chart\nplt.pie(grouped_df['num_of_orders'], labels=grouped_df['customer_id'], autopct='%1.1f%%')\nplt.title('Order Frequency by Customer')\nplt.show()"
  },
  {
    "db_id": "college_3",
    "question": "How many faculties with each last name who are members of the Computer Science department can be represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\n\nDEPARTMENT = pd.read_sql(\"SELECT * FROM DEPARTMENT\", conn)\nFACULTY = pd.read_sql(\"SELECT * FROM FACULTY\", conn)\nMEMBER_OF = pd.read_sql(\"SELECT * FROM MEMBER_OF\", conn)\n\nDEPARTMENT.columns = DEPARTMENT.columns.str.lower()\nFACULTY.columns = FACULTY.columns.str.lower()\nMEMBER_OF.columns = MEMBER_OF.columns.str.lower()\n\n# Joining the tables\ndf = pd.merge(DEPARTMENT, MEMBER_OF, left_on='dno', right_on='dno')\ndf = pd.merge(df, FACULTY, left_on='facid', right_on='facid')\n\n# Filtering the data for 'Computer Science' department\ndf = df[df['dname'] == 'Computer Science']\n\n# Grouping by lname and counting the occurrences\ndf_grouped = df.groupby('lname').size().reset_index(name='count')\n\n# Plotting the bar chart\nplt.bar(df_grouped['lname'], df_grouped['count'])\nplt.xlabel('Last Name')\nplt.ylabel('Count')\nplt.title('Number of Faculty Members by Last Name')\nplt.show()"
  },
  {
    "db_id": "tvshow",
    "question": "Find the pixel aspect ratio and the nation of the tv channels that do not use English. Show the number of different pixel aspect ratios with a bar chart.\n\n\n\n",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the tv_channel table\ntv_channel = pd.read_sql(\"SELECT * FROM tv_channel\", conn)\n\n# Convert column names to lowercase\ntv_channel.columns = tv_channel.columns.str.lower()\n\n# Filter rows where language is not English\nfiltered_tv_channel = tv_channel[tv_channel['language'] != 'English']\n\n# Group by Pixel_aspect_ratio_PAR and count occurrences\ngrouped_tv_channel = filtered_tv_channel.groupby('pixel_aspect_ratio_par').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_tv_channel['pixel_aspect_ratio_par'], grouped_tv_channel['count'])\nplt.xlabel('Pixel Aspect Ratio')\nplt.ylabel('Count')\nplt.title('Pixel Aspect Ratio Distribution for Non-English TV Channels')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show how many customer addresses in each address type code with a bar chart, display by the bars in ascending.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the customer_addresses table\ncustomer_addresses = pd.read_sql(\"SELECT * FROM customer_addresses\", conn)\n\n# Read the premises table\npremises = pd.read_sql(\"SELECT * FROM premises\", conn)\n\n# Convert column names to lowercase\ncustomer_addresses.columns = customer_addresses.columns.str.lower()\npremises.columns = premises.columns.str.lower()\n\n# merge the customer_addresses and premises tables on premise_id\nmerged_data = pd.merge(customer_addresses, premises, on=\"premise_id\")\n\n# group by address_type_code and count the occurrences\ngrouped_data = merged_data.groupby(\"address_type_code\").size().reset_index(name=\"count\")\n\n# sort the data by address_type_code in ascending order\nsorted_data = grouped_data.sort_values(\"address_type_code\")\n\n# plot the bar chart\nplt.bar(sorted_data[\"address_type_code\"], sorted_data[\"count\"])\nplt.xlabel(\"Address Type Code\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Addresses by Address Type Code\")\nplt.show()\n"
  },
  {
    "db_id": "game_injury",
    "question": "Show me how many home team by home team in a bar, and I want to show by the bar in ascending.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the game table\ngame_df = pd.read_sql(\"SELECT * FROM game\", conn)\n\n# Convert column names to lowercase\ngame_df.columns = game_df.columns.str.lower()\n\n# Perform the SQL query\nresult = game_df.groupby('home_team').size().reset_index(name='count').sort_values('home_team')\n\n# Generate the bar plot\nplt.bar(result['home_team'], result['count'])\nplt.xlabel('Home Team')\nplt.ylabel('Count')\nplt.title('Number of Games by Home Team')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Show the date and id of the transcript with at least 2 course results in a bar chart, and show in descending by the Y-axis.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the tables\ntranscript_contents = pd.read_sql(\"SELECT * FROM Transcript_Contents\", conn)\ntranscripts = pd.read_sql(\"SELECT * FROM Transcripts\", conn)\n\n# Convert column names to lowercase\ntranscript_contents.columns = map(str.lower, transcript_contents.columns)\ntranscripts.columns = map(str.lower, transcripts.columns)\n\n# Merge the tables on the transcript_id column\nmerged_data = pd.merge(transcript_contents, transcripts, on=\"transcript_id\")\n\n# Sort the merged data by transcript_id in descending order\nsorted_data = merged_data.sort_values(by=\"transcript_id\", ascending=False)\n\n# Extract the required columns for visualization\ndata_to_visualize = sorted_data[[\"transcript_date\", \"transcript_id\"]]\n\n# Plot the bar chart\nplt.bar(data_to_visualize[\"transcript_date\"], data_to_visualize[\"transcript_id\"])\nplt.xlabel(\"Transcript Date\")\nplt.ylabel(\"Transcript ID\")\nplt.title(\"Transcript ID vs Transcript Date\")\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "I want to see trend of the number of season by season , order in descending by the X .",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\ngame.columns = game.columns.str.lower()\n\n# Grouping the data by season and counting the number of occurrences\nseason_counts = game.groupby('season').size().reset_index(name='count')\n\n# Sorting the data by season in descending order\nseason_counts = season_counts.sort_values('season', ascending=False)\n\n# Creating a line plot\nplt.plot(season_counts['season'], season_counts['count'])\n\n# Adding labels and title\nplt.xlabel('Season')\nplt.ylabel('Count')\nplt.title('Number of Games by Season')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "company_office",
    "question": "Plot the total number by grouped by industry as a bar graph",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Companies table\ncompanies = pd.read_sql(\"SELECT * FROM Companies\", conn)\n\n# Convert column names to lowercase\ncompanies.columns = companies.columns.str.lower()\n\n# Perform the SQL query\nindustry_counts = companies.groupby('industry').size().reset_index(name='count')\n\n# Generate the bar chart\nplt.bar(industry_counts['industry'], industry_counts['count'])\nplt.xlabel('Industry')\nplt.ylabel('Count')\nplt.title('Number of Companies by Industry')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "entertainment_awards",
    "question": "Show the ids and names of festivals that have at least two nominations for artworks Plot them as bar chart, and order by the bar in descending.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the tables from the database\nnomination = pd.read_sql(\"SELECT * FROM nomination\", conn)\nartwork = pd.read_sql(\"SELECT * FROM artwork\", conn)\nfestival_detail = pd.read_sql(\"SELECT * FROM festival_detail\", conn)\n\n# Convert column names to lowercase\nnomination.columns = nomination.columns.str.lower()\nartwork.columns = artwork.columns.str.lower()\nfestival_detail.columns = festival_detail.columns.str.lower()\n\n# Merge the tables\nmerged_data = pd.merge(nomination, artwork, on=\"artwork_id\")\nmerged_data = pd.merge(merged_data, festival_detail, on=\"festival_id\")\n\n# Sort the merged data by festival name in descending order\nsorted_data = merged_data.sort_values(by=\"festival_name\", ascending=False)\n\n# Create a bar plot\nplt.bar(sorted_data[\"festival_name\"], sorted_data[\"festival_id\"])\nplt.xlabel(\"Festival Name\")\nplt.ylabel(\"Festival ID\")\nplt.title(\"Festival ID by Festival Name\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "Which patient holds the record for the most appointments, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npatient = pd.read_sql(\"SELECT * FROM patient\", conn)\nappointment = pd.read_sql(\"SELECT * FROM appointment\", conn)\npatient.columns = patient.columns.str.lower()\nappointment.columns = appointment.columns.str.lower()\n\n# Join patient and appointment tables\nmerged_df = pd.merge(patient, appointment, left_on='ssn', right_on='patient')\n\n# Group by patient name and count the number of appointments\ncount_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Sort by count in descending order and select the top 1\ntop_patient = count_df.sort_values('count', ascending=False).head(1)\n\n# Visualize the result using a bar chart\nplt.bar(top_patient['name'], top_patient['count'])\nplt.xlabel('Patient Name')\nplt.ylabel('Appointment Count')\nplt.title('Top Patient with Most Appointments')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Draw a pie chart with all distinct product categories along with the number of mailshots in each category .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmailshot_campaigns = pd.read_sql(\"SELECT * FROM mailshot_campaigns\", conn)\nmailshot_campaigns.columns = mailshot_campaigns.columns.str.lower()\n\n# Group by product_category and count the number of occurrences\ncategory_counts = mailshot_campaigns.groupby('product_category').size().reset_index(name='count')\n\n# Create a pie chart\nplt.pie(category_counts['count'], labels=category_counts['product_category'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Display the chart\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Compare the number of songs each singer has, and order in asc by the how many name.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the singer and song tables\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsong = pd.read_sql(\"SELECT * FROM song\", conn)\n\n# Convert column names to lowercase\nsinger.columns = singer.columns.str.lower()\nsong.columns = song.columns.str.lower()\n\n# Merge the singer and song tables on Singer_ID\nmerged = pd.merge(singer, song, on=\"singer_id\")\n\n# Group by Name and count the occurrences\ngrouped = merged.groupby(\"name\").size().reset_index(name=\"count\")\n\n# Sort by count in ascending order\nsorted_grouped = grouped.sort_values(\"count\", ascending=True)\n\n# Plot the bar chart\nplt.bar(sorted_grouped[\"name\"], sorted_grouped[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Songs by Singer\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "icfp_1",
    "question": "Show me a bar chart displaying the count of papers published by each institution in the \"USA\".",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nauthors = pd.read_sql(\"SELECT * FROM authors\", conn)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\npapers = pd.read_sql(\"SELECT * FROM papers\", conn)\ninst = pd.read_sql(\"SELECT * FROM inst\", conn)\nauthors.columns = authors.columns.str.lower()\nauthorship.columns = authorship.columns.str.lower()\npapers.columns = papers.columns.str.lower()\ninst.columns = inst.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(authors, authorship, on='authid')\nmerged_df = pd.merge(merged_df, papers, on='paperid')\nmerged_df = pd.merge(merged_df, inst, on='instid')\n\n# Filter by country\nusa_df = merged_df[merged_df['country'] == 'USA']\n\n# Group by instid and count papers\ngrouped_df = usa_df.groupby('instid').size().reset_index(name='paper_count')\n\n# Plot bar chart\nplt.bar(grouped_df['instid'], grouped_df['paper_count'])\nplt.xlabel('Institution ID')\nplt.ylabel('Paper Count')\nplt.title('Number of Papers by Institution in USA')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "How many employees are there in the \"Human Resource\" and \"Manager\" roles, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nROLES = pd.read_sql(\"SELECT * FROM ROLES\", conn)\nEmployees.columns = Employees.columns.str.lower()\nROLES.columns = ROLES.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(Employees, ROLES, left_on='role_code', right_on='role_code')\n\n# Filtering the data\nfiltered_df = merged_df[(merged_df['role_name'] == 'Human Resource') | (merged_df['role_name'] == 'Manager')]\n\n# Grouping and counting the data\ngrouped_df = filtered_df.groupby('role_name').size().reset_index(name='count')\n\n# Plotting the bar chart\nplt.bar(grouped_df['role_name'], grouped_df['count'])\nplt.xlabel('Role Name')\nplt.ylabel('Count')\nplt.title('Number of Employees by Role')\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "Create a bar chart showing the total number across team , show the total number in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\ntechnician.columns = technician.columns.str.lower()\n\n# Group by 'team' and count the number of occurrences\nteam_counts = technician.groupby('team').size()\n\n# Sort the counts in ascending order\nteam_counts = team_counts.sort_values()\n\n# Create a bar plot\nplt.bar(team_counts.index, team_counts.values)\n\n# Set the labels and title\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Number of Technicians per Team')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "Bar chart x axis software platform y axis the total number",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ndevice = pd.read_sql(\"SELECT * FROM device\", conn)\ndevice.columns = device.columns.str.lower()\n\n# Grouping the data by software_platform and counting the occurrences\ngrouped_data = device.groupby('software_platform').size().reset_index(name='count')\n\n# Creating the bar plot\nplt.bar(grouped_data['software_platform'], grouped_data['count'])\nplt.xlabel('Software Platform')\nplt.ylabel('Count')\nplt.title('Device Count by Software Platform')\nplt.show()"
  },
  {
    "db_id": "e_government",
    "question": "Which organization has the fewest contact individuals, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\norganizations = pd.read_sql(\"SELECT * FROM organizations\", conn)\norganization_contact_individuals = pd.read_sql(\"SELECT * FROM organization_contact_individuals\", conn)\norganizations.columns = organizations.columns.str.lower()\norganization_contact_individuals.columns = organization_contact_individuals.columns.str.lower()\n\n# Merge the two dataframes\nmerged_df = pd.merge(organizations, organization_contact_individuals, on='organization_id')\n\n# Group by organization_name and count the number of occurrences\ngrouped_df = merged_df.groupby('organization_name').size().reset_index(name='count')\n\n# Sort the dataframe by count in ascending order\nsorted_df = grouped_df.sort_values('count')\n\n# Plot the bar chart\nplt.bar(sorted_df['organization_name'], sorted_df['count'])\nplt.xlabel('Organization Name')\nplt.ylabel('Count')\nplt.title('Number of Individuals per Organization')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "What is the total number of different nationalities of all ships ? Give me a bar graph .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Grouping the ship dataframe by nationality and counting the occurrences\nnationality_count = ship.groupby('nationality').size().reset_index(name='count')\n\n# Creating a bar plot\nplt.bar(nationality_count['nationality'], nationality_count['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Ships by Nationality')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Bar chart x axis name y axis age , and show Age in desc order .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Assuming the data is already loaded into the 'artist' dataframe\n\n# Sort the dataframe by age in descending order\nsorted_artist = artist.sort_values(by='age', ascending=False)\n\n# Extract the name and age columns\nname = sorted_artist['name']\nage = sorted_artist['age']\n\n# Create a bar plot\nplt.bar(name, age)\n\n# Set the x-axis label\nplt.xlabel('Name')\n\n# Set the y-axis label\nplt.ylabel('Age')\n\n# Set the title of the plot\nplt.title('Artist Age')\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "small_bank_1",
    "question": "What is the name and checking balance of the account whose owner's name contains the substring 'ee' in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\naccounts.columns = accounts.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\n\n# Perform the join operation\nresult = pd.merge(accounts, checking, on='custid')\n\n# Filter the data based on name\nfiltered_data = result[result['name'].str.contains('ee')]\n\n# Create the bar plot\nplt.bar(filtered_data['name'], filtered_data['balance'])\nplt.xlabel('Name')\nplt.ylabel('Balance')\nplt.title('Account Balance for Names containing \"ee\"')\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "A bar chart about how many eliminations did each team have ? , and could you show in ascending by the y-axis please ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nelimination = pd.read_sql(\"SELECT * FROM elimination\", conn)\nelimination.columns = elimination.columns.str.lower()\n\n# Group by team and count the number of occurrences\nteam_counts = elimination.groupby('team').size().reset_index(name='count')\n\n# Sort the counts in ascending order\nteam_counts = team_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(team_counts['team'], team_counts['count'])\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Team')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "List the distinct payment method codes with the number of orders mad Show bar chart , and could you order in asc by the y-axis please ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nINVOICES = pd.read_sql(\"SELECT * FROM INVOICES\", conn)\nINVOICES.columns = INVOICES.columns.str.lower()\n\n# Grouping the data by payment_method_code and counting the occurrences\npayment_counts = INVOICES.groupby('payment_method_code').size()\n\n# Sorting the counts in ascending order\npayment_counts = payment_counts.sort_values()\n\n# Creating the bar plot\nplt.bar(payment_counts.index, payment_counts.values)\n\n# Adding labels and title\nplt.xlabel('Payment Method Code')\nplt.ylabel('Count')\nplt.title('Number of Invoices by Payment Method Code')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "I want to see trend of the number of season by season , order by the x-axis in asc .",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\ngame.columns = game.columns.str.lower()\n\n# Grouping the data by season and counting the number of occurrences\nseason_counts = game.groupby('season').size().reset_index(name='count')\n\n# Sorting the data by season in ascending order\nseason_counts = season_counts.sort_values('season')\n\n# Creating a line plot\nplt.plot(season_counts['season'], season_counts['count'])\n\n# Adding labels and title\nplt.xlabel('Season')\nplt.ylabel('Count')\nplt.title('Number of Games per Season')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship, could you show by the Y in descending please?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"singer\" table\nsinger_data = pd.read_sql(\"SELECT * FROM singer\", conn)\n\n# Convert column names to lowercase\nsinger_data.columns = singer_data.columns.str.lower()\n\n# Perform the SQL query\nresult = singer_data.groupby('citizenship')['net_worth_millions'].max().reset_index().sort_values(by='net_worth_millions', ascending=False)\n\n# Plot the bar chart\nplt.bar(result['citizenship'], result['net_worth_millions'])\nplt.xlabel('Citizenship')\nplt.ylabel('Net Worth (Millions)')\nplt.title('Max Net Worth by Citizenship')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "What is the total number of each fate? Give me the result in a bar graph, list X-axis in asc order.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the mission table\nmission_df = pd.read_sql(\"SELECT * FROM mission\", conn)\n\n# Convert column names to lowercase\nmission_df.columns = mission_df.columns.str.lower()\n\n# Perform the SQL query\nresult = mission_df.groupby('fate').size().reset_index(name='count').sort_values('fate')\n\n# Generate the bar plot\nplt.bar(result['fate'], result['count'])\nplt.xlabel('Fate')\nplt.ylabel('Count')\nplt.title('Count of Fate')\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "Return a bar on what are the different role codes for users , and how many users have each ? , rank by the total number in ascending please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nusers = pd.read_sql(\"SELECT * FROM users\", conn)\nusers.columns = users.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\nrole_counts = users.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nrole_counts = role_counts.sort_values('count')\n\n# Creating a bar plot\nplt.bar(role_counts['role_code'], role_counts['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Users by Role Code')\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "Can you create a pie chart to display the distribution of clubs based on the number of students they have?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstudent = pd.read_sql(\"SELECT * FROM student\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nstudent.columns = student.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\n\n# Perform the SQL query\nsubquery = pd.merge(student, member_of_club, on='stuid')\nsubquery = subquery.groupby('stuid').size().reset_index(name='num_of_students')\nresult = subquery.groupby('num_of_students').size().reset_index(name='num_of_clubs')\n\n# Visualize the result using a pie chart\nplt.pie(result['num_of_clubs'], labels=result['num_of_students'], autopct='%1.1f%%')\nplt.title('Number of Clubs vs Number of Students')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Return a bar on what is the code of each role and the number of employees in each role ? , and I want to display bars in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nEmployees.columns = Employees.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\nrole_counts = Employees.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by role_code in ascending order\nrole_counts = role_counts.sort_values('role_code')\n\n# Creating a bar plot\nplt.bar(role_counts['role_code'], role_counts['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Employees by Role Code')\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death , compare the number of deaths by name , and rank in asc by the y-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm.columns = storm.columns.str.lower()\n\n# Filter the storm dataframe\nfiltered_storm = storm[storm['number_deaths'] >= 1]\n\n# Sort the filtered dataframe by number_deaths in ascending order\nsorted_storm = filtered_storm.sort_values('number_deaths')\n\n# Create a bar plot\nplt.bar(sorted_storm['name'], sorted_storm['number_deaths'])\n\n# Set the x-axis label\nplt.xlabel('Name')\n\n# Set the y-axis label\nplt.ylabel('Number of Deaths')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "battle_death",
    "question": "Draw a bar chart for what are the ids and names of the battles that led to more than 10 people killed in total.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the battle table\nbattle = pd.read_sql(\"SELECT * FROM battle\", conn)\nbattle.columns = battle.columns.str.lower()\n\n# Read the ship table\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Read the death table\ndeath = pd.read_sql(\"SELECT * FROM death\", conn)\ndeath.columns = death.columns.str.lower()\n\n# Perform the join operation\nmerged_data = pd.merge(battle, ship, left_on='id', right_on='lost_in_battle')\nmerged_data = pd.merge(merged_data, death, left_on='lost_in_battle', right_on='caused_by_ship_id')\n\n# Group by name and count the occurrences\ngrouped_data = merged_data.groupby('name_x').size()\n\n# Plot the bar chart\nplt.bar(grouped_data.index, grouped_data.values)\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Occurrences of Battles, Ships Lost, and Deaths')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Give me a bar chart about the number of customer addresses in each premises type.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read data from customer_addresses table\ncustomer_addresses = pd.read_sql(\"SELECT * FROM customer_addresses\", conn)\n\n# Read data from premises table\npremises = pd.read_sql(\"SELECT * FROM premises\", conn)\n\n# Convert column names to lowercase\ncustomer_addresses.columns = customer_addresses.columns.str.lower()\npremises.columns = premises.columns.str.lower()\n\n# merge the two tables on premise_id\nmerged_data = pd.merge(customer_addresses, premises, on=\"premise_id\")\n\n# group by premises_type and count the occurrences\ngrouped_data = merged_data.groupby(\"premises_type\").size().reset_index(name=\"count\")\n\n# plot the bar chart\nplt.bar(grouped_data[\"premises_type\"], grouped_data[\"count\"])\nplt.xlabel(\"Premises Type\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of Premises Types\")\nplt.show()\n"
  },
  {
    "db_id": "workshop_paper",
    "question": "Show the number of venue from each venue",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nworkshop = pd.read_sql(\"SELECT * FROM workshop\", conn)\nworkshop.columns = workshop.columns.str.lower()\n\n# Assuming the data is already loaded into a dataframe called 'workshop'\n\n# Grouping the data by venue and counting the occurrences\nvenue_counts = workshop.groupby('venue').size().reset_index(name='count')\n\n# Creating the bar plot\nplt.bar(venue_counts['venue'], venue_counts['count'])\nplt.xlabel('Venue')\nplt.ylabel('Count')\nplt.title('Workshop Venues')\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "Display a bar chart for what are the names and damage in millions for storms , ordered by their max speeds descending ?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm.columns = storm.columns.str.lower()\n\n# Assuming the storm data is stored in a dataframe called 'storm'\n\n# Sort the storm data by max_speed in descending order\nsorted_storm = storm.sort_values(by='max_speed', ascending=False)\n\n# Select the name and damage_millions_usd columns\nselected_storm = sorted_storm[['name', 'damage_millions_usd']]\n\n# Plot the bar chart\nplt.bar(selected_storm['name'], selected_storm['damage_millions_usd'])\nplt.xlabel('Storm Name')\nplt.ylabel('Damage (Millions USD)')\nplt.title('Damage by Storm')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "soccer_1",
    "question": ", and show in descending by the Y.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read data from the Player_Attributes table\nplayer_attributes = pd.read_sql(\"SELECT * FROM Player_Attributes\", conn)\n\n# Convert column names to lowercase\nplayer_attributes.columns = player_attributes.columns.str.lower()\n\n# Filter data where overall_rating > 80\nfiltered_data = player_attributes[player_attributes['overall_rating'] > 80]\n\n# Group by preferred_foot and count the number of records\ngrouped_data = filtered_data.groupby('preferred_foot').size().reset_index(name='count')\n\n# Sort the data by count in descending order\nsorted_data = grouped_data.sort_values('count', ascending=False)\n\n# Generate the bar plot\nplt.bar(sorted_data['preferred_foot'], sorted_data['count'])\nplt.xlabel('Preferred Foot')\nplt.ylabel('Count')\nplt.title('Number of Players with Overall Rating > 80 by Preferred Foot')\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "Compute the proportion of names of each product by a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the tables from the database\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\norder_items = pd.read_sql(\"SELECT * FROM order_items\", conn)\nproducts = pd.read_sql(\"SELECT * FROM products\", conn)\n\n# Convert column names to lowercase\norders.columns = orders.columns.str.lower()\norder_items.columns = order_items.columns.str.lower()\nproducts.columns = products.columns.str.lower()\n\n# Merge the tables\nmerged_data = pd.merge(orders, order_items, on=\"order_id\")\nmerged_data = pd.merge(merged_data, products, on=\"product_id\")\n\n# Perform the query and group by product_name\ngrouped_data = merged_data.groupby(\"product_name\").size().reset_index(name=\"count\")\n\n# Plot the pie chart\nplt.pie(grouped_data[\"count\"], labels=grouped_data[\"product_name\"], autopct=\"%1.1f%%\")\nplt.axis(\"equal\")\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Show the average of artists' age by country , and I want to sort by the X from high to low .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Calculate average age by country\navg_age_by_country = artist.groupby('country')['age'].mean().reset_index()\n\n# Sort by country in descending order\navg_age_by_country = avg_age_by_country.sort_values('country', ascending=False)\n\n# Plot the bar chart\nplt.bar(avg_age_by_country['country'], avg_age_by_country['age'])\nplt.xlabel('Country')\nplt.ylabel('Average Age')\nplt.title('Average Age of Artists by Country')\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "Compute the total the number of location across location as a pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nwrestler = pd.read_sql(\"SELECT * FROM wrestler\", conn)\nwrestler.columns = wrestler.columns.str.lower()\n\n# Group by location and count the number of wrestlers in each location\nlocation_counts = wrestler.groupby('location').size().reset_index(name='count')\n\n# Plotting a pie chart\nplt.pie(location_counts['count'], labels=location_counts['location'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "Bar chart x axis away team y axis the number of away team , sort by the bars in asc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\ngame.columns = game.columns.str.lower()\n\n# Grouping the data by away_team and counting the occurrences\naway_team_counts = game.groupby('away_team').size().reset_index(name='count')\n\n# Sorting the data by away_team in ascending order\naway_team_counts = away_team_counts.sort_values('away_team')\n\n# Creating the bar plot\nplt.bar(away_team_counts['away_team'], away_team_counts['count'])\nplt.xlabel('Away Team')\nplt.ylabel('Count')\nplt.title('Number of Games by Away Team')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "what are the ids and names of all start stations that were the beginning of at least 200 trips ? , and could you rank bars in ascending order ?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\ntrip.columns = trip.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called 'trip'\n\n# Perform the SQL query\nresult = trip[['start_station_name', 'start_station_id']].sort_values('start_station_name')\n\n# Create the bar plot\nplt.bar(result['start_station_name'], result['start_station_id'])\nplt.xlabel('Start Station Name')\nplt.ylabel('Start Station ID')\nplt.title('Start Station ID by Start Station Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "Can you create a scatter chart displaying the first names and last names of customers who reside in Lockmanfurt?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nCustomers = pd.read_sql(\"SELECT * FROM Customers\", conn)\nAddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\nCustomers.columns = Customers.columns.str.lower()\nAddresses.columns = Addresses.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Customers, Addresses, left_on='customer_address_id', right_on='address_id')\n\n# Filter the data for city 'Lockmanfurt'\nfiltered_df = merged_df[merged_df['city'] == 'Lockmanfurt']\n\n# Select the required columns\nselected_df = filtered_df[['first_name', 'last_name']]\n\n# Plot the scatter plot\nplt.scatter(selected_df['first_name'], selected_df['last_name'])\nplt.xlabel('First Name')\nplt.ylabel('Last Name')\nplt.title('Scatter plot of customers in Lockmanfurt')\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "Show me a bar chart of the wrestlers and the number of distinct elimination moves they have performed, ranked in descending order of the count of elimination moves.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nelimination = pd.read_sql(\"SELECT * FROM elimination\", conn)\nwrestler = pd.read_sql(\"SELECT * FROM wrestler\", conn)\nelimination.columns = elimination.columns.str.lower()\nwrestler.columns = wrestler.columns.str.lower()\n\n# Perform the join operation\nresult = pd.merge(elimination, wrestler, on='wrestler_id')\n\n# Perform the group by and count operation\ngrouped = result.groupby('name')['elimination_move'].nunique().reset_index()\n\n# Sort the result in descending order\nsorted_result = grouped.sort_values(by='elimination_move', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_result['name'], sorted_result['elimination_move'])\nplt.xlabel('Wrestler Name')\nplt.ylabel('Number of Unique Elimination Moves')\nplt.title('Number of Unique Elimination Moves by Wrestler')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Can you create a bar chart displaying the email addresses of workshop groups where services are performed, along with the corresponding number of services performed for each email address?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDrama_Workshop_Groups = pd.read_sql(\"SELECT * FROM Drama_Workshop_Groups\", conn)\nServices = pd.read_sql(\"SELECT * FROM Services\", conn)\nDrama_Workshop_Groups.columns = Drama_Workshop_Groups.columns.str.lower()\nServices.columns = Services.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Drama_Workshop_Groups, Services, on='workshop_group_id')\n\n# Group by store_email_address and count the number of occurrences\ngrouped_df = merged_df.groupby('store_email_address').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['store_email_address'], grouped_df['count'])\nplt.xlabel('Store Email Address')\nplt.ylabel('Count')\nplt.title('Number of Workshop Groups per Store Email Address')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "How many documents for different location code ? Plot a bar chart to show the proportion , and show Y in desc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDocument_locations = pd.read_sql(\"SELECT * FROM Document_locations\", conn)\nDocument_locations.columns = Document_locations.columns.str.lower()\n\n# Group by location_code and count the occurrences\nlocation_counts = Document_locations.groupby('location_code').size().reset_index(name='count')\n\n# Sort by count in descending order\nlocation_counts = location_counts.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(location_counts['location_code'], location_counts['count'])\nplt.xlabel('Location Code')\nplt.ylabel('Count')\nplt.title('Document Locations')\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "What is the distribution of the total number of days held for each wrestler in the elimination team, represented by a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nelimination = pd.read_sql(\"SELECT * FROM elimination\", conn)\nwrestler = pd.read_sql(\"SELECT * FROM wrestler\", conn)\nelimination.columns = elimination.columns.str.lower()\nwrestler.columns = wrestler.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(elimination, wrestler, on='wrestler_id')\n\n# Group by wrestler name and calculate the sum of days held\ngrouped_df = merged_df.groupby('name')['days_held'].sum().reset_index()\n\n# Create a pie chart\nplt.pie(grouped_df['days_held'], labels=grouped_df['name'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Display the chart\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Compare the number of songs each singer has using a bar chart, order x-axis from high to low order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the singer and song tables\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsong = pd.read_sql(\"SELECT * FROM song\", conn)\n\n# Convert column names to lowercase\nsinger.columns = singer.columns.str.lower()\nsong.columns = song.columns.str.lower()\n\n# Merge the singer and song tables on Singer_ID\nmerged_data = pd.merge(singer, song, on=\"singer_id\")\n\n# Perform the group by and count operation\ngrouped_data = merged_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# Sort the data by name in descending order\nsorted_data = grouped_data.sort_values(\"name\", ascending=False)\n\n# Create the bar plot\nplt.bar(sorted_data[\"name\"], sorted_data[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Songs by Singer\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "What is the count of each problem description reported by the staff with the first name \"Christop\" in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nproblems = pd.read_sql(\"SELECT * FROM problems\", conn)\nstaff = pd.read_sql(\"SELECT * FROM staff\", conn)\nproblems.columns = problems.columns.str.lower()\nstaff.columns = staff.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(problems, staff, left_on='reported_by_staff_id', right_on='staff_id')\n\n# Filter by staff_first_name\nfiltered_df = merged_df[merged_df['staff_first_name'] == 'Christop']\n\n# Group by problem_description and count\ngrouped_df = filtered_df.groupby('problem_description').size().reset_index(name='count')\n\n# Sort by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plot bar chart\nplt.bar(sorted_df['problem_description'], sorted_df['count'])\nplt.xlabel('Problem Description')\nplt.ylabel('Count')\nplt.title('Number of Problems by Description')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "company_office",
    "question": "I want to know the proportion of different industry types .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nCompanies = pd.read_sql(\"SELECT * FROM Companies\", conn)\nCompanies.columns = Companies.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called Companies\n\n# Grouping the data by industry and counting the number of companies in each industry\nindustry_counts = Companies.groupby('industry').size()\n\n# Creating a pie chart\nplt.pie(industry_counts, labels=industry_counts.index, autopct='%1.1f%%')\nplt.title('Company Distribution by Industry')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Show me start_station_id by start station name in a bar , and could you sort in desc by the start_station_name ?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\ntrip.columns = trip.columns.str.lower()\n\n# Sort the trip dataframe by start_station_name in descending order\nsorted_trip = trip.sort_values('start_station_name', ascending=False)\n\n# Extract the start_station_name and start_station_id columns\nstart_station_name = sorted_trip['start_station_name']\nstart_station_id = sorted_trip['start_station_id']\n\n# Create a bar plot\nplt.bar(start_station_name, start_station_id)\n\n# Set the x-axis label\nplt.xlabel('Start Station Name')\n\n# Set the y-axis label\nplt.ylabel('Start Station ID')\n\n# Rotate the x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Show each author and the number of workshops they submitted to in a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the acceptance and submission tables\nacceptance = pd.read_sql(\"SELECT * FROM acceptance\", conn)\nsubmission = pd.read_sql(\"SELECT * FROM submission\", conn)\n\n# Convert column names to lowercase\nacceptance.columns = acceptance.columns.str.lower()\nsubmission.columns = submission.columns.str.lower()\n\n# Merge the acceptance and submission tables on the submission_id column\nmerged_data = pd.merge(acceptance, submission, on='submission_id')\n\n# Group by author and count the distinct workshop_ids\nauthor_counts = merged_data.groupby('author')['workshop_id'].nunique()\n\n# Create a pie chart\nplt.pie(author_counts, labels=author_counts.index, autopct='%1.1f%%')\nplt.title('Number of Workshops per Author')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show me how many type by type in a bar, and I want to sort by the Y-axis in asc.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ship table\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\n\n# Perform the SQL query\nresult = ship_df.groupby('type').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result['type'], result['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Number of Ships by Type')\nplt.show()"
  },
  {
    "db_id": "e_government",
    "question": "What is the name of the most popular party form and how many times does it appear in the database? Show the data using a scatter chart.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nforms = pd.read_sql(\"SELECT * FROM forms\", conn)\nparty_forms = pd.read_sql(\"SELECT * FROM party_forms\", conn)\nforms.columns = forms.columns.str.lower()\nparty_forms.columns = party_forms.columns.str.lower()\n\n# Merge the two dataframes on form_id\nmerged_df = pd.merge(forms, party_forms, on='form_id')\n\n# Group by form_name and count the number of occurrences\ngrouped_df = merged_df.groupby('form_name').size().reset_index(name='count')\n\n# Create scatter plot\nplt.scatter(grouped_df['form_name'], grouped_df['count'])\nplt.xlabel('Form Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Form Name')\nplt.show()"
  },
  {
    "db_id": "twitter_1",
    "question": "Find the name and partition id for users who tweeted less than twice Show bar chart, rank by the y-axis in descending.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the user_profiles table\nuser_profiles = pd.read_sql(\"SELECT * FROM user_profiles\", conn)\nuser_profiles.columns = map(str.lower, user_profiles.columns)\n\n# Read the tweets table\ntweets = pd.read_sql(\"SELECT * FROM tweets\", conn)\ntweets.columns = map(str.lower, tweets.columns)\n\n# Merge the user_profiles and tweets tables on uid column\nmerged_data = pd.merge(user_profiles, tweets, on=\"uid\")\n\n# Sort the merged data by partitionid in descending order\nsorted_data = merged_data.sort_values(by=\"partitionid\", ascending=False)\n\n# Create a bar plot of name and partitionid\nplt.bar(sorted_data[\"name\"], sorted_data[\"partitionid\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Partition ID\")\nplt.title(\"Bar Plot of Name and Partition ID\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "How many documents for different location code ? Plot a bar chart to show the proportion , and order y-axis in ascending order please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDocument_locations = pd.read_sql(\"SELECT * FROM Document_locations\", conn)\nDocument_locations.columns = Document_locations.columns.str.lower()\n\n# Group by location_code and count the occurrences\nlocation_counts = Document_locations.groupby('location_code').size().reset_index(name='count')\n\n# Sort the counts in ascending order\nlocation_counts = location_counts.sort_values('count')\n\n# Plot the bar chart\nplt.bar(location_counts['location_code'], location_counts['count'])\nplt.xlabel('Location Code')\nplt.ylabel('Count')\nplt.title('Document Locations')\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "Which document has the highest number of sections, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ndocuments = pd.read_sql(\"SELECT * FROM documents\", conn)\ndocument_sections = pd.read_sql(\"SELECT * FROM document_sections\", conn)\ndocuments.columns = documents.columns.str.lower()\ndocument_sections.columns = document_sections.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(documents, document_sections, on='document_code')\n\n# Group by document_name and count the number of occurrences\ngrouped_df = merged_df.groupby('document_name').size().reset_index(name='count')\n\n# Sort by count in descending order and select the top 1\ntop_document = grouped_df.sort_values('count', ascending=False).head(1)\n\n# Visualize the result using a bar chart\nplt.bar(top_document['document_name'], top_document['count'])\nplt.xlabel('Document Name')\nplt.ylabel('Count')\nplt.title('Top Document by Count')\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "How many physicians are primarily affiliated with each department, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naffiliated_with = pd.read_sql(\"SELECT * FROM affiliated_with\", conn)\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\naffiliated_with.columns = affiliated_with.columns.str.lower()\ndepartment.columns = department.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(affiliated_with, department, left_on='department', right_on='departmentid')\n\n# Filter the data based on primaryaffiliation = 1\nfiltered_df = merged_df[merged_df['primaryaffiliation'] == 1]\n\n# Group by department name and count the number of physicians\ngrouped_df = filtered_df.groupby('name').size().reset_index(name='num_physicians')\n\n# Plot the bar chart\nplt.bar(grouped_df['name'], grouped_df['num_physicians'])\nplt.xlabel('Department')\nplt.ylabel('Number of Physicians')\nplt.title('Number of Physicians in Each Department')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "I want to know the proportion of the maximum net worth for each citizenship .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Group by citizenship and find the maximum net worth\nmax_net_worth = singer.groupby('citizenship')['net_worth_millions'].max()\n\n# Create a pie chart\nplt.pie(max_net_worth, labels=max_net_worth.index, autopct='%1.1f%%')\nplt.title('Maximum Net Worth by Citizenship')\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "How many injured players not suffering from injury of 'Knee problem' in each match? Show me a bar chart grouping by number of matches, I want to display from high to low by the bar please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the injury_accident table\ninjury_accident = pd.read_sql(\"SELECT * FROM injury_accident\", conn)\n\n# Convert column names to lowercase\ninjury_accident.columns = injury_accident.columns.str.lower()\n\n# Filter out rows where injury is not 'Knee problem'\nfiltered_data = injury_accident[injury_accident['injury'] != 'Knee problem']\n\n# Group by Number_of_matches and count the occurrences\ngrouped_data = filtered_data.groupby('number_of_matches').size().reset_index(name='count')\n\n# Sort the data by Number_of_matches in descending order\nsorted_data = grouped_data.sort_values('number_of_matches', ascending=False)\n\n# Create a bar plot\nplt.bar(sorted_data['number_of_matches'], sorted_data['count'])\nplt.xlabel('Number of Matches')\nplt.ylabel('Count')\nplt.title('Number of Matches vs Count of Injuries (excluding Knee problem)')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "What is the number of countries in the artist table ?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Assuming the data is already loaded into the 'artist' dataframe\n\n# Grouping the data by country and counting the occurrences\ncountry_counts = artist.groupby('country').size().reset_index(name='count')\n\n# Creating the bar plot\nplt.bar(country_counts['country'], country_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Artists by Country')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "List the name of technicians whose team is not \"NYY\", and count them by a bar chart, and show x-axis in descending order please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the technician table\ntechnician_df = pd.read_sql(\"SELECT * FROM technician\", conn)\n\n# Convert column names to lowercase\ntechnician_df.columns = technician_df.columns.str.lower()\n\n# Filter the technician table where Team is not \"NYY\"\nfiltered_technician_df = technician_df[technician_df[\"team\"] != \"NYY\"]\n\n# Group by Name and count the occurrences\ngrouped_technician_df = filtered_technician_df.groupby(\"name\").size().reset_index(name=\"count\")\n\n# Sort by Name in descending order\nsorted_technician_df = grouped_technician_df.sort_values(\"name\", ascending=False)\n\n# Generate the bar plot\nplt.bar(sorted_technician_df[\"name\"], sorted_technician_df[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Technician Count by Name (excluding Team NYY)\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "Show names of technicians who are assigned to repair machines with value point more than 70, and count them by a bar chart, could you order in asc by the bars?",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the repair_assignment table\nrepair_assignment = pd.read_sql(\"SELECT * FROM repair_assignment\", conn)\n\n# Read the machine table\nmachine = pd.read_sql(\"SELECT * FROM machine\", conn)\n\n# Read the technician table\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\n\n# Convert column names to lowercase\nrepair_assignment.columns = repair_assignment.columns.str.lower()\nmachine.columns = machine.columns.str.lower()\ntechnician.columns = technician.columns.str.lower()\n\n# merge the tables\nmerged_data = pd.merge(repair_assignment, machine, on=\"machine_id\")\nmerged_data = pd.merge(merged_data, technician, on=\"technician_id\")\n\n# filter the data\nfiltered_data = merged_data[merged_data[\"value_points\"] > 70]\n\n# group by name and count occurrences\ngrouped_data = filtered_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# sort by name\nsorted_data = grouped_data.sort_values(\"name\")\n\n# plot the bar chart\nplt.bar(sorted_data[\"name\"], sorted_data[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Repairs by Name\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "customer_deliveries",
    "question": "What is the scatter plot displaying the count and price of each product in the regular_order_products table?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nproducts = pd.read_sql(\"SELECT * FROM products\", conn)\nregular_order_products = pd.read_sql(\"SELECT * FROM regular_order_products\", conn)\nproducts.columns = products.columns.str.lower()\nregular_order_products.columns = regular_order_products.columns.str.lower()\n\n# Merge the two dataframes\nmerged_df = pd.merge(products, regular_order_products, on='product_id')\n\n# Group by product price and count the number of occurrences\ngrouped_df = merged_df.groupby('product_price').size().reset_index(name='count')\n\n# Scatter plot\nplt.scatter(grouped_df['product_price'], grouped_df['count'])\nplt.xlabel('Product Price')\nplt.ylabel('Count')\nplt.title('Scatter Plot of Product Price vs Count')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "what are the ids and names of all start stations that were the beginning of at least 200 trips ? , sort start_station_id from high to low order .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\ntrip.columns = trip.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called 'trip'\n\n# Sort the DataFrame by start_station_id in descending order\nsorted_trip = trip.sort_values(by='start_station_id', ascending=False)\n\n# Extract the start_station_name and start_station_id columns\nstart_station_name = sorted_trip['start_station_name']\nstart_station_id = sorted_trip['start_station_id']\n\n# Create a bar plot\nplt.bar(start_station_name, start_station_id)\n\n# Set the x-axis labels to be rotated for better readability\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "What is the distribution of stores in each city where the store named \"FJA Filming\" is located, represented by a pie chart?",
    "chart": "Pie",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nAddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\nStores = pd.read_sql(\"SELECT * FROM Stores\", conn)\nAddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\nStores = pd.read_sql(\"SELECT * FROM Stores\", conn)\nAddresses.columns = Addresses.columns.str.lower()\nStores.columns = Stores.columns.str.lower()\nAddresses.columns = Addresses.columns.str.lower()\nStores.columns = Stores.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(Addresses, Stores, on='address_id')\n\n# Filtering the data\nfiltered_df = merged_df[merged_df['city_town'].isin(merged_df[merged_df['store_name'] == 'FJA Filming']['city_town'])]\n\n# Grouping and counting\ngrouped_df = filtered_df.groupby('store_name').size().reset_index(name='count')\n\n# Plotting the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['store_name'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show different citizenship of singers and the number of singers of each citizenship in a pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Grouping the data by citizenship and counting the number of occurrences\ncitizenship_count = singer.groupby('citizenship').size().reset_index(name='count')\n\n# Creating a pie chart\nplt.pie(citizenship_count['count'], labels=citizenship_count['citizenship'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Displaying the pie chart\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "Bar chart x axis log entry description y axis the number of log entry description , and I want to display in descending by the bar please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nproblem_log = pd.read_sql(\"SELECT * FROM problem_log\", conn)\nproblem_log.columns = problem_log.columns.str.lower()\n\n# Grouping the data by log_entry_description and counting the occurrences\ngrouped_data = problem_log.groupby('log_entry_description').size().reset_index(name='count')\n\n# Sorting the data by log_entry_description in descending order\nsorted_data = grouped_data.sort_values('log_entry_description', ascending=False)\n\n# Creating the bar plot\nplt.bar(sorted_data['log_entry_description'], sorted_data['count'])\nplt.xlabel('Log Entry Description')\nplt.ylabel('Count')\nplt.title('Occurrences of Log Entry Descriptions')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "perpetrator",
    "question": "Visualize a bar chart for what are the countries of perpetrators ? Show each country and the corresponding number of perpetrators there .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperpetrator = pd.read_sql(\"SELECT * FROM perpetrator\", conn)\nperpetrator.columns = perpetrator.columns.str.lower()\n\n# Group by country and count the number of occurrences\nperpetrator_count = perpetrator.groupby('country').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(perpetrator_count['country'], perpetrator_count['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Perpetrators by Country')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Show all payment method codes and the number of orders for each code in a bar chart , show by the y axis from low to high please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nINVOICES = pd.read_sql(\"SELECT * FROM INVOICES\", conn)\nINVOICES.columns = INVOICES.columns.str.lower()\n\n# Grouping the data by payment_method_code and counting the occurrences\npayment_counts = INVOICES.groupby('payment_method_code').size()\n\n# Sorting the counts in ascending order\npayment_counts = payment_counts.sort_values()\n\n# Creating the bar plot\nplt.bar(payment_counts.index, payment_counts.values)\n\n# Adding labels and title\nplt.xlabel('Payment Method Code')\nplt.ylabel('Count')\nplt.title('Number of Invoices by Payment Method Code')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Show me a bar chart of the top 10 stations with the highest frequency of having more than 12 bikes available.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstatus = pd.read_sql(\"SELECT * FROM status\", conn)\nstation.columns = station.columns.str.lower()\nstatus.columns = status.columns.str.lower()\n\n# Joining the station and status tables\nmerged_df = pd.merge(station, status, left_on='id', right_on='station_id')\n\n# Filtering the data where bikes_available > 12\nfiltered_df = merged_df[merged_df['bikes_available'] > 12]\n\n# Grouping by station id and counting the number of rows\ngrouped_df = filtered_df.groupby('id').size().reset_index(name='count')\n\n# Sorting by count in descending order and selecting top 10 rows\ntop_10_stations = grouped_df.sort_values('count', ascending=False).head(10)\n\n# Plotting the bar chart\nplt.bar(top_10_stations['id'], top_10_stations['count'])\nplt.xlabel('Station ID')\nplt.ylabel('Count')\nplt.title('Top 10 Stations with Bikes Available > 12')\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "For each team , how many technicians are there , and order Y in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\ntechnician.columns = technician.columns.str.lower()\n\n# Group by 'team' and count the number of occurrences\nteam_counts = technician.groupby('team').size()\n\n# Sort the counts in ascending order\nteam_counts = team_counts.sort_values()\n\n# Create a bar plot\nplt.bar(team_counts.index, team_counts.values)\n\n# Set the labels and title\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Number of Technicians per Team')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "browser_web",
    "question": "Find the number of web accelerators used for each Operating system. ",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the data from the web_client_accelerator table\ndf = pd.read_sql(\"SELECT * FROM web_client_accelerator\", conn)\n\n# Convert column names to lowercase\ndf.columns = df.columns.str.lower()\n\n# Group by operating_system and count the number of occurrences\ngrouped_df = df.groupby('operating_system').size().reset_index(name='count')\n\n# Create a bar plot\nplt.bar(grouped_df['operating_system'], grouped_df['count'])\nplt.xlabel('Operating System')\nplt.ylabel('Count')\nplt.title('Number of Clients by Operating System')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "What are the date and mean humidity for the top 3 days with the largest max gust speeds? Return me a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the weather table\nweather = pd.read_sql(\"SELECT * FROM weather\", conn)\n\n# Convert column names to lowercase\nweather.columns = weather.columns.str.lower()\n\n# Perform the SQL query\nquery = \"\"\"\n    SELECT date, mean_humidity\n    FROM weather\n    ORDER BY max_gust_speed_mph DESC\n    LIMIT 3\n\"\"\"\nresult = pd.read_sql(query, conn)\n\n# Close the database connection\nconn.close()\n\n# Plot the bar chart\nplt.bar(result[\"date\"], result[\"mean_humidity\"])\nplt.xlabel(\"Date\")\nplt.ylabel(\"Mean Humidity\")\nplt.title(\"Top 3 Dates with Highest Max Gust Speed\")\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "Visualize a bar chart for what is the number of their teams in elimination?, and display y-axis in descending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"elimination\" table\nelimination_data = pd.read_sql(\"SELECT * FROM elimination\", conn)\n\n# Convert column names to lowercase\nelimination_data.columns = elimination_data.columns.str.lower()\n\n# Perform the SQL query\nteam_counts = elimination_data.groupby('team').size().reset_index(name='count')\nteam_counts = team_counts.sort_values('count', ascending=False)\n\n# Generate the bar plot\nplt.bar(team_counts['team'], team_counts['count'])\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Number of Eliminations by Team')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Count the section_description, and group by section_description with a bar chart, I want to order names in descending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Sections table\nsections = pd.read_sql(\"SELECT * FROM Sections\", conn)\n\n# Convert column names to lowercase\nsections.columns = sections.columns.str.lower()\n\n# Perform the SQL query\nresult = sections.groupby('section_description').size().reset_index(name='count')\nresult = result.sort_values('section_description', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['section_description'], result['count'])\nplt.xlabel('Section Description')\nplt.ylabel('Count')\nplt.title('Section Description Count')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "How many devices are currently in stock for each shop, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstock = pd.read_sql(\"SELECT * FROM stock\", conn)\nshop = pd.read_sql(\"SELECT * FROM shop\", conn)\nstock.columns = stock.columns.str.lower()\nshop.columns = shop.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(stock, shop, on='shop_id')\n\n# Group by shop_id and count the number of devices\ngrouped_df = merged_df.groupby('shop_id').size().reset_index(name='num_devices')\n\n# Create a pie chart\nplt.pie(grouped_df['num_devices'], labels=grouped_df['shop_id'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "How many injured players not suffering from injury of 'Knee problem' in each match? Show me a bar chart grouping by number of matches.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the injury_accident table\ninjury_accident = pd.read_sql(\"SELECT * FROM injury_accident\", conn)\n\n# Convert column names to lowercase\ninjury_accident.columns = injury_accident.columns.str.lower()\n\n# Filter out rows where injury is not 'Knee problem'\nfiltered_data = injury_accident[injury_accident['injury'] != 'Knee problem']\n\n# Group by Number_of_matches and count the occurrences\ngrouped_data = filtered_data.groupby('number_of_matches').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_data['number_of_matches'], grouped_data['count'])\nplt.xlabel('Number of Matches')\nplt.ylabel('Count')\nplt.title('Number of Matches vs Count')\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "Show different teams of technicians and the number of technicians in each team , I want to display by the total number in asc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\ntechnician.columns = technician.columns.str.lower()\n\n# Group by team and count the number of technicians in each team\nteam_counts = technician.groupby('team').size().reset_index(name='count')\n\n# Sort the teams by count in ascending order\nteam_counts = team_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(team_counts['team'], team_counts['count'])\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Number of Technicians in Each Team')\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "Show different teams in eliminations and the number of eliminations from each team Visualize by bar chart , and rank from low to high by the the total number .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nelimination = pd.read_sql(\"SELECT * FROM elimination\", conn)\nelimination.columns = elimination.columns.str.lower()\n\n# Group by team and count the number of occurrences\nteam_counts = elimination.groupby('team').size().reset_index(name='count')\n\n# Sort the counts in ascending order\nteam_counts = team_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(team_counts['team'], team_counts['count'])\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Team')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "For each team, how many technicians are there, could you sort X in asc order?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the technician table\ntechnician_df = pd.read_sql(\"SELECT * FROM technician\", conn)\n\n# Convert column names to lowercase\ntechnician_df.columns = technician_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = technician_df.groupby('team').size().reset_index(name='count').sort_values('team')\n\n# Generate the bar chart\nplt.bar(result_df['team'], result_df['count'])\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Technician Count by Team')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Show the average of artists' age by country.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the artist table\nartist_df = pd.read_sql(\"SELECT * FROM artist\", conn)\n\n# Convert column names to lowercase\nartist_df.columns = artist_df.columns.str.lower()\n\n# Group by country and calculate average age\navg_age_by_country = artist_df.groupby('country')['age'].mean().reset_index()\n\n# Plot the bar chart\nplt.bar(avg_age_by_country['country'], avg_age_by_country['age'])\nplt.xlabel('Country')\nplt.ylabel('Average Age')\nplt.title('Average Age of Artists by Country')\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show different citizenship of singers and the number of singers of each citizenship Plot them as bar chart , could you sort by the x-axis in asc please ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Group by citizenship and count the number of singers\nsinger_count = singer.groupby('citizenship').size().reset_index(name='count')\n\n# Sort the data by citizenship in ascending order\nsinger_count = singer_count.sort_values('citizenship')\n\n# Create a bar plot\nplt.bar(singer_count['citizenship'], singer_count['count'])\nplt.xlabel('Citizenship')\nplt.ylabel('Count')\nplt.title('Number of Singers by Citizenship')\nplt.show()"
  },
  {
    "db_id": "e_government",
    "question": "What is the name of the most popular party form, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nforms = pd.read_sql(\"SELECT * FROM forms\", conn)\nparty_forms = pd.read_sql(\"SELECT * FROM party_forms\", conn)\nforms.columns = forms.columns.str.lower()\nparty_forms.columns = party_forms.columns.str.lower()\n\n# Merge the two dataframes on form_id\nmerged_df = pd.merge(forms, party_forms, on='form_id')\n\n# Group by form_name and count the number of occurrences\ngrouped_df = merged_df.groupby('form_name').size().reset_index(name='count')\n\n# Sort the dataframe by form_name\nsorted_df = grouped_df.sort_values('form_name')\n\n# Create the bar plot\nplt.bar(sorted_df['form_name'], sorted_df['count'])\nplt.xlabel('Form Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Form Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Which country has the highest number of exhibitions, represented by a scatter plot?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nexhibition.columns = exhibition.columns.str.lower()\nartist.columns = artist.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(exhibition, artist, on='artist_id')\n\n# Group by country and count the number of exhibitions\ngrouped_df = merged_df.groupby('country').size().reset_index(name='num_exhibitions')\n\n# Sort by the number of exhibitions in descending order\nsorted_df = grouped_df.sort_values('num_exhibitions', ascending=False)\n\n# Create scatter plot\nplt.scatter(sorted_df['country'], sorted_df['num_exhibitions'])\nplt.xlabel('Country')\nplt.ylabel('Number of Exhibitions')\nplt.title('Number of Exhibitions by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "What is the count of orders for each order status for the customer named \"Jeramie\" shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\ncustomers.columns = customers.columns.str.lower()\norders.columns = orders.columns.str.lower()\n\n# Joining customers and orders tables\nmerged_df = pd.merge(customers, orders, on='customer_id')\n\n# Filtering data for customer_name = 'jeramie'\nfiltered_df = merged_df[merged_df['customer_name'] == 'Jeramie']\n\n# Grouping data by order_status and counting the number of occurrences\ngrouped_df = filtered_df.groupby('order_status').size().reset_index(name='count')\n\n# Creating bar plot\nplt.bar(grouped_df['order_status'], grouped_df['count'])\nplt.xlabel('Order Status')\nplt.ylabel('Count')\nplt.title('Order Status Distribution for Customer Jeramie')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "question": "Which employees have the highest number of drafts and copies in the circulation history, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nCirculation_History = pd.read_sql(\"SELECT * FROM Circulation_History\", conn)\nEmployees.columns = Employees.columns.str.lower()\nCirculation_History.columns = Circulation_History.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Employees, Circulation_History, on='employee_id')\n\n# Group by employee_name and count the number of drafts copies\ngrouped_df = merged_df.groupby('employee_name').size().reset_index(name='num_drafts_copies')\n\n# Sort the dataframe by num_drafts_copies in descending order\nsorted_df = grouped_df.sort_values('num_drafts_copies', ascending=False)\n\n# Select the top 5 rows\ntop_5_df = sorted_df.head(5)\n\n# Create the bar plot\nplt.bar(top_5_df['employee_name'], top_5_df['num_drafts_copies'])\nplt.xlabel('Employee Name')\nplt.ylabel('Number of Drafts Copies')\nplt.title('Top 5 Employees with Most Drafts Copies')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "What is the proportion of the nationality of all ships ? Give me a pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Grouping the data by nationality and counting the occurrences\nnationality_count = ship.groupby('nationality').size().reset_index(name='count')\n\n# Creating a pie chart\nplt.pie(nationality_count['count'], labels=nationality_count['nationality'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Displaying the chart\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show the names of singers and the total sales of their songs in a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the singer table\nsinger_df = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger_df.columns = map(str.lower, singer_df.columns)\n\n# Read the song table\nsong_df = pd.read_sql(\"SELECT * FROM song\", conn)\nsong_df.columns = map(str.lower, song_df.columns)\n\n# Merge the singer and song tables on Singer_ID\nmerged_df = pd.merge(singer_df, song_df, on=\"singer_id\")\n\n# Group by Name and calculate the sum of Sales\ngrouped_df = merged_df.groupby(\"name\").sales.sum().reset_index()\n\n# Plot the bar chart\nplt.bar(grouped_df[\"name\"], grouped_df[\"sales\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Total Sales\")\nplt.title(\"Total Sales by Singer\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Tell me the trend using a line chart to show the total number of the station over the installation date .",
    "chart": "Line",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstation.columns = station.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called 'station'\n\n# Grouping the data by installation_date and counting the occurrences\ngrouped_data = station.groupby('installation_date').size().reset_index(name='count')\n\n# Sorting the data by installation_date\nsorted_data = grouped_data.sort_values('installation_date')\n\n# Plotting the line chart\nplt.plot(sorted_data['installation_date'], sorted_data['count'])\nplt.xlabel('Installation Date')\nplt.ylabel('Count')\nplt.title('Count of Installations by Date')\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Create a pie chart showing the total number across citizenship .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Grouping the data by citizenship and counting the number of singers\nsinger_grouped = singer.groupby('citizenship').size().reset_index(name='count')\n\n# Creating a pie chart\nplt.pie(singer_grouped['count'], labels=singer_grouped['citizenship'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Displaying the pie chart\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "What are the names of technicians with the machine series that they repair? Show me how many machines for each technician's name, list Name in descending order please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the repair_assignment table\nrepair_assignment = pd.read_sql(\"SELECT * FROM repair_assignment\", conn)\n\n# Read the machine table\nmachine = pd.read_sql(\"SELECT * FROM machine\", conn)\n\n# Read the technician table\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\n\n# Convert column names to lowercase\nrepair_assignment.columns = repair_assignment.columns.str.lower()\nmachine.columns = machine.columns.str.lower()\ntechnician.columns = technician.columns.str.lower()\n\n# merge the tables\nmerged_data = pd.merge(repair_assignment, machine, on=\"machine_id\")\nmerged_data = pd.merge(merged_data, technician, on=\"technician_id\")\n\n# perform the aggregation\naggregated_data = merged_data.groupby(\"name\").size().reset_index(name=\"count\")\naggregated_data = aggregated_data.sort_values(\"name\", ascending=False)\n\n# plot the bar chart\nplt.bar(aggregated_data[\"name\"], aggregated_data[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of Repairs by Name\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "machine_repair",
    "question": "Show names of technicians and the number of machines they are assigned to repair Visualize by bar chart, and sort by the X-axis in descending.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the repair_assignment table\nrepair_assignment = pd.read_sql(\"SELECT * FROM repair_assignment\", conn)\n\n# Read the technician table\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\n\n# Convert column names to lowercase\nrepair_assignment.columns = repair_assignment.columns.str.lower()\ntechnician.columns = technician.columns.str.lower()\n\n# merge the two tables on technician_id\nmerged_data = pd.merge(repair_assignment, technician, on='technician_id')\n\n# group by technician name and count the number of assignments\ngrouped_data = merged_data.groupby('name').size().reset_index(name='count')\n\n# sort the data by technician name in descending order\nsorted_data = grouped_data.sort_values('name', ascending=False)\n\n# plot the bar chart\nplt.bar(sorted_data['name'], sorted_data['count'])\nplt.xlabel('Technician Name')\nplt.ylabel('Number of Assignments')\nplt.title('Number of Assignments per Technician')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Group and count details for the events using a bar chart, show by the Y-axis in desc.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the EVENTS table\nevents = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\n\n# Convert column names to lowercase\nevents.columns = events.columns.str.lower()\n\n# Perform the SQL query\nevent_counts = events.groupby('event_details').size().reset_index(name='count')\nevent_counts = event_counts.sort_values('count', ascending=False)\n\n# Generate the bar plot\nplt.bar(event_counts['event_details'], event_counts['count'])\nplt.xlabel('Event Details')\nplt.ylabel('Count')\nplt.title('Event Details Count')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "icfp_1",
    "question": "Which authors from the institution \"Google\" have their first names and last names? Display the information using a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nauthors = pd.read_sql(\"SELECT * FROM authors\", conn)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\ninst = pd.read_sql(\"SELECT * FROM inst\", conn)\nauthors.columns = authors.columns.str.lower()\nauthorship.columns = authorship.columns.str.lower()\ninst.columns = inst.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(authors, authorship, on='authid')\nmerged_df = pd.merge(merged_df, inst, on='instid')\n\n# Filter by inst name\nfiltered_df = merged_df[merged_df['name'] == 'Google']\n\n# Group by fname and count\ngrouped_df = filtered_df.groupby('fname').size().reset_index(name='count')\n\n# Plot bar chart\nplt.bar(grouped_df['fname'], grouped_df['count'])\nplt.xlabel('First Name')\nplt.ylabel('Count')\nplt.title('Number of Authors by First Name at Google')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show all distinct product categories along with the number of mailshots in each category Visualize by bar chart, order from low to high by the y-axis.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the mailshot_campaigns table\nmailshot_campaigns = pd.read_sql(\"SELECT * FROM mailshot_campaigns\", conn)\n\n# Convert column names to lowercase\nmailshot_campaigns.columns = map(str.lower, mailshot_campaigns.columns)\n\n# Perform the SQL query\nresult = mailshot_campaigns.groupby('product_category').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result['product_category'], result['count'])\nplt.xlabel('Product Category')\nplt.ylabel('Count')\nplt.title('Count of Mailshot Campaigns by Product Category')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "How many technicians are assigned to each quality rank of the machine they are working on, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nrepair_assignment = pd.read_sql(\"SELECT * FROM repair_assignment\", conn)\nmachine = pd.read_sql(\"SELECT * FROM machine\", conn)\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\nrepair_assignment.columns = repair_assignment.columns.str.lower()\nmachine.columns = machine.columns.str.lower()\ntechnician.columns = technician.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(pd.merge(repair_assignment, machine, on='machine_id'), technician, on='technician_id')\n\n# Group by quality_rank and count the number of technicians\ngrouped_df = merged_df.groupby('quality_rank').count()['name']\n\n# Plot the bar chart\nplt.bar(grouped_df.index, grouped_df.values)\nplt.xlabel('Quality Rank')\nplt.ylabel('Number of Technicians')\nplt.title('Number of Technicians by Quality Rank')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "What are the names and average number of bikes available for the top 10 stations with the highest average number of bikes available, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstatus = pd.read_sql(\"SELECT * FROM status\", conn)\nstation.columns = station.columns.str.lower()\nstatus.columns = status.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(station, status, left_on='id', right_on='station_id')\n\n# Group by name and calculate the average bikes_available\ngrouped_df = merged_df.groupby('name')['bikes_available'].mean().reset_index()\n\n# Sort by average bikes_available in descending order and select top 10\ntop_10_df = grouped_df.sort_values('bikes_available', ascending=False).head(10)\n\n# Plot the bar chart\nplt.bar(top_10_df['name'], top_10_df['bikes_available'])\nplt.xlabel('Station Name')\nplt.ylabel('Average Bikes Available')\nplt.title('Top 10 Stations with Highest Average Bikes Available')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "List all the participant ids and their details using a bar chart , and I want to order in asc by the bar .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nParticipants = pd.read_sql(\"SELECT * FROM Participants\", conn)\nParticipants.columns = Participants.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called Participants\n\n# Sort the DataFrame by participant_details column in ascending order\nsorted_participants = Participants.sort_values(by='participant_details')\n\n# Extract the required columns\nparticipant_details = sorted_participants['participant_details']\nparticipant_id = sorted_participants['participant_id']\n\n# Create the bar plot\nplt.bar(participant_details, participant_id)\n\n# Add labels and title\nplt.xlabel('Participant Details')\nplt.ylabel('Participant ID')\nplt.title('Bar Plot of Participant Details')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "gymnast",
    "question": "Show me a bar chart displaying the count of gymnasts for each height, ordered in ascending order by height.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngymnast = pd.read_sql(\"SELECT * FROM gymnast\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\ngymnast.columns = gymnast.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(gymnast, people, left_on='gymnast_id', right_on='people_id')\n\n# Group by height and count the number of occurrences\ngrouped_df = merged_df.groupby('height').size().reset_index(name='count')\n\n# Sort the dataframe by height in ascending order\nsorted_df = grouped_df.sort_values('height')\n\n# Create the bar plot\nplt.bar(sorted_df['height'], sorted_df['count'])\nplt.xlabel('Height')\nplt.ylabel('Count')\nplt.title('Number of Gymnasts by Height')\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death , compare the number of deaths by name , rank by the X-axis in ascending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm.columns = storm.columns.str.lower()\n\n# Filter the storm dataframe\nfiltered_storm = storm[storm['number_deaths'] >= 1]\n\n# Sort the filtered dataframe by name in ascending order\nsorted_storm = filtered_storm.sort_values('name', ascending=True)\n\n# Create a bar plot\nplt.bar(sorted_storm['name'], sorted_storm['number_deaths'])\n\n# Set the x-axis label\nplt.xlabel('Name')\n\n# Set the y-axis label\nplt.ylabel('Number of Deaths')\n\n# Set the title of the plot\nplt.title('Number of Deaths by Storm')\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "What are the number of the descriptions of the service types with product price above 100?, and could you list in descending by the how many service type description please?",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Ref_Service_Types table\nref_service_types = pd.read_sql(\"SELECT * FROM Ref_Service_Types\", conn)\nref_service_types.columns = map(str.lower, ref_service_types.columns)\n\n# Read the Services table\nservices = pd.read_sql(\"SELECT * FROM Services\", conn)\nservices.columns = map(str.lower, services.columns)\n\n# Merge the two tables on Service_Type_Code\nmerged_data = pd.merge(ref_service_types, services, on=\"service_type_code\")\n\n# Filter the merged data based on Product_Price > 100\nfiltered_data = merged_data[merged_data[\"product_price\"] > 100]\n\n# Group by Service_Type_Description and count the occurrences\ngrouped_data = filtered_data.groupby(\"service_type_description\").size().reset_index(name=\"count\")\n\n# Sort the data by count in descending order\nsorted_data = grouped_data.sort_values(by=\"count\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"service_type_description\"], sorted_data[\"count\"])\nplt.xlabel(\"Service Type Description\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of Service Types with Product Price > 100\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Show all role codes and the number of employees in each role by a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nEmployees.columns = Employees.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\nrole_counts = Employees.groupby('role_code').size()\n\n# Creating a bar plot\nplt.bar(role_counts.index, role_counts.values)\n\n# Adding labels and title\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Employees by Role Code')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show different types of ships and the number of ships of each type in a bar chart, display y-axis in desc order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ship table\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\n\n# Perform the SQL query\nresult = ship_df.groupby('type').size().reset_index(name='count').sort_values(by='count', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['type'], result['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Number of Ships by Type')\nplt.show()"
  },
  {
    "db_id": "sakila_1",
    "question": "What is the city_id and the count of addresses for each city in the address table, visualized as a scatter chart?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naddress = pd.read_sql(\"SELECT * FROM address\", conn)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\naddress.columns = address.columns.str.lower()\ncity.columns = city.columns.str.lower()\n\n# Joining the address and city tables\nmerged_df = pd.merge(address, city, on='city_id')\n\n# Grouping by city_id and counting the number of occurrences\ngrouped_df = merged_df.groupby('city_id').size().reset_index(name='count')\n\n# Creating a scatter plot\nplt.scatter(grouped_df['city_id'], grouped_df['count'])\nplt.xlabel('City ID')\nplt.ylabel('Count')\nplt.title('Number of Addresses per City')\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "What are the names of device shops, and what are the carriers that they carry devices in stock for?, and could you rank by the X-axis from high to low?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the stock table\nstock = pd.read_sql(\"SELECT * FROM stock\", conn)\nstock.columns = stock.columns.str.lower()\n\n# Read the device table\ndevice = pd.read_sql(\"SELECT * FROM device\", conn)\ndevice.columns = device.columns.str.lower()\n\n# Read the shop table\nshop = pd.read_sql(\"SELECT * FROM shop\", conn)\nshop.columns = shop.columns.str.lower()\n\n# Merge the tables\nmerged_data = pd.merge(stock, device, on=\"device_id\")\nmerged_data = pd.merge(merged_data, shop, on=\"shop_id\")\n\n# Perform the query\nresult = merged_data.groupby(\"carrier\").size().reset_index(name=\"count\")\nresult = result.sort_values(\"carrier\", ascending=False)\n\n# Plot the bar chart\nplt.bar(result[\"carrier\"], result[\"count\"])\nplt.xlabel(\"Carrier\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Devices by Carrier\")\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "Show me a bar chart displaying the number of problems recorded for each product.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nproduct = pd.read_sql(\"SELECT * FROM product\", conn)\nproblems = pd.read_sql(\"SELECT * FROM problems\", conn)\nproduct.columns = product.columns.str.lower()\nproblems.columns = problems.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(product, problems, on='product_id')\n\n# Group by product_name and count the number of occurrences\ngrouped_df = merged_df.groupby('product_name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['product_name'], grouped_df['count'])\nplt.xlabel('Product Name')\nplt.ylabel('Count')\nplt.title('Number of Problems by Product')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Show the average of artists' age by country .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Calculate average age by country\navg_age_by_country = artist.groupby('country')['age'].mean()\n\n# Convert the result to a DataFrame\ndf_avg_age_by_country = pd.DataFrame(avg_age_by_country).reset_index()\n\n# Plot the bar chart\nplt.bar(df_avg_age_by_country['country'], df_avg_age_by_country['age'])\nplt.xlabel('Country')\nplt.ylabel('Average Age')\nplt.title('Average Age of Artists by Country')\nplt.show()"
  },
  {
    "db_id": "insurance_and_eClaims",
    "question": "Bar chart x axis policy type code y axis the total number , and display from high to low by the bar .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npolicies = pd.read_sql(\"SELECT * FROM policies\", conn)\npolicies.columns = policies.columns.str.lower()\n\n# Group by policy_type_code and count the number of occurrences\npolicy_counts = policies.groupby('policy_type_code').size().reset_index(name='count')\n\n# Sort the dataframe by policy_type_code in descending order\npolicy_counts = policy_counts.sort_values('policy_type_code', ascending=False)\n\n# Create a bar plot\nplt.bar(policy_counts['policy_type_code'], policy_counts['count'])\nplt.xlabel('Policy Type Code')\nplt.ylabel('Count')\nplt.title('Number of Policies by Policy Type Code')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "What is the count of missions launched after 1928 for each ship, represented by a line chart?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmission = pd.read_sql(\"SELECT * FROM mission\", conn)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nmission.columns = mission.columns.str.lower()\nship.columns = ship.columns.str.lower()\n\n# Merge mission and ship tables\nmerged_df = pd.merge(mission, ship, on='ship_id')\n\n# Filter data for launched_year > 1928\nfiltered_df = merged_df[merged_df['launched_year'] > 1928]\n\n# Group by ship name and launched_year, and count the number of records\ngrouped_df = filtered_df.groupby(['name', 'launched_year']).size().reset_index(name='count')\n\n# Plot the line chart\nplt.plot(grouped_df['launched_year'], grouped_df['count'])\nplt.xlabel('Launched Year')\nplt.ylabel('Count')\nplt.title('Number of Missions by Ship and Launched Year')\nplt.show()"
  },
  {
    "db_id": "company_1",
    "question": "Find the number of employees of each gender whose salary is lower than 50000 Visualize by bar chart, could you rank in descending by the Sex?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the employee table\nemployee_df = pd.read_sql(\"SELECT * FROM employee\", conn)\n\n# Convert column names to lowercase\nemployee_df.columns = employee_df.columns.str.lower()\n\n# Filter the data where salary is less than 50000\nfiltered_df = employee_df[employee_df['salary'] < 50000]\n\n# Group the data by sex and count the number of occurrences\ngrouped_df = filtered_df.groupby('sex').size().reset_index(name='count')\n\n# Sort the data by sex in descending order\nsorted_df = grouped_df.sort_values('sex', ascending=False)\n\n# Create a bar plot\nplt.bar(sorted_df['sex'], sorted_df['count'])\nplt.xlabel('Sex')\nplt.ylabel('Count')\nplt.title('Number of Employees with Salary < 50000 by Sex')\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Bar chart x axis participant type code y axis the number of participant type code",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nParticipants = pd.read_sql(\"SELECT * FROM Participants\", conn)\nParticipants.columns = Participants.columns.str.lower()\n\n# Grouping the data by participant_type_code and counting the occurrences\ngrouped_data = Participants.groupby('participant_type_code').size()\n\n# Creating a bar plot\nplt.bar(grouped_data.index, grouped_data.values)\n\n# Adding labels and title\nplt.xlabel('Participant Type Code')\nplt.ylabel('Count')\nplt.title('Number of Participants by Type')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "entertainment_awards",
    "question": ", and order in asc by the y axis.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the artwork table\nartwork = pd.read_sql(\"SELECT * FROM artwork\", conn)\n\n# Convert column names to lowercase\nartwork.columns = artwork.columns.str.lower()\n\n# Perform the SQL query\nresult = artwork.groupby('type').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result['type'], result['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Artwork Count by Type')\nplt.show()"
  },
  {
    "db_id": "insurance_and_eClaims",
    "question": "For each policy type , return its type code and its count in the record . Visualize by bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npolicies = pd.read_sql(\"SELECT * FROM policies\", conn)\npolicies.columns = policies.columns.str.lower()\n\n# Grouping the data by policy_type_code and counting the occurrences\npolicy_counts = policies.groupby('policy_type_code').size()\n\n# Creating a bar plot\nplt.bar(policy_counts.index, policy_counts.values)\n\n# Adding labels and title\nplt.xlabel('Policy Type Code')\nplt.ylabel('Count')\nplt.title('Number of Policies by Policy Type Code')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "What is the distribution of age groups among members in the club \"Bootup Baltimore\" who are younger than 18? Show it using a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nstudent = pd.read_sql(\"SELECT * FROM student\", conn)\nclub.columns = club.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\nstudent.columns = student.columns.str.lower()\n\n# Perform the SQL query\nresult = pd.merge(club, member_of_club, on='clubid')\nresult = pd.merge(result, student, left_on='stuid', right_on='stuid')\nresult = result[result['clubname'] == 'Bootup Baltimore']\n\n# Group by age and count the number of students in each age group\nresult['age_group'] = result['age'].apply(lambda x: 'younger than 18' if x < 18 else '18 or older')\nresult = result.groupby('age_group').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(result['count'], labels=result['age_group'], autopct='%1.1f%%')\nplt.title('Age Group Distribution')\nplt.show()"
  },
  {
    "db_id": "icfp_1",
    "question": "How many authors are associated with each paper whose authors are from the institution \"Indiana University\" in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npapers = pd.read_sql(\"SELECT * FROM papers\", conn)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\ninst = pd.read_sql(\"SELECT * FROM inst\", conn)\npapers.columns = papers.columns.str.lower()\nauthorship.columns = authorship.columns.str.lower()\ninst.columns = inst.columns.str.lower()\n\n# Join tables\nmerged_data = pd.merge(papers, authorship, on='paperid')\nmerged_data = pd.merge(merged_data, inst, on='instid')\n\n# Filter data\nfiltered_data = merged_data[merged_data['name'] == 'Indiana University']\n\n# Group by title and count\ngrouped_data = filtered_data.groupby('title').size().reset_index(name='count')\n\n# Plot bar chart\nplt.bar(grouped_data['title'], grouped_data['count'])\nplt.xlabel('Title')\nplt.ylabel('Count')\nplt.title('Number of Papers by Title')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "What is the proportion of positions of pilots?",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the pilot table\npilot_df = pd.read_sql(\"SELECT * FROM pilot\", conn)\n\n# Convert column names to lowercase\npilot_df.columns = pilot_df.columns.str.lower()\n\n# Perform the SQL query\nposition_counts = pilot_df.groupby('position').size()\n\n# Create a pie chart\nplt.pie(position_counts, labels=position_counts.index, autopct='%1.1f%%')\nplt.title('Position Distribution')\nplt.show()"
  },
  {
    "db_id": "twitter_1",
    "question": "How many users are followed by either Mary or Susan, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nuser_profiles = pd.read_sql(\"SELECT * FROM user_profiles\", conn)\nfollows = pd.read_sql(\"SELECT * FROM follows\", conn)\nuser_profiles.columns = user_profiles.columns.str.lower()\nfollows.columns = follows.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(user_profiles, follows, left_on='uid', right_on='f2')\n\n# Filter rows\nfiltered_df = merged_df[(merged_df['name'] == 'Mary') | (merged_df['name'] == 'Susan')]\n\n# Group by and count\ngrouped_df = filtered_df.groupby('f1').size().reset_index(name='count')\n\n# Plot bar chart\nplt.bar(grouped_df['f1'], grouped_df['count'])\nplt.xlabel('f1')\nplt.ylabel('Count')\nplt.title('Count of f1 for mary and susan')\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "A bar chart about what are the different software platforms for devices, and how many devices have each?, and could you display by the x-axis in desc?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the device table\ndevice_df = pd.read_sql(\"SELECT * FROM device\", conn)\n\n# Convert column names to lowercase\ndevice_df.columns = device_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = device_df.groupby('software_platform').size().reset_index(name='count')\nresult_df = result_df.sort_values('software_platform', ascending=False)\n\n# Generate the bar plot\nplt.bar(result_df['software_platform'], result_df['count'])\nplt.xlabel('Software Platform')\nplt.ylabel('Count')\nplt.title('Number of Devices by Software Platform')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "question": "How many employees does each role have? Plot a bar chart listing role id and number of employees, and sort by the y-axis from low to high.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ROLES table\nroles_df = pd.read_sql(\"SELECT * FROM ROLES\", conn)\nroles_df.columns = map(str.lower, roles_df.columns)\n\n# Read the Employees table\nemployees_df = pd.read_sql(\"SELECT * FROM Employees\", conn)\nemployees_df.columns = map(str.lower, employees_df.columns)\n\n# Merge the ROLES and Employees tables on role_code\nmerged_df = pd.merge(roles_df, employees_df, on=\"role_code\")\n\n# Group by role_code and count the number of occurrences\ngrouped_df = merged_df.groupby(\"role_code\").size().reset_index(name=\"count\")\n\n# Sort the dataframe by count in ascending order\nsorted_df = grouped_df.sort_values(\"count\")\n\n# Plot the bar chart\nplt.bar(sorted_df[\"role_code\"], sorted_df[\"count\"])\nplt.xlabel(\"Role Code\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Employees per Role Code\")\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "Show me a pie chart for what are the different nationalities of pilots? Show each nationality and the number of pilots of each nationality.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the pilot table\npilot_df = pd.read_sql(\"SELECT * FROM pilot\", conn)\n\n# Convert column names to lowercase\npilot_df.columns = pilot_df.columns.str.lower()\n\n# Perform the SQL query\nnationality_count = pilot_df.groupby('nationality').size()\n\n# Plot the pie chart\nplt.pie(nationality_count, labels=nationality_count.index, autopct='%1.1f%%')\nplt.title('Nationality Distribution of Pilots')\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "Who is the wrestler with the longest tenure in the elimination team, represented by a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nelimination = pd.read_sql(\"SELECT * FROM elimination\", conn)\nwrestler = pd.read_sql(\"SELECT * FROM wrestler\", conn)\nelimination.columns = elimination.columns.str.lower()\nwrestler.columns = wrestler.columns.str.lower()\n\n# Perform the join operation\nresult = pd.merge(elimination, wrestler, on='wrestler_id')\n\n# Group by wrestler name and calculate the maximum days held\ngrouped = result.groupby('name')['days_held'].max().reset_index()\n\n# Sort the result by maximum days held in descending order\nsorted_result = grouped.sort_values('days_held', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_result['name'], sorted_result['days_held'])\nplt.xlabel('Wrestler Name')\nplt.ylabel('Maximum Days Held')\nplt.title('Maximum Days Held by Wrestler')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Create a bar chart showing the total number across city",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstation.columns = station.columns.str.lower()\n\n# Group by city and count the number of rows\ncity_counts = station.groupby('city').size().reset_index(name='count')\n\n# Create a bar plot\nplt.bar(city_counts['city'], city_counts['count'])\nplt.xlabel('City')\nplt.ylabel('Count')\nplt.title('Number of Stations in Each City')\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "Can you create a line chart displaying the count and id of each product in all the orders?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\norder_items = pd.read_sql(\"SELECT * FROM order_items\", conn)\nproducts = pd.read_sql(\"SELECT * FROM products\", conn)\norders.columns = orders.columns.str.lower()\norder_items.columns = order_items.columns.str.lower()\nproducts.columns = products.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(orders, order_items, on='order_id')\nmerged_df = pd.merge(merged_df, products, on='product_id')\n\n# Group by product_id and count\ngrouped_df = merged_df.groupby('product_id').size().reset_index(name='count')\n\n# Sort by product_id\nsorted_df = grouped_df.sort_values('product_id')\n\n# Plot line chart\nplt.plot(sorted_df['product_id'], sorted_df['count'])\nplt.xlabel('Product ID')\nplt.ylabel('Count')\nplt.title('Count of Orders by Product ID')\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "What is the pie chart representation of the percentage of members in each club from the city with code \"BAL\"?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstudent = pd.read_sql(\"SELECT * FROM student\", conn)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nstudent = pd.read_sql(\"SELECT * FROM student\", conn)\nstudent.columns = student.columns.str.lower()\nclub.columns = club.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\nstudent.columns = student.columns.str.lower()\n\n# Perform the SQL query\nresult = pd.merge(pd.merge(club, member_of_club, on='clubid'), student, on='stuid')\nresult = result[result['city_code'] == 'BAL']\nresult = result.groupby('clubname').size().reset_index(name='count')\n\n# Calculate the percentage\ntotal_students = student[student['city_code'] == 'BAL'].shape[0]\nresult['percentage'] = (result['count'] / total_students) * 100\n\n# Plot the pie chart\nplt.pie(result['percentage'], labels=result['clubname'], autopct='%1.1f%%')\nplt.title('Percentage of Students in Each Club (City: bal)')\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "Bar chart of the number of position from each position",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot.columns = pilot.columns.str.lower()\n\n# Group by position and count the number of occurrences\nposition_counts = pilot.groupby('position').size().reset_index(name='count')\n\n# Create a bar plot\nplt.bar(position_counts['position'], position_counts['count'])\nplt.xlabel('Position')\nplt.ylabel('Count')\nplt.title('Number of Pilots by Position')\nplt.show()"
  },
  {
    "db_id": "entertainment_awards",
    "question": "Show me a bar chart displaying the count of nominations for each artwork.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nnomination = pd.read_sql(\"SELECT * FROM nomination\", conn)\nartwork = pd.read_sql(\"SELECT * FROM artwork\", conn)\nnomination.columns = nomination.columns.str.lower()\nartwork.columns = artwork.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(nomination, artwork, on='artwork_id')\n\n# Group by name and count the occurrences\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['name'], grouped_df['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Artwork Nomination Count by Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "Show names of technicians who are assigned to repair machines with value point more than 70, and count them by a bar chart, and I want to display from high to low by the X.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the repair_assignment table\nrepair_assignment = pd.read_sql(\"SELECT * FROM repair_assignment\", conn)\nrepair_assignment.columns = map(str.lower, repair_assignment.columns)\n\n# Read the machine table\nmachine = pd.read_sql(\"SELECT * FROM machine\", conn)\nmachine.columns = map(str.lower, machine.columns)\n\n# Read the technician table\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\ntechnician.columns = map(str.lower, technician.columns)\n\n# Perform the join operation\nmerged_data = pd.merge(repair_assignment, machine, on=\"machine_id\")\nmerged_data = pd.merge(merged_data, technician, on=\"technician_id\")\n\n# Filter the data based on the condition\nfiltered_data = merged_data[merged_data[\"value_points\"] > 70]\n\n# Group the data by Name and count the occurrences\ngrouped_data = filtered_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# Sort the data by Name in descending order\nsorted_data = grouped_data.sort_values(\"name\", ascending=False)\n\n# Generate the bar plot\nplt.bar(sorted_data[\"name\"], sorted_data[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Repairs by Name\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "List the distinct payment method codes with the number of orders mad Show bar chart , and display X in asc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nINVOICES = pd.read_sql(\"SELECT * FROM INVOICES\", conn)\nINVOICES.columns = INVOICES.columns.str.lower()\n\n# Grouping the data by payment_method_code and counting the number of occurrences\npayment_counts = INVOICES.groupby('payment_method_code').size().reset_index(name='count')\n\n# Sorting the data by payment_method_code in ascending order\npayment_counts = payment_counts.sort_values('payment_method_code')\n\n# Creating the bar plot\nplt.bar(payment_counts['payment_method_code'], payment_counts['count'])\nplt.xlabel('Payment Method Code')\nplt.ylabel('Count')\nplt.title('Number of Invoices by Payment Method Code')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "question": "Show me a bar chart displaying the count of documents mailed to each address.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nAddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\nDocuments_Mailed = pd.read_sql(\"SELECT * FROM Documents_Mailed\", conn)\nAddresses.columns = Addresses.columns.str.lower()\nDocuments_Mailed.columns = Documents_Mailed.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Addresses, Documents_Mailed, left_on='address_id', right_on='mailed_to_address_id')\n\n# Group by address_details and count the number of occurrences\ngrouped_df = merged_df.groupby('address_details').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['address_details'], grouped_df['count'])\nplt.xlabel('Address Details')\nplt.ylabel('Count')\nplt.title('Number of Documents Mailed by Address Details')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "For events that have more than one participant, count the event details for a bar chart, sort by the y axis in desc.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the EVENTS table\nevents = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\nevents.columns = map(str.lower, events.columns)\n\n# Read the Participants_in_Events table\nparticipants = pd.read_sql(\"SELECT * FROM Participants_in_Events\", conn)\nparticipants.columns = map(str.lower, participants.columns)\n\n# Merge the EVENTS and Participants_in_Events tables on Event_ID\nmerged_data = pd.merge(events, participants, on=\"event_id\")\n\n# Perform the SQL query and group by Event_Details\nquery_result = merged_data.groupby(\"event_details\").size().reset_index(name=\"count\")\nquery_result = query_result.sort_values(by=\"count\", ascending=False)\n\n# Plot the bar chart\nplt.bar(query_result[\"event_details\"], query_result[\"count\"])\nplt.xlabel(\"Event Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Event Details vs Count\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "Show different teams in eliminations and the number of eliminations from each team by a pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nelimination = pd.read_sql(\"SELECT * FROM elimination\", conn)\nelimination.columns = elimination.columns.str.lower()\n\n# Grouping the data by team and counting the occurrences\nteam_counts = elimination.groupby('team').size()\n\n# Creating a pie chart\nplt.pie(team_counts, labels=team_counts.index, autopct='%1.1f%%')\nplt.title('Team Distribution')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Compute the total the number of location code across location code as a pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDocument_locations = pd.read_sql(\"SELECT * FROM Document_locations\", conn)\nDocument_locations.columns = Document_locations.columns.str.lower()\n\n# Group by location_code and count the occurrences\nlocation_counts = Document_locations.groupby('location_code').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(location_counts['count'], labels=location_counts['location_code'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "twitter_1",
    "question": "How can I visualize the total number of followers for Mary and Susan using a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nuser_profiles = pd.read_sql(\"SELECT * FROM user_profiles\", conn)\nfollows = pd.read_sql(\"SELECT * FROM follows\", conn)\nuser_profiles.columns = user_profiles.columns.str.lower()\nfollows.columns = follows.columns.str.lower()\n\n# Merge user_profiles and follows tables\nmerged_df = pd.merge(user_profiles, follows, left_on='uid', right_on='f2')\n\n# Filter rows where name is 'mary' or 'susan'\nfiltered_df = merged_df[merged_df['name'].isin(['Mary', 'Susan'])]\n\n# Group by name and count the number of occurrences\ngrouped_df = filtered_df.groupby('name').size().reset_index(name='count')\n\n# Create a pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['name'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Return the number of venues of each workshop in a bar chart , display by the X in desc please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nworkshop = pd.read_sql(\"SELECT * FROM workshop\", conn)\nworkshop.columns = workshop.columns.str.lower()\n\n# Grouping the data by venue and counting the occurrences\nvenue_counts = workshop.groupby('venue').size().reset_index(name='count')\n\n# Sorting the data by venue in descending order\nvenue_counts = venue_counts.sort_values('venue', ascending=False)\n\n# Creating the bar plot\nplt.bar(venue_counts['venue'], venue_counts['count'])\nplt.xlabel('Venue')\nplt.ylabel('Count')\nplt.title('Workshop Venues')\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "Who is the CTO of \"Hopkins Student Enterprises\" and display their first name and last name in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nstudent = pd.read_sql(\"SELECT * FROM student\", conn)\nclub.columns = club.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\nstudent.columns = student.columns.str.lower()\n\n# Join tables\ndf = pd.merge(club, member_of_club, on='clubid')\ndf = pd.merge(df, student, on='stuid')\n\n# Filter data\ndf_filtered = df[(df['clubname'] == 'Hopkins Student Enterprises') & (df['position'] == 'CTO')]\n\n# Create bar plot\nplt.bar(df_filtered['fname'], df_filtered['lname'])\nplt.xlabel('First Name')\nplt.ylabel('Last Name')\nplt.title('Members of Hopkins Student Enterprises with CTO Position')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "Show the name for regions and the number of storms for each region by a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the region table\nregion = pd.read_sql(\"SELECT * FROM region\", conn)\nregion.columns = map(str.lower, region.columns)\n\n# Read the affected_region table\naffected_region = pd.read_sql(\"SELECT * FROM affected_region\", conn)\naffected_region.columns = map(str.lower, affected_region.columns)\n\n# Merge the region and affected_region tables on region_id\nmerged_data = pd.merge(region, affected_region, on='region_id')\n\n# Group by region_name and count the number of occurrences\ngrouped_data = merged_data.groupby('region_name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_data['region_name'], grouped_data['count'])\nplt.xlabel('Region Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Region')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "question": "Show a bar chart about how many employees does each role have?, display x axis from high to low order please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ROLES table\nroles_df = pd.read_sql(\"SELECT * FROM ROLES\", conn)\nroles_df.columns = map(str.lower, roles_df.columns)\n\n# Read the Employees table\nemployees_df = pd.read_sql(\"SELECT * FROM Employees\", conn)\nemployees_df.columns = map(str.lower, employees_df.columns)\n\n# Merge the ROLES and Employees tables on role_code\nmerged_df = pd.merge(roles_df, employees_df, on=\"role_code\")\n\n# Group by role_description and count the number of occurrences\ngrouped_df = merged_df.groupby(\"role_description\").size().reset_index(name=\"count\")\n\n# Sort by role_description in descending order\nsorted_df = grouped_df.sort_values(\"role_description\", ascending=False)\n\n# Create a bar plot\nplt.bar(sorted_df[\"role_description\"], sorted_df[\"count\"])\nplt.xlabel(\"Role Description\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Employees by Role Description\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "What is the line chart displaying the names of technicians and their corresponding quality ranks, ordered by the technician's name?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nrepair_assignment = pd.read_sql(\"SELECT * FROM repair_assignment\", conn)\nmachine = pd.read_sql(\"SELECT * FROM machine\", conn)\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\nrepair_assignment.columns = repair_assignment.columns.str.lower()\nmachine.columns = machine.columns.str.lower()\ntechnician.columns = technician.columns.str.lower()\n\n# Perform the SQL query\nresult = pd.merge(pd.merge(repair_assignment, machine, on='machine_id'), technician, on='technician_id')\nresult = result[['name', 'quality_rank']].sort_values('name')\n\n# Plot the line chart\nplt.plot(result['name'], result['quality_rank'])\nplt.xlabel('Technician Name')\nplt.ylabel('Quality Rank')\nplt.title('Technician Quality Rank')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "For each citizenship , how many singers are from that country . Show the proportion .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Grouping the data by citizenship and counting the number of singers\nsinger_grouped = singer.groupby('citizenship').size().reset_index(name='count')\n\n# Creating a pie chart\nplt.pie(singer_grouped['count'], labels=singer_grouped['citizenship'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Displaying the pie chart\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Show me start_station_id by start station name in a bar , and could you rank bars in ascending order ?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\ntrip.columns = trip.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called 'trip'\n\n# Perform the SQL query\nresult = trip[['start_station_name', 'start_station_id']].sort_values('start_station_name')\n\n# Create the bar plot\nplt.bar(result['start_station_name'], result['start_station_id'])\nplt.xlabel('Start Station Name')\nplt.ylabel('Start Station ID')\nplt.title('Start Station ID by Start Station Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "How many customers are there for each payment method who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmailshot_customers = pd.read_sql(\"SELECT * FROM mailshot_customers\", conn)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\nmailshot_customers = pd.read_sql(\"SELECT * FROM mailshot_customers\", conn)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\nmailshot_customers.columns = mailshot_customers.columns.str.lower()\ncustomers.columns = customers.columns.str.lower()\nmailshot_customers.columns = mailshot_customers.columns.str.lower()\ncustomers.columns = customers.columns.str.lower()\n\n# Perform the SQL query using pandas merge\ndf = pd.merge(mailshot_customers[mailshot_customers['outcome_code'] == 'Order'], customers, on='customer_id')\ndf = df[['customer_name', 'payment_method']]\ndf2 = pd.merge(mailshot_customers[mailshot_customers['outcome_code'] == 'No Response'], customers, on='customer_id')\ndf2 = df2[['customer_name', 'payment_method']]\ndf = pd.merge(df, df2, on=['customer_name', 'payment_method'])\n\n# Group by payment_method and count the occurrences\ndf_grouped = df.groupby('payment_method').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(df_grouped['payment_method'], df_grouped['count'])\nplt.xlabel('Payment Method')\nplt.ylabel('Count')\nplt.title('Count of Customers by Payment Method')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "What is the count of stores in each state or county for the stores with marketing region code \"CA\" shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nAddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\nStores = pd.read_sql(\"SELECT * FROM Stores\", conn)\nAddresses.columns = Addresses.columns.str.lower()\nStores.columns = Stores.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(Addresses, Stores, on='address_id')\n\n# Filtering the data for marketing_region_code = 'CA'\nfiltered_df = merged_df[merged_df['marketing_region_code'] == 'CA']\n\n# Grouping by state_county and counting the occurrences\ngrouped_df = filtered_df.groupby('state_county').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nsorted_df = grouped_df.sort_values('count')\n\n# Plotting the bar chart\nplt.bar(sorted_df['state_county'], sorted_df['count'])\nplt.xlabel('State County')\nplt.ylabel('Count')\nplt.title('Count of Addresses by State County in CA')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "Can you create a bar chart displaying the section titles of the document titled \"David CV\"?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\ndocuments = pd.read_sql(\"SELECT * FROM documents\", conn)\ndocument_sections = pd.read_sql(\"SELECT * FROM document_sections\", conn)\ndocuments.columns = documents.columns.str.lower()\ndocument_sections.columns = document_sections.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(documents, document_sections, on='document_code')\n\n# Filtering the data for document_name = 'David CV'\nfiltered_df = merged_df[merged_df['document_name'] == 'David CV']\n\n# Grouping by section_title and counting the occurrences\ngrouped_df = filtered_df.groupby('section_title').size().reset_index(name='count')\n\n# Creating the bar plot\nplt.bar(grouped_df['section_title'], grouped_df['count'])\nplt.xlabel('Section Title')\nplt.ylabel('Count')\nplt.title('Section Title Count for \"David CV\"')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "Display a scatter chart for how many games has each stadium held?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the stadium and game tables\nstadium = pd.read_sql(\"SELECT * FROM stadium\", conn)\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\n\n# Convert column names to lowercase\nstadium.columns = stadium.columns.str.lower()\ngame.columns = game.columns.str.lower()\n\n# Merge the stadium and game tables on the stadium_id column\nmerged_data = pd.merge(stadium, game, left_on='id', right_on='stadium_id')\n\n# Group by stadium_id and count the number of rows\ngrouped_data = merged_data.groupby('stadium_id').size().reset_index(name='count')\n\n# Scatter plot\nplt.scatter(grouped_data['stadium_id'], grouped_data['count'])\nplt.xlabel('Stadium ID')\nplt.ylabel('Count')\nplt.title('Number of Games per Stadium')\nplt.show()\n"
  },
  {
    "db_id": "hospital_1",
    "question": "What is the count of procedures with a cost less than 5000 that physician John Wen was trained in, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nprocedures = pd.read_sql(\"SELECT * FROM procedures\", conn)\nphysician = pd.read_sql(\"SELECT * FROM physician\", conn)\ntrained_in = pd.read_sql(\"SELECT * FROM trained_in\", conn)\nprocedures = pd.read_sql(\"SELECT * FROM procedures\", conn)\nprocedures.columns = procedures.columns.str.lower()\nphysician.columns = physician.columns.str.lower()\ntrained_in.columns = trained_in.columns.str.lower()\nprocedures.columns = procedures.columns.str.lower()\n\n# Perform the SQL query\nresult = procedures[procedures['cost'] < 5000]\nresult = result[result['name'].isin(trained_in[trained_in['physician'].isin(physician[physician['name'] == 'John Wen']['employeeid'])]['treatment'])]\nresult = result.groupby('name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(result['name'], result['count'])\nplt.xlabel('Procedure Name')\nplt.ylabel('Count')\nplt.title('Number of Procedures with Cost < $5000 for John Wen')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "entertainment_awards",
    "question": "Show the total number from each type",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartwork = pd.read_sql(\"SELECT * FROM artwork\", conn)\nartwork.columns = artwork.columns.str.lower()\n\n# Group the artwork by type and count the number of occurrences\nartwork_counts = artwork.groupby('type').size().reset_index(name='count')\n\n# Create a bar plot\nplt.bar(artwork_counts['type'], artwork_counts['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Artwork Count by Type')\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Bar chart x axis event details y axis how many event details , and I want to sort by the X-axis in descending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEVENTS = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\nEVENTS.columns = EVENTS.columns.str.lower()\n\n# Group by event_details and count the occurrences\nevent_counts = EVENTS.groupby('event_details').size().reset_index(name='count')\n\n# Sort the event_details in descending order\nevent_counts = event_counts.sort_values('event_details', ascending=False)\n\n# Create a bar plot\nplt.bar(event_counts['event_details'], event_counts['count'])\nplt.xlabel('Event Details')\nplt.ylabel('Count')\nplt.title('Event Details Count')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "what are the event details of the services that have the type code 'Marriage', and count them by a bar chart",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the EVENTS table\nevents = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\n\n# Read the Services table\nservices = pd.read_sql(\"SELECT * FROM Services\", conn)\n\n# Convert column names to lowercase\nevents.columns = events.columns.str.lower()\nservices.columns = services.columns.str.lower()\n\n# Merge the EVENTS and Services tables on Service_ID\nmerged_data = pd.merge(events, services, on=\"service_id\")\n\n# Filter the merged data for Service_Type_Code = 'Marriage'\nfiltered_data = merged_data[merged_data[\"service_type_code\"] == \"Marriage\"]\n\n# Group by Event_Details and count the occurrences\ngrouped_data = filtered_data.groupby(\"event_details\").size().reset_index(name=\"count\")\n\n# Plot the bar chart\nplt.bar(grouped_data[\"event_details\"], grouped_data[\"count\"])\nplt.xlabel(\"Event Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Events by Event Details\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "Show the number of teams in elimination in a bar chart , could you sort by the x-axis from high to low ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nelimination = pd.read_sql(\"SELECT * FROM elimination\", conn)\nelimination.columns = elimination.columns.str.lower()\n\n# Group by team and count the occurrences\nteam_counts = elimination.groupby('team').size().reset_index(name='count')\n\n# Sort the teams in descending order\nteam_counts = team_counts.sort_values('team', ascending=False)\n\n# Create the bar plot\nplt.bar(team_counts['team'], team_counts['count'])\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Team Counts')\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "What is the count of distinct product ids ordered for each date between 1975-01-01 and 1976-01-01, visualized as a line chart?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\norder_items = pd.read_sql(\"SELECT * FROM order_items\", conn)\norders.columns = orders.columns.str.lower()\norder_items.columns = order_items.columns.str.lower()\n\n# Merge orders and order_items tables\nmerged_df = pd.merge(orders, order_items, on='order_id')\n\n# Filter data for the specified date range\nfiltered_df = merged_df[(merged_df['date_order_placed'] >= '1975-01-01') & (merged_df['date_order_placed'] <= '1976-01-01')]\n\n# Group by date_order_placed and count distinct product_id\ngrouped_df = filtered_df.groupby('date_order_placed')['product_id'].nunique().reset_index()\n\n# Plot the line chart\nplt.plot(grouped_df['date_order_placed'], grouped_df['product_id'])\nplt.xlabel('Date')\nplt.ylabel('Distinct Product Count')\nplt.title('Distinct Product Count by Date')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "What is the total number of different nationalities of all ships ? Give me a bar graph , and list in asc by the X please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Grouping the data by nationality and counting the occurrences\nnationality_count = ship.groupby('nationality').size().reset_index(name='count')\n\n# Sorting the data by nationality in ascending order\nnationality_count = nationality_count.sort_values('nationality')\n\n# Creating the bar plot\nplt.bar(nationality_count['nationality'], nationality_count['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Ships by Nationality')\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "What is the distribution of devices for each carrier in stock at each shop, represented by a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstock = pd.read_sql(\"SELECT * FROM stock\", conn)\ndevice = pd.read_sql(\"SELECT * FROM device\", conn)\nshop = pd.read_sql(\"SELECT * FROM shop\", conn)\nstock.columns = stock.columns.str.lower()\ndevice.columns = device.columns.str.lower()\nshop.columns = shop.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(stock, device, on='device_id')\nmerged_df = pd.merge(merged_df, shop, on='shop_id')\n\n# Group by carrier and count\ncarrier_count = merged_df.groupby('carrier').size().reset_index(name='count')\n\n# Plot pie chart\nplt.pie(carrier_count['count'], labels=carrier_count['carrier'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show the outcome code of mailshots along with the number of mailshots in each outcome code in a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the mailshot_customers table\nmailshot_customers = pd.read_sql(\"SELECT * FROM mailshot_customers\", conn)\n\n# Convert column names to lowercase\nmailshot_customers.columns = map(str.lower, mailshot_customers.columns)\n\n# Perform the SQL query\noutcome_counts = mailshot_customers.groupby('outcome_code').size().reset_index(name='count')\n\n# Generate the bar chart\nplt.bar(outcome_counts['outcome_code'], outcome_counts['count'])\nplt.xlabel('Outcome Code')\nplt.ylabel('Count')\nplt.title('Mailshot Customers Outcome')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "How many services for each service type description? Use a pie chart to show it.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Ref_Service_Types table\nref_service_types = pd.read_sql(\"SELECT * FROM Ref_Service_Types\", conn)\n\n# Read the Services table\nservices = pd.read_sql(\"SELECT * FROM Services\", conn)\n\n# Convert column names to lowercase\nref_service_types.columns = ref_service_types.columns.str.lower()\nservices.columns = services.columns.str.lower()\n\n# merge the two tables on service_type_code\nmerged_data = pd.merge(ref_service_types, services, on=\"service_type_code\")\n\n# group by service_type_code and count the number of occurrences\ngrouped_data = merged_data.groupby(\"service_type_code\").size()\n\n# plot the pie chart\nplt.pie(grouped_data, labels=grouped_data.index, autopct=\"%1.1f%%\")\nplt.title(\"Service Type Distribution\")\nplt.show()\n"
  },
  {
    "db_id": "bike_1",
    "question": "What is the scatter plot of the count of trips that did not end in San Francisco city, grouped by the duration of the trips?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\ntrip.columns = trip.columns.str.lower()\nstation.columns = station.columns.str.lower()\n\n# Joining trip and station tables\nmerged_df = pd.merge(trip, station, left_on='end_station_id', right_on='id')\n\n# Filtering out rows where city is not \"san francisco\"\nfiltered_df = merged_df[merged_df['city'] != 'san francisco']\n\n# Grouping by duration and counting the number of occurrences\ngrouped_df = filtered_df.groupby('duration').size().reset_index(name='count')\n\n# Creating scatter plot\nplt.scatter(grouped_df['duration'], grouped_df['count'])\nplt.xlabel('Duration')\nplt.ylabel('Count')\nplt.title('Scatter Plot of Duration vs Count')\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship , and rank by the bars from low to high .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Group by citizenship and calculate the maximum net worth\nmax_net_worth = singer.groupby('citizenship')['net_worth_millions'].max()\n\n# Sort the data by citizenship in ascending order\nmax_net_worth = max_net_worth.sort_index()\n\n# Create a bar plot\nplt.bar(max_net_worth.index, max_net_worth.values)\n\n# Set the labels and title\nplt.xlabel('Citizenship')\nplt.ylabel('Max Net Worth (Millions)')\nplt.title('Max Net Worth by Citizenship')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "How many patients is each nurse currently assisting in undergoing treatment, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nundergoes = pd.read_sql(\"SELECT * FROM undergoes\", conn)\nnurse = pd.read_sql(\"SELECT * FROM nurse\", conn)\nundergoes.columns = undergoes.columns.str.lower()\nnurse.columns = nurse.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(undergoes, nurse, left_on='assistingnurse', right_on='employeeid')\n\n# Group by nurse name and count the number of occurrences\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['name'], grouped_df['count'])\nplt.xlabel('Nurse Name')\nplt.ylabel('Count')\nplt.title('Number of Cases Assisted by Each Nurse')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "Which customers have purchased the product \"food\" at least once, and what is the frequency of their purchases? Display the results using a bar chart.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\norder_items = pd.read_sql(\"SELECT * FROM order_items\", conn)\nproducts = pd.read_sql(\"SELECT * FROM products\", conn)\ncustomers.columns = customers.columns.str.lower()\norders.columns = orders.columns.str.lower()\norder_items.columns = order_items.columns.str.lower()\nproducts.columns = products.columns.str.lower()\n\n# Join tables\ndf = pd.merge(customers, orders, on='customer_id')\ndf = pd.merge(df, order_items, on='order_id')\ndf = pd.merge(df, products, on='product_id')\n\n# Filter data\ndf = df[df['product_name'] == 'food']\n\n# Group by customer_name and count\ndf = df.groupby('customer_name').size().reset_index(name='count')\n\n# Filter customers with count >= 1\ndf = df[df['count'] >= 1]\n\n# Sort by customer_name\ndf = df.sort_values('customer_name')\n\n# Plot bar chart\nplt.bar(df['customer_name'], df['count'])\nplt.xlabel('Customer Name')\nplt.ylabel('Count')\nplt.title('Number of Orders for Customers who purchased \"food\"')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "company_office",
    "question": "compare the number of companies from different industries using a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Companies table\ncompanies = pd.read_sql(\"SELECT * FROM Companies\", conn)\n\n# Convert column names to lowercase\ncompanies.columns = companies.columns.str.lower()\n\n# Perform the SQL query\nindustry_counts = companies.groupby('industry').size()\n\n# Plot the pie chart\nplt.pie(industry_counts, labels=industry_counts.index, autopct='%1.1f%%')\nplt.title('Industry Distribution')\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Bar chart x axis event details y axis how many event details , rank in ascending by the bars please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEVENTS = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\nEVENTS.columns = EVENTS.columns.str.lower()\n\n# Group by event_details and count the occurrences\nevent_counts = EVENTS.groupby('event_details').size().reset_index(name='count')\n\n# Sort the event_details in ascending order\nevent_counts = event_counts.sort_values('event_details')\n\n# Create a bar plot\nplt.bar(event_counts['event_details'], event_counts['count'])\nplt.xlabel('Event Details')\nplt.ylabel('Count')\nplt.title('Event Details Count')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "A pie chart shows the proportion of the number of locations of the wrestlers.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the wrestler table\nwrestler_df = pd.read_sql(\"SELECT * FROM wrestler\", conn)\n\n# Convert column names to lowercase\nwrestler_df.columns = wrestler_df.columns.str.lower()\n\n# Perform the SQL query\nlocation_count = wrestler_df.groupby('location').size()\n\n# Plot the pie chart\nplt.pie(location_count, labels=location_count.index, autopct='%1.1f%%')\nplt.title('Wrestler Locations')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Can you create a pie chart to display the distribution of stores across different marketing regions?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nStores = pd.read_sql(\"SELECT * FROM Stores\", conn)\nMarketing_Regions = pd.read_sql(\"SELECT * FROM Marketing_Regions\", conn)\nStores.columns = Stores.columns.str.lower()\nMarketing_Regions.columns = Marketing_Regions.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Stores, Marketing_Regions, on='marketing_region_code')\n\n# Group by store_name and count the number of occurrences\ngrouped_df = merged_df.groupby('store_name').size().reset_index(name='count')\n\n# Create a pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['store_name'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Display the chart\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show different citizenship of singers and the number of singers of each citizenship in a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Grouping the singer dataframe by citizenship and counting the number of occurrences\ncitizenship_count = singer.groupby('citizenship').size().reset_index(name='count')\n\n# Creating a bar plot\nplt.bar(citizenship_count['citizenship'], citizenship_count['count'])\nplt.xlabel('Citizenship')\nplt.ylabel('Count')\nplt.title('Number of Singers by Citizenship')\nplt.show()"
  },
  {
    "db_id": "gymnast",
    "question": "Can you create a pie chart displaying the frequency of each gymnast's name in the table, sorted in ascending order of their heights?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngymnast = pd.read_sql(\"SELECT * FROM gymnast\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\ngymnast.columns = gymnast.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(gymnast, people, left_on='gymnast_id', right_on='people_id')\n\n# Group by name and count the number of occurrences\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Sort by height in ascending order\nsorted_df = grouped_df.sort_values('count', ascending=True)\n\n# Plot the pie chart\nplt.pie(sorted_df['count'], labels=sorted_df['name'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "For each submission, group its acceptance result and count them Visualize them in a bar chart, rank from high to low by the x axis.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the acceptance table\nacceptance = pd.read_sql(\"SELECT * FROM acceptance\", conn)\n\n# Convert column names to lowercase\nacceptance.columns = acceptance.columns.str.lower()\n\n# Perform the SQL query\nresult_counts = acceptance.groupby('result').size().reset_index(name='count')\nresult_counts = result_counts.sort_values('result', ascending=False)\n\n# Generate the bar plot\nplt.bar(result_counts['result'], result_counts['count'])\nplt.xlabel('Result')\nplt.ylabel('Count')\nplt.title('Count of Results')\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "Show me a bar chart displaying the count of female members in the club \"Bootup Baltimore\" for each first name.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nstudent = pd.read_sql(\"SELECT * FROM student\", conn)\nclub.columns = club.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\nstudent.columns = student.columns.str.lower()\n\n# Perform the join operation\ndf = pd.merge(club, member_of_club, on='clubid')\ndf = pd.merge(df, student, on='stuid')\n\n# Filter the data\ndf = df[(df['clubname'] == 'Bootup Baltimore') & (df['sex'] == 'F')]\n\n# Group by fname and count the number of occurrences\ndf = df.groupby('fname').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(df['fname'], df['count'])\nplt.xlabel('First Name')\nplt.ylabel('Count')\nplt.title('Number of Female Students in Bootup Baltimore Club')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "What are the descriptions of the service types with product price above 100 and how many services are there for each type, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRef_Service_Types = pd.read_sql(\"SELECT * FROM Ref_Service_Types\", conn)\nServices = pd.read_sql(\"SELECT * FROM Services\", conn)\nRef_Service_Types.columns = Ref_Service_Types.columns.str.lower()\nServices.columns = Services.columns.str.lower()\n\n# Joining the tables\ndf = pd.merge(Ref_Service_Types, Services, on='service_type_code')\n\n# Filtering the data\nfiltered_df = df[df['product_price'] > 100]\n\n# Grouping and counting\ngrouped_df = filtered_df.groupby('service_type_description').size().reset_index(name='count')\n\n# Plotting the bar chart\nplt.bar(grouped_df['service_type_description'], grouped_df['count'])\nplt.xlabel('Service Type Description')\nplt.ylabel('Count')\nplt.title('Number of Services by Service Type Description')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "What are the id of each employee and the number of document destruction authorised by that employee . Visualize by scatter chart .",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nDocuments_to_be_destroyed = pd.read_sql(\"SELECT * FROM Documents_to_be_destroyed\", conn)\nDocuments_to_be_destroyed.columns = Documents_to_be_destroyed.columns.str.lower()\n\n# Group by destruction_authorised_by_employee_id and count the number of documents\ngrouped_data = Documents_to_be_destroyed.groupby('destruction_authorised_by_employee_id').size().reset_index(name='count')\n\n# Scatter plot\nplt.scatter(grouped_data['destruction_authorised_by_employee_id'], grouped_data['count'])\nplt.xlabel('Destruction Authorised by Employee ID')\nplt.ylabel('Count')\nplt.title('Number of Documents by Destruction Authorised by Employee ID')\nplt.show()"
  },
  {
    "db_id": "products_for_hire",
    "question": "Take the first name of all the good customers as the X-axis and gender of all the good customers as Y-axis in a bar chart, and order by their last name.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the customers table\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\n\n# Convert column names to lowercase\ncustomers.columns = customers.columns.str.lower()\n\n# Filter the data for good customers\ngood_customers = customers[customers[\"good_or_bad_customer\"] == \"good\"]\n\n# Sort the data by last name\ngood_customers = good_customers.sort_values(\"last_name\")\n\n# Create a bar plot\nplt.bar(good_customers[\"last_name\"], good_customers[\"gender_mf\"])\nplt.xlabel(\"Last Name\")\nplt.ylabel(\"Gender\")\nplt.title(\"Good Customers by Last Name\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Give me a bar chart to show the number of event details of events that have more than one participant, and list from high to low by the total number.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the EVENTS table\nevents = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\nevents.columns = map(str.lower, events.columns)\n\n# Read the Participants_in_Events table\nparticipants = pd.read_sql(\"SELECT * FROM Participants_in_Events\", conn)\nparticipants.columns = map(str.lower, participants.columns)\n\n# Merge the EVENTS and Participants_in_Events tables on Event_ID\nmerged_data = pd.merge(events, participants, on=\"event_id\")\n\n# Perform the SQL query and group by Event_Details\nquery_result = merged_data.groupby(\"event_details\").size().reset_index(name=\"count\")\nquery_result = query_result.sort_values(by=\"count\", ascending=False)\n\n# Plot the bar chart\nplt.bar(query_result[\"event_details\"], query_result[\"count\"])\nplt.xlabel(\"Event Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Event Details vs Count\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tvshow",
    "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings . Plot them as bar chart .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nTV_series = pd.read_sql(\"SELECT * FROM TV_series\", conn)\nTV_series.columns = TV_series.columns.str.lower()\n\n# Assuming TV_series is a DataFrame containing the table data\n\n# Sort the DataFrame by rating in descending order and select the top 3 rows\ntop_episodes = TV_series.sort_values(by='rating', ascending=False).head(3)\n\n# Extract the episode and rating columns\nepisodes = top_episodes['episode']\nratings = top_episodes['rating']\n\n# Create a bar plot\nplt.bar(episodes, ratings)\n\n# Set the x-axis label\nplt.xlabel('Episode')\n\n# Set the y-axis label\nplt.ylabel('Rating')\n\n# Set the title of the plot\nplt.title('Top 3 Episodes by Rating')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "sakila_1",
    "question": "What is the title and count of the film that has the least number of copies in inventory, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nfilm = pd.read_sql(\"SELECT * FROM film\", conn)\ninventory = pd.read_sql(\"SELECT * FROM inventory\", conn)\nfilm.columns = film.columns.str.lower()\ninventory.columns = inventory.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(film, inventory, on='film_id')\n\n# Group by title and count the number of inventory for each title\ngrouped_df = merged_df.groupby('title').size().reset_index(name='inventory_count')\n\n# Sort the dataframe by inventory_count in ascending order\nsorted_df = grouped_df.sort_values('inventory_count')\n\n# Plot the bar chart\nplt.bar(sorted_df['title'], sorted_df['inventory_count'])\nplt.xlabel('Film Title')\nplt.ylabel('Inventory Count')\nplt.title('Inventory Count for Each Film Title')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "What is the count of workshop groups for each phone number in which services are performed, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDrama_Workshop_Groups = pd.read_sql(\"SELECT * FROM Drama_Workshop_Groups\", conn)\nServices = pd.read_sql(\"SELECT * FROM Services\", conn)\nDrama_Workshop_Groups.columns = Drama_Workshop_Groups.columns.str.lower()\nServices.columns = Services.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Drama_Workshop_Groups, Services, on='workshop_group_id')\n\n# Group by store_phone and count the number of occurrences\ngrouped_df = merged_df.groupby('store_phone').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['store_phone'], grouped_df['count'])\nplt.xlabel('Store Phone')\nplt.ylabel('Count')\nplt.title('Number of Workshop Groups per Store Phone')\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death , show me the dates active and the total number of deaths with a bar chart , and rank by the total number in desc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm.columns = storm.columns.str.lower()\n\n# Assuming storm is a DataFrame containing the table data\n\n# Filter the data to include only rows where number_deaths >= 1\nfiltered_data = storm[storm['number_deaths'] >= 1]\n\n# Sort the filtered data by number_deaths in descending order\nsorted_data = filtered_data.sort_values('number_deaths', ascending=False)\n\n# Extract the dates_active and number_deaths columns\ndates_active = sorted_data['dates_active']\nnumber_deaths = sorted_data['number_deaths']\n\n# Create a bar plot\nplt.bar(dates_active, number_deaths)\n\n# Add labels and title\nplt.xlabel('Dates Active')\nplt.ylabel('Number of Deaths')\nplt.title('Number of Deaths by Dates Active')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "insurance_and_eClaims",
    "question": "What is the count of each policy type code associated with the customer \"Dayana Robel\" shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\npolicies = pd.read_sql(\"SELECT * FROM policies\", conn)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\npolicies.columns = policies.columns.str.lower()\ncustomers.columns = customers.columns.str.lower()\n\n# Joining policies and customers tables\nmerged_df = pd.merge(policies, customers, on='customer_id')\n\n# Filtering data for customer 'Dayana Robel'\nfiltered_df = merged_df[merged_df['customer_details'] == 'Dayana Robel']\n\n# Grouping by policy_type_code and counting the occurrences\ngrouped_df = filtered_df.groupby('policy_type_code').size().reset_index(name='count')\n\n# Plotting the bar chart\nplt.bar(grouped_df['policy_type_code'], grouped_df['count'])\nplt.xlabel('Policy Type Code')\nplt.ylabel('Count')\nplt.title('Number of Policies by Policy Type for Customer \"Dayana Robel\"')\nplt.show()\n"
  },
  {
    "db_id": "bike_1",
    "question": "List the name and the number of stations for all the cities that have at least 15 stations with a bar chart , and show by the y-axis from low to high please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstation.columns = station.columns.str.lower()\n\n# Group by city and count the number of rows\ncity_counts = station.groupby('city').size().reset_index(name='count')\n\n# Sort the counts in ascending order\ncity_counts = city_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(city_counts['city'], city_counts['count'])\nplt.xlabel('City')\nplt.ylabel('Count')\nplt.title('Number of Stations by City')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "What are the ids and details of events that have more than one participants Visualize by bar chart, and I want to display by the names from high to low please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the EVENTS table\nevents = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\nevents.columns = map(str.lower, events.columns)\n\n# Read the Participants_in_Events table\nparticipants = pd.read_sql(\"SELECT * FROM Participants_in_Events\", conn)\nparticipants.columns = map(str.lower, participants.columns)\n\n# Merge the EVENTS and Participants_in_Events tables on Event_ID\nmerged_data = pd.merge(events, participants, on=\"event_id\")\n\n# Group by Event_Details and count the number of Event_IDs\ngrouped_data = merged_data.groupby(\"event_details\")[\"event_id\"].count().reset_index()\n\n# Sort the data by Event_Details in descending order\nsorted_data = grouped_data.sort_values(\"event_details\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"event_details\"], sorted_data[\"event_id\"])\nplt.xlabel(\"Event Details\")\nplt.ylabel(\"Number of Event IDs\")\nplt.title(\"Bar Chart of Event Details and Event IDs\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "small_bank_1",
    "question": "What is the checking balance and name of the accounts with above-average savings balance, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nsavings = pd.read_sql(\"SELECT * FROM savings\", conn)\nsavings = pd.read_sql(\"SELECT * FROM savings\", conn)\naccounts.columns = accounts.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\naccounts.columns = accounts.columns.str.lower()\nsavings.columns = savings.columns.str.lower()\nsavings.columns = savings.columns.str.lower()\n\n# Joining accounts and checking tables\nmerged_df = pd.merge(accounts, checking, on='custid')\n\n# Subquery to filter names from accounts table\nsubquery_df = accounts.merge(savings, on='custid')\nsubquery_df = subquery_df[subquery_df['balance'] > subquery_df['balance'].mean()]\nnames = subquery_df['name'].unique()\n\n# Filtering merged_df based on names\nfiltered_df = merged_df[merged_df['name'].isin(names)]\n\n# Creating bar plot\nplt.bar(filtered_df['name'], filtered_df['balance'])\nplt.xlabel('Name')\nplt.ylabel('Balance')\nplt.title('Account Balance for Selected Names')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "products_for_hire",
    "question": "Can you create a bar chart displaying the names of products with an availability of 1 and the corresponding quantity available for each product?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nview_product_availability = pd.read_sql(\"SELECT * FROM view_product_availability\", conn)\nproducts_for_hire = pd.read_sql(\"SELECT * FROM products_for_hire\", conn)\nview_product_availability.columns = view_product_availability.columns.str.lower()\nproducts_for_hire.columns = products_for_hire.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(view_product_availability, products_for_hire, on='product_id')\n\n# Filter the data where available_yn is 1\nfiltered_df = merged_df[merged_df['available_yn'] == 1]\n\n# Group by product_name and count the occurrences\ngrouped_df = filtered_df.groupby('product_name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['product_name'], grouped_df['count'])\nplt.xlabel('Product Name')\nplt.ylabel('Count')\nplt.title('Product Availability')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "How many players are injured in each day? Show a bar chart, and sort in asc by the Date please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the game and injury_accident tables\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\ninjury_accident = pd.read_sql(\"SELECT * FROM injury_accident\", conn)\n\n# Convert column names to lowercase\ngame.columns = game.columns.str.lower()\ninjury_accident.columns = injury_accident.columns.str.lower()\n# Merge the game and injury_accident tables on the 'id' column\nmerged_data = pd.merge(game, injury_accident, left_on=\"id\", right_on=\"game_id\")\n\n# Group by Date and count the occurrences\ngrouped_data = merged_data.groupby(\"date\").size().reset_index(name=\"count\")\n\n# Sort the data by Date in ascending order\nsorted_data = grouped_data.sort_values(\"date\")\n\n# Plot the bar chart\nplt.bar(sorted_data[\"date\"], sorted_data[\"count\"])\nplt.xlabel(\"Date\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Injury Accidents per Date\")\nplt.xticks(rotation=45)\nplt.show()\n"
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Show how many section description from each section description, I want to display total number from low to high order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Sections table\nsections = pd.read_sql(\"SELECT * FROM Sections\", conn)\n\n# Convert column names to lowercase\nsections.columns = sections.columns.str.lower()\n\n# Perform the SQL query\nresult = sections.groupby('section_description').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result['section_description'], result['count'])\nplt.xlabel('Section Description')\nplt.ylabel('Count')\nplt.title('Number of Sections by Description')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "browser_web",
    "question": "Find the number of web accelerators used for each Operating system, I want to display by the y-axis in ascending.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the web_client_accelerator table\ndf = pd.read_sql(\"SELECT * FROM web_client_accelerator\", conn)\n\n# Convert column names to lowercase\ndf.columns = df.columns.str.lower()\n\n# Perform the group by and count operation\ngrouped_df = df.groupby('operating_system').size().reset_index(name='count')\n\n# Sort the dataframe by count in ascending order\nsorted_df = grouped_df.sort_values('count')\n\n# Create the bar plot\nplt.bar(sorted_df['operating_system'], sorted_df['count'])\nplt.xlabel('Operating System')\nplt.ylabel('Count')\nplt.title('Number of Clients by Operating System')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "company_office",
    "question": "Plot the total number by grouped by industry as a bar graph, and sort in ascending by the Industry.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Companies table\ncompanies = pd.read_sql(\"SELECT * FROM Companies\", conn)\n\n# Convert column names to lowercase\ncompanies.columns = companies.columns.str.lower()\n\n# Perform the SQL query\nresult = companies.groupby('industry').size().reset_index(name='count').sort_values('industry')\n\n# Generate the bar chart\nplt.bar(result['industry'], result['count'])\nplt.xlabel('Industry')\nplt.ylabel('Count')\nplt.title('Number of Companies by Industry')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "What country and state do the staff members live in, represented by a scatter plot?",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nAddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\nStaff = pd.read_sql(\"SELECT * FROM Staff\", conn)\nAddresses.columns = Addresses.columns.str.lower()\nStaff.columns = Staff.columns.str.lower()\n\n# Perform the join operation\nresult = pd.merge(Addresses, Staff, left_on='address_id', right_on='staff_address_id')\n\n# Create a scatter plot\nplt.scatter(result['country'], result['state_province_county'])\n\n# Set labels and title\nplt.xlabel('Country')\nplt.ylabel('State/Province/County')\nplt.title('Scatter Plot of Country vs State/Province/County')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Show the authors of their total submissions with a bar chart, and display by the x axis in asc.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the submission table\nsubmission_df = pd.read_sql(\"SELECT * FROM submission\", conn)\n\n# Convert column names to lowercase\nsubmission_df.columns = submission_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = submission_df.groupby('author').size().reset_index(name='count').sort_values('author')\n\n# Generate the bar chart\nplt.bar(result_df['author'], result_df['count'])\nplt.xlabel('Author')\nplt.ylabel('Count')\nplt.title('Number of Submissions by Author')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "What is the total number of each fate? Give me the result in a bar graph, display x-axis in descending order.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the mission table\nmission_df = pd.read_sql(\"SELECT * FROM mission\", conn)\n\n# Convert column names to lowercase\nmission_df.columns = mission_df.columns.str.lower()\n\n# Perform the SQL query\nresult = mission_df.groupby('fate').size().reset_index(name='count').sort_values('fate', ascending=False)\n\n# Generate the bar plot\nplt.bar(result['fate'], result['count'])\nplt.xlabel('Fate')\nplt.ylabel('Count')\nplt.title('Count of Fate')\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "Show me a bar chart displaying the total number of deaths in each region, sorted in descending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naffected_region = pd.read_sql(\"SELECT * FROM affected_region\", conn)\nregion = pd.read_sql(\"SELECT * FROM region\", conn)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\naffected_region.columns = affected_region.columns.str.lower()\nregion.columns = region.columns.str.lower()\nstorm.columns = storm.columns.str.lower()\n\n# Perform the join operation\nmerged_data = pd.merge(pd.merge(affected_region, region, on='region_id'), storm, on='storm_id')\n\n# Group by region_name and calculate the sum of number_deaths\ngrouped_data = merged_data.groupby('region_name')['number_deaths'].sum().reset_index()\n\n# Sort the data by total_deaths in descending order\nsorted_data = grouped_data.sort_values('number_deaths', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data['region_name'], sorted_data['number_deaths'])\nplt.xlabel('Region')\nplt.ylabel('Total Deaths')\nplt.title('Total Deaths by Region')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "aircraft",
    "question": "What is the count of each aircraft associated with the airport named \"London Gatwick\" displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naircraft = pd.read_sql(\"SELECT * FROM aircraft\", conn)\nairport_aircraft = pd.read_sql(\"SELECT * FROM airport_aircraft\", conn)\nairport = pd.read_sql(\"SELECT * FROM airport\", conn)\naircraft.columns = aircraft.columns.str.lower()\nairport_aircraft.columns = airport_aircraft.columns.str.lower()\nairport.columns = airport.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(aircraft, airport_aircraft, on='aircraft_id')\nmerged_df = pd.merge(merged_df, airport, on='airport_id')\n\n# Filter the data for 'London Gatwick' airport\nfiltered_df = merged_df[merged_df['airport_name'] == 'London Gatwick']\n\n# Group by aircraft and count the occurrences\ngrouped_df = filtered_df.groupby('aircraft').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['aircraft'], grouped_df['count'])\nplt.xlabel('Aircraft')\nplt.ylabel('Count')\nplt.title('Number of Aircraft at London Gatwick')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Bar chart x axis event details y axis how many event details , could you order by the y-axis in ascending please ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEVENTS = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\nEVENTS.columns = EVENTS.columns.str.lower()\n\n# Group by event_details and count the occurrences\nevent_counts = EVENTS.groupby('event_details').size().reset_index(name='count')\n\n# Sort the event_counts dataframe by count in ascending order\nevent_counts_sorted = event_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(event_counts_sorted['event_details'], event_counts_sorted['count'])\nplt.xlabel('Event Details')\nplt.ylabel('Count')\nplt.title('Event Details Count')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "List the distinct payment method codes with the number of orders mad Show bar chart , and I want to show by the x axis in desc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nINVOICES = pd.read_sql(\"SELECT * FROM INVOICES\", conn)\nINVOICES.columns = INVOICES.columns.str.lower()\n\n# Grouping the data by payment_method_code and counting the number of occurrences\npayment_counts = INVOICES.groupby('payment_method_code').size().reset_index(name='count')\n\n# Sorting the data by payment_method_code in descending order\npayment_counts = payment_counts.sort_values('payment_method_code', ascending=False)\n\n# Creating the bar plot\nplt.bar(payment_counts['payment_method_code'], payment_counts['count'])\nplt.xlabel('Payment Method Code')\nplt.ylabel('Count')\nplt.title('Number of Invoices by Payment Method Code')\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "What are the top 5 clubs with the highest number of members who are younger than 18, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nstudent = pd.read_sql(\"SELECT * FROM student\", conn)\nclub.columns = club.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\nstudent.columns = student.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(club, member_of_club, on='clubid')\nmerged_df = pd.merge(merged_df, student, left_on='stuid', right_on='stuid')\n\n# Filter by age < 18\nfiltered_df = merged_df[merged_df['age'] < 18]\n\n# Group by clubname and count\ngrouped_df = filtered_df.groupby('clubname').size().reset_index(name='count')\n\n# Sort by count in descending order and select top 5\ntop_5_clubs = grouped_df.sort_values('count', ascending=False).head(5)\n\n# Plot bar chart\nplt.bar(top_5_clubs['clubname'], top_5_clubs['count'])\nplt.xlabel('Club Name')\nplt.ylabel('Count')\nplt.title('Top 5 Clubs with Members under 18')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Give me a pie to show the number of premises type from different premises type .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\npremises = pd.read_sql(\"SELECT * FROM premises\", conn)\npremises.columns = premises.columns.str.lower()\n\n# Group by premises_type and count the occurrences\npremises_count = premises.groupby('premises_type').size().reset_index(name='count')\n\n# Create a pie chart\nplt.pie(premises_count['count'], labels=premises_count['premises_type'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Display the chart\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "Return a bar on what are the different role codes for users , and how many users have each ? , and order from low to high by the x axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nusers = pd.read_sql(\"SELECT * FROM users\", conn)\nusers.columns = users.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\nrole_counts = users.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by role_code in ascending order\nrole_counts = role_counts.sort_values('role_code')\n\n# Creating the bar plot\nplt.bar(role_counts['role_code'], role_counts['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Users by Role Code')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Bar chart x axis role code y axis the total number , and show in ascending by the Y-axis please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nEmployees.columns = Employees.columns.str.lower()\n\n# Grouping the data by role_code and counting the occurrences\nrole_counts = Employees.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nrole_counts = role_counts.sort_values('count')\n\n# Creating the bar plot\nplt.bar(role_counts['role_code'], role_counts['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Employees by Role Code')\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "List all payment methods and number of payments using each payment methods Plot them as bar chart, display by the y axis from low to high please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Customer_Payments table\ncustomer_payments = pd.read_sql(\"SELECT * FROM Customer_Payments\", conn)\n\n# Convert column names to lowercase\ncustomer_payments.columns = customer_payments.columns.str.lower()\n\n# Perform the SQL query\npayment_counts = customer_payments.groupby('payment_method_code').size().reset_index(name='count')\npayment_counts = payment_counts.sort_values('count')\n\n# Generate the bar chart\nplt.bar(payment_counts['payment_method_code'], payment_counts['count'])\nplt.xlabel('Payment Method Code')\nplt.ylabel('Count')\nplt.title('Payment Method Counts')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "What are the number of the descriptions of the service types with product price above 100?, show in desc by the x-axis.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Ref_Service_Types table\nref_service_types = pd.read_sql(\"SELECT * FROM Ref_Service_Types\", conn)\nref_service_types.columns = map(str.lower, ref_service_types.columns)\n\n# Read the Services table\nservices = pd.read_sql(\"SELECT * FROM Services\", conn)\nservices.columns = map(str.lower, services.columns)\n\n# Merge the two tables on Service_Type_Code\nmerged_data = pd.merge(ref_service_types, services, on=\"service_type_code\")\n\n# Filter the merged data based on Product_Price > 100\nfiltered_data = merged_data[merged_data[\"product_price\"] > 100]\n\n# Group the data by Service_Type_Description and count the occurrences\ngrouped_data = filtered_data.groupby(\"service_type_description\").size().reset_index(name=\"count\")\n\n# Sort the data by Service_Type_Description in descending order\nsorted_data = grouped_data.sort_values(\"service_type_description\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"service_type_description\"], sorted_data[\"count\"])\nplt.xlabel(\"Service Type Description\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of Service Types with Product Price > 100\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "college_3",
    "question": "What is the scatter plot of the average gradepoint for students with the last name Smith, grouped by age?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nENROLLED_IN = pd.read_sql(\"SELECT * FROM ENROLLED_IN\", conn)\nGRADECONVERSION = pd.read_sql(\"SELECT * FROM GRADECONVERSION\", conn)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nENROLLED_IN.columns = ENROLLED_IN.columns.str.lower()\nGRADECONVERSION.columns = GRADECONVERSION.columns.str.lower()\nSTUDENT.columns = STUDENT.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(ENROLLED_IN, GRADECONVERSION, left_on='grade', right_on='lettergrade')\nmerged_df = pd.merge(merged_df, STUDENT, left_on='stuid', right_on='stuid')\n\n# Filtering for lname = 'Smith'\nfiltered_df = merged_df[merged_df['lname'] == 'Smith']\n\n# Grouping by age and calculating average gradepoint\ngrouped_df = filtered_df.groupby('age').agg({'gradepoint': 'mean'}).reset_index()\n\n# Creating scatter plot\nplt.scatter(grouped_df['age'], grouped_df['gradepoint'])\nplt.xlabel('Age')\nplt.ylabel('Average Gradepoint')\nplt.title('Scatter plot of Average Gradepoint by Age for Students with Last Name Smith')\nplt.show()"
  },
  {
    "db_id": "college_3",
    "question": "Can you create a bar chart displaying the count of enrollments for each grade point in the ENROLLED_IN table?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nENROLLED_IN = pd.read_sql(\"SELECT * FROM ENROLLED_IN\", conn)\nGRADECONVERSION = pd.read_sql(\"SELECT * FROM GRADECONVERSION\", conn)\nENROLLED_IN.columns = ENROLLED_IN.columns.str.lower()\nGRADECONVERSION.columns = GRADECONVERSION.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(ENROLLED_IN, GRADECONVERSION, left_on='grade', right_on='lettergrade')\n\n# Group by gradepoint and count the number of occurrences\ngrouped_df = merged_df.groupby('gradepoint').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['gradepoint'], grouped_df['count'])\nplt.xlabel('Grade Point')\nplt.ylabel('Count')\nplt.title('Distribution of Grade Points')\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "Show different teams of technicians and the number of technicians in each team .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\ntechnician.columns = technician.columns.str.lower()\n\n# Grouping the data by 'team' and counting the number of occurrences\nteam_counts = technician.groupby('team').size()\n\n# Creating a bar plot\nplt.bar(team_counts.index, team_counts.values)\n\n# Adding labels and title\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Number of Technicians per Team')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "entertainment_awards",
    "question": "Show me a bar chart displaying the count of nominations for each festival, sorted by festival ID in ascending order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nnomination = pd.read_sql(\"SELECT * FROM nomination\", conn)\nartwork = pd.read_sql(\"SELECT * FROM artwork\", conn)\nfestival_detail = pd.read_sql(\"SELECT * FROM festival_detail\", conn)\nnomination.columns = nomination.columns.str.lower()\nartwork.columns = artwork.columns.str.lower()\nfestival_detail.columns = festival_detail.columns.str.lower()\n\n# Merge the tables\nmerged_df = pd.merge(nomination, artwork, on='artwork_id')\nmerged_df = pd.merge(merged_df, festival_detail, on='festival_id')\n\n# Group by festival_id and count the number of records\ngrouped_df = merged_df.groupby('festival_id').size().reset_index(name='count')\n\n# Sort by festival_id in ascending order\nsorted_df = grouped_df.sort_values('festival_id')\n\n# Plot the bar chart\nplt.bar(sorted_df['festival_id'], sorted_df['count'])\nplt.xlabel('Festival ID')\nplt.ylabel('Count')\nplt.title('Number of Nominations per Festival')\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "Show me a bar chart displaying the positions and their respective counts in the club \"Bootup Baltimore\".",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nclub.columns = club.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(club, member_of_club, on='clubid')\n\n# Filter by clubname\nfiltered_df = merged_df[merged_df['clubname'] == 'Bootup Baltimore']\n\n# Group by position and count\ngrouped_df = filtered_df.groupby('position').size().reset_index(name='count')\n\n# Plot bar chart\nplt.bar(grouped_df['position'], grouped_df['count'])\nplt.xlabel('Position')\nplt.ylabel('Count')\nplt.title('Number of Members by Position in Bootup Baltimore Club')\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Visualize a bar chart for how many authors submit to the workshop , sort Author in descending order please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsubmission = pd.read_sql(\"SELECT * FROM submission\", conn)\nsubmission.columns = submission.columns.str.lower()\n\n# Group by author and count the number of submissions\nauthor_counts = submission.groupby('author').size().reset_index(name='count')\n\n# Sort the author counts in descending order\nauthor_counts = author_counts.sort_values('author', ascending=False)\n\n# Create a bar plot\nplt.bar(author_counts['author'], author_counts['count'])\nplt.xlabel('Author')\nplt.ylabel('Count')\nplt.title('Number of Submissions by Author')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "List the name for storms and the number of affected regions for each storm with a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the storm and affected_region tables\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\naffected_region = pd.read_sql(\"SELECT * FROM affected_region\", conn)\n\n# Convert column names to lowercase\nstorm.columns = storm.columns.str.lower()\naffected_region.columns = affected_region.columns.str.lower()\n\n# Merge the storm and affected_region tables\nmerged_data = pd.merge(storm, affected_region, on=\"storm_id\")\n\n# Perform the group by and count\ngrouped_data = merged_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# Plot the pie chart\nplt.pie(grouped_data[\"count\"], labels=grouped_data[\"name\"], autopct=\"%1.1f%%\")\nplt.axis(\"equal\")\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "List the name and cost of all procedures sorted by the cost from the highest to the lowest . Plot them as bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nprocedures = pd.read_sql(\"SELECT * FROM procedures\", conn)\nprocedures.columns = procedures.columns.str.lower()\n\n# Assuming procedures is a DataFrame containing the table data\n\n# Sort the DataFrame by cost in descending order\nsorted_procedures = procedures.sort_values(by='cost', ascending=False)\n\n# Extract the name and cost columns\nnames = sorted_procedures['name']\ncosts = sorted_procedures['cost']\n\n# Create a bar plot\nplt.bar(names, costs)\n\n# Set the x-axis label\nplt.xlabel('Procedure')\n\n# Set the y-axis label\nplt.ylabel('Cost')\n\n# Set the title\nplt.title('Procedure Costs')\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "What is the product with the highest number of problems? Show the product name and the number of problems using a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nproduct = pd.read_sql(\"SELECT * FROM product\", conn)\nproblems = pd.read_sql(\"SELECT * FROM problems\", conn)\nproduct.columns = product.columns.str.lower()\nproblems.columns = problems.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(product, problems, on='product_id')\n\n# Group by product_name and count the number of problems\ngrouped_df = merged_df.groupby('product_name').size().reset_index(name='problem_count')\n\n# Sort the dataframe by problem_count in descending order\nsorted_df = grouped_df.sort_values('problem_count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['product_name'], sorted_df['problem_count'])\nplt.xlabel('Product Name')\nplt.ylabel('Problem Count')\nplt.title('Number of Problems by Product')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "e_government",
    "question": "What is the distribution of the number of times each contact individual from the Labour party organization has been contacted, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\norganizations = pd.read_sql(\"SELECT * FROM organizations\", conn)\norganization_contact_individuals = pd.read_sql(\"SELECT * FROM organization_contact_individuals\", conn)\nindividuals = pd.read_sql(\"SELECT * FROM individuals\", conn)\norganizations.columns = organizations.columns.str.lower()\norganization_contact_individuals.columns = organization_contact_individuals.columns.str.lower()\nindividuals.columns = individuals.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(organizations, organization_contact_individuals, on='organization_id')\nmerged_df = pd.merge(merged_df, individuals, on='individual_id')\n\n# Filter by organization name\nfiltered_df = merged_df[merged_df['organization_name'] == 'Labour Party']\n\n# Group by individual last name and count\ngrouped_df = filtered_df.groupby('individual_last_name').size().reset_index(name='count')\n\n# Sort by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot pie chart\nplt.pie(sorted_df['count'], labels=sorted_df['individual_last_name'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.title('Individuals in Labour Party by Last Name')\nplt.show()"
  },
  {
    "db_id": "sakila_1",
    "question": "How many cities are there in Australia, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncity.columns = city.columns.str.lower()\ncountry.columns = country.columns.str.lower()\n\n# Joining city and country tables\nmerged_df = pd.merge(city, country, on='country_id')\n\n# Filtering for Australia\naustralia_cities = merged_df[merged_df['country'] == 'Australia']\n\n# Grouping by country_id and counting the number of cities\ncity_count = australia_cities.groupby('country_id').size().reset_index(name='count')\n\n# Creating a pie chart\nplt.pie(city_count['count'], labels=city_count['country_id'], autopct='%1.1f%%')\nplt.title('Number of Cities in Australia')\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "Show me a bar chart displaying the number of members holding each position in the club \"Bootup Baltimore\".",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nclub.columns = club.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\n\n# Join the tables\nmerged_df = pd.merge(club, member_of_club, on='clubid')\n\n# Filter the data for clubname 'Bootup Baltimore'\nfiltered_df = merged_df[merged_df['clubname'] == 'Bootup Baltimore']\n\n# Group by position and count the number of occurrences\ngrouped_df = filtered_df.groupby('position').size().reset_index(name='count')\n\n# Sort the data by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['position'], sorted_df['count'])\nplt.xlabel('Position')\nplt.ylabel('Count')\nplt.title('Number of Members by Position in Bootup Baltimore Club')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Visualize a bar chart for what are the ids and names of all start stations that were the beginning of at least 200 trips ? , rank from high to low by the X .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\ntrip.columns = trip.columns.str.lower()\n\n# Sort the trip dataframe by start_station_name in descending order\nsorted_trip = trip.sort_values('start_station_name', ascending=False)\n\n# Extract the start_station_name and start_station_id columns\nstart_station_name = sorted_trip['start_station_name']\nstart_station_id = sorted_trip['start_station_id']\n\n# Create a bar plot\nplt.bar(start_station_name, start_station_id)\n\n# Set the x-axis label\nplt.xlabel('Start Station Name')\n\n# Set the y-axis label\nplt.ylabel('Start Station ID')\n\n# Rotate the x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show different types of ships and the average tonnage of ships of each type in a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Calculate average tonnage by ship type\navg_tonnage_by_type = ship.groupby('type')['tonnage'].mean()\n\n# Create bar plot\nplt.bar(avg_tonnage_by_type.index, avg_tonnage_by_type.values)\nplt.xlabel('Ship Type')\nplt.ylabel('Average Tonnage')\nplt.title('Average Tonnage by Ship Type')\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death , show me the name and the total number of deaths with a bar chart , sort in asc by the y axis please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm.columns = storm.columns.str.lower()\n\n# Filter the storm dataframe\nfiltered_storm = storm[storm['number_deaths'] >= 1]\n\n# Sort the filtered dataframe by number_deaths in ascending order\nsorted_storm = filtered_storm.sort_values('number_deaths')\n\n# Create a bar plot\nplt.bar(sorted_storm['name'], sorted_storm['number_deaths'])\n\n# Set the x-axis label\nplt.xlabel('Name')\n\n# Set the y-axis label\nplt.ylabel('Number of Deaths')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Show the average of artists' age by country , I want to rank Y in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Calculate average age by country\navg_age_by_country = artist.groupby('country')['age'].mean().reset_index()\n\n# Sort by average age in ascending order\navg_age_by_country = avg_age_by_country.sort_values('age')\n\n# Plot bar chart\nplt.bar(avg_age_by_country['country'], avg_age_by_country['age'])\nplt.xlabel('Country')\nplt.ylabel('Average Age')\nplt.title('Average Age of Artists by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "perpetrator",
    "question": "Visualize a bar chart for what are the countries of perpetrators ? Show each country and the corresponding number of perpetrators there , I want to rank by the X-axis from low to high .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperpetrator = pd.read_sql(\"SELECT * FROM perpetrator\", conn)\nperpetrator.columns = perpetrator.columns.str.lower()\n\n# Group by country and count the occurrences\nperpetrator_counts = perpetrator.groupby('country').size().reset_index(name='count')\n\n# Sort by country in ascending order\nperpetrator_counts = perpetrator_counts.sort_values('country')\n\n# Create bar plot\nplt.bar(perpetrator_counts['country'], perpetrator_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Perpetrator Counts by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Show all payment method codes and the number of orders for each code Show bar chart , order from high to low by the Y .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nINVOICES = pd.read_sql(\"SELECT * FROM INVOICES\", conn)\nINVOICES.columns = INVOICES.columns.str.lower()\n\n# Grouping the data by payment_method_code and counting the occurrences\npayment_counts = INVOICES.groupby('payment_method_code').size().reset_index(name='count')\n\n# Sorting the data by count in descending order\npayment_counts = payment_counts.sort_values(by='count', ascending=False)\n\n# Creating the bar plot\nplt.bar(payment_counts['payment_method_code'], payment_counts['count'])\nplt.xlabel('Payment Method Code')\nplt.ylabel('Count')\nplt.title('Number of Invoices by Payment Method Code')\nplt.show()"
  },
  {
    "db_id": "gymnast",
    "question": "Visualize a pie chart with what are the hometowns of gymnasts and the corresponding number of gymnasts?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the 'gymnast' table\ngymnast_df = pd.read_sql(\"SELECT * FROM gymnast\", conn)\n\n# Read the 'people' table\npeople_df = pd.read_sql(\"SELECT * FROM people\", conn)\n\n# Convert column names to lowercase\ngymnast_df.columns = gymnast_df.columns.str.lower()\npeople_df.columns = people_df.columns.str.lower()\n\n# merge the two tables on 'gymnast_id' and 'people_id'\nmerged_df = pd.merge(gymnast_df, people_df, left_on='gymnast_id', right_on='people_id')\n\n# group by 'hometown' and count the number of occurrences\ngrouped_df = merged_df.groupby('hometown').size().reset_index(name='count')\n\n# plot the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['hometown'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.title('Distribution of Gymnasts by Hometown')\nplt.show()\n"
  },
  {
    "db_id": "entertainment_awards",
    "question": "Can you create a bar chart displaying the festival names and the corresponding number of nominated artworks for each festival?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nnomination = pd.read_sql(\"SELECT * FROM nomination\", conn)\nartwork = pd.read_sql(\"SELECT * FROM artwork\", conn)\nfestival_detail = pd.read_sql(\"SELECT * FROM festival_detail\", conn)\nnomination.columns = nomination.columns.str.lower()\nartwork.columns = artwork.columns.str.lower()\nfestival_detail.columns = festival_detail.columns.str.lower()\n\n# Perform the join operation\nmerged_data = pd.merge(pd.merge(nomination, artwork, on='artwork_id'), festival_detail, on='festival_id')\n\n# Group by festival_name and count the number of occurrences\ngrouped_data = merged_data.groupby('festival_name').size().reset_index(name='count')\n\n# Sort the data by count in descending order\nsorted_data = grouped_data.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data['festival_name'], sorted_data['count'])\nplt.xlabel('Festival Name')\nplt.ylabel('Count')\nplt.title('Number of Nominations per Festival')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "entertainment_awards",
    "question": "Show the ids and names of festivals that have at least two nominations for artworks Plot them as bar chart, and could you list by the total number in asc please?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the tables from the database\nnomination = pd.read_sql(\"SELECT * FROM nomination\", conn)\nartwork = pd.read_sql(\"SELECT * FROM artwork\", conn)\nfestival_detail = pd.read_sql(\"SELECT * FROM festival_detail\", conn)\n\n# Convert column names to lowercase\nnomination.columns = nomination.columns.str.lower()\nartwork.columns = artwork.columns.str.lower()\nfestival_detail.columns = festival_detail.columns.str.lower()\n\n# Merge the tables\nmerged_data = pd.merge(nomination, artwork, on=\"artwork_id\")\nmerged_data = pd.merge(merged_data, festival_detail, on=\"festival_id\")\n\n# Sort the data by festival_id\nmerged_data.sort_values(by=\"festival_id\", inplace=True)\n\n# Create a bar plot\nplt.bar(merged_data[\"festival_name\"], merged_data[\"festival_id\"])\nplt.xlabel(\"Festival Name\")\nplt.ylabel(\"Festival ID\")\nplt.title(\"Festival ID by Festival Name\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "List the number of the name of technicians whose team is not \"NYY\", and I want to order from low to high by the y-axis please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the technician table\ntechnician_df = pd.read_sql(\"SELECT * FROM technician\", conn)\n\n# Convert column names to lowercase\ntechnician_df.columns = technician_df.columns.str.lower()\n\n# Filter the technician table where Team is not \"NYY\"\nfiltered_technician_df = technician_df[technician_df[\"team\"] != \"NYY\"]\n\n# Group by Name and count the occurrences\ngrouped_technician_df = filtered_technician_df.groupby(\"name\").size().reset_index(name=\"count\")\n\n# Sort the dataframe by count in ascending order\nsorted_technician_df = grouped_technician_df.sort_values(\"count\", ascending=True)\n\n# Generate the bar plot\nplt.bar(sorted_technician_df[\"name\"], sorted_technician_df[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Technician Count by Name (excluding NYY team)\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "twitter_1",
    "question": "Can you create a pie chart displaying the distribution of tweets among each user by their respective names?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nuser_profiles = pd.read_sql(\"SELECT * FROM user_profiles\", conn)\ntweets = pd.read_sql(\"SELECT * FROM tweets\", conn)\nuser_profiles.columns = user_profiles.columns.str.lower()\ntweets.columns = tweets.columns.str.lower()\n\n# Joining the user_profiles and tweets tables\nmerged_df = pd.merge(user_profiles, tweets, on='uid')\n\n# Grouping by name and counting the number of tweets for each user\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Creating a pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['name'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "What is the distribution of services with product name \"film\" across each workshop group? Show me a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDrama_Workshop_Groups = pd.read_sql(\"SELECT * FROM Drama_Workshop_Groups\", conn)\nServices = pd.read_sql(\"SELECT * FROM Services\", conn)\nDrama_Workshop_Groups.columns = Drama_Workshop_Groups.columns.str.lower()\nServices.columns = Services.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Drama_Workshop_Groups, Services, on='workshop_group_id')\n\n# Filter the data for product_name = \"film\"\nfiltered_df = merged_df[merged_df['product_name'] == 'film']\n\n# Group by workshop_group_id and count the number of occurrences\ngrouped_df = filtered_df.groupby('workshop_group_id').size().reset_index(name='count')\n\n# Create a pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['workshop_group_id'], autopct='%1.1f%%')\nplt.title('Distribution of Workshop Groups for Film Services')\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "Show the number of games for each away team in a bar chart , and I want to sort by the X in asc please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\ngame.columns = game.columns.str.lower()\n\n# Grouping the data by away_team and counting the occurrences\naway_team_counts = game.groupby('away_team').size().reset_index(name='count')\n\n# Sorting the data by away_team in ascending order\naway_team_counts = away_team_counts.sort_values('away_team')\n\n# Creating the bar plot\nplt.bar(away_team_counts['away_team'], away_team_counts['count'])\nplt.xlabel('Away Team')\nplt.ylabel('Count')\nplt.title('Number of Games by Away Team')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "insurance_and_eClaims",
    "question": "Find the number of records of each policy type and its type code. Visualize by bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the policies table\npolicies = pd.read_sql(\"SELECT * FROM policies\", conn)\n\n# Convert column names to lowercase\npolicies.columns = policies.columns.str.lower()\n\n# Perform the SQL query\nresult = policies.groupby('policy_type_code').size().reset_index(name='count')\n\n# Generate the bar chart\nplt.bar(result['policy_type_code'], result['count'])\nplt.xlabel('Policy Type Code')\nplt.ylabel('Count')\nplt.title('Number of Policies by Policy Type Code')\n\n# Show the chart\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "Show me a line chart of the number of lessons given by each staff member, sorted in ascending order by last name.",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nLessons = pd.read_sql(\"SELECT * FROM Lessons\", conn)\nStaff = pd.read_sql(\"SELECT * FROM Staff\", conn)\nLessons.columns = Lessons.columns.str.lower()\nStaff.columns = Staff.columns.str.lower()\n\n# Perform the join operation\ndf = pd.merge(Lessons, Staff, on='staff_id')\n\n# Group by last_name and count the number of occurrences\ndf_count = df.groupby('last_name').size().reset_index(name='count')\n\n# Sort the dataframe by last_name in ascending order\ndf_count = df_count.sort_values('last_name')\n\n# Plot the line chart\nplt.plot(df_count['last_name'], df_count['count'])\nplt.xlabel('Last Name')\nplt.ylabel('Count')\nplt.title('Number of Lessons by Last Name')\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "Show me a bar chart of the count of eliminations for each time, ordered by the count in descending order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nelimination = pd.read_sql(\"SELECT * FROM elimination\", conn)\nwrestler = pd.read_sql(\"SELECT * FROM wrestler\", conn)\nelimination.columns = elimination.columns.str.lower()\nwrestler.columns = wrestler.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(elimination, wrestler, on='wrestler_id')\n\n# Group by time and count the number of occurrences\ngrouped_df = merged_df.groupby('time').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['time'], sorted_df['count'])\nplt.xlabel('Time')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Time')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "What is the attendance distribution for each exhibition in the year 2004, displayed in a bar chart and sorted by the highest attendance?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nexhibition_record = pd.read_sql(\"SELECT * FROM exhibition_record\", conn)\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nexhibition_record.columns = exhibition_record.columns.str.lower()\nexhibition.columns = exhibition.columns.str.lower()\n\n# Merge exhibition_record and exhibition tables\nmerged_df = pd.merge(exhibition_record, exhibition, on='exhibition_id')\n\n# Filter data for year 2004\nfiltered_df = merged_df[merged_df['year'] == 2004]\n\n# Group by theme and calculate sum of attendance\ngrouped_df = filtered_df.groupby('theme')['attendance'].sum().reset_index()\n\n# Sort by sum of attendance in descending order\nsorted_df = grouped_df.sort_values('attendance', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['theme'], sorted_df['attendance'])\nplt.xlabel('Theme')\nplt.ylabel('Attendance')\nplt.title('Exhibition Attendance by Theme in 2004')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "For each type , how many ships are there . Plot them as bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Grouping the ship dataframe by type and counting the occurrences\nship_grouped = ship.groupby('type').size().reset_index(name='count')\n\n# Creating a bar plot\nplt.bar(ship_grouped['type'], ship_grouped['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Ship Count by Type')\nplt.show()"
  },
  {
    "db_id": "restaurant_1",
    "question": "List how many students in each last name who majored in 600 using a bar chart, and sort by the bars from low to high.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the Student table\nstudent_data = pd.read_sql(\"SELECT * FROM Student\", conn)\n\n# Convert column names to lowercase\nstudent_data.columns = student_data.columns.str.lower()\n\n# Filter the data for students with Major = 600\nfiltered_data = student_data[student_data['major'] == 600]\n\n# Group the data by LName and count the occurrences\ngrouped_data = filtered_data.groupby('lname').size().reset_index(name='count')\n\n# Sort the data by LName in ascending order\nsorted_data = grouped_data.sort_values('lname')\n\n# Generate the bar plot\nplt.bar(sorted_data['lname'], sorted_data['count'])\nplt.xlabel('Last Name')\nplt.ylabel('Count')\nplt.title('Number of Students by Last Name')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "How many customer addresses are there for each premise type, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomer_addresses = pd.read_sql(\"SELECT * FROM customer_addresses\", conn)\npremises = pd.read_sql(\"SELECT * FROM premises\", conn)\ncustomer_addresses.columns = customer_addresses.columns.str.lower()\npremises.columns = premises.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(customer_addresses, premises, on='premise_id')\n\n# Group by premises_type and count the number of occurrences\ngrouped_df = merged_df.groupby('premises_type').size().reset_index(name='count')\n\n# Create a pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['premises_type'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Display the chart\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "What is the distribution of club \"Bootup Baltimore\" members below 18 years old in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nstudent = pd.read_sql(\"SELECT * FROM student\", conn)\nclub.columns = club.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\nstudent.columns = student.columns.str.lower()\n\n# Perform the SQL query\nresult = pd.merge(pd.merge(club, member_of_club, on='clubid'), student, left_on='stuid', right_on='stuid')\nresult = result[(result['clubname'] == 'Bootup Baltimore') & (result['age'] < 18)]\nresult = result.groupby('clubname').size().reset_index(name='count')\n\n# Create the pie chart\nplt.pie(result['count'], labels=result['clubname'], autopct='%1.1f%%')\nplt.title('Number of Students in Bootup Baltimore Club (Age < 18)')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Show the average of artists' age by country , and sort in desc by the y-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Calculate average age by country\navg_age_by_country = artist.groupby('country')['age'].mean().reset_index()\n\n# Sort by average age in descending order\navg_age_by_country = avg_age_by_country.sort_values('age', ascending=False)\n\n# Plot bar chart\nplt.bar(avg_age_by_country['country'], avg_age_by_country['age'])\nplt.xlabel('Country')\nplt.ylabel('Average Age')\nplt.title('Average Age of Artists by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "perpetrator",
    "question": "What are the countries of perpetrators? Show each country and the corresponding number of perpetrators there Plot them as bar chart, and rank by the x-axis from high to low.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the perpetrator table\nperpetrator_df = pd.read_sql(\"SELECT * FROM perpetrator\", conn)\n\n# Convert column names to lowercase\nperpetrator_df.columns = perpetrator_df.columns.str.lower()\n\n# Perform the group by and count operation\ngrouped_df = perpetrator_df.groupby('country').size().reset_index(name='count')\n\n# Sort the dataframe by country in descending order\nsorted_df = grouped_df.sort_values('country', ascending=False)\n\n# Create the bar plot\nplt.bar(sorted_df['country'], sorted_df['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Perpetrators by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "Show the number of games for each home team in a bar chart, sort by the y-axis in desc please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the game table\ngame_df = pd.read_sql(\"SELECT * FROM game\", conn)\n\n# Convert column names to lowercase\ngame_df.columns = game_df.columns.str.lower()\n\n# Perform the SQL query\nresult = game_df.groupby('home_team').size().reset_index(name='count').sort_values('count', ascending=False)\n\n# Create the bar plot\nplt.bar(result['home_team'], result['count'])\nplt.xlabel('Home Team')\nplt.ylabel('Count')\nplt.title('Number of Games by Home Team')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "How many machine series are assigned to each technician? Show the count using a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nrepair_assignment = pd.read_sql(\"SELECT * FROM repair_assignment\", conn)\nmachine = pd.read_sql(\"SELECT * FROM machine\", conn)\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\nrepair_assignment.columns = repair_assignment.columns.str.lower()\nmachine.columns = machine.columns.str.lower()\ntechnician.columns = technician.columns.str.lower()\n\n# Perform the join operation\ndf = pd.merge(pd.merge(repair_assignment, machine, on='machine_id'), technician, on='technician_id')\n\n# Group by technician name and count the number of machine series\nresult = df.groupby('name')['machine_series'].count()\n\n# Plot the bar chart\nplt.bar(result.index, result.values)\nplt.xlabel('Technician Name')\nplt.ylabel('Number of Machine Series')\nplt.title('Number of Machine Series per Technician')\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "Can you create a pie chart to display the distribution of reported problems among staff members?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nproblems = pd.read_sql(\"SELECT * FROM problems\", conn)\nstaff = pd.read_sql(\"SELECT * FROM staff\", conn)\nproblems.columns = problems.columns.str.lower()\nstaff.columns = staff.columns.str.lower()\n\n# Merge tables\nmerged_df = pd.merge(problems, staff, left_on='reported_by_staff_id', right_on='staff_id')\n\n# Filter staff names\nfiltered_df = merged_df[(merged_df['staff_first_name'].isin(['Dameon', 'Jolie'])) & (merged_df['staff_last_name'].isin(['Frami', 'Weber']))]\n\n# Group by staff name and count problems\ngrouped_df = filtered_df.groupby(['staff_first_name', 'staff_last_name']).size().reset_index(name='problem_count')\n\n# Create pie chart\nplt.pie(grouped_df['problem_count'], labels=grouped_df['staff_first_name'] + ' ' + grouped_df['staff_last_name'], autopct='%1.1f%%')\nplt.title('Problem Count by Staff')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Show all artist names and the number of exhibitions for each artist in a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the exhibition and artist tables\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\n\n# Convert column names to lowercase\nexhibition.columns = exhibition.columns.str.lower()\nartist.columns = artist.columns.str.lower()\n\n# Merge the exhibition and artist tables on artist_id\nmerged_data = pd.merge(exhibition, artist, on=\"artist_id\")\n\n# Group by artist name and count the number of exhibitions\ngrouped_data = merged_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# Plot the pie chart\nplt.pie(grouped_data[\"count\"], labels=grouped_data[\"name\"], autopct=\"%1.1f%%\")\nplt.axis(\"equal\")\nplt.show()"
  },
  {
    "db_id": "perpetrator",
    "question": "Bar chart x axis country y axis the total number , and sort X-axis in asc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperpetrator = pd.read_sql(\"SELECT * FROM perpetrator\", conn)\nperpetrator.columns = perpetrator.columns.str.lower()\n\n# Group by country and count the occurrences\nperpetrator_counts = perpetrator.groupby('country').size().reset_index(name='count')\n\n# Sort by country in ascending order\nperpetrator_counts = perpetrator_counts.sort_values('country')\n\n# Create bar plot\nplt.bar(perpetrator_counts['country'], perpetrator_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Perpetrator Counts by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "insurance_and_eClaims",
    "question": "For each policy type , return its type code and its count in the record . Visualize by pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\npolicies = pd.read_sql(\"SELECT * FROM policies\", conn)\npolicies.columns = policies.columns.str.lower()\n\n# Group by policy_type_code and count the number of occurrences\npolicy_counts = policies.groupby('policy_type_code').size().reset_index(name='count')\n\n# Plotting a pie chart\nplt.pie(policy_counts['count'], labels=policy_counts['policy_type_code'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "products_for_hire",
    "question": "How many customers holding coupons with an amount of 500 can be classified as bad or good, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\ndiscount_coupons = pd.read_sql(\"SELECT * FROM discount_coupons\", conn)\ncustomers.columns = customers.columns.str.lower()\ndiscount_coupons.columns = discount_coupons.columns.str.lower()\n\n# Merge the customers and discount_coupons dataframes\nmerged_df = pd.merge(customers, discount_coupons, on='coupon_id')\n\n# Filter the merged dataframe based on coupon_amount = 500\nfiltered_df = merged_df[merged_df['coupon_amount'] == 500]\n\n# Group by good_or_bad_customer and count the number of occurrences\ngrouped_df = filtered_df.groupby('good_or_bad_customer').size().reset_index(name='count')\n\n# Create a pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['good_or_bad_customer'], autopct='%1.1f%%')\nplt.title('Distribution of Good and Bad Customers with $500 Coupon Amount')\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "Bar chart x axis away team y axis the number of away team , and list from low to high by the the number of away team please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\ngame.columns = game.columns.str.lower()\n\n# Group by away_team and count the occurrences\naway_team_counts = game.groupby('away_team').size().reset_index(name='count')\n\n# Sort the counts in ascending order\naway_team_counts = away_team_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(away_team_counts['away_team'], away_team_counts['count'])\nplt.xlabel('Away Team')\nplt.ylabel('Count')\nplt.title('Number of Games Played by Away Team')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "List all customer status codes and the number of customers having each status code by a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Customers table\ncustomers = pd.read_sql(\"SELECT * FROM Customers\", conn)\n\n# Convert column names to lowercase\ncustomers.columns = customers.columns.str.lower()\n\n# Perform the SQL query\ncustomer_status_counts = customers.groupby('customer_status_code').size()\n\n# Plot the pie chart\nplt.pie(customer_status_counts, labels=customer_status_counts.index, autopct='%1.1f%%')\nplt.title('Customer Status Distribution')\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "Show me a bar chart of the count of problems reported after the date of any problems reported by the staff Rylan Homenick, grouped by problem id and ordered in descending order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nproblems = pd.read_sql(\"SELECT * FROM problems\", conn)\nstaff = pd.read_sql(\"SELECT * FROM staff\", conn)\nproblems = pd.read_sql(\"SELECT * FROM problems\", conn)\nstaff = pd.read_sql(\"SELECT * FROM staff\", conn)\nproblems.columns = problems.columns.str.lower()\nstaff.columns = staff.columns.str.lower()\nproblems.columns = problems.columns.str.lower()\nstaff.columns = staff.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(problems, staff, left_on='reported_by_staff_id', right_on='staff_id')\n\n# Filter data\nmax_date = merged_df.loc[(merged_df['staff_first_name'] == 'Rylan') & (merged_df['staff_last_name'] == 'Homenick'), 'date_problem_reported'].max()\nfiltered_df = merged_df.loc[merged_df['date_problem_reported'] > max_date]\n\n# Group and count\ngrouped_df = filtered_df.groupby('problem_id').size().reset_index(name='count')\n\n# Sort by problem_id\nsorted_df = grouped_df.sort_values('problem_id', ascending=False)\n\n# Plot bar chart\nplt.bar(sorted_df['problem_id'], sorted_df['count'])\nplt.xlabel('Problem ID')\nplt.ylabel('Count')\nplt.title('Number of Problems by Problem ID')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "What is the code of each role and the number of employees in each role Show bar chart , could you sort y axis in ascending order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nEmployees.columns = Employees.columns.str.lower()\n\n# Grouping the data by role_code and counting the occurrences\nrole_counts = Employees.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nrole_counts = role_counts.sort_values('count')\n\n# Creating the bar plot\nplt.bar(role_counts['role_code'], role_counts['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Employees by Role Code')\nplt.show()"
  },
  {
    "db_id": "aircraft",
    "question": "What is the count of airports and the total number of passengers for each airport that has more than 10000000 total passengers, shown in a scatter chart?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naircraft = pd.read_sql(\"SELECT * FROM aircraft\", conn)\nairport_aircraft = pd.read_sql(\"SELECT * FROM airport_aircraft\", conn)\nairport = pd.read_sql(\"SELECT * FROM airport\", conn)\naircraft.columns = aircraft.columns.str.lower()\nairport_aircraft.columns = airport_aircraft.columns.str.lower()\nairport.columns = airport.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(aircraft, airport_aircraft, on='aircraft_id')\nmerged_df = pd.merge(merged_df, airport, on='airport_id')\n\n# Filter data\nfiltered_df = merged_df[merged_df['total_passengers'] > 10000000]\n\n# Group by total_passengers and count airports\ngrouped_df = filtered_df.groupby('total_passengers').size().reset_index(name='airports')\n\n# Scatter plot\nplt.scatter(grouped_df['airports'], grouped_df['total_passengers'])\nplt.xlabel('Number of Airports')\nplt.ylabel('Total Passengers')\nplt.title('Number of Airports vs Total Passengers')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Find the ids and names of stations from which at least 200 trips started , and rank from low to high by the X-axis .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\ntrip.columns = trip.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called 'trip'\n\n# Perform the SQL query\nresult = trip[['start_station_name', 'start_station_id']].sort_values('start_station_name')\n\n# Create the bar plot\nplt.bar(result['start_station_name'], result['start_station_id'])\nplt.xlabel('Start Station Name')\nplt.ylabel('Start Station ID')\nplt.title('Start Station ID by Start Station Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "e_government",
    "question": "What is the name of the organization with the highest number of contact individuals, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\norganizations = pd.read_sql(\"SELECT * FROM organizations\", conn)\norganization_contact_individuals = pd.read_sql(\"SELECT * FROM organization_contact_individuals\", conn)\norganizations.columns = organizations.columns.str.lower()\norganization_contact_individuals.columns = organization_contact_individuals.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(organizations, organization_contact_individuals, on='organization_id')\n\n# Group by organization_name and count the number of occurrences\ngrouped_df = merged_df.groupby('organization_name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['organization_name'], grouped_df['count'])\nplt.xlabel('Organization Name')\nplt.ylabel('Count')\nplt.title('Number of Individuals per Organization')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show me how many type by type in a bar , and order in asc by the X .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Group by 'type' and count the occurrences\nship_count = ship.groupby('type').size().reset_index(name='count')\n\n# Sort the dataframe by 'type' in ascending order\nship_count = ship_count.sort_values('type')\n\n# Create a bar plot\nplt.bar(ship_count['type'], ship_count['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Count of Ship Types')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Bar chart x axis location code y axis how many location code , and I want to order from high to low by the bars .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDocument_locations = pd.read_sql(\"SELECT * FROM Document_locations\", conn)\nDocument_locations.columns = Document_locations.columns.str.lower()\n\n# Group by location_code and count the occurrences\nlocation_counts = Document_locations.groupby('location_code').size().reset_index(name='count')\n\n# Sort by location_code in descending order\nlocation_counts = location_counts.sort_values('location_code', ascending=False)\n\n# Create bar plot\nplt.bar(location_counts['location_code'], location_counts['count'])\nplt.xlabel('Location Code')\nplt.ylabel('Count')\nplt.title('Document Locations')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "What is the scatter plot of the count of employees who authorized the destruction of documents and the count of employees who destroyed the corresponding documents?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDocuments_to_be_destroyed = pd.read_sql(\"SELECT * FROM Documents_to_be_destroyed\", conn)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nDocuments_to_be_destroyed.columns = Documents_to_be_destroyed.columns.str.lower()\nEmployees.columns = Employees.columns.str.lower()\nEmployees.columns = Employees.columns.str.lower()\n\n# Joining tables\nmerged_df = pd.merge(Documents_to_be_destroyed, Employees, left_on='destruction_authorised_by_employee_id', right_on='employee_id')\nmerged_df = pd.merge(merged_df, Employees, left_on='destroyed_by_employee_id', right_on='employee_id')\n\n# Grouping and counting\ngrouped_df = merged_df.groupby(['employee_name_x', 'employee_name_y']).size().reset_index(name='count')\n\n# Scatter plot\nplt.scatter(grouped_df['employee_name_x'], grouped_df['employee_name_y'], s=grouped_df['count']*10)\nplt.xlabel('Destruction Authorised By')\nplt.ylabel('Destroyed By')\nplt.title('Document Destruction')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Show the employee ids and the number of documents destroyed by each employee by a scatter chart .",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nDocuments_to_be_destroyed = pd.read_sql(\"SELECT * FROM Documents_to_be_destroyed\", conn)\nDocuments_to_be_destroyed.columns = Documents_to_be_destroyed.columns.str.lower()\n\n# Assuming the table data is stored in a DataFrame called \"Documents_to_be_destroyed\"\n\n# Grouping the data by \"destroyed_by_employee_id\" and counting the occurrences\ndestroyed_counts = Documents_to_be_destroyed.groupby('destroyed_by_employee_id').size().reset_index(name='count')\n\n# Creating a scatter plot\nplt.scatter(destroyed_counts['destroyed_by_employee_id'], destroyed_counts['count'])\n\n# Adding labels and title\nplt.xlabel('Destroyed by Employee ID')\nplt.ylabel('Count')\nplt.title('Number of Documents Destroyed by Employee')\n\n# Displaying the scatter plot\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "Bar chart x axis customer status code y axis the total number, and sort from low to high by the names.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Customers table\ncustomers = pd.read_sql(\"SELECT * FROM Customers\", conn)\n\n# Convert column names to lowercase\ncustomers.columns = customers.columns.str.lower()\n\n# Perform the SQL query\nresult = customers.groupby('customer_status_code').size().reset_index(name='count')\nresult = result.sort_values('customer_status_code')\n\n# Generate the bar plot\nplt.bar(result['customer_status_code'], result['count'])\nplt.xlabel('Customer Status Code')\nplt.ylabel('Count')\nplt.title('Number of Customers by Status Code')\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "What are the ids and details of events that have more than one participants Visualize by bar chart, order by the bar in ascending.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the EVENTS table\nevents = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\n\n# Read the Participants_in_Events table\nparticipants = pd.read_sql(\"SELECT * FROM Participants_in_Events\", conn)\n\n# Convert column names to lowercase\nevents.columns = events.columns.str.lower()\nparticipants.columns = participants.columns.str.lower()\n\n# merge the events and participants_in_events tables on event_id\nmerged_data = pd.merge(events, participants, on='event_id')\n\n# group by event_details and count the number of event_ids\ngrouped_data = merged_data.groupby('event_details')['event_id'].count().reset_index()\n\n# sort the data by event_details in ascending order\nsorted_data = grouped_data.sort_values('event_details')\n\n# plot the bar chart\nplt.bar(sorted_data['event_details'], sorted_data['event_id'])\nplt.xlabel('Event Details')\nplt.ylabel('Number of Event IDs')\nplt.title('Bar Chart of Event Details')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "What is the count of documents for each location code in the Document_locations table, joined with the corresponding location name from the Ref_locations table, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDocument_locations = pd.read_sql(\"SELECT * FROM Document_locations\", conn)\nRef_locations = pd.read_sql(\"SELECT * FROM Ref_locations\", conn)\nDocument_locations.columns = Document_locations.columns.str.lower()\nRef_locations.columns = Ref_locations.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Document_locations, Ref_locations, on='location_code')\n\n# Group by location_name and count the occurrences\ngrouped_df = merged_df.groupby('location_name').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['location_name'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Show the authors of their total submissions with a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsubmission = pd.read_sql(\"SELECT * FROM submission\", conn)\nsubmission.columns = submission.columns.str.lower()\n\n# Group by author and count the number of submissions\nauthor_counts = submission.groupby('author').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(author_counts['author'], author_counts['count'])\nplt.xlabel('Author')\nplt.ylabel('Count')\nplt.title('Number of Submissions by Author')\nplt.show()"
  },
  {
    "db_id": "sakila_1",
    "question": "In a bar chart, please illustrate which city boasts the highest number of addresses.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naddress = pd.read_sql(\"SELECT * FROM address\", conn)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\naddress.columns = address.columns.str.lower()\ncity.columns = city.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(address, city, on='city_id')\n\n# Perform the group by and count operation\ngrouped_df = merged_df.groupby('city').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['city'], sorted_df['count'])\nplt.xlabel('City')\nplt.ylabel('Count')\nplt.title('Number of Addresses in Each City')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "Show different teams in eliminations and the number of eliminations from each team by a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"elimination\" table\nelimination_data = pd.read_sql(\"SELECT * FROM elimination\", conn)\n\n# Convert column names to lowercase\nelimination_data.columns = elimination_data.columns.str.lower()\n\n# Perform the SQL query\nteam_counts = elimination_data.groupby('team').size().reset_index(name='count')\n\n# Generate the bar plot\nplt.bar(team_counts['team'], team_counts['count'])\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Number of Eliminations by Team')\nplt.show()"
  },
  {
    "db_id": "company_1",
    "question": "Can you create a pie chart displaying the distribution of departments located in Houston and their respective counts?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndept_locations = pd.read_sql(\"SELECT * FROM dept_locations\", conn)\ndepartment.columns = department.columns.str.lower()\ndept_locations.columns = dept_locations.columns.str.lower()\n\n# Joining the tables\ndf = pd.merge(department, dept_locations, on='dnumber')\n\n# Filtering the data for 'Houston' location\ndf_houston = df[df['dlocation'] == 'Houston']\n\n# Grouping by department name and counting the occurrences\ndf_grouped = df_houston.groupby('dname').size().reset_index(name='count')\n\n# Plotting the pie chart\nplt.pie(df_grouped['count'], labels=df_grouped['dname'], autopct='%1.1f%%')\nplt.title('Department Distribution in Houston')\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "What is the distribution of fleet series for aircrafts flown by pilots younger than 34, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npilot_record = pd.read_sql(\"SELECT * FROM pilot_record\", conn)\naircraft = pd.read_sql(\"SELECT * FROM aircraft\", conn)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot_record.columns = pilot_record.columns.str.lower()\naircraft.columns = aircraft.columns.str.lower()\npilot.columns = pilot.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(pilot_record, aircraft, on='aircraft_id')\nmerged_df = pd.merge(merged_df, pilot, on='pilot_id')\n\n# Filtering the data\nfiltered_df = merged_df[merged_df['age'] < 34]\n\n# Grouping and counting\ngrouped_df = filtered_df.groupby('fleet_series').size().reset_index(name='count')\ngrouped_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plotting the bar chart\nplt.bar(grouped_df['fleet_series'], grouped_df['count'])\nplt.xlabel('Fleet Series')\nplt.ylabel('Count')\nplt.title('Number of Pilot Records by Fleet Series (Age < 34)')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "Show me a bar chart displaying the last names of each member in the \"Bootup Baltimore\" club.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nstudent = pd.read_sql(\"SELECT * FROM student\", conn)\nclub.columns = club.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\nstudent.columns = student.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(club, member_of_club, on='clubid')\nmerged_df = pd.merge(merged_df, student, on='stuid')\n\n# Filter the data for clubname = 'Bootup Baltimore'\nfiltered_df = merged_df[merged_df['clubname'] == 'Bootup Baltimore']\n\n# Group by lname and count the number of occurrences\ngrouped_df = filtered_df.groupby('lname').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['lname'], grouped_df['count'])\nplt.xlabel('Last Name')\nplt.ylabel('Count')\nplt.title('Number of Students in \"bootup baltimore\" Club by Last Name')\nplt.show()"
  },
  {
    "db_id": "company_1",
    "question": "Find the number of employees of each gender whose salary is lower than 50000 Visualize by bar chart, rank in ascending by the X-axis please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the employee table\nemployee_df = pd.read_sql(\"SELECT * FROM employee\", conn)\n\n# Convert column names to lowercase\nemployee_df.columns = employee_df.columns.str.lower()\n\n# Filter the data based on salary condition\nfiltered_df = employee_df[employee_df['salary'] < 50000]\n\n# Group the data by sex and count the number of records\ngrouped_df = filtered_df.groupby('sex').size().reset_index(name='count')\n\n# Sort the data by sex in ascending order\nsorted_df = grouped_df.sort_values('sex')\n\n# Plot the bar chart\nplt.bar(sorted_df['sex'], sorted_df['count'])\nplt.xlabel('Sex')\nplt.ylabel('Count')\nplt.title('Number of Employees with Salary < 50000 by Sex')\nplt.show()"
  },
  {
    "db_id": "small_bank_1",
    "question": "What is the distribution of the checking account balance among owners whose names contain 'ee' in a pie chart, and what are the names of these owners?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\naccounts.columns = accounts.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\n\n# Merge the accounts and checking tables\nmerged_df = pd.merge(accounts, checking, on='custid')\n\n# Filter the merged dataframe based on name containing 'ee'\nfiltered_df = merged_df[merged_df['name'].str.contains('ee')]\n\n# Create a pie chart of the balance column\nplt.pie(filtered_df['balance'], labels=filtered_df['name'])\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Show all payment method codes and the number of orders for each code in a bar chart , show by the payment_method_code in descending please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nINVOICES = pd.read_sql(\"SELECT * FROM INVOICES\", conn)\nINVOICES.columns = INVOICES.columns.str.lower()\n\n# Grouping the data by payment_method_code and counting the number of occurrences\npayment_counts = INVOICES.groupby('payment_method_code').size().reset_index(name='count')\n\n# Sorting the data by payment_method_code in descending order\npayment_counts = payment_counts.sort_values('payment_method_code', ascending=False)\n\n# Creating the bar plot\nplt.bar(payment_counts['payment_method_code'], payment_counts['count'])\nplt.xlabel('Payment Method Code')\nplt.ylabel('Count')\nplt.title('Number of Invoices by Payment Method Code')\nplt.show()"
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Display a bar chart for what are the names and id of courses having at most 2 sections?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Courses table\ncourses = pd.read_sql(\"SELECT * FROM Courses\", conn)\ncourses.columns = courses.columns.str.lower()\n\n# Read the Sections table\nsections = pd.read_sql(\"SELECT * FROM Sections\", conn)\nsections.columns = sections.columns.str.lower()\n\n# Merge the Courses and Sections tables on course_id\nmerged_data = pd.merge(courses, sections, on='course_id')\n\n# Group by course_name and count the number of occurrences\ncourse_counts = merged_data.groupby('course_name').size()\n\n# Plot the bar chart\nplt.bar(course_counts.index, course_counts.values)\nplt.xlabel('Course Name')\nplt.ylabel('Count')\nplt.title('Number of Sections per Course')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "How many storms are associated with each region, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nregion = pd.read_sql(\"SELECT * FROM region\", conn)\naffected_region = pd.read_sql(\"SELECT * FROM affected_region\", conn)\nregion.columns = region.columns.str.lower()\naffected_region.columns = affected_region.columns.str.lower()\n\n# Merge the two dataframes on region_id\nmerged_df = pd.merge(region, affected_region, on='region_id')\n\n# Group by region_name and count the number of occurrences\ngrouped_df = merged_df.groupby('region_name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['region_name'], grouped_df['count'])\nplt.xlabel('Region')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Region')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Show me a bar chart displaying the day number and the count of stored dates for each day, sorted in ascending order by the count of stored dates.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nAll_documents = pd.read_sql(\"SELECT * FROM All_documents\", conn)\nRef_calendar = pd.read_sql(\"SELECT * FROM Ref_calendar\", conn)\nAll_documents.columns = All_documents.columns.str.lower()\nRef_calendar.columns = Ref_calendar.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(All_documents, Ref_calendar, left_on='date_stored', right_on='calendar_date')\n\n# Group by day_number and count the occurrences\ngrouped_df = merged_df.groupby('day_number').size().reset_index(name='count')\n\n# Sort the dataframe by count in ascending order\nsorted_df = grouped_df.sort_values('count')\n\n# Plot the bar chart\nplt.bar(sorted_df['day_number'], sorted_df['count'])\nplt.xlabel('Day Number')\nplt.ylabel('Count')\nplt.title('Count of Documents by Day Number')\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Bar chart x axis participant type code y axis the number of participant type code , and sort in ascending by the x axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nParticipants = pd.read_sql(\"SELECT * FROM Participants\", conn)\nParticipants.columns = Participants.columns.str.lower()\n\n# Group by participant_type_code and count the occurrences\ngrouped = Participants.groupby('participant_type_code').size().reset_index(name='count')\n\n# Sort by participant_type_code in ascending order\ngrouped = grouped.sort_values('participant_type_code')\n\n# Create bar plot\nplt.bar(grouped['participant_type_code'], grouped['count'])\nplt.xlabel('Participant Type Code')\nplt.ylabel('Count')\nplt.title('Count of Participants by Participant Type Code')\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "For each citizenship , how many singers are from that country .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Grouping the singer dataframe by citizenship and counting the number of occurrences\ncitizenship_count = singer.groupby('citizenship').size().reset_index(name='count')\n\n# Creating a bar plot\nplt.bar(citizenship_count['citizenship'], citizenship_count['count'])\nplt.xlabel('Citizenship')\nplt.ylabel('Count')\nplt.title('Number of Singers by Citizenship')\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "what are the different software platforms for devices, and how many devices have each?, order by the x-axis in ascending please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the device table\ndevice_df = pd.read_sql(\"SELECT * FROM device\", conn)\n\n# Convert column names to lowercase\ndevice_df.columns = device_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = device_df.groupby('software_platform').size().reset_index(name='count').sort_values('software_platform')\n\n# Generate the bar chart\nplt.bar(result_df['software_platform'], result_df['count'])\nplt.xlabel('Software Platform')\nplt.ylabel('Count')\nplt.title('Number of Devices by Software Platform')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "question": "Which employees have made appearances in circulation history documents? Display a bar chart showcasing the employees' names and the count of drafts and copies.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nCirculation_History = pd.read_sql(\"SELECT * FROM Circulation_History\", conn)\nEmployees.columns = Employees.columns.str.lower()\nCirculation_History.columns = Circulation_History.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Employees, Circulation_History, on='employee_id')\n\n# Group by employee_name and count the number of occurrences\ngrouped_df = merged_df.groupby('employee_name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['employee_name'], grouped_df['count'])\nplt.xlabel('Employee Name')\nplt.ylabel('Count')\nplt.title('Number of Circulations per Employee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What are the names and id of courses having at most 2 sections, could you order in ascending by the x axis?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Courses table\ncourses = pd.read_sql(\"SELECT * FROM Courses\", conn)\ncourses.columns = courses.columns.str.lower()\n\n# Read the Sections table\nsections = pd.read_sql(\"SELECT * FROM Sections\", conn)\nsections.columns = sections.columns.str.lower()\n\n# Merge the Courses and Sections tables on course_id\nmerged_data = pd.merge(courses, sections, on=\"course_id\")\n\n# Sort the merged data by course_name\nsorted_data = merged_data.sort_values(by=\"course_name\")\n\n# Create a bar plot of course_name and course_id\nplt.bar(sorted_data[\"course_name\"], sorted_data[\"course_id\"])\nplt.xlabel(\"Course Name\")\nplt.ylabel(\"Course ID\")\nplt.title(\"Course ID by Course Name\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "How does the number of physicians in charge of more than one patient change over time?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nphysician = pd.read_sql(\"SELECT * FROM physician\", conn)\npatient = pd.read_sql(\"SELECT * FROM patient\", conn)\nphysician.columns = physician.columns.str.lower()\npatient.columns = patient.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(physician, patient, left_on='employeeid', right_on='pcp')\n\n# Group by employeeid and calculate count and distinct count\ngrouped_df = merged_df.groupby('employeeid').agg({'employeeid': 'count', 'pcp': 'nunique'})\n\n# Rename the columns\ngrouped_df.columns = ['count', 'distinct_count']\n\n# Plot the line chart\nplt.plot(grouped_df.index, grouped_df['count'], label='Count')\nplt.plot(grouped_df.index, grouped_df['distinct_count'], label='Distinct Count')\n\n# Set the x-axis label and title\nplt.xlabel('Employee ID')\nplt.title('Count and Distinct Count of Patients per Physician')\n\n# Show the legend\nplt.legend()\n\n# Show the line chart\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Give me a bar chart for mean tonnage of each type, display from high to low by the y-axis.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ship table\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = ship_df.groupby('type')['tonnage'].mean().reset_index().sort_values('tonnage', ascending=False)\n\n# Create the bar plot\nplt.bar(result_df['type'], result_df['tonnage'])\nplt.xlabel('Type')\nplt.ylabel('Average Tonnage')\nplt.title('Average Tonnage by Ship Type')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "Bar chart x axis log entry description y axis the number of log entry description",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nproblem_log = pd.read_sql(\"SELECT * FROM problem_log\", conn)\nproblem_log.columns = problem_log.columns.str.lower()\n\n# Grouping the data by log_entry_description and counting the occurrences\ngrouped_data = problem_log.groupby('log_entry_description').size().reset_index(name='count')\n\n# Creating the bar plot\nplt.bar(grouped_data['log_entry_description'], grouped_data['count'])\nplt.xlabel('Log Entry Description')\nplt.ylabel('Count')\nplt.title('Occurrences of Log Entry Descriptions')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Can you create a pie chart to display the distribution of exhibitions among different countries?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nexhibition.columns = exhibition.columns.str.lower()\nartist.columns = artist.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(exhibition, artist, on='artist_id')\n\n# Group by country and count the number of exhibitions\ngrouped_df = merged_df.groupby('country').size().reset_index(name='exhibitions')\n\n# Plot the pie chart\nplt.pie(grouped_df['exhibitions'], labels=grouped_df['country'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "small_bank_1",
    "question": "What are the checking balance and savings balance for accounts whose checking balance is above the average checking balance, but savings balance is below the average savings balance? Visualize the data using a scatter plot.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\nsavings = pd.read_sql(\"SELECT * FROM savings\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\nsavings = pd.read_sql(\"SELECT * FROM savings\", conn)\naccounts.columns = accounts.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\nsavings.columns = savings.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\nsavings.columns = savings.columns.str.lower()\n\n# Joining tables\nmerged_df = pd.merge(accounts, checking, on='custid')\nmerged_df = pd.merge(merged_df, savings, on='custid')\n\n# Filtering data\navg_checking_balance = checking['balance'].mean()\navg_savings_balance = savings['balance'].mean()\nfiltered_df = merged_df[(merged_df['balance_x'] > avg_checking_balance) & (merged_df['balance_y'] < avg_savings_balance)]\n\n# Creating scatter plot\nplt.scatter(filtered_df['balance_x'], filtered_df['balance_y'])\nplt.xlabel('Checking Balance')\nplt.ylabel('Savings Balance')\nplt.title('Scatter Plot of Checking and Savings Balances')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Bar chart x axis location code y axis how many location code , and show by the Y-axis in ascending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDocument_locations = pd.read_sql(\"SELECT * FROM Document_locations\", conn)\nDocument_locations.columns = Document_locations.columns.str.lower()\n\n# Group by location_code and count the occurrences\nlocation_counts = Document_locations.groupby('location_code').size().reset_index(name='count')\n\n# Sort the counts in ascending order\nlocation_counts = location_counts.sort_values('count')\n\n# Plot the bar chart\nplt.bar(location_counts['location_code'], location_counts['count'])\nplt.xlabel('Location Code')\nplt.ylabel('Count')\nplt.title('Document Locations')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "What is the total number of different nationalities of all ships? Give me a bar graph, and I want to list by the Y from low to high.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ship table\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = ship_df.groupby('nationality').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result_df['nationality'], result_df['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Ships by Nationality')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "How many injured players not suffering from injury of 'Knee problem' in each match? Show me a bar chart grouping by number of matches, and rank by the y axis from low to high.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the injury_accident table\ninjury_accident = pd.read_sql(\"SELECT * FROM injury_accident\", conn)\n\n# Convert column names to lowercase\ninjury_accident.columns = injury_accident.columns.str.lower()\n\n# Filter out rows where injury is not 'Knee problem'\nfiltered_data = injury_accident[injury_accident['injury'] != 'Knee problem']\n\n# Group by Number_of_matches and count the occurrences\ngrouped_data = filtered_data.groupby('number_of_matches').size().reset_index(name='count')\n\n# Sort the data by count in ascending order\nsorted_data = grouped_data.sort_values('count', ascending=True)\n\n# Generate the bar plot\nplt.bar(sorted_data['number_of_matches'], sorted_data['count'])\nplt.xlabel('Number of Matches')\nplt.ylabel('Count')\nplt.title('Occurrences of Number of Matches')\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship in a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the singer table into a pandas DataFrame\nsinger_df = pd.read_sql(\"SELECT * FROM singer\", conn)\n\n# Convert column names to lowercase\nsinger_df.columns = singer_df.columns.str.lower()\n\n# Group by Citizenship and find the maximum Net_Worth_Millions\ngrouped_df = singer_df.groupby('citizenship')['net_worth_millions'].max().reset_index()\n\n# Plot the bar chart\nplt.bar(grouped_df['citizenship'], grouped_df['net_worth_millions'])\nplt.xlabel('Citizenship')\nplt.ylabel('Net Worth (Millions)')\nplt.title('Maximum Net Worth by Citizenship')\nplt.show()\n\n# Close the database connection\nconn.close()"
  },
  {
    "db_id": "wrestler",
    "question": "How many eliminations did each team have . Plot them as pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nelimination = pd.read_sql(\"SELECT * FROM elimination\", conn)\nelimination.columns = elimination.columns.str.lower()\n\n# Grouping the data by team and counting the occurrences\nteam_counts = elimination.groupby('team').size()\n\n# Creating a pie chart\nplt.pie(team_counts, labels=team_counts.index, autopct='%1.1f%%')\nplt.title('Team Distribution')\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "A pie chart shows the venue for each workshop.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the workshop table into a pandas DataFrame\nworkshop_df = pd.read_sql(\"SELECT * FROM workshop\", conn)\n\n# Convert column names to lowercase\nworkshop_df.columns = workshop_df.columns.str.lower()\n\n# Perform the SQL query and group by Venue\nvenue_counts = workshop_df.groupby('venue').size()\n\n# Create a pie chart\nplt.pie(venue_counts, labels=venue_counts.index, autopct='%1.1f%%')\nplt.title('Workshop Venue Distribution')\nplt.show()\n\n# Close the database connection\nconn.close()"
  },
  {
    "db_id": "hospital_1",
    "question": "What are the names of all the physicians who took appointments, and count them by a bar chart, and could you order by the names in desc please?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the appointment table\nappointment_df = pd.read_sql(\"SELECT * FROM appointment\", conn)\n# Convert column names to lowercase\nappointment_df.columns = appointment_df.columns.str.lower()\n\n# Read the physician table\nphysician_df = pd.read_sql(\"SELECT * FROM physician\", conn)\n# Convert column names to lowercase\nphysician_df.columns = physician_df.columns.str.lower()\n\n# Merge the appointment and physician tables on the Physician column\nmerged_df = pd.merge(appointment_df, physician_df, left_on=\"physician\", right_on=\"employeeid\")\n\n# Group by Name and count the occurrences\ngrouped_df = merged_df.groupby(\"name\").size().reset_index(name=\"count\")\n# Sort by Name in descending order\nsorted_df = grouped_df.sort_values(\"name\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df[\"name\"], sorted_df[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Appointments by Physician\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Show how many country from each country , and could you show by the bars from low to high ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Group by country and count the number of artists in each country\ncountry_counts = artist.groupby('country').size().reset_index(name='count')\n\n# Sort the data by country in ascending order\ncountry_counts = country_counts.sort_values('country')\n\n# Create a bar plot\nplt.bar(country_counts['country'], country_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Artists by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "company_office",
    "question": ", rank from high to low by the bars.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Companies table\ncompanies = pd.read_sql(\"SELECT * FROM Companies\", conn)\n\n# Convert column names to lowercase\ncompanies.columns = companies.columns.str.lower()\n\n# Perform the SQL query\nresult = companies.groupby('industry').size().reset_index(name='count')\nresult = result.sort_values('industry', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['industry'], result['count'])\nplt.xlabel('Industry')\nplt.ylabel('Count')\nplt.title('Number of Companies by Industry')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tvshow",
    "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating in a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the TV_series table into a DataFrame\ntv_series_df = pd.read_sql(\"SELECT * FROM TV_series\", conn)\n\n# Convert column names to lowercase\ntv_series_df.columns = tv_series_df.columns.str.lower()\n\n# Select the Episode and Rating columns and sort by Rating in descending order\ntop_3_df = tv_series_df[['episode', 'rating']].sort_values('rating', ascending=False).head(3)\n\n# Create a bar plot\nplt.bar(top_3_df['episode'], top_3_df['rating'])\nplt.xlabel('Episode')\nplt.ylabel('Rating')\nplt.title('Top 3 TV Series by Rating')\nplt.show()"
  },
  {
    "db_id": "aircraft",
    "question": "What is the count of aircrafts associated with the airports \"London Heathrow\" and \"London Gatwick\" displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\naircraft = pd.read_sql(\"SELECT * FROM aircraft\", conn)\nairport_aircraft = pd.read_sql(\"SELECT * FROM airport_aircraft\", conn)\nairport = pd.read_sql(\"SELECT * FROM airport\", conn)\n\naircraft.columns = aircraft.columns.str.lower()\nairport_aircraft.columns = airport_aircraft.columns.str.lower()\nairport.columns = airport.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(aircraft, airport_aircraft, on='aircraft_id')\nmerged_df = pd.merge(merged_df, airport, on='airport_id')\n\n# Filter airports\nfiltered_df = merged_df[merged_df['airport_name'].isin(['London Heathrow', 'London Gatwick'])]\n\n# Group by airport_name and count aircraft\ngrouped_df = filtered_df.groupby('airport_name').agg({'aircraft': 'count'}).reset_index()\n\n# Plot bar chart\nplt.bar(grouped_df['airport_name'], grouped_df['aircraft'])\nplt.xlabel('Airport Name')\nplt.ylabel('Number of Aircraft')\nplt.title('Number of Aircraft in London Heathrow and London Gatwick')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Show all payment method codes and the number of orders for each code in a bar chart , and could you rank by the bars from low to high ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nINVOICES = pd.read_sql(\"SELECT * FROM INVOICES\", conn)\nINVOICES.columns = INVOICES.columns.str.lower()\n\n# Grouping the data by payment_method_code and counting the number of occurrences\npayment_counts = INVOICES.groupby('payment_method_code').size().reset_index(name='count')\n\n# Sorting the data by payment_method_code in ascending order\npayment_counts = payment_counts.sort_values('payment_method_code')\n\n# Creating the bar plot\nplt.bar(payment_counts['payment_method_code'], payment_counts['count'])\nplt.xlabel('Payment Method Code')\nplt.ylabel('Count')\nplt.title('Number of Invoices by Payment Method Code')\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "Show me a bar chart displaying the count of documents for each document structure code in the database.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ndocuments = pd.read_sql(\"SELECT * FROM documents\", conn)\ndocument_structures = pd.read_sql(\"SELECT * FROM document_structures\", conn)\ndocuments.columns = documents.columns.str.lower()\ndocument_structures.columns = document_structures.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(documents, document_structures, on='document_structure_code')\n\n# Group by document_structure_code and count the number of occurrences\ngrouped_df = merged_df.groupby('document_structure_code').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['document_structure_code'], grouped_df['count'])\nplt.xlabel('Document Structure Code')\nplt.ylabel('Count')\nplt.title('Number of Documents by Document Structure Code')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Show all cities along with the number of drama workshop groups in each city. Visualize by bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Addresses table\naddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\naddresses.columns = map(str.lower, addresses.columns)\n\n# Read the Drama_Workshop_Groups table\ndrama_workshop_groups = pd.read_sql(\"SELECT * FROM Drama_Workshop_Groups\", conn)\ndrama_workshop_groups.columns = map(str.lower, drama_workshop_groups.columns)\n\n# Merge the two tables on Address_ID\nmerged_data = pd.merge(addresses, drama_workshop_groups, on=\"address_id\")\n\n# Group by City_Town and count the number of occurrences\ngrouped_data = merged_data.groupby(\"city_town\").size().reset_index(name=\"count\")\n\n# Plot the bar chart\nplt.bar(grouped_data[\"city_town\"], grouped_data[\"count\"])\nplt.xlabel(\"City/Town\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Drama Workshop Groups in Each City/Town\")\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "What is the vehicle detail that has been used the most in lessons, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nVehicles = pd.read_sql(\"SELECT * FROM Vehicles\", conn)\nLessons = pd.read_sql(\"SELECT * FROM Lessons\", conn)\nVehicles.columns = Vehicles.columns.str.lower()\nLessons.columns = Lessons.columns.str.lower()\n\n# Joining the Vehicles and Lessons tables\nmerged_df = pd.merge(Vehicles, Lessons, on='vehicle_id')\n\n# Grouping by vehicle_details and counting the number of occurrences\ngrouped_df = merged_df.groupby('vehicle_details').size().reset_index(name='count')\n\n# Sorting by count in descending order and selecting the top 1\ntop_vehicle = grouped_df.sort_values('count', ascending=False).head(1)\n\n# Plotting the bar chart\nplt.bar(top_vehicle['vehicle_details'], top_vehicle['count'])\nplt.xlabel('Vehicle Details')\nplt.ylabel('Count')\nplt.title('Most Common Vehicle')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Scatter plot to show destruction authorised by employee id on x axis and the total number on y axis .",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nDocuments_to_be_destroyed = pd.read_sql(\"SELECT * FROM Documents_to_be_destroyed\", conn)\nDocuments_to_be_destroyed.columns = Documents_to_be_destroyed.columns.str.lower()\n\n# Group by destruction_authorised_by_employee_id and count the number of documents\ngrouped_data = Documents_to_be_destroyed.groupby('destruction_authorised_by_employee_id').size().reset_index(name='count')\n\n# Scatter plot\nplt.scatter(grouped_data['destruction_authorised_by_employee_id'], grouped_data['count'])\nplt.xlabel('Destruction Authorised by Employee ID')\nplt.ylabel('Count')\nplt.title('Number of Documents by Destruction Authorised by Employee ID')\nplt.show()"
  },
  {
    "db_id": "small_bank_1",
    "question": "Show me a bar chart displaying the account name and the sum of the savings balance for each account, sorted in ascending order by the sum of the savings balance.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nsavings = pd.read_sql(\"SELECT * FROM savings\", conn)\naccounts.columns = accounts.columns.str.lower()\nsavings.columns = savings.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(accounts, savings, on='custid')\n\n# Group by name and calculate the sum of balance\ngrouped_df = merged_df.groupby('name')['balance'].sum().reset_index()\n\n# Sort the dataframe by sum of balance in ascending order\nsorted_df = grouped_df.sort_values('balance')\n\n# Plot the bar chart\nplt.bar(sorted_df['name'], sorted_df['balance'])\nplt.xlabel('Name')\nplt.ylabel('Sum of Balance')\nplt.title('Sum of Balance by Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "For each citizenship , how many singers are from that country , and display bars in asc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Group by citizenship and count the number of singers\nsinger_count = singer.groupby('citizenship').size().reset_index(name='count')\n\n# Sort the data by citizenship in ascending order\nsinger_count = singer_count.sort_values('citizenship')\n\n# Create a bar plot\nplt.bar(singer_count['citizenship'], singer_count['count'])\nplt.xlabel('Citizenship')\nplt.ylabel('Count')\nplt.title('Number of Singers by Citizenship')\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "Show different teams in eliminations and the number of eliminations from each team by a bar chart, order by the total number from low to high.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"elimination\" table\nelimination_data = pd.read_sql(\"SELECT * FROM elimination\", conn)\n\n# Convert column names to lowercase\nelimination_data.columns = elimination_data.columns.str.lower()\n\n# Perform the SQL query\nteam_counts = elimination_data.groupby('team').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar plot\nplt.bar(team_counts['team'], team_counts['count'])\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Number of Eliminations by Team')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "Show the correlation between the problem id and log id which are assigned to the staff named Rylan Homenick with a scatter chart.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the staff table\nstaff = pd.read_sql(\"SELECT * FROM staff\", conn)\n\n# Read the data from the problem_log table\nproblem_log = pd.read_sql(\"SELECT * FROM problem_log\", conn)\n\n# Convert column names to lowercase\nstaff.columns = staff.columns.str.lower()\nproblem_log.columns = problem_log.columns.str.lower()\n\n# Merge the staff and problem_log tables on the assigned_to_staff_id column\nmerged_data = pd.merge(staff, problem_log, left_on=\"staff_id\", right_on=\"assigned_to_staff_id\")\n\n# Filter the merged data for staff with first name \"Rylan\" and last name \"Homenick\"\nfiltered_data = merged_data[(merged_data[\"staff_first_name\"] == \"Rylan\") & (merged_data[\"staff_last_name\"] == \"Homenick\")]\n\n# Create a scatter plot of problem_id vs problem_log_id\nplt.scatter(filtered_data[\"problem_id\"], filtered_data[\"problem_log_id\"])\nplt.xlabel(\"Problem ID\")\nplt.ylabel(\"Problem Log ID\")\nplt.title(\"Scatter Plot of Problem ID vs Problem Log ID\")\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show me the total number by citizenship in a bar , and display bars in asc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Group by citizenship and count the number of singers\nsinger_count = singer.groupby('citizenship').size().reset_index(name='count')\n\n# Sort the data by citizenship in ascending order\nsinger_count = singer_count.sort_values('citizenship')\n\n# Create a bar plot\nplt.bar(singer_count['citizenship'], singer_count['count'])\nplt.xlabel('Citizenship')\nplt.ylabel('Count')\nplt.title('Number of Singers by Citizenship')\nplt.show()"
  },
  {
    "db_id": "company_office",
    "question": ", and order by the y axis in ascending.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Companies table\ncompanies = pd.read_sql(\"SELECT * FROM Companies\", conn)\n\n# Convert column names to lowercase\ncompanies.columns = companies.columns.str.lower()\n\n# Perform the SQL query\nresult = companies.groupby('industry').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result['industry'], result['count'])\nplt.xlabel('Industry')\nplt.ylabel('Count')\nplt.title('Number of Companies by Industry')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "What is the number of entry descriptions of each problem ? , show from high to low by the x-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nproblem_log = pd.read_sql(\"SELECT * FROM problem_log\", conn)\nproblem_log.columns = problem_log.columns.str.lower()\n\n# Grouping the data by log_entry_description and counting the occurrences\ngrouped_data = problem_log.groupby('log_entry_description').size().reset_index(name='count')\n\n# Sorting the data by log_entry_description in descending order\nsorted_data = grouped_data.sort_values('log_entry_description', ascending=False)\n\n# Creating the bar plot\nplt.bar(sorted_data['log_entry_description'], sorted_data['count'])\nplt.xlabel('Log Entry Description')\nplt.ylabel('Count')\nplt.title('Occurrences of Log Entry Descriptions')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "Show the number of games for each home team in a bar chart , and list by the X in ascending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\ngame.columns = game.columns.str.lower()\n\n# Grouping the data by home_team and counting the occurrences\nhome_team_counts = game.groupby('home_team').size().reset_index(name='count')\n\n# Sorting the data by home_team in ascending order\nhome_team_counts = home_team_counts.sort_values('home_team')\n\n# Creating the bar plot\nplt.bar(home_team_counts['home_team'], home_team_counts['count'])\nplt.xlabel('Home Team')\nplt.ylabel('Count')\nplt.title('Number of Games by Home Team')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "soccer_1",
    "question": "Show me a bar chart of the count of players who have a crossing score higher than 90 and prefer their right foot, grouped by player name, and ordered by count in descending order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nPlayer = pd.read_sql(\"SELECT * FROM Player\", conn)\nPlayer_Attributes = pd.read_sql(\"SELECT * FROM Player_Attributes\", conn)\nPlayer.columns = Player.columns.str.lower()\nPlayer_Attributes.columns = Player_Attributes.columns.str.lower()\n\n# Merge the Player and Player_Attributes dataframes\nmerged_df = pd.merge(Player, Player_Attributes, on='player_api_id')\n\n# Filter the merged dataframe based on the conditions\nfiltered_df = merged_df[(merged_df['crossing'] > 90) & (merged_df['preferred_foot'] == 'right')]\n\n# Group by player_name and count the number of occurrences\ngrouped_df = filtered_df.groupby('player_name').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['player_name'], sorted_df['count'])\nplt.xlabel('Player Name')\nplt.ylabel('Count')\nplt.title('Number of Players with Crossing > 90 and Preferred Foot = Right')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "battle_death",
    "question": "Bar chart of the number of date from each date , and display date in descending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nbattle = pd.read_sql(\"SELECT * FROM battle\", conn)\nbattle.columns = battle.columns.str.lower()\n\n# Group by date and count the occurrences\ndate_counts = battle.groupby('date').size().reset_index(name='count')\n\n# Sort by date in descending order\ndate_counts = date_counts.sort_values('date', ascending=False)\n\n# Plot the bar chart\nplt.bar(date_counts['date'], date_counts['count'])\nplt.xlabel('Date')\nplt.ylabel('Count')\nplt.title('Occurrences by Date')\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Show the authors of their total submissions with a bar chart , display from low to high by the y-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nsubmission = pd.read_sql(\"SELECT * FROM submission\", conn)\nsubmission.columns = submission.columns.str.lower()\n\n# Group by author and count the number of submissions\nauthor_counts = submission.groupby('author').size().reset_index(name='count')\n\n# Sort the author counts in ascending order\nauthor_counts = author_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(author_counts['author'], author_counts['count'])\nplt.xlabel('Author')\nplt.ylabel('Count')\nplt.title('Number of Submissions by Author')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "What is the breakdown of affiliated physicians by department, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naffiliated_with = pd.read_sql(\"SELECT * FROM affiliated_with\", conn)\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\naffiliated_with.columns = affiliated_with.columns.str.lower()\ndepartment.columns = department.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(affiliated_with, department, left_on='department', right_on='departmentid')\n\n# Filter the data based on primaryaffiliation = 1\nfiltered_df = merged_df[merged_df['primaryaffiliation'] == 1]\n\n# Group by department name and count the number of occurrences\ngrouped_df = filtered_df.groupby('name').size().reset_index(name='count')\n\n# Sort the data by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['name'], sorted_df['count'])\nplt.xlabel('Department')\nplt.ylabel('Count')\nplt.title('Number of Affiliations by Department')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show each premise type and the number of premises in that type . Visualize by bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npremises = pd.read_sql(\"SELECT * FROM premises\", conn)\npremises.columns = premises.columns.str.lower()\n\n# Group by premises_type and count the number of occurrences\npremises_count = premises.groupby('premises_type').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(premises_count['premises_type'], premises_count['count'])\nplt.xlabel('Premises Type')\nplt.ylabel('Count')\nplt.title('Number of Premises by Type')\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "List the number of the names of patients who have made appointments, and I want to display in desc by the y-axis please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the appointment table\nappointment = pd.read_sql(\"SELECT * FROM appointment\", conn)\n\n# Read the patient table\npatient = pd.read_sql(\"SELECT * FROM patient\", conn)\n\n# Convert column names to lowercase\nappointment.columns = appointment.columns.str.lower()\npatient.columns = patient.columns.str.lower()\n\n# merge the appointment and patient tables on the patient column\nmerged_data = pd.merge(appointment, patient, left_on='patient', right_on='ssn')\n\n# group by name and count the occurrences\ngrouped_data = merged_data.groupby('name').size().reset_index(name='count')\n\n# sort the data by count in descending order\nsorted_data = grouped_data.sort_values(by='count', ascending=False)\n\n# plot the bar chart\nplt.bar(sorted_data['name'], sorted_data['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Number of Appointments by Name')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "entertainment_awards",
    "question": ", and order by the bar in desc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartwork = pd.read_sql(\"SELECT * FROM artwork\", conn)\nartwork.columns = artwork.columns.str.lower()\n\n# Grouping the artwork dataframe by type and counting the number of occurrences\nartwork_grouped = artwork.groupby('type').size().reset_index(name='count')\n\n# Sorting the dataframe by type in descending order\nartwork_grouped_sorted = artwork_grouped.sort_values('type', ascending=False)\n\n# Creating a bar plot\nplt.bar(artwork_grouped_sorted['type'], artwork_grouped_sorted['count'])\n\n# Adding labels and title\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Artwork Count by Type')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "What is the distribution of the number of sections across different documents, represented by a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ndocuments = pd.read_sql(\"SELECT * FROM documents\", conn)\ndocument_sections = pd.read_sql(\"SELECT * FROM document_sections\", conn)\ndocuments.columns = documents.columns.str.lower()\ndocument_sections.columns = document_sections.columns.str.lower()\n\n# Merge documents and document_sections dataframes\nmerged_df = pd.merge(documents, document_sections, on='document_code')\n\n# Group by document_name and count the number of sections\ngrouped_df = merged_df.groupby('document_name').size().reset_index(name='num_sections')\n\n# Plot pie chart\nplt.pie(grouped_df['num_sections'], labels=grouped_df['document_name'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "Show the number of games for each home team in a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the game table\ngame_df = pd.read_sql(\"SELECT * FROM game\", conn)\n\n# Convert column names to lowercase\ngame_df.columns = game_df.columns.str.lower()\n\n# Perform the SQL query\nresult = game_df.groupby('home_team').size()\n\n# Create the bar plot\nplt.bar(result.index, result.values)\nplt.xlabel('Home Team')\nplt.ylabel('Count')\nplt.title('Number of Games by Home Team')\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "Create a bar chart showing the total number across team , show X-axis from high to low order please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\ntechnician.columns = technician.columns.str.lower()\n\n# Grouping the data by 'team' and counting the number of occurrences\nteam_counts = technician.groupby('team').size()\n\n# Sorting the data by 'team' in descending order\nteam_counts = team_counts.sort_index(ascending=False)\n\n# Creating a bar plot\nplt.bar(team_counts.index, team_counts.values)\n\n# Adding labels and title\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Technician Count by Team')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "How many missions were launched after 1928 and how many ships were involved in each of those missions, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmission = pd.read_sql(\"SELECT * FROM mission\", conn)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nmission.columns = mission.columns.str.lower()\nship.columns = ship.columns.str.lower()\n\n# Merge mission and ship tables\nmerged_df = pd.merge(mission, ship, on='ship_id')\n\n# Filter data for launched_year > 1928\nfiltered_df = merged_df[merged_df['launched_year'] > 1928]\n\n# Group by launched_year and count the number of records\ngrouped_df = filtered_df.groupby('launched_year').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['launched_year'], grouped_df['count'])\nplt.xlabel('Launched Year')\nplt.ylabel('Count')\nplt.title('Number of Missions by Launched Year')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "What are the average ages of artists by countries ? Visualize the result with a bar , display in ascending by the X-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Calculate average age by country\navg_age_by_country = artist.groupby('country')['age'].mean().reset_index()\n\n# Sort by country in ascending order\navg_age_by_country = avg_age_by_country.sort_values('country')\n\n# Plot bar chart\nplt.bar(avg_age_by_country['country'], avg_age_by_country['age'])\nplt.xlabel('Country')\nplt.ylabel('Average Age')\nplt.title('Average Age of Artists by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "Which regions experienced a storm with a minimum of 10 deaths, and what is the corresponding death count for each region? Display the information using a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naffected_region = pd.read_sql(\"SELECT * FROM affected_region\", conn)\nregion = pd.read_sql(\"SELECT * FROM region\", conn)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\naffected_region.columns = affected_region.columns.str.lower()\nregion.columns = region.columns.str.lower()\nstorm.columns = storm.columns.str.lower()\n\n# Merge tables affected_region, region, and storm\nmerged_data = pd.merge(pd.merge(affected_region, region, on='region_id'), storm, on='storm_id')\n\n# Filter data where number_deaths >= 10\nfiltered_data = merged_data[merged_data['number_deaths'] >= 10]\n\n# Group by region_name and count number_deaths\ngrouped_data = filtered_data.groupby('region_name').count()['number_deaths']\n\n# Plot bar chart\nplt.bar(grouped_data.index, grouped_data.values)\nplt.xlabel('Region')\nplt.ylabel('Number of Deaths')\nplt.title('Number of Deaths by Region')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "Show how many carrriers for each shops in a bar chart, and could you sort bars from high to low order?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the stock table\nstock = pd.read_sql(\"SELECT * FROM stock\", conn)\nstock.columns = map(str.lower, stock.columns)\n\n# Read the device table\ndevice = pd.read_sql(\"SELECT * FROM device\", conn)\ndevice.columns = map(str.lower, device.columns)\n\n# Read the shop table\nshop = pd.read_sql(\"SELECT * FROM shop\", conn)\nshop.columns = map(str.lower, shop.columns)\n\n# Merge the tables\nmerged_data = pd.merge(stock, device, on=\"device_id\")\nmerged_data = pd.merge(merged_data, shop, on=\"shop_id\")\n\n# Perform the aggregation\naggregated_data = merged_data.groupby(\"shop_name\").size().reset_index(name=\"count\")\naggregated_data = aggregated_data.sort_values(\"shop_name\", ascending=False)\n\n# Plot the bar chart\nplt.bar(aggregated_data[\"shop_name\"], aggregated_data[\"count\"])\nplt.xlabel(\"Shop Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Devices per Shop\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "Return a bar chart showing how many shops in each location , I want to display X from high to low order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nshop = pd.read_sql(\"SELECT * FROM shop\", conn)\nshop.columns = shop.columns.str.lower()\n\n# Group by location and count the occurrences\nlocation_counts = shop.groupby('location').size().reset_index(name='count')\n\n# Sort by location in descending order\nlocation_counts = location_counts.sort_values('location', ascending=False)\n\n# Create bar plot\nplt.bar(location_counts['location'], location_counts['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Shops by Location')\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Tell me how many songs each singer has, order in desc by the total number.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the singer and song tables\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsong = pd.read_sql(\"SELECT * FROM song\", conn)\n\n# Convert column names to lowercase\nsinger.columns = singer.columns.str.lower()\nsong.columns = song.columns.str.lower()\n\n# Merge the singer and song tables on Singer_ID\nmerged = pd.merge(singer, song, on=\"singer_id\")\n\n# Perform the group by and count\ngrouped = merged.groupby(\"name\").size().reset_index(name=\"count\")\ngrouped = grouped.sort_values(\"count\", ascending=False)\n\n# Plot the bar chart\nplt.bar(grouped[\"name\"], grouped[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Songs by Singer\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show me the total number by product category in a bar , and list from low to high by the the total number .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmailshot_campaigns = pd.read_sql(\"SELECT * FROM mailshot_campaigns\", conn)\nmailshot_campaigns.columns = mailshot_campaigns.columns.str.lower()\n\n# Group by product_category and count the number of occurrences\ncategory_counts = mailshot_campaigns.groupby('product_category').size()\n\n# Sort the categories by count in ascending order\ncategory_counts = category_counts.sort_values()\n\n# Create a bar plot\nplt.bar(category_counts.index, category_counts.values)\n\n# Set the x-axis label\nplt.xlabel('Product Category')\n\n# Set the y-axis label\nplt.ylabel('Count')\n\n# Set the plot title\nplt.title('Number of Campaigns by Product Category')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "question": "How many employees does each role have? Plot a bar chart listing role id and number of employees, and could you order Y in descending order?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ROLES table\nroles_df = pd.read_sql(\"SELECT * FROM ROLES\", conn)\nroles_df.columns = roles_df.columns.str.lower()\n\n# Read the Employees table\nemployees_df = pd.read_sql(\"SELECT * FROM Employees\", conn)\nemployees_df.columns = employees_df.columns.str.lower()\n\n# Merge the two tables on role_code\nmerged_df = pd.merge(roles_df, employees_df, on=\"role_code\")\n\n# Group by role_code and count the number of occurrences\ngrouped_df = merged_df.groupby(\"role_code\").size().reset_index(name=\"count\")\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values(by=\"count\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df[\"role_code\"], sorted_df[\"count\"])\nplt.xlabel(\"Role Code\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Employees by Role Code\")\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "List the name and the number of stations for all the cities that have at least 15 stations with a bar chart , and display by the names from high to low .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstation.columns = station.columns.str.lower()\n\n# Group by city and count the number of rows\ncity_counts = station.groupby('city').size().reset_index(name='count')\n\n# Sort the cities in descending order\ncity_counts = city_counts.sort_values('city', ascending=False)\n\n# Create a bar plot\nplt.bar(city_counts['city'], city_counts['count'])\nplt.xlabel('City')\nplt.ylabel('Count')\nplt.title('Number of Stations by City')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "What is the count of patients who are taking the medication and who are not taking the medication, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nMedication = pd.read_sql(\"SELECT * FROM Medication\", conn)\nPrescribes = pd.read_sql(\"SELECT * FROM Prescribes\", conn)\nMedication.columns = Medication.columns.str.lower()\nPrescribes.columns = Prescribes.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Medication, Prescribes, left_on='code', right_on='medication')\n\n# Create a new column 'medicationstatus' based on the condition\nmerged_df['medicationstatus'] = merged_df['name'].apply(lambda x: 'taking' if x == 'procrastin-x' else 'not taking')\n\n# Group by 'medicationstatus' and count the occurrences\ngrouped_df = merged_df.groupby('medicationstatus').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['medicationstatus'], grouped_df['count'])\nplt.xlabel('Medication Status')\nplt.ylabel('Count')\nplt.title('Medication Status')\nplt.show()"
  },
  {
    "db_id": "aircraft",
    "question": "Can you create a bar chart displaying the count of each aircraft in the database?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naircraft = pd.read_sql(\"SELECT * FROM aircraft\", conn)\nMATCH = pd.read_sql(\"SELECT * FROM MATCH\", conn)\naircraft.columns = aircraft.columns.str.lower()\nMATCH.columns = MATCH.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(aircraft, MATCH, left_on='aircraft_id', right_on='winning_aircraft')\n\n# Group by aircraft and count the occurrences\ngrouped_df = merged_df.groupby('aircraft').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['aircraft'], grouped_df['count'])\nplt.xlabel('Aircraft')\nplt.ylabel('Count')\nplt.title('Number of Wins per Aircraft')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Return a bar on what is the code of each role and the number of employees in each role?, and I want to display bars in ascending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Employees table\nemployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\n\n# Convert column names to lowercase\nemployees.columns = employees.columns.str.lower()\n\n# Perform the SQL query\nresult = employees.groupby('role_code').size().reset_index(name='count').sort_values('role_code')\n\n# Generate the bar chart\nplt.bar(result['role_code'], result['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Employees by Role Code')\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "List the number of the name of physicians who took some appointment, and display by the X-axis from low to high please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the appointment table\nappointment = pd.read_sql(\"SELECT * FROM appointment\", conn)\n\n# Read the physician table\nphysician = pd.read_sql(\"SELECT * FROM physician\", conn)\n\n# Convert column names to lowercase\nappointment.columns = appointment.columns.str.lower()\nphysician.columns = physician.columns.str.lower()\n\n# merge the appointment and physician tables on the physician column\nmerged_data = pd.merge(appointment, physician, left_on=\"physician\", right_on=\"employeeid\")\n\n# group by name and count the occurrences\ngrouped_data = merged_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# sort the data by name in ascending order\nsorted_data = grouped_data.sort_values(\"name\", ascending=True)\n\n# plot the bar chart\nplt.bar(sorted_data[\"name\"], sorted_data[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Appointments by Physician\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "document_management",
    "question": "What are the different role codes for users , and how many users have each Show bar chart , order by the the total number from high to low .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nusers = pd.read_sql(\"SELECT * FROM users\", conn)\nusers.columns = users.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\nrole_counts = users.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by count in descending order\nrole_counts = role_counts.sort_values(by='count', ascending=False)\n\n# Creating the bar plot\nplt.bar(role_counts['role_code'], role_counts['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Users by Role Code')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "What are the average ages of artists by countries ? Visualize the result with a bar , order in descending by the X-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Calculate average age by country\navg_age_by_country = artist.groupby('country')['age'].mean().reset_index()\n\n# Sort by country in descending order\navg_age_by_country = avg_age_by_country.sort_values('country', ascending=False)\n\n# Plot the bar chart\nplt.bar(avg_age_by_country['country'], avg_age_by_country['age'])\nplt.xlabel('Country')\nplt.ylabel('Average Age')\nplt.title('Average Age of Artists by Country')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "What are the \"date in location from\" and \"date in location to\" for the document with the name \"Robin CV\" shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDocument_locations = pd.read_sql(\"SELECT * FROM Document_locations\", conn)\nAll_documents = pd.read_sql(\"SELECT * FROM All_documents\", conn)\nDocument_locations.columns = Document_locations.columns.str.lower()\nAll_documents.columns = All_documents.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(Document_locations, All_documents, on='document_id')\n\n# Filtering the documents with name 'robin cv'\nfiltered_df = merged_df[merged_df['document_name'] == 'robin cv']\n\n# Selecting the required columns\nresult_df = filtered_df[['date_in_location_from', 'date_in_locaton_to']]\n\n# Converting the date columns to datetime type\nresult_df['date_in_location_from'] = pd.to_datetime(result_df['date_in_location_from'])\nresult_df['date_in_locaton_to'] = pd.to_datetime(result_df['date_in_locaton_to'])\n\n# Calculating the duration of each document\nresult_df['duration'] = result_df['date_in_locaton_to'] - result_df['date_in_location_from']\n\n# Plotting the bar chart\nplt.bar(result_df.index, result_df['duration'].dt.days)\nplt.xlabel('Document Index')\nplt.ylabel('Duration (days)')\nplt.title('Duration of \"robin cv\" Documents')\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "what are the different role codes for users , and how many users have each ? , list in ascending by the Y please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nusers = pd.read_sql(\"SELECT * FROM users\", conn)\nusers.columns = users.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\nrole_counts = users.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nrole_counts = role_counts.sort_values('count')\n\n# Creating a bar plot\nplt.bar(role_counts['role_code'], role_counts['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Users by Role Code')\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "List all payment methods and number of payments using each payment methods by a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Customer_Payments table\ncustomer_payments = pd.read_sql(\"SELECT * FROM Customer_Payments\", conn)\n\n# Convert column names to lowercase\ncustomer_payments.columns = customer_payments.columns.str.lower()\n\n# Perform the SQL query\npayment_counts = customer_payments.groupby('payment_method_code').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(payment_counts['payment_method_code'], payment_counts['count'])\nplt.xlabel('Payment Method Code')\nplt.ylabel('Count')\nplt.title('Payment Method Counts')\nplt.show()"
  },
  {
    "db_id": "browser_web",
    "question": "Draw a bar chart of operating system versus the total number , display from high to low by the names please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nweb_client_accelerator = pd.read_sql(\"SELECT * FROM web_client_accelerator\", conn)\nweb_client_accelerator.columns = web_client_accelerator.columns.str.lower()\n\n# Group by operating_system and count the occurrences\noperating_system_counts = web_client_accelerator.groupby('operating_system').size().reset_index(name='count')\n\n# Sort by operating_system in descending order\noperating_system_counts = operating_system_counts.sort_values('operating_system', ascending=False)\n\n# Create a bar plot\nplt.bar(operating_system_counts['operating_system'], operating_system_counts['count'])\nplt.xlabel('Operating System')\nplt.ylabel('Count')\nplt.title('Number of Clients by Operating System')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "What is the number of countries in the artist table?, I want to order from high to low by the x-axis.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the artist table\nartist_df = pd.read_sql(\"SELECT * FROM artist\", conn)\n\n# Convert column names to lowercase\nartist_df.columns = artist_df.columns.str.lower()\n\n# Perform the SQL query\nresult = artist_df.groupby('country').size().reset_index(name='count').sort_values('country', ascending=False)\n\n# Create the bar plot\nplt.bar(result['country'], result['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Artists by Country')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "What are the id of each employee and the number of document destroyed by that employee . Visualize by scatter chart .",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nDocuments_to_be_destroyed = pd.read_sql(\"SELECT * FROM Documents_to_be_destroyed\", conn)\nDocuments_to_be_destroyed.columns = Documents_to_be_destroyed.columns.str.lower()\n\n# Assuming the table data is stored in a DataFrame called \"Documents_to_be_destroyed\"\n\n# Grouping the data by \"destroyed_by_employee_id\" and counting the occurrences\ndestroyed_counts = Documents_to_be_destroyed.groupby('destroyed_by_employee_id').size().reset_index(name='count')\n\n# Creating a scatter plot\nplt.scatter(destroyed_counts['destroyed_by_employee_id'], destroyed_counts['count'])\n\n# Adding labels and title\nplt.xlabel('Destroyed by Employee ID')\nplt.ylabel('Count')\nplt.title('Number of Documents Destroyed by Employee')\n\n# Displaying the scatter plot\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "How many services for each service type description? Use a bar chart to show it, could you sort in ascending by the Y please?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Ref_Service_Types table\nref_service_types = pd.read_sql(\"SELECT * FROM Ref_Service_Types\", conn)\n\n# Read the Services table\nservices = pd.read_sql(\"SELECT * FROM Services\", conn)\n\n# Convert column names to lowercase\nref_service_types.columns = ref_service_types.columns.str.lower()\nservices.columns = services.columns.str.lower()\n\n# merge the two tables on service_type_code\nmerged_data = pd.merge(ref_service_types, services, on=\"service_type_code\")\n\n# group by service_type_code and count the number of occurrences\ngrouped_data = merged_data.groupby(\"service_type_code\").size().reset_index(name=\"count\")\n\n# sort the data by count in ascending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=True)\n\n# plot the bar chart\nplt.bar(sorted_data[\"service_type_code\"], sorted_data[\"count\"])\nplt.xlabel(\"Service Type Code\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Services by Service Type\")\nplt.show()\n"
  },
  {
    "db_id": "ship_mission",
    "question": "What is the total number of each ship type ? Give me a bar chart , display X in asc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Group by 'type' and count the occurrences\nship_count = ship.groupby('type').size().reset_index(name='count')\n\n# Sort the dataframe by 'type' in ascending order\nship_count = ship_count.sort_values('type')\n\n# Create a bar plot\nplt.bar(ship_count['type'], ship_count['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Count of Ship Types')\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "What are the ids and details of events that have more than one participants Visualize by bar chart, and I want to show by the y-axis from high to low.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the EVENTS table\nevents = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\nevents.columns = map(str.lower, events.columns)\n\n# Read the Participants_in_Events table\nparticipants = pd.read_sql(\"SELECT * FROM Participants_in_Events\", conn)\nparticipants.columns = map(str.lower, participants.columns)\n\n# Merge the EVENTS and Participants_in_Events tables\nmerged_data = pd.merge(events, participants, on=\"event_id\")\n\n# Group by Event_Details and count the number of Event_IDs\ngrouped_data = merged_data.groupby(\"event_details\").count()[\"event_id\"]\n\n# Sort the data by Event_ID in descending order\nsorted_data = grouped_data.sort_values(ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data.index, sorted_data.values)\nplt.xlabel(\"Event Details\")\nplt.ylabel(\"Number of Event IDs\")\nplt.title(\"Bar Chart of Event Details vs Number of Event IDs\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Give me a bar chart for mean tonnage of each type, show by the bar in desc.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ship table\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = ship_df.groupby('type')['tonnage'].mean().reset_index().sort_values('type', ascending=False)\n\n# Generate the bar plot\nplt.bar(result_df['type'], result_df['tonnage'])\nplt.xlabel('Type')\nplt.ylabel('Average Tonnage')\nplt.title('Average Tonnage by Ship Type')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "What are the names and ages of artists ? Show the result in a bar graph , and I want to rank names in descending order .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Assuming the data is already loaded into the 'artist' dataframe\n\n# Sort the dataframe by name in descending order\nsorted_artist = artist.sort_values(by='name', ascending=False)\n\n# Extract the name and age columns\nname = sorted_artist['name']\nage = sorted_artist['age']\n\n# Create a bar plot\nplt.bar(name, age)\n\n# Add labels and title\nplt.xlabel('Name')\nplt.ylabel('Age')\nplt.title('Artist Age by Name')\n\n# Rotate x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show different citizenship of singers and the number of singers of each citizenship in a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the singer table into a pandas DataFrame\nsinger_df = pd.read_sql(\"SELECT * FROM singer\", conn)\n\n# Convert column names to lowercase\nsinger_df.columns = singer_df.columns.str.lower()\n\n# Perform the SQL query and group by Citizenship\ngrouped_df = singer_df.groupby('citizenship').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['citizenship'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "Visualize a bar chart for what are the names and damage in millions for storms , ordered by their max speeds descending ?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm.columns = storm.columns.str.lower()\n\n# Assuming the storm data is stored in a dataframe called 'storm'\n\n# Sort the data by max_speed in descending order\nsorted_storm = storm.sort_values(by='max_speed', ascending=False)\n\n# Select the name and damage_millions_usd columns\nselected_data = sorted_storm[['name', 'damage_millions_usd']]\n\n# Plot the bar chart\nplt.bar(selected_data['name'], selected_data['damage_millions_usd'])\nplt.xlabel('Storm Name')\nplt.ylabel('Damage (Millions USD)')\nplt.title('Damage caused by storms')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Compare the average of artists' age by country in a bar graph , rank by the Y-axis in descending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Calculate average age by country\navg_age_by_country = artist.groupby('country')['age'].mean().reset_index()\n\n# Sort by average age in descending order\navg_age_by_country = avg_age_by_country.sort_values('age', ascending=False)\n\n# Plot bar chart\nplt.bar(avg_age_by_country['country'], avg_age_by_country['age'])\nplt.xlabel('Country')\nplt.ylabel('Average Age')\nplt.title('Average Age of Artists by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "Show me a bar chart displaying the count of devices for each carrier in stock, ordered by the count in descending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstock = pd.read_sql(\"SELECT * FROM stock\", conn)\ndevice = pd.read_sql(\"SELECT * FROM device\", conn)\nstock.columns = stock.columns.str.lower()\ndevice.columns = device.columns.str.lower()\n\n# Joining the stock and device tables\nmerged_df = pd.merge(stock, device, on='device_id')\n\n# Grouping by carrier and counting the number of occurrences\ngrouped_df = merged_df.groupby('carrier').size().reset_index(name='count')\n\n# Sorting by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Creating the bar plot\nplt.bar(sorted_df['carrier'], sorted_df['count'])\nplt.xlabel('Carrier')\nplt.ylabel('Count')\nplt.title('Number of Devices by Carrier')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "How many members are there in the \"Bootup Baltimore\" club and can you display their last names in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nstudent = pd.read_sql(\"SELECT * FROM student\", conn)\nclub.columns = club.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\nstudent.columns = student.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(club, member_of_club, on='clubid')\nmerged_df = pd.merge(merged_df, student, left_on='stuid', right_on='stuid')\n\n# Filter data\nfiltered_df = merged_df[merged_df['clubname'] == 'Bootup Baltimore']\n\n# Group by lname and count\ngrouped_df = filtered_df.groupby('lname').size().reset_index(name='count')\n\n# Sort by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot bar chart\nplt.bar(sorted_df['lname'], sorted_df['count'])\nplt.xlabel('Last Name')\nplt.ylabel('Count')\nplt.title('Number of Students in Bootup Baltimore Club by Last Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "What is the relationship between service type code and number of services? Show me a scatter chart.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Ref_Service_Types table\nref_service_types = pd.read_sql(\"SELECT * FROM Ref_Service_Types\", conn)\nref_service_types.columns = map(str.lower, ref_service_types.columns)\n\n# Read the Services table\nservices = pd.read_sql(\"SELECT * FROM Services\", conn)\nservices.columns = map(str.lower, services.columns)\n\n# Merge the two tables on Service_Type_Code\nmerged_data = pd.merge(ref_service_types, services, on=\"service_type_code\")\n\n# Group by Service_Type_Code and count the occurrences\ngrouped_data = merged_data.groupby(\"service_type_code\").size().reset_index(name=\"count\")\n\n# Scatter plot\nplt.scatter(grouped_data[\"service_type_code\"], grouped_data[\"count\"])\nplt.xlabel(\"Service Type Code\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of Services by Service Type Code\")\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "Show names of technicians and the number of machines they are assigned to repair with a bar chart, and display by the the total number in desc.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the repair_assignment table\nrepair_assignment = pd.read_sql(\"SELECT * FROM repair_assignment\", conn)\n\n# Read the technician table\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\n\n# Convert column names to lowercase\nrepair_assignment.columns = repair_assignment.columns.str.lower()\ntechnician.columns = technician.columns.str.lower()\n\n# merge the repair_assignment and technician tables on technician_id\nmerged_data = pd.merge(repair_assignment, technician, on=\"technician_id\")\n\n# group by technician name and count the number of assignments\ngrouped_data = merged_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# sort the data by count in descending order\nsorted_data = grouped_data.sort_values(by=\"count\", ascending=False)\n\n# plot the bar chart\nplt.bar(sorted_data[\"name\"], sorted_data[\"count\"])\nplt.xlabel(\"Technician Name\")\nplt.ylabel(\"Number of Assignments\")\nplt.title(\"Number of Assignments per Technician\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "insurance_and_eClaims",
    "question": "Find the number of records of each policy type and its type code Visualize by bar chart , I want to list by the y axis in asc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\npolicies = pd.read_sql(\"SELECT * FROM policies\", conn)\npolicies.columns = policies.columns.str.lower()\n\n# Group by policy_type_code and count the number of occurrences\npolicy_counts = policies.groupby('policy_type_code').size().reset_index(name='count')\n\n# Sort the counts in ascending order\npolicy_counts = policy_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(policy_counts['policy_type_code'], policy_counts['count'])\nplt.xlabel('Policy Type Code')\nplt.ylabel('Count')\nplt.title('Number of Policies by Policy Type Code')\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "Which clubs have one or more members from the city with code \"BAL\"? Show a bar chart displaying the names of the clubs and the count of members in each club.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nstudent = pd.read_sql(\"SELECT * FROM student\", conn)\nclub.columns = club.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\nstudent.columns = student.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(club, member_of_club, on='clubid')\nmerged_df = pd.merge(merged_df, student, left_on='stuid', right_on='stuid')\n\n# Filter data\nfiltered_df = merged_df[merged_df['city_code'] == 'BAL']\n\n# Group by clubname and count\ngrouped_df = filtered_df.groupby('clubname').size().reset_index(name='count')\n\n# Plot bar chart\nplt.bar(grouped_df['clubname'], grouped_df['count'])\nplt.xlabel('Club Name')\nplt.ylabel('Count')\nplt.title('Number of Students in Each Club')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "How many orders are there for each order status, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\ncustomers.columns = customers.columns.str.lower()\norders.columns = orders.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(customers, orders, on='customer_id')\n\n# Group by order_status and count the number of occurrences\ngrouped_df = merged_df.groupby('order_status').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['order_status'], grouped_df['count'])\nplt.xlabel('Order Status')\nplt.ylabel('Count')\nplt.title('Number of Orders by Status')\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "List the problem id and log id which are assigned to the staff named Rylan Homenick. Plot them as scatter chart.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the staff table\nstaff = pd.read_sql(\"SELECT * FROM staff\", conn)\n\n# Read the data from the problem_log table\nproblem_log = pd.read_sql(\"SELECT * FROM problem_log\", conn)\n\n# Convert column names to lowercase\nstaff.columns = staff.columns.str.lower()\nproblem_log.columns = problem_log.columns.str.lower()\n\n# Merge the staff and problem_log tables on the assigned_to_staff_id column\nmerged_data = pd.merge(staff, problem_log, left_on=\"staff_id\", right_on=\"assigned_to_staff_id\")\n\n# Filter the merged data for staff with first name \"Rylan\" and last name \"Homenick\"\nfiltered_data = merged_data[(merged_data[\"staff_first_name\"] == \"Rylan\") & (merged_data[\"staff_last_name\"] == \"Homenick\")]\n\n# Create a scatter plot of problem_id vs problem_log_id\nplt.scatter(filtered_data[\"problem_id\"], filtered_data[\"problem_log_id\"])\nplt.xlabel(\"Problem ID\")\nplt.ylabel(\"Problem Log ID\")\nplt.title(\"Scatter Plot of Problem ID vs Problem Log ID\")\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "What is the average duration of trips that started from each station based on their longitude, visualized in a scatter plot?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\nstation.columns = station.columns.str.lower()\ntrip.columns = trip.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(station, trip, left_on='id', right_on='start_station_id')\n\n# Calculate the average duration for each longitude\navg_duration = merged_df.groupby('long')['duration'].mean()\n\n# Create a scatter plot\nplt.scatter(avg_duration.index, avg_duration.values)\nplt.xlabel('Longitude')\nplt.ylabel('Average Duration')\nplt.title('Average Duration vs Longitude')\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "I want to see trend of the number of season by season, and order in descending by the X.",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the game table\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\n\n# Convert column names to lowercase\ngame.columns = game.columns.str.lower()\n\n# Perform the SQL query\nresult = game.groupby('season').size().reset_index(name='count').sort_values('season', ascending=False)\n\n# Plot the line chart\nplt.plot(result['season'], result['count'])\nplt.xlabel('Season')\nplt.ylabel('Count')\nplt.title('Number of Games per Season')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Find those years for all exhibitions with ticket prices lower than 15 , return a bar chart that groups by year and counts the total number of years .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nexhibition.columns = exhibition.columns.str.lower()\n\n# Filter the dataframe based on the condition ticket_price < 15\nfiltered_exhibition = exhibition[exhibition['ticket_price'] < 15]\n\n# Group the filtered dataframe by year and count the number of occurrences\ngrouped_exhibition = filtered_exhibition.groupby('year').size().reset_index(name='count')\n\n# Create a bar plot\nplt.bar(grouped_exhibition['year'], grouped_exhibition['count'])\nplt.xlabel('Year')\nplt.ylabel('Count')\nplt.title('Number of Exhibitions with Ticket Price < 15')\nplt.show()"
  },
  {
    "db_id": "icfp_1",
    "question": "Show me a bar chart displaying the number of papers written by each author with titles containing the word \"Functional\".",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nauthors = pd.read_sql(\"SELECT * FROM authors\", conn)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\npapers = pd.read_sql(\"SELECT * FROM papers\", conn)\nauthors.columns = authors.columns.str.lower()\nauthorship.columns = authorship.columns.str.lower()\npapers.columns = papers.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(authors, authorship, on='authid')\nmerged_df = pd.merge(merged_df, papers, on='paperid')\n\n# Filter rows with title containing 'functional'\nfiltered_df = merged_df[merged_df['title'].str.contains('functional', case=False)]\n\n# Group by fname and count\ngrouped_df = filtered_df.groupby('fname').size().reset_index(name='count')\n\n# Plot bar chart\nplt.bar(grouped_df['fname'], grouped_df['count'])\nplt.xlabel('Author')\nplt.ylabel('Count')\nplt.title('Number of Papers with \"Functional\" in Title by Author')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "how many regions were affected by each storm?, could you sort bar in descending order?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the storm table\nstorm_df = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm_df.columns = map(str.lower, storm_df.columns)\n\n# Read the affected_region table\naffected_region_df = pd.read_sql(\"SELECT * FROM affected_region\", conn)\naffected_region_df.columns = map(str.lower, affected_region_df.columns)\n\n# Merge the storm and affected_region tables\nmerged_df = pd.merge(storm_df, affected_region_df, on=\"storm_id\")\n\n# Perform the SQL query\nresult_df = merged_df.groupby(\"name\").size().reset_index(name=\"count\").sort_values(\"name\", ascending=False)\n\n# Generate the bar chart\nplt.bar(result_df[\"name\"], result_df[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of Storms by Name\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Create a bar chart showing the total number across premises type , I want to order Y in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\npremises = pd.read_sql(\"SELECT * FROM premises\", conn)\npremises.columns = premises.columns.str.lower()\n\n# Group by premises_type and count the number of occurrences\npremises_count = premises.groupby('premises_type').size().reset_index(name='count')\n\n# Sort by count in ascending order\npremises_count = premises_count.sort_values('count')\n\n# Create bar plot\nplt.bar(premises_count['premises_type'], premises_count['count'])\nplt.xlabel('Premises Type')\nplt.ylabel('Count')\nplt.title('Number of Premises by Type')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "What is the distribution of document structures in the document with the highest number of accesses, represented by a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ndocuments = pd.read_sql(\"SELECT * FROM documents\", conn)\ndocument_structures = pd.read_sql(\"SELECT * FROM document_structures\", conn)\ndocuments.columns = documents.columns.str.lower()\ndocument_structures.columns = document_structures.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(documents, document_structures, on='document_structure_code')\n\n# Grouping and counting\ngrouped_df = merged_df.groupby('document_structure_description').size().reset_index(name='count')\n\n# Sorting by count\nsorted_df = grouped_df.sort_values('count')\n\n# Plotting the bar chart\nplt.bar(sorted_df['document_structure_description'], sorted_df['count'])\nplt.xlabel('Document Structure Description')\nplt.ylabel('Count')\nplt.title('Count of Documents by Document Structure Description')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "battle_death",
    "question": "Show a bar chart about the number of results of the battles when the bulgarian commander is not 'Boril', I want to sort from low to high by the Y-axis.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the battle table\nbattle_df = pd.read_sql(\"SELECT * FROM battle\", conn)\n\n# Convert column names to lowercase\nbattle_df.columns = battle_df.columns.str.lower()\n\n# Filter the data where bulgarian_commander is not 'Boril'\nfiltered_df = battle_df[battle_df['bulgarian_commander'] != 'Boril']\n\n# Group by result and count the occurrences\ngrouped_df = filtered_df.groupby('result').size().reset_index(name='count')\n\n# Sort the dataframe by count in ascending order\nsorted_df = grouped_df.sort_values('count', ascending=True)\n\n# Create a bar plot\nplt.bar(sorted_df['result'], sorted_df['count'])\nplt.xlabel('Result')\nplt.ylabel('Count')\nplt.title('Battle Results')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Show the number of stations installed change over the installation date of in station table using a line chart .",
    "chart": "Line",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstation.columns = station.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called 'station'\n\n# Grouping the data by installation_date and counting the occurrences\ngrouped_data = station.groupby('installation_date').size().reset_index(name='count')\n\n# Sorting the data by installation_date\nsorted_data = grouped_data.sort_values('installation_date')\n\n# Plotting the line chart\nplt.plot(sorted_data['installation_date'], sorted_data['count'])\nplt.xlabel('Installation Date')\nplt.ylabel('Count')\nplt.title('Count of Installations by Date')\nplt.show()"
  },
  {
    "db_id": "small_bank_1",
    "question": "Show me a bar chart displaying the count of checking accounts for each account name.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\naccounts.columns = accounts.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(accounts, checking, on='custid')\n\n# Group by name and count the number of occurrences\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['name'], grouped_df['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Number of Accounts by Name')\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Compare the number of participants in each participant type code using a bar chart , and could you rank from low to high by the Y-axis please ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nParticipants = pd.read_sql(\"SELECT * FROM Participants\", conn)\nParticipants.columns = Participants.columns.str.lower()\n\n# Grouping and counting participant_type_code\ngrouped = Participants.groupby('participant_type_code').size().reset_index(name='count')\n\n# Sorting by count in ascending order\nsorted_grouped = grouped.sort_values('count')\n\n# Creating bar plot\nplt.bar(sorted_grouped['participant_type_code'], sorted_grouped['count'])\nplt.xlabel('Participant Type Code')\nplt.ylabel('Count')\nplt.title('Count of Participants by Participant Type Code')\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Draw a bar chart for what are the ids and details of events that have more than one participants?, and show in asc by the Y.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the EVENTS table\nevents = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\nevents.columns = map(str.lower, events.columns)\n\n# Read the Participants_in_Events table\nparticipants = pd.read_sql(\"SELECT * FROM Participants_in_Events\", conn)\nparticipants.columns = map(str.lower, participants.columns)\n\n# Merge the EVENTS and Participants_in_Events tables on Event_ID\nmerged_data = pd.merge(events, participants, on=\"event_id\")\n\n# Group by Event_Details and count the number of Event_IDs\nevent_counts = merged_data.groupby(\"event_details\")[\"event_id\"].count().reset_index()\n\n# Sort the data by Event_ID in ascending order\nevent_counts = event_counts.sort_values(\"event_id\")\n\n# Create a bar plot\nplt.bar(event_counts[\"event_details\"], event_counts[\"event_id\"])\nplt.xlabel(\"Event Details\")\nplt.ylabel(\"Event ID Count\")\nplt.title(\"Event ID Count by Event Details\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tvshow",
    "question": "List top 3 highest Rating TV series . List the TV series's Episode and Rating with a pie chart .",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nTV_series = pd.read_sql(\"SELECT * FROM TV_series\", conn)\nTV_series.columns = TV_series.columns.str.lower()\n\n# Assuming TV_series is a DataFrame containing the table data\n\n# Selecting the top 3 episodes with highest ratings\ntop_episodes = TV_series.sort_values('rating', ascending=False).head(3)\n\n# Creating a pie chart to visualize the ratings of the top episodes\nplt.pie(top_episodes['rating'], labels=top_episodes['episode'], autopct='%1.1f%%')\nplt.title('Top 3 Episodes by Rating')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Give me a bar chart for mean tonnage of each type, show by the Y in asc.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ship table\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = ship_df.groupby('type')['tonnage'].mean().reset_index().sort_values('tonnage')\n\n# Generate the bar plot\nplt.bar(result_df['type'], result_df['tonnage'])\nplt.xlabel('Type')\nplt.ylabel('Average Tonnage')\nplt.title('Average Tonnage by Ship Type')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "List the name and the number of stations for all the cities that have at least 15 stations with a bar chart, and show by the y-axis from low to high please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"station\" table\nstation_data = pd.read_sql(\"SELECT * FROM station\", conn)\n\n# Convert column names to lowercase\nstation_data.columns = station_data.columns.str.lower()\n\n# Perform the SQL query\nresult = station_data.groupby('city').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result['city'], result['count'])\nplt.xlabel('City')\nplt.ylabel('Count')\nplt.title('Number of Stations in Each City')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "Find the number of medications prescribed for each brand. ",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the medication and prescribes tables\nmedication = pd.read_sql(\"SELECT * FROM medication\", conn)\nprescribes = pd.read_sql(\"SELECT * FROM prescribes\", conn)\n\n# Convert column names to lowercase\nmedication.columns = medication.columns.str.lower()\nprescribes.columns = prescribes.columns.str.lower()\n\n# merge the medication and prescribes tables on the code column\nmerged_data = pd.merge(medication, prescribes, left_on='code', right_on='medication')\n\n# group by brand and count the occurrences\nbrand_counts = merged_data.groupby('brand').size()\n\n# plot the pie chart\nplt.pie(brand_counts, labels=brand_counts.index, autopct='%1.1f%%')\nplt.title('Medication Brand Distribution')\nplt.show()\n"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death, show me the dates active and the total number of deaths with a bar chart, could you sort by the names in asc?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the storm table into a pandas DataFrame\nstorm_df = pd.read_sql(\"SELECT * FROM storm\", conn)\n\n# Convert column names to lowercase\nstorm_df.columns = storm_df.columns.str.lower()\n\n# Filter the DataFrame for rows where number_deaths >= 1\nfiltered_df = storm_df[storm_df['number_deaths'] >= 1]\n\n# Sort the filtered DataFrame by Dates_active in ascending order\nsorted_df = filtered_df.sort_values('dates_active')\n\n# Create a bar plot\nplt.bar(sorted_df['dates_active'], sorted_df['number_deaths'])\nplt.xlabel('Dates Active')\nplt.ylabel('Number of Deaths')\nplt.title('Number of Deaths by Dates Active')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "perpetrator",
    "question": "What are the countries of perpetrators ? Show each country and the corresponding number of perpetrators there Plot them as bar chart , and rank by the x-axis from high to low .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperpetrator = pd.read_sql(\"SELECT * FROM perpetrator\", conn)\nperpetrator.columns = perpetrator.columns.str.lower()\n\n# Group by country and count the number of occurrences\nperpetrator_count = perpetrator.groupby('country').size().reset_index(name='count')\n\n# Sort by country in descending order\nperpetrator_count = perpetrator_count.sort_values('country', ascending=False)\n\n# Plot the bar chart\nplt.bar(perpetrator_count['country'], perpetrator_count['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Perpetrators by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "Show me a bar chart displaying the number of appointments made by each patient.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nappointment = pd.read_sql(\"SELECT * FROM appointment\", conn)\npatient = pd.read_sql(\"SELECT * FROM patient\", conn)\nappointment.columns = appointment.columns.str.lower()\npatient.columns = patient.columns.str.lower()\n\n# Merge appointment and patient tables\nmerged_df = pd.merge(appointment, patient, left_on='patient', right_on='ssn')\n\n# Group by patient name and count the number of appointments\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['name'], grouped_df['count'])\nplt.xlabel('Patient Name')\nplt.ylabel('Number of Appointments')\nplt.title('Number of Appointments per Patient')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Can you create a bar chart displaying the names of employees with the role name \"Editor\" and the count of occurrences for each employee?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nROLES = pd.read_sql(\"SELECT * FROM ROLES\", conn)\nEmployees.columns = Employees.columns.str.lower()\nROLES.columns = ROLES.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Employees, ROLES, on='role_code')\n\n# Filter the data for role_name = 'Editor'\nfiltered_df = merged_df[merged_df['role_name'] == 'Editor']\n\n# Group by employee_name and count the occurrences\ngrouped_df = filtered_df.groupby('employee_name').size().reset_index(name='count')\n\n# Create the bar plot\nplt.bar(grouped_df['employee_name'], grouped_df['count'])\nplt.xlabel('Employee Name')\nplt.ylabel('Count')\nplt.title('Number of Editors per Employee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show different citizenship of singers and the number of singers of each citizenship . Show a pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Grouping the data by citizenship and counting the number of singers\nsinger_grouped = singer.groupby('citizenship').size().reset_index(name='count')\n\n# Creating a pie chart\nplt.pie(singer_grouped['count'], labels=singer_grouped['citizenship'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Displaying the pie chart\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "Please compare the frequency of the position of the pilots using a bar chart , and order Y in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot.columns = pilot.columns.str.lower()\n\n# Group by position and count the occurrences\nposition_counts = pilot.groupby('position').size().reset_index(name='count')\n\n# Sort the counts in ascending order\nposition_counts = position_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(position_counts['position'], position_counts['count'])\nplt.xlabel('Position')\nplt.ylabel('Count')\nplt.title('Count of Pilots by Position')\nplt.show()"
  },
  {
    "db_id": "gymnast",
    "question": "Show me a bar chart displaying the hometowns of gymnasts and the corresponding number of gymnasts.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngymnast = pd.read_sql(\"SELECT * FROM gymnast\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\ngymnast.columns = gymnast.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(gymnast, people, left_on='gymnast_id', right_on='people_id')\n\n# Group by hometown and count the number of occurrences\ngrouped_df = merged_df.groupby('hometown').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['hometown'], grouped_df['count'])\nplt.xlabel('Hometown')\nplt.ylabel('Count')\nplt.title('Number of Gymnasts by Hometown')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "What are the average ages of artists by countries? Visualize the result with a bar, order in descending by the X-axis.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the artist table\nartist_df = pd.read_sql(\"SELECT * FROM artist\", conn)\n\n# Convert column names to lowercase\nartist_df.columns = artist_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = artist_df.groupby('country')['age'].mean().reset_index().sort_values('country', ascending=False)\n\n# Visualize the result using a bar chart\nplt.bar(result_df['country'], result_df['age'])\nplt.xlabel('Country')\nplt.ylabel('Average Age')\nplt.title('Average Age of Artists by Country')\nplt.show()"
  },
  {
    "db_id": "gymnast",
    "question": "What are the distinct hometowns of gymnasts with total points more than 57.5 and how many gymnasts are from each hometown, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngymnast = pd.read_sql(\"SELECT * FROM gymnast\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\ngymnast.columns = gymnast.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(gymnast, people, left_on='gymnast_id', right_on='people_id')\n\n# Filter the data based on the condition\nfiltered_df = merged_df[merged_df['total_points'] > 57.5]\n\n# Group the data by hometown and count the number of occurrences\ngrouped_df = filtered_df.groupby('hometown').size().reset_index(name='count')\n\n# Sort the data by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['hometown'], sorted_df['count'])\nplt.xlabel('Hometown')\nplt.ylabel('Count')\nplt.title('Number of Gymnasts from Each Hometown')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "Return a bar chart showing how many shops in each location .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nshop = pd.read_sql(\"SELECT * FROM shop\", conn)\nshop.columns = shop.columns.str.lower()\n\n# Group by location and count the occurrences\nlocation_counts = shop.groupby('location').size().reset_index(name='count')\n\n# Create a bar plot\nplt.bar(location_counts['location'], location_counts['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Shops by Location')\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "How many injuries of 'Foot injury' or 'Knee problem' occurred in each stadium, represented by a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\nstadium = pd.read_sql(\"SELECT * FROM stadium\", conn)\ninjury_accident = pd.read_sql(\"SELECT * FROM injury_accident\", conn)\ngame.columns = game.columns.str.lower()\nstadium.columns = stadium.columns.str.lower()\ninjury_accident.columns = injury_accident.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(game, stadium, left_on='stadium_id', right_on='id')\nmerged_df = pd.merge(merged_df, injury_accident, left_on='id_x', right_on='game_id')\n\n# Filtering the data\nfiltered_df = merged_df[(merged_df['injury'] == 'Foot injury') | (merged_df['injury'] == 'Knee problem')]\n\n# Grouping and counting\ngrouped_df = filtered_df.groupby('name').size().reset_index(name='count')\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plotting the bar chart\nplt.bar(sorted_df['name'], sorted_df['count'])\nplt.xlabel('Stadium')\nplt.ylabel('Count')\nplt.title('Number of Foot Injuries and Knee Problems by Stadium')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "What is the count of missions for each distinct fate that involve ships with nationality \"United States\" represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmission = pd.read_sql(\"SELECT * FROM mission\", conn)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nmission.columns = mission.columns.str.lower()\nship.columns = ship.columns.str.lower()\n\n# Joining the mission and ship tables\nmerged_df = pd.merge(mission, ship, on='ship_id')\n\n# Filtering the data for ships with nationality as 'United States'\nfiltered_df = merged_df[merged_df['nationality'] == 'United States']\n\n# Grouping the data by fate and counting the occurrences\ngrouped_df = filtered_df.groupby('fate').size().reset_index(name='count')\n\n# Creating a pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['fate'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Find those years for all exhibitions with ticket prices lower than 15 , group by year , and count year .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nexhibition.columns = exhibition.columns.str.lower()\n\n# Filter the dataframe based on the condition ticket_price < 15\nfiltered_exhibition = exhibition[exhibition['ticket_price'] < 15]\n\n# Group the filtered dataframe by year and count the number of occurrences\ngrouped_exhibition = filtered_exhibition.groupby('year').size().reset_index(name='count')\n\n# Create a bar plot\nplt.bar(grouped_exhibition['year'], grouped_exhibition['count'])\nplt.xlabel('Year')\nplt.ylabel('Count')\nplt.title('Number of Exhibitions with Ticket Price < 15')\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "Which products rank highest in terms of the number of problems reported, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nproblems = pd.read_sql(\"SELECT * FROM problems\", conn)\nproduct = pd.read_sql(\"SELECT * FROM product\", conn)\nproblems.columns = problems.columns.str.lower()\nproduct.columns = product.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(problems, product, on='product_id')\n\n# Group by product_name and count problems\ngrouped_df = merged_df.groupby('product_name').size().reset_index(name='problem_count')\n\n# Sort by problem_count in descending order and select top 3\ntop_3_products = grouped_df.sort_values('problem_count', ascending=False).head(3)\n\n# Plot bar chart\nplt.bar(top_3_products['product_name'], top_3_products['problem_count'])\nplt.xlabel('Product Name')\nplt.ylabel('Problem Count')\nplt.title('Top 3 Products with Most Problems')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Give me a bar chart for the total number of each payment method code , and could you display by the names in descending ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nINVOICES = pd.read_sql(\"SELECT * FROM INVOICES\", conn)\nINVOICES.columns = INVOICES.columns.str.lower()\n\n# Grouping the data by payment_method_code and counting the number of occurrences\npayment_counts = INVOICES.groupby('payment_method_code').size().reset_index(name='count')\n\n# Sorting the data by payment_method_code in descending order\npayment_counts = payment_counts.sort_values('payment_method_code', ascending=False)\n\n# Creating the bar plot\nplt.bar(payment_counts['payment_method_code'], payment_counts['count'])\nplt.xlabel('Payment Method Code')\nplt.ylabel('Count')\nplt.title('Number of Invoices by Payment Method Code')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "How many drama workshop groups are there in each city? Return both the city and the count with a bar chart, sort Y from high to low order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Addresses table\naddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\naddresses.columns = map(str.lower, addresses.columns)\n\n# Read the Drama_Workshop_Groups table\ndrama_workshop_groups = pd.read_sql(\"SELECT * FROM Drama_Workshop_Groups\", conn)\ndrama_workshop_groups.columns = map(str.lower, drama_workshop_groups.columns)\n\n# Merge the two tables on Address_ID\nmerged_data = pd.merge(addresses, drama_workshop_groups, on=\"address_id\")\n\n# Perform the group by and count\ngrouped_data = merged_data.groupby(\"city_town\").size().reset_index(name=\"count\")\ngrouped_data = grouped_data.sort_values(by=\"count\", ascending=False)\n\n# Plot the bar chart\nplt.bar(grouped_data[\"city_town\"], grouped_data[\"count\"])\nplt.xlabel(\"City/Town\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Drama Workshop Groups in Each City/Town\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Compute the proportion of acceptance result, and return a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the acceptance table\nacceptance = pd.read_sql(\"SELECT * FROM acceptance\", conn)\n\n# Convert column names to lowercase\nacceptance.columns = acceptance.columns.str.lower()\n\n# Perform the SQL query\nresult_counts = acceptance.groupby('result').size()\n\n# Create a pie chart\nplt.pie(result_counts, labels=result_counts.index, autopct='%1.1f%%')\nplt.title('Acceptance Results')\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Group by citizenship and find the maximum net worth\nmax_net_worth = singer.groupby('citizenship')['net_worth_millions'].max()\n\n# Create a bar plot\nplt.bar(max_net_worth.index, max_net_worth.values)\n\n# Set the labels and title\nplt.xlabel('Citizenship')\nplt.ylabel('Max Net Worth (Millions)')\nplt.title('Max Net Worth by Citizenship')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "List all the log entry descriptions and count them using a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the problem_log table\nproblem_log = pd.read_sql(\"SELECT * FROM problem_log\", conn)\n\n# Convert column names to lowercase\nproblem_log.columns = problem_log.columns.str.lower()\n\n# Group by log_entry_description and count occurrences\nlog_entry_counts = problem_log.groupby('log_entry_description').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(log_entry_counts['log_entry_description'], log_entry_counts['count'])\nplt.xlabel('Log Entry Description')\nplt.ylabel('Count')\nplt.title('Log Entry Description Counts')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "How many carriers of devices does each shop have in stock, represented by a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstock = pd.read_sql(\"SELECT * FROM stock\", conn)\ndevice = pd.read_sql(\"SELECT * FROM device\", conn)\nshop = pd.read_sql(\"SELECT * FROM shop\", conn)\nstock.columns = stock.columns.str.lower()\ndevice.columns = device.columns.str.lower()\nshop.columns = shop.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(stock, device, on='device_id')\nmerged_df = pd.merge(merged_df, shop, on='shop_id')\n\n# Group by shop_name and count carrier\ngrouped_df = merged_df.groupby('shop_name').agg({'carrier': 'count'}).reset_index()\n\n# Plot bar chart\nplt.bar(grouped_df['shop_name'], grouped_df['carrier'])\nplt.xlabel('Shop Name')\nplt.ylabel('Count of Carrier')\nplt.title('Count of Carrier by Shop')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sakila_1",
    "question": "What are the city names and the number of addresses corresponding to the 10 cities with the least addresses, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naddress = pd.read_sql(\"SELECT * FROM address\", conn)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\naddress.columns = address.columns.str.lower()\ncity.columns = city.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(address, city, on='city_id')\n\n# Group by city and count the number of occurrences\ngrouped_df = merged_df.groupby('city').size().reset_index(name='count')\n\n# Sort the dataframe by count in ascending order and select the top 10 rows\ntop_10_cities = grouped_df.sort_values('count').head(10)\n\n# Create the bar plot\nplt.bar(top_10_cities['city'], top_10_cities['count'])\nplt.xlabel('City')\nplt.ylabel('Count')\nplt.title('Top 10 Cities by Count')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "Bar chart of the number of position from each position , list by the names in desc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot.columns = pilot.columns.str.lower()\n\n# Group by position and count the number of occurrences\nposition_counts = pilot.groupby('position').size().reset_index(name='count')\n\n# Sort the positions in descending order\nposition_counts = position_counts.sort_values('position', ascending=False)\n\n# Create a bar plot\nplt.bar(position_counts['position'], position_counts['count'])\nplt.xlabel('Position')\nplt.ylabel('Count')\nplt.title('Number of Pilots by Position')\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show the names of singers and the total sales of their songs in a bar chart, and list Y-axis in asc order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the singer table\nsinger_df = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger_df.columns = map(str.lower, singer_df.columns)\n\n# Read the song table\nsong_df = pd.read_sql(\"SELECT * FROM song\", conn)\nsong_df.columns = map(str.lower, song_df.columns)\n\n# Merge the singer and song tables on Singer_ID\nmerged_df = pd.merge(singer_df, song_df, on=\"singer_id\")\n\n# Group by singer name and calculate the sum of sales\ngrouped_df = merged_df.groupby(\"name\").sum(\"sales\").reset_index()\n\n# Sort the dataframe by sum of sales in ascending order\nsorted_df = grouped_df.sort_values(\"sales\")\n\n# Plot the bar chart\nplt.bar(sorted_df[\"name\"], sorted_df[\"sales\"])\nplt.xlabel(\"Singer Name\")\nplt.ylabel(\"Total Sales\")\nplt.title(\"Total Sales by Singer\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "products_for_hire",
    "question": "How many bookings did each customer make? Show the customer id as the Y-axis and the first name as the X-axis in a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Customers table\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\n\n# Read the bookings table\nbookings = pd.read_sql(\"SELECT * FROM bookings\", conn)\n\n# Convert column names to lowercase\ncustomers.columns = customers.columns.str.lower()\nbookings.columns = bookings.columns.str.lower()\n\n# merge the two tables on customer_id\nmerged_data = pd.merge(customers, bookings, on='customer_id')\n\n# group by first_name and count the number of occurrences\ngrouped_data = merged_data.groupby('first_name').size().reset_index(name='count')\n\n# plot the bar chart\nplt.bar(grouped_data['first_name'], grouped_data['count'])\nplt.xlabel('First Name')\nplt.ylabel('Count')\nplt.title('Number of Bookings by First Name')\nplt.show()\n"
  },
  {
    "db_id": "driving_school",
    "question": "How does the number of lessons taught by staff with the first name Janessa, last name Sawayn, and a nickname containing the letter 's' change over each lesson date? Show me a line chart.",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nLessons = pd.read_sql(\"SELECT * FROM Lessons\", conn)\nStaff = pd.read_sql(\"SELECT * FROM Staff\", conn)\nLessons.columns = Lessons.columns.str.lower()\nStaff.columns = Staff.columns.str.lower()\n\n# Merge Lessons and Staff dataframes\nmerged_df = pd.merge(Lessons, Staff, on='staff_id')\n\n# Filter the dataframe based on conditions\nfiltered_df = merged_df[(merged_df['first_name'] == 'Janessa') & (merged_df['last_name'] == 'Sawayn') & (merged_df['nickname'].str.contains('s'))]\n\n# Group by lesson_date and count the number of lesson_id\ngrouped_df = filtered_df.groupby('lesson_date').count()['lesson_id'].reset_index()\n\n# Plot the line chart\nplt.plot(grouped_df['lesson_date'], grouped_df['lesson_id'])\nplt.xlabel('Lesson Date')\nplt.ylabel('Number of Lessons')\nplt.title('Number of Lessons per Date')\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "A bar chart shows the venue for each workshop , could you sort from low to high by the names ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nworkshop = pd.read_sql(\"SELECT * FROM workshop\", conn)\nworkshop.columns = workshop.columns.str.lower()\n\n# Grouping the data by venue and counting the occurrences\nvenue_counts = workshop.groupby('venue').size().reset_index(name='count')\n\n# Sorting the data by venue in ascending order\nvenue_counts = venue_counts.sort_values('venue')\n\n# Creating the bar plot\nplt.bar(venue_counts['venue'], venue_counts['count'])\nplt.xlabel('Venue')\nplt.ylabel('Count')\nplt.title('Workshop Venues')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show me maximal net worth millions by citizenship in a bar",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Group by citizenship and calculate the maximum net worth\nmax_net_worth = singer.groupby('citizenship')['net_worth_millions'].max()\n\n# Create a bar plot\nplt.bar(max_net_worth.index, max_net_worth.values)\n\n# Set the labels and title\nplt.xlabel('Citizenship')\nplt.ylabel('Max Net Worth (Millions)')\nplt.title('Max Net Worth by Citizenship')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Give me a bar chart for mean tonnage of each type , display from high to low by the y-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Group by type and calculate average tonnage\nship_avg_tonnage = ship.groupby('type')['tonnage'].mean()\n\n# Sort the average tonnage in descending order\nship_avg_tonnage = ship_avg_tonnage.sort_values(ascending=False)\n\n# Create a bar plot\nplt.bar(ship_avg_tonnage.index, ship_avg_tonnage.values)\n\n# Set the x-axis label\nplt.xlabel('Type')\n\n# Set the y-axis label\nplt.ylabel('Average Tonnage')\n\n# Set the title of the plot\nplt.title('Average Tonnage by Ship Type')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show different types of ships and the average tonnage of ships of each type .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Calculate average tonnage by ship type\nship_avg_tonnage = ship.groupby('type')['tonnage'].mean()\n\n# Create a pie chart\nplt.pie(ship_avg_tonnage, labels=ship_avg_tonnage.index, autopct='%1.1f%%')\nplt.title('Average Tonnage by Ship Type')\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "For events that have more than one participant, count the event details for a bar chart, and list by the the number of event details in ascending.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the EVENTS table\nevents = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\n\n# Read the Participants_in_Events table\nparticipants = pd.read_sql(\"SELECT * FROM Participants_in_Events\", conn)\n\n# Convert column names to lowercase\nevents.columns = events.columns.str.lower()\nparticipants.columns = participants.columns.str.lower()\n\n# merge the two tables on event_id\nmerged_data = pd.merge(events, participants, on='event_id')\n\n# group by event_details and count the occurrences\nevent_counts = merged_data.groupby('event_details').size().reset_index(name='count')\n\n# sort the data by count in ascending order\nevent_counts = event_counts.sort_values('count', ascending=True)\n\n# plot the bar chart\nplt.bar(event_counts['event_details'], event_counts['count'])\nplt.xlabel('Event Details')\nplt.ylabel('Count')\nplt.title('Event Details vs Count')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "browser_web",
    "question": "Draw a bar chart of operating system versus the total number, display from high to low by the names please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the web_client_accelerator table\ndf = pd.read_sql(\"SELECT * FROM web_client_accelerator\", conn)\n\n# Convert column names to lowercase\ndf.columns = df.columns.str.lower()\n\n# Perform the group by and count operation\ngrouped_df = df.groupby('operating_system').size().reset_index(name='count')\n\n# Sort the dataframe by operating_system in descending order\nsorted_df = grouped_df.sort_values('operating_system', ascending=False)\n\n# Create the bar plot\nplt.bar(sorted_df['operating_system'], sorted_df['count'])\nplt.xlabel('Operating System')\nplt.ylabel('Count')\nplt.title('Number of Clients by Operating System')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Bar chart x axis country y axis the average of age , and I want to order by the Country in asc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Calculate average age by country\navg_age_by_country = artist.groupby('country')['age'].mean().reset_index()\n\n# Sort by country in ascending order\navg_age_by_country = avg_age_by_country.sort_values('country')\n\n# Plot bar chart\nplt.bar(avg_age_by_country['country'], avg_age_by_country['age'])\nplt.xlabel('Country')\nplt.ylabel('Average Age')\nplt.title('Average Age of Artists by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "What is the name of the shop with the highest inventory count of devices, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstock = pd.read_sql(\"SELECT * FROM stock\", conn)\nshop = pd.read_sql(\"SELECT * FROM shop\", conn)\nstock.columns = stock.columns.str.lower()\nshop.columns = shop.columns.str.lower()\n\n# Joining the stock and shop tables\nmerged_df = pd.merge(stock, shop, on='shop_id')\n\n# Grouping by shop_name and summing the quantity\ngrouped_df = merged_df.groupby('shop_name')['quantity'].sum().reset_index()\n\n# Sorting by sum(quantity) in descending order\nsorted_df = grouped_df.sort_values('quantity', ascending=False)\n\n# Creating the bar plot\nplt.bar(sorted_df['shop_name'], sorted_df['quantity'])\nplt.xlabel('Shop Name')\nplt.ylabel('Total Quantity')\nplt.title('Total Quantity by Shop')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "insurance_and_eClaims",
    "question": "What is the customer details and start date of the policy that was started most recently, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npolicies = pd.read_sql(\"SELECT * FROM policies\", conn)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\npolicies = pd.read_sql(\"SELECT * FROM policies\", conn)\npolicies.columns = policies.columns.str.lower()\ncustomers.columns = customers.columns.str.lower()\npolicies.columns = policies.columns.str.lower()\n\n# Joining policies and customers tables\nmerged_df = pd.merge(policies, customers, on='customer_id')\n\n# Filtering the rows with the latest start_date\nlatest_start_date = merged_df['start_date'].max()\nfiltered_df = merged_df[merged_df['start_date'] == latest_start_date]\n\n# Creating the bar plot\nplt.bar(filtered_df['customer_details'], filtered_df['start_date'])\nplt.xlabel('Customer Details')\nplt.ylabel('Start Date')\nplt.title('Start Date for Customers with Latest Policy')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "Find the status of orders which belong to the customer named \"Jeramie\", group by order status, and count them. Show the result with a bar chart.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the customers table\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\ncustomers.columns = map(str.lower, customers.columns)\n\n# Read the orders table\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\norders.columns = map(str.lower, orders.columns)\n\n# Merge the customers and orders tables on customer_id\nmerged_data = pd.merge(customers, orders, on=\"customer_id\")\n\n# Filter the merged data for customer_name = \"Jeramie\"\nfiltered_data = merged_data[merged_data[\"customer_name\"] == \"Jeramie\"]\n\n# Group the filtered data by order_status and count the occurrences\ngrouped_data = filtered_data.groupby(\"order_status\").size().reset_index(name=\"count\")\n\n# Plot the bar chart\nplt.bar(grouped_data[\"order_status\"], grouped_data[\"count\"])\nplt.xlabel(\"Order Status\")\nplt.ylabel(\"Count\")\nplt.title(\"Order Status for Customer Jeramie\")\nplt.show()"
  },
  {
    "db_id": "aircraft",
    "question": "How many aircraft are associated with London Heathrow and Gatwick airports, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\naircraft = pd.read_sql(\"SELECT * FROM aircraft\", conn)\nairport_aircraft = pd.read_sql(\"SELECT * FROM airport_aircraft\", conn)\nairport = pd.read_sql(\"SELECT * FROM airport\", conn)\n\naircraft.columns = aircraft.columns.str.lower()\nairport_aircraft.columns = airport_aircraft.columns.str.lower()\nairport.columns = airport.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(aircraft, airport_aircraft, on='aircraft_id')\nmerged_df = pd.merge(merged_df, airport, on='airport_id')\n\n# Filter airports\nfiltered_df = merged_df[merged_df['airport_name'].isin(['London Heathrow', 'London Gatwick'])]\n\n# Group by airport name and count\ngrouped_df = filtered_df.groupby('airport_name').size().reset_index(name='count')\n\n# Sort by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plot bar chart\nplt.bar(sorted_df['airport_name'], sorted_df['count'])\nplt.xlabel('Airport Name')\nplt.ylabel('Count')\nplt.title('Number of Aircrafts in London Heathrow and London Gatwick')\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "Draw a bar chart for how many medications are prescribed for each brand?, and display in asc by the total number.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the medication table\nmedication = pd.read_sql(\"SELECT * FROM medication\", conn)\n\n# Read the prescribes table\nprescribes = pd.read_sql(\"SELECT * FROM prescribes\", conn)\n\n# Convert column names to lowercase\nmedication.columns = medication.columns.str.lower()\nprescribes.columns = prescribes.columns.str.lower()\n\n# merge the medication and prescribes tables on the code and medication columns respectively\nmerged_data = pd.merge(medication, prescribes, left_on='code', right_on='medication')\n\n# group by brand and count the number of occurrences\ngrouped_data = merged_data.groupby('brand').size().reset_index(name='count')\n\n# sort the data by count in ascending order\nsorted_data = grouped_data.sort_values('count')\n\n# plot the bar chart\nplt.bar(sorted_data['brand'], sorted_data['count'])\nplt.xlabel('Brand')\nplt.ylabel('Count')\nplt.title('Medication Count by Brand')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "device",
    "question": "A bar chart about what are the different software platforms for devices , and how many devices have each ? , and show in ascending by the x axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ndevice = pd.read_sql(\"SELECT * FROM device\", conn)\ndevice.columns = device.columns.str.lower()\n\n# Group by software_platform and count the number of occurrences\nplatform_counts = device.groupby('software_platform').size().reset_index(name='count')\n\n# Sort the platform_counts dataframe by software_platform in ascending order\nplatform_counts = platform_counts.sort_values('software_platform')\n\n# Create a bar plot\nplt.bar(platform_counts['software_platform'], platform_counts['count'])\nplt.xlabel('Software Platform')\nplt.ylabel('Count')\nplt.title('Device Count by Software Platform')\nplt.show()"
  },
  {
    "db_id": "perpetrator",
    "question": "Return a bar chart on what are the countries of perpetrators ? Show each country and the corresponding number of perpetrators there .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperpetrator = pd.read_sql(\"SELECT * FROM perpetrator\", conn)\nperpetrator.columns = perpetrator.columns.str.lower()\n\n# Group by country and count the number of occurrences\nperpetrator_count = perpetrator.groupby('country').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(perpetrator_count['country'], perpetrator_count['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Perpetrators by Country')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Which workshop groups have bookings with a \"stop\" status code? Show the results in a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nBookings = pd.read_sql(\"SELECT * FROM Bookings\", conn)\nDrama_Workshop_Groups = pd.read_sql(\"SELECT * FROM Drama_Workshop_Groups\", conn)\nBookings.columns = Bookings.columns.str.lower()\nDrama_Workshop_Groups.columns = Drama_Workshop_Groups.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Bookings, Drama_Workshop_Groups, on='workshop_group_id')\n\n# Filter the data based on status_code\nfiltered_df = merged_df[merged_df['status_code'] == 'stop']\n\n# Group the data by store_name and count the occurrences\ngrouped_df = filtered_df.groupby('store_name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['store_name'], grouped_df['count'])\nplt.xlabel('Store Name')\nplt.ylabel('Count')\nplt.title('Number of Bookings by Store Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "company_1",
    "question": "Find the number of employees of each gender whose salary is lower than 50000 Visualize by bar chart, could you rank Y-axis in ascending order?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the employee table\nemployee_df = pd.read_sql(\"SELECT * FROM employee\", conn)\n\n# Convert column names to lowercase\nemployee_df.columns = employee_df.columns.str.lower()\n\n# Filter the data based on salary condition\nfiltered_df = employee_df[employee_df['salary'] < 50000]\n\n# Group by sex and count the number of records\ngrouped_df = filtered_df.groupby('sex').size().reset_index(name='count')\n\n# Sort the data by count in ascending order\nsorted_df = grouped_df.sort_values('count')\n\n# Create the bar plot\nplt.bar(sorted_df['sex'], sorted_df['count'])\nplt.xlabel('Sex')\nplt.ylabel('Count')\nplt.title('Number of Employees with Salary < 50000 by Sex')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "A bar chart compares the ages of all artists , I want to display in desc by the Y-axis please .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Assuming the data is already loaded into the 'artist' dataframe\n\n# Sort the dataframe by age in descending order\nsorted_artist = artist.sort_values(by='age', ascending=False)\n\n# Extract the name and age columns\nname = sorted_artist['name']\nage = sorted_artist['age']\n\n# Create a bar plot\nplt.bar(name, age)\n\n# Set the x-axis label\nplt.xlabel('Name')\n\n# Set the y-axis label\nplt.ylabel('Age')\n\n# Set the title of the plot\nplt.title('Artist Age')\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "entertainment_awards",
    "question": ", and order by the bar in desc.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the artwork table\nartwork = pd.read_sql(\"SELECT * FROM artwork\", conn)\n\n# Convert column names to lowercase\nartwork.columns = artwork.columns.str.lower()\n\n# Perform the SQL query\nresult = artwork.groupby('type').size().reset_index(name='count').sort_values('type', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['type'], result['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Artwork Count by Type')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "How many missions were each ship involved in that were launched after 1928, visualized with a scatter chart?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmission = pd.read_sql(\"SELECT * FROM mission\", conn)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nmission.columns = mission.columns.str.lower()\nship.columns = ship.columns.str.lower()\n\n# Joining the mission and ship tables\nmerged_df = pd.merge(mission, ship, on='ship_id')\n\n# Filtering the data based on the condition\nfiltered_df = merged_df[merged_df['launched_year'] > 1928]\n\n# Grouping the data by ship name and counting the number of occurrences\ngrouped_df = filtered_df.groupby('name').size().reset_index(name='count')\n\n# Creating a scatter plot\nplt.scatter(grouped_df['name'], grouped_df['count'])\nplt.xlabel('Ship Name')\nplt.ylabel('Count')\nplt.title('Number of Missions by Ship')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "Show the reign and days held of wrestlers in a scatter chart",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nwrestler = pd.read_sql(\"SELECT * FROM wrestler\", conn)\nwrestler.columns = wrestler.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called wrestler\n\n# Selecting the required columns\nscatter_data = wrestler[['reign', 'days_held']]\n\n# Creating the scatter plot\nplt.scatter(scatter_data['reign'], scatter_data['days_held'])\n\n# Adding labels and title\nplt.xlabel('Reign')\nplt.ylabel('Days Held')\nplt.title('Scatter Plot of Reign vs Days Held')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Bar graph to show how many nationality from different nationality , list in desc by the total number .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Group by nationality and count the occurrences\nnationality_count = ship.groupby('nationality').size().reset_index(name='count')\n\n# Sort by count in descending order\nnationality_count = nationality_count.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(nationality_count['nationality'], nationality_count['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Ships by Nationality')\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Can you create a pie chart to display the distribution of accepted and rejected submissions?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nacceptance = pd.read_sql(\"SELECT * FROM acceptance\", conn)\nsubmission = pd.read_sql(\"SELECT * FROM submission\", conn)\nacceptance.columns = acceptance.columns.str.lower()\nsubmission.columns = submission.columns.str.lower()\n\n# Merge acceptance and submission tables\nmerged_df = pd.merge(acceptance, submission, on='submission_id')\n\n# Group by result and count the occurrences\nresult_counts = merged_df['result'].value_counts()\n\n# Create a pie chart\nplt.pie(result_counts, labels=result_counts.index, autopct='%1.1f%%')\nplt.title('Distribution of Results')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "What is the phone number and outcome code for customers with a mailshot outcome code of 'No Response' displayed in a scatter plot?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\nmailshot_customers = pd.read_sql(\"SELECT * FROM mailshot_customers\", conn)\ncustomers.columns = customers.columns.str.lower()\nmailshot_customers.columns = mailshot_customers.columns.str.lower()\n\n# Merge the customers and mailshot_customers dataframes\nmerged_df = pd.merge(customers, mailshot_customers, on='customer_id')\n\n# Filter the merged dataframe for outcome_code = 'no response'\nfiltered_df = merged_df[merged_df['outcome_code'] == 'No Response']\n\n# Create a scatter plot of customer_phone vs outcome_code\nplt.scatter(filtered_df['customer_phone'], filtered_df['outcome_code'])\nplt.xlabel('Customer Phone')\nplt.ylabel('Outcome Code')\nplt.title('Scatter Plot of Customer Phone vs Outcome Code')\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "Bar chart x axis software platform y axis the total number , I want to show in ascending by the X-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ndevice = pd.read_sql(\"SELECT * FROM device\", conn)\ndevice.columns = device.columns.str.lower()\n\n# Group by software_platform and count the number of occurrences\nplatform_counts = device.groupby('software_platform').size().reset_index(name='count')\n\n# Sort the platform_counts dataframe by software_platform in ascending order\nplatform_counts = platform_counts.sort_values('software_platform')\n\n# Create a bar plot\nplt.bar(platform_counts['software_platform'], platform_counts['count'])\nplt.xlabel('Software Platform')\nplt.ylabel('Count')\nplt.title('Device Count by Software Platform')\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Return the number of venues of each workshop in a bar chart, display by the X in desc please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the workshop table\nworkshop = pd.read_sql(\"SELECT * FROM workshop\", conn)\n\n# Convert column names to lowercase\nworkshop.columns = workshop.columns.str.lower()\n\n# Perform the query\nvenue_counts = workshop.groupby('venue').size().reset_index(name='count')\nvenue_counts = venue_counts.sort_values('venue', ascending=False)\n\n# Create the bar plot\nplt.bar(venue_counts['venue'], venue_counts['count'])\nplt.xlabel('Venue')\nplt.ylabel('Count')\nplt.title('Workshop Venue Counts')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "twitter_1",
    "question": "Find the name and partition id for users who tweeted less than twice. Show bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the user_profiles table\nuser_profiles = pd.read_sql(\"SELECT * FROM user_profiles\", conn)\nuser_profiles.columns = map(str.lower, user_profiles.columns)\n\n# Read the tweets table\ntweets = pd.read_sql(\"SELECT * FROM tweets\", conn)\ntweets.columns = map(str.lower, tweets.columns)\n\n# Merge the user_profiles and tweets tables on uid column\nmerged_data = pd.merge(user_profiles, tweets, on='uid')\n\n# Create a bar plot of name and partitionid columns\nplt.bar(merged_data['name'], merged_data['partitionid'])\nplt.xlabel('Name')\nplt.ylabel('Partition ID')\nplt.title('Bar Plot of Name and Partition ID')\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "Bar chart of the number of position from each position , and could you sort the number of position in asc order please ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot.columns = pilot.columns.str.lower()\n\n# Group by position and count the occurrences\nposition_counts = pilot.groupby('position').size().reset_index(name='count')\n\n# Sort the counts in ascending order\nposition_counts = position_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(position_counts['position'], position_counts['count'])\nplt.xlabel('Position')\nplt.ylabel('Count')\nplt.title('Count of Pilots by Position')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Create a pie chart showing the number of nationality across nationality .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Grouping the data by nationality and counting the occurrences\nnationality_count = ship.groupby('nationality').size().reset_index(name='count')\n\n# Creating a pie chart\nplt.pie(nationality_count['count'], labels=nationality_count['nationality'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Displaying the chart\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Bar chart x axis role code y axis the total number , order X-axis from low to high order please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nEmployees.columns = Employees.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\nrole_counts = Employees.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by role_code in ascending order\nrole_counts = role_counts.sort_values('role_code')\n\n# Creating a bar plot\nplt.bar(role_counts['role_code'], role_counts['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Employees by Role Code')\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Create a bar chart showing the number of author across author, and show from high to low by the x axis.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the submission table\nsubmission_df = pd.read_sql(\"SELECT * FROM submission\", conn)\n\n# Convert column names to lowercase\nsubmission_df.columns = submission_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = submission_df.groupby('author').size().reset_index(name='count').sort_values('author', ascending=False)\n\n# Generate the bar chart\nplt.bar(result_df['author'], result_df['count'])\nplt.xlabel('Author')\nplt.ylabel('Count')\nplt.title('Number of Submissions by Author')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sakila_1",
    "question": "Can you create a pie chart to display the distribution of countries with a minimum of 3 cities?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncity.columns = city.columns.str.lower()\ncountry.columns = country.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(city, country, on='country_id')\n\n# Group by country and count the number of cities\ngrouped_df = merged_df.groupby('country').size().reset_index(name='num_cities')\n\n# Filter countries with at least 3 cities\nfiltered_df = grouped_df[grouped_df['num_cities'] >= 3]\n\n# Plot the pie chart\nplt.pie(filtered_df['num_cities'], labels=filtered_df['country'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship in a bar chart , and could you sort by the total number from high to low ?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Group by citizenship and calculate the maximum net worth\nmax_net_worth = singer.groupby('citizenship')['net_worth_millions'].max()\n\n# Sort the values in descending order\nmax_net_worth = max_net_worth.sort_values(ascending=False)\n\n# Create a bar plot\nplt.bar(max_net_worth.index, max_net_worth.values)\n\n# Set the labels and title\nplt.xlabel('Citizenship')\nplt.ylabel('Max Net Worth (Millions)')\nplt.title('Max Net Worth by Citizenship')\n\n# Rotate the x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "Find the name and access counts of all documents , in alphabetic order of the document name . Show bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ndocuments = pd.read_sql(\"SELECT * FROM documents\", conn)\ndocuments.columns = documents.columns.str.lower()\n\n# Assuming 'documents' is the dataframe containing the table data\n\n# Sort the dataframe by document_name\nsorted_documents = documents.sort_values('document_name')\n\n# Extract the document_name and access_count columns\ndocument_names = sorted_documents['document_name']\naccess_counts = sorted_documents['access_count']\n\n# Create the bar plot\nplt.bar(document_names, access_counts)\n\n# Add labels and title\nplt.xlabel('Document Name')\nplt.ylabel('Access Count')\nplt.title('Access Count by Document Name')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Bar chart x axis event details y axis how many event details",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEVENTS = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\nEVENTS.columns = EVENTS.columns.str.lower()\n\n# Group by event_details and count the occurrences\nevent_counts = EVENTS.groupby('event_details').size().reset_index(name='count')\n\n# Create a bar plot\nplt.bar(event_counts['event_details'], event_counts['count'])\nplt.xlabel('Event Details')\nplt.ylabel('Count')\nplt.title('Event Details Count')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Show the id of each employee and the number of document destruction authorised by that employee . Show scatter chart .",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nDocuments_to_be_destroyed = pd.read_sql(\"SELECT * FROM Documents_to_be_destroyed\", conn)\nDocuments_to_be_destroyed.columns = Documents_to_be_destroyed.columns.str.lower()\n\n# Group by destruction_authorised_by_employee_id and count the number of documents\ngrouped_data = Documents_to_be_destroyed.groupby('destruction_authorised_by_employee_id').size().reset_index(name='count')\n\n# Scatter plot\nplt.scatter(grouped_data['destruction_authorised_by_employee_id'], grouped_data['count'])\nplt.xlabel('Destruction Authorised by Employee ID')\nplt.ylabel('Count')\nplt.title('Number of Documents by Destruction Authorised by Employee ID')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Which stations, excluding those in San Jose, have an average bike availability above 10? Display the results using a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstatus = pd.read_sql(\"SELECT * FROM status\", conn)\nstation.columns = station.columns.str.lower()\nstatus.columns = status.columns.str.lower()\n\n# Merge station and status tables\nmerged_df = pd.merge(station, status, left_on='id', right_on='station_id')\n\n# Filter out rows where city is not 'san jose'\nfiltered_df = merged_df[merged_df['city'] != 'san jose']\n\n# Group by station_id and calculate average bikes_available\ngrouped_df = filtered_df.groupby('station_id').agg({'name': 'first', 'bikes_available': 'mean'})\n\n# Filter out rows where average bikes_available is greater than 10\nfiltered_grouped_df = grouped_df[grouped_df['bikes_available'] > 10]\n\n# Plot the bar chart\nplt.bar(filtered_grouped_df['name'], filtered_grouped_df['bikes_available'])\nplt.xlabel('Station Name')\nplt.ylabel('Average Bikes Available')\nplt.title('Average Bikes Available per Station (excluding San Jose)')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Give me a pie to show the average of tonnage from different type .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Calculate average tonnage by ship type\nship_avg_tonnage = ship.groupby('type')['tonnage'].mean()\n\n# Create a pie chart\nplt.pie(ship_avg_tonnage, labels=ship_avg_tonnage.index, autopct='%1.1f%%')\nplt.title('Average Tonnage by Ship Type')\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "What is the number of entry descriptions of each problem ? , and sort from low to high by the how many log entry description .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nproblem_log = pd.read_sql(\"SELECT * FROM problem_log\", conn)\nproblem_log.columns = problem_log.columns.str.lower()\n\n# Grouping the data by log_entry_description and counting the occurrences\ngrouped_data = problem_log.groupby('log_entry_description').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nsorted_data = grouped_data.sort_values('count')\n\n# Creating the bar plot\nplt.bar(sorted_data['log_entry_description'], sorted_data['count'])\nplt.xlabel('Log Entry Description')\nplt.ylabel('Count')\nplt.title('Occurrences of Log Entry Descriptions')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show me the total number by citizenship in a bar, could you list by the Y-axis in ascending please?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the singer table\nsinger_df = pd.read_sql(\"SELECT * FROM singer\", conn)\n\n# Convert column names to lowercase\nsinger_df.columns = singer_df.columns.str.lower()\n\n# Perform the SQL query\nresult = singer_df.groupby('citizenship').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result['citizenship'], result['count'])\nplt.xlabel('Citizenship')\nplt.ylabel('Count')\nplt.title('Number of Singers by Citizenship')\nplt.show()"
  },
  {
    "db_id": "icfp_1",
    "question": "Show me a bar chart of the institution with the highest number of distinct authors.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nauthors = pd.read_sql(\"SELECT * FROM authors\", conn)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\ninst = pd.read_sql(\"SELECT * FROM inst\", conn)\nauthors.columns = authors.columns.str.lower()\nauthorship.columns = authorship.columns.str.lower()\ninst.columns = inst.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(authors, authorship, on='authid')\nmerged_df = pd.merge(merged_df, inst, on='instid')\n\n# Group by institution name and count distinct authors\ngrouped_df = merged_df.groupby('name')['authid'].nunique().reset_index()\n\n# Sort by count in descending order\nsorted_df = grouped_df.sort_values('authid', ascending=False)\n\n# Plot bar chart\nplt.bar(sorted_df['name'], sorted_df['authid'])\nplt.xlabel('Institution')\nplt.ylabel('Number of Authors')\nplt.title('Number of Authors per Institution')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "browser_web",
    "question": "How does the number of accelerators vary with the market share value of browsers? Show me a scatter plot.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nweb_client_accelerator = pd.read_sql(\"SELECT * FROM web_client_accelerator\", conn)\naccelerator_compatible_browser = pd.read_sql(\"SELECT * FROM accelerator_compatible_browser\", conn)\nbrowser = pd.read_sql(\"SELECT * FROM browser\", conn)\nweb_client_accelerator.columns = web_client_accelerator.columns.str.lower()\naccelerator_compatible_browser.columns = accelerator_compatible_browser.columns.str.lower()\nbrowser.columns = browser.columns.str.lower()\n\n# Merge tables\nmerged_df = pd.merge(web_client_accelerator, accelerator_compatible_browser, left_on='id', right_on='accelerator_id')\nmerged_df = pd.merge(merged_df, browser, left_on='browser_id', right_on='id')\n\n# Group by market_share and count\ngrouped_df = merged_df.groupby('market_share').size().reset_index(name='count')\n\n# Scatter plot\nplt.scatter(grouped_df['market_share'], grouped_df['count'])\nplt.xlabel('Market Share')\nplt.ylabel('Count')\nplt.title('Scatter Plot of Market Share vs Count')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Show me a bar chart for what are the different ids and names of the stations that have had more than 12 bikes available?, show in desc by the x axis.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the station and status tables\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstatus = pd.read_sql(\"SELECT * FROM status\", conn)\n\n# Convert column names to lowercase\nstation.columns = station.columns.str.lower()\nstatus.columns = status.columns.str.lower()\n# Merge the station and status tables on id\nmerged_data = pd.merge(station, status, left_on=\"id\", right_on=\"station_id\")\n\n# Filter the merged data where bikes_available > 12\nfiltered_data = merged_data[merged_data[\"bikes_available\"] > 12]\n\n# Sort the filtered data by name in descending order\nsorted_data = filtered_data.sort_values(\"name\", ascending=False)\n\n# Create a bar plot of name and id\nplt.bar(sorted_data[\"name\"], sorted_data[\"id\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"ID\")\nplt.title(\"Stations with Bikes Available > 12\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "storm_record",
    "question": "List the name for storms and the number of affected regions for each storm with a bar chart, and could you sort Y from high to low order?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the storm table\nstorm_df = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm_df.columns = map(str.lower, storm_df.columns)\n\n# Read the affected_region table\naffected_region_df = pd.read_sql(\"SELECT * FROM affected_region\", conn)\naffected_region_df.columns = map(str.lower, affected_region_df.columns)\n\n# Merge the storm and affected_region tables\nmerged_df = pd.merge(storm_df, affected_region_df, on=\"storm_id\")\n\n# Perform the SQL query\nresult_df = merged_df.groupby(\"name\").size().reset_index(name=\"count\").sort_values(\"count\", ascending=False)\n\n# Generate the bar plot\nplt.bar(result_df[\"name\"], result_df[\"count\"])\nplt.xlabel(\"Storm Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Affected Regions per Storm\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "Bar chart x axis away team y axis the number of away team, and list from low to high by the the number of away team please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the game table\ngame_df = pd.read_sql(\"SELECT * FROM game\", conn)\n\n# Convert column names to lowercase\ngame_df.columns = game_df.columns.str.lower()\n\n# Perform the SQL query\nresult = game_df.groupby('away_team').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result['away_team'], result['count'])\nplt.xlabel('Away Team')\nplt.ylabel('Count')\nplt.title('Number of Games Played by Away Team')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "For each city, return the highest latitude among its stations. Show a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"station\" table\nstation_data = pd.read_sql(\"SELECT * FROM station\", conn)\n\n# Convert column names to lowercase\nstation_data.columns = station_data.columns.str.lower()\n\n# Group the data by city and find the maximum latitude\ngrouped_data = station_data.groupby(\"city\")[\"lat\"].max().reset_index()\n\n# Plot the pie chart\nplt.pie(grouped_data[\"lat\"], labels=grouped_data[\"city\"], autopct=\"%1.1f%%\")\nplt.title(\"Maximum Latitude by City\")\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Return a bar chart showing the total number of ships' nationalities .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Grouping the ship dataframe by nationality and counting the occurrences\nnationality_count = ship.groupby('nationality').size().reset_index(name='count')\n\n# Creating a bar plot\nplt.bar(nationality_count['nationality'], nationality_count['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Ships by Nationality')\nplt.show()"
  },
  {
    "db_id": "insurance_and_eClaims",
    "question": "Bar chart x axis policy type code y axis the total number , could you list the total number from low to high order please ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\npolicies = pd.read_sql(\"SELECT * FROM policies\", conn)\npolicies.columns = policies.columns.str.lower()\n\n# Group by policy_type_code and count the number of occurrences\npolicy_counts = policies.groupby('policy_type_code').size().reset_index(name='count')\n\n# Sort the counts in ascending order\npolicy_counts = policy_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(policy_counts['policy_type_code'], policy_counts['count'])\nplt.xlabel('Policy Type Code')\nplt.ylabel('Count')\nplt.title('Number of Policies by Policy Type Code')\nplt.show()"
  },
  {
    "db_id": "company_office",
    "question": "a pie chart about the number of companies in different industries .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nCompanies = pd.read_sql(\"SELECT * FROM Companies\", conn)\nCompanies.columns = Companies.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called Companies\n\n# Grouping the data by industry and counting the number of companies in each industry\nindustry_counts = Companies.groupby('industry').size()\n\n# Creating a pie chart\nplt.pie(industry_counts, labels=industry_counts.index, autopct='%1.1f%%')\nplt.title('Company Distribution by Industry')\nplt.show()"
  },
  {
    "db_id": "insurance_and_eClaims",
    "question": "Find the number of records of each policy type and its type code Visualize by bar chart , and could you rank bar in ascending order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npolicies = pd.read_sql(\"SELECT * FROM policies\", conn)\npolicies.columns = policies.columns.str.lower()\n\n# Group by policy_type_code and count the number of occurrences\npolicy_counts = policies.groupby('policy_type_code').size().reset_index(name='count')\n\n# Sort the dataframe by policy_type_code in ascending order\npolicy_counts = policy_counts.sort_values('policy_type_code')\n\n# Create a bar plot\nplt.bar(policy_counts['policy_type_code'], policy_counts['count'])\nplt.xlabel('Policy Type Code')\nplt.ylabel('Count')\nplt.title('Number of Policies by Policy Type Code')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "What are the ids and names of all start stations that were the beginning of at least 200 trips Show bar chart , and rank from low to high by the X-axis .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\ntrip.columns = trip.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called 'trip'\n\n# Perform the SQL query\nresult = trip[['start_station_name', 'start_station_id']].sort_values('start_station_name')\n\n# Create the bar plot\nplt.bar(result['start_station_name'], result['start_station_id'])\nplt.xlabel('Start Station Name')\nplt.ylabel('Start Station ID')\nplt.title('Start Station ID by Start Station Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "Show me how many home team by home team in a bar, and I want to order how many home team in ascending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the game table\ngame_df = pd.read_sql(\"SELECT * FROM game\", conn)\n\n# Convert column names to lowercase\ngame_df.columns = game_df.columns.str.lower()\n\n# Perform the SQL query\nresult = game_df.groupby('home_team').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar plot\nplt.bar(result['home_team'], result['count'])\nplt.xlabel('Home Team')\nplt.ylabel('Count')\nplt.title('Number of Games per Home Team')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "A bar chart about what are the different software platforms for devices , and how many devices have each ? , and rank by the the total number from low to high .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ndevice = pd.read_sql(\"SELECT * FROM device\", conn)\ndevice.columns = device.columns.str.lower()\n\n# Grouping the data by software_platform and counting the occurrences\ngrouped_data = device.groupby('software_platform').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nsorted_data = grouped_data.sort_values('count')\n\n# Creating the bar plot\nplt.bar(sorted_data['software_platform'], sorted_data['count'])\nplt.xlabel('Software Platform')\nplt.ylabel('Count')\nplt.title('Number of Devices by Software Platform')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show how many customer addresses in each address type code with a bar chart, show y-axis in ascending order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the customer_addresses table\ncustomer_addresses = pd.read_sql(\"SELECT * FROM customer_addresses\", conn)\n\n# Read the premises table\npremises = pd.read_sql(\"SELECT * FROM premises\", conn)\n\n# Convert column names to lowercase\ncustomer_addresses.columns = customer_addresses.columns.str.lower()\npremises.columns = premises.columns.str.lower()\n\n# merge the customer_addresses and premises tables on premise_id\nmerged_data = pd.merge(customer_addresses, premises, on=\"premise_id\")\n\n# group by address_type_code and count the occurrences\ngrouped_data = merged_data.groupby(\"address_type_code\").size().reset_index(name=\"count\")\n\n# sort the data by count in ascending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=True)\n\n# plot the bar chart\nplt.bar(sorted_data[\"address_type_code\"], sorted_data[\"count\"])\nplt.xlabel(\"Address Type Code\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of Address Types\")\nplt.show()\n"
  },
  {
    "db_id": "ship_mission",
    "question": "Show different types of ships and the number of ships of each type . Show bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Grouping the ship dataframe by type and counting the occurrences\nship_grouped = ship.groupby('type').size().reset_index(name='count')\n\n# Creating a bar plot\nplt.bar(ship_grouped['type'], ship_grouped['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Ship Count by Type')\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "How many lessons were taught by each staff member whose first name has the letter 'a' in it, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nLessons = pd.read_sql(\"SELECT * FROM Lessons\", conn)\nStaff = pd.read_sql(\"SELECT * FROM Staff\", conn)\nLessons.columns = Lessons.columns.str.lower()\nStaff.columns = Staff.columns.str.lower()\n\n# Merge Lessons and Staff dataframes\nmerged_df = pd.merge(Lessons, Staff, on='staff_id')\n\n# Filter staff with first name containing 'a'\nfiltered_df = merged_df[merged_df['first_name'].str.contains('a')]\n\n# Group by staff_id and count the number of lessons\ngrouped_df = filtered_df.groupby('staff_id').size().reset_index(name='lesson_count')\n\n# Plot the bar chart\nplt.bar(grouped_df['staff_id'], grouped_df['lesson_count'])\nplt.xlabel('Staff ID')\nplt.ylabel('Lesson Count')\nplt.title('Number of Lessons per Staff with First Name Containing \"a\"')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "What is the code of each role and the number of employees in each role Show bar chart , and I want to show by the x axis in desc please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nEmployees.columns = Employees.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\nrole_counts = Employees.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by role_code in descending order\nrole_counts = role_counts.sort_values('role_code', ascending=False)\n\n# Creating a bar plot\nplt.bar(role_counts['role_code'], role_counts['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Employees by Role Code')\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "What is the product with the fewest number of problems, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nproduct = pd.read_sql(\"SELECT * FROM product\", conn)\nproblems = pd.read_sql(\"SELECT * FROM problems\", conn)\nproduct.columns = product.columns.str.lower()\nproblems.columns = problems.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(product, problems, on='product_id')\n\n# Group by product_name and count the number of problems\nproblem_count = merged_df.groupby('product_name').size().reset_index(name='problem_count')\n\n# Sort the dataframe by problem_count in ascending order\nsorted_df = problem_count.sort_values('problem_count')\n\n# Plot the bar chart\nplt.bar(sorted_df['product_name'], sorted_df['problem_count'])\nplt.xlabel('Product Name')\nplt.ylabel('Problem Count')\nplt.title('Number of Problems by Product')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "What is the name of every city that has at least 15 stations and how many stations does it have Visualize by bar chart , sort y axis in asc order please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstation.columns = station.columns.str.lower()\n\n# Group by city and count the number of rows\ncity_counts = station.groupby('city').size().reset_index(name='count')\n\n# Sort the counts in ascending order\ncity_counts = city_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(city_counts['city'], city_counts['count'])\nplt.xlabel('City')\nplt.ylabel('Count')\nplt.title('Number of Stations by City')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Find dates and attendance for exhibitions that happened in 2004, show me the proportion of attendance by date.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the exhibition_record table\nexhibition_record = pd.read_sql(\"SELECT * FROM exhibition_record\", conn)\n\n# Read the exhibition table\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\n\n# Convert column names to lowercase\nexhibition_record.columns = exhibition_record.columns.str.lower()\nexhibition.columns = exhibition.columns.str.lower()\n\n# Merge the two tables on exhibition_id\nmerged_data = pd.merge(exhibition_record, exhibition, on=\"exhibition_id\")\n\n# Filter the data for year 2004\nfiltered_data = merged_data[merged_data[\"year\"] == 2004]\n\n# Group the data by date and calculate the sum of attendance\ngrouped_data = filtered_data.groupby(\"date\")[\"attendance\"].sum()\n\n# Plot the pie chart\nplt.pie(grouped_data, labels=grouped_data.index, autopct=\"%1.1f%%\")\nplt.title(\"Attendance Distribution in 2004\")\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Compare the average of artists' age by country in a bar graph .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Calculate average age by country\navg_age_by_country = artist.groupby('country')['age'].mean()\n\n# Convert the result to a DataFrame\ndf_avg_age_by_country = pd.DataFrame(avg_age_by_country).reset_index()\n\n# Plot the bar chart\nplt.bar(df_avg_age_by_country['country'], df_avg_age_by_country['age'])\nplt.xlabel('Country')\nplt.ylabel('Average Age')\nplt.title('Average Age of Artists by Country')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "question": "Show me a bar chart displaying the number of documents for each document status description.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRef_Document_Status = pd.read_sql(\"SELECT * FROM Ref_Document_Status\", conn)\nDocuments = pd.read_sql(\"SELECT * FROM Documents\", conn)\nRef_Document_Status.columns = Ref_Document_Status.columns.str.lower()\nDocuments.columns = Documents.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Ref_Document_Status, Documents, on='document_status_code')\n\n# Group by document status description and count the number of occurrences\ngrouped_df = merged_df.groupby('document_status_description').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['document_status_description'], grouped_df['count'])\nplt.xlabel('Document Status Description')\nplt.ylabel('Count')\nplt.title('Number of Documents by Status')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "Show names of technicians and the number of machines they are assigned to repair with a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the repair_assignment table\nrepair_assignment = pd.read_sql(\"SELECT * FROM repair_assignment\", conn)\n\n# Read the technician table\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\n\n# Convert column names to lowercase\nrepair_assignment.columns = repair_assignment.columns.str.lower()\ntechnician.columns = technician.columns.str.lower()\n\n# merge the two tables on technician_id\nmerged_data = pd.merge(repair_assignment, technician, on='technician_id')\n\n# group by technician name and count the number of assignments\ngrouped_data = merged_data.groupby('name').size().reset_index(name='count')\n\n# plot the bar chart\nplt.bar(grouped_data['name'], grouped_data['count'])\nplt.xlabel('Technician Name')\nplt.ylabel('Number of Assignments')\nplt.title('Number of Assignments per Technician')\nplt.show()\n"
  },
  {
    "db_id": "game_injury",
    "question": "How many injury accidents occurred in each stadium, represented by a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\nstadium = pd.read_sql(\"SELECT * FROM stadium\", conn)\ninjury_accident = pd.read_sql(\"SELECT * FROM injury_accident\", conn)\ngame.columns = game.columns.str.lower()\nstadium.columns = stadium.columns.str.lower()\ninjury_accident.columns = injury_accident.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(game, stadium, left_on='stadium_id', right_on='id')\nmerged_df = pd.merge(merged_df, injury_accident, left_on='id_x', right_on='game_id')\n\n# Grouping by stadium name and counting the occurrences\ngrouped_df = merged_df.groupby('name')['id_x'].count().reset_index()\n\n# Plotting the bar chart\nplt.bar(grouped_df['name'], grouped_df['id_x'])\nplt.xlabel('Stadium Name')\nplt.ylabel('Count')\nplt.title('Number of Injury Accidents per Stadium')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death , show me the dates active and the total number of deaths with a bar chart , rank by the Dates_active in desc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm.columns = storm.columns.str.lower()\n\n# Assuming storm is a DataFrame containing the table data\n\n# Filter the data where number_deaths >= 1\nfiltered_data = storm[storm['number_deaths'] >= 1]\n\n# Sort the data by dates_active in descending order\nsorted_data = filtered_data.sort_values('dates_active', ascending=False)\n\n# Create the bar plot\nplt.bar(sorted_data['dates_active'], sorted_data['number_deaths'])\n\n# Add labels and title\nplt.xlabel('Dates Active')\nplt.ylabel('Number of Deaths')\nplt.title('Number of Deaths by Dates Active')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "what are the different role codes for users , and how many users have each ? , and sort from high to low by the Y .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nusers = pd.read_sql(\"SELECT * FROM users\", conn)\nusers.columns = users.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\nrole_counts = users.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by count in descending order\nrole_counts = role_counts.sort_values(by='count', ascending=False)\n\n# Creating the bar plot\nplt.bar(role_counts['role_code'], role_counts['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Users by Role Code')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "How many documents with the name \"Robin CV\" are located in each location, represented by a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nAll_documents = pd.read_sql(\"SELECT * FROM All_documents\", conn)\nDocument_locations = pd.read_sql(\"SELECT * FROM Document_locations\", conn)\nRef_locations = pd.read_sql(\"SELECT * FROM Ref_locations\", conn)\nAll_documents.columns = All_documents.columns.str.lower()\nDocument_locations.columns = Document_locations.columns.str.lower()\nRef_locations.columns = Ref_locations.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(All_documents, Document_locations, on='document_id')\nmerged_df = pd.merge(merged_df, Ref_locations, on='location_code')\n\n# Filter by document name\nfiltered_df = merged_df[merged_df['document_name'] == 'Robin CV']\n\n# Group by location name and count documents\ngrouped_df = filtered_df.groupby('location_name').size().reset_index(name='count')\n\n# Plot bar chart\nplt.bar(grouped_df['location_name'], grouped_df['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Documents by Location')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "What is the name of the shop that has the least variety of devices in stock, represented by a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstock = pd.read_sql(\"SELECT * FROM stock\", conn)\nshop = pd.read_sql(\"SELECT * FROM shop\", conn)\nstock.columns = stock.columns.str.lower()\nshop.columns = shop.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(stock, shop, on='shop_id')\n\n# Group by shop_name and count the number of devices\ngrouped_df = merged_df.groupby('shop_name').size().reset_index(name='num_devices')\n\n# Sort the dataframe by num_devices in ascending order\nsorted_df = grouped_df.sort_values('num_devices')\n\n# Create the bar plot\nplt.bar(sorted_df['shop_name'], sorted_df['num_devices'])\nplt.xlabel('Shop Name')\nplt.ylabel('Number of Devices')\nplt.title('Number of Devices per Shop')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Show the number of documents for each location code in a bar chart , and could you rank from low to high by the X ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDocument_locations = pd.read_sql(\"SELECT * FROM Document_locations\", conn)\nDocument_locations.columns = Document_locations.columns.str.lower()\n\n# Group by location_code and count the occurrences\nlocation_counts = Document_locations.groupby('location_code').size().reset_index(name='count')\n\n# Sort by location_code in ascending order\nlocation_counts = location_counts.sort_values('location_code')\n\n# Create bar plot\nplt.bar(location_counts['location_code'], location_counts['count'])\nplt.xlabel('Location Code')\nplt.ylabel('Count')\nplt.title('Document Locations')\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "Show different teams of technicians and the number of technicians in each team in a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the technician table\ntechnician_df = pd.read_sql(\"SELECT * FROM technician\", conn)\n\n# Convert column names to lowercase\ntechnician_df.columns = technician_df.columns.str.lower()\n\n# Perform the SQL query\nteam_counts = technician_df.groupby('team').size()\n\n# Plot the pie chart\nplt.pie(team_counts, labels=team_counts.index, autopct='%1.1f%%')\nplt.title('Technician Team Distribution')\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "Which physicians had the highest number of appointments? Show the results in a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nappointment = pd.read_sql(\"SELECT * FROM appointment\", conn)\nphysician = pd.read_sql(\"SELECT * FROM physician\", conn)\nappointment.columns = appointment.columns.str.lower()\nphysician.columns = physician.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(appointment, physician, left_on='physician', right_on='employeeid')\n\n# Group by physician name and count the number of appointments\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['name'], sorted_df['count'])\nplt.xlabel('Physician Name')\nplt.ylabel('Number of Appointments')\nplt.title('Number of Appointments per Physician')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "A bar chart about what is the name of every city that has at least 15 stations and how many stations does it have ? , and could you list the total number in asc order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstation.columns = station.columns.str.lower()\n\n# Group by city and count the number of rows\ncity_counts = station.groupby('city').size().reset_index(name='count')\n\n# Sort the counts in ascending order\ncity_counts = city_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(city_counts['city'], city_counts['count'])\nplt.xlabel('City')\nplt.ylabel('Count')\nplt.title('Number of Stations by City')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Give me the number of the descriptions of the service types that cost more than 100, and could you display in asc by the y-axis please?",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Ref_Service_Types table\nref_service_types = pd.read_sql(\"SELECT * FROM Ref_Service_Types\", conn)\nref_service_types.columns = map(str.lower, ref_service_types.columns)\n\n# Read the Services table\nservices = pd.read_sql(\"SELECT * FROM Services\", conn)\nservices.columns = map(str.lower, services.columns)\n\n# Merge the two tables on Service_Type_Code\nmerged_data = pd.merge(ref_service_types, services, on=\"service_type_code\")\n\n# Filter the merged data based on Product_Price > 100\nfiltered_data = merged_data[merged_data[\"product_price\"] > 100]\n\n# Group by Service_Type_Description and count the occurrences\ngrouped_data = filtered_data.groupby(\"service_type_description\").size().reset_index(name=\"count\")\n\n# Sort the data by count in ascending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=True)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"service_type_description\"], sorted_data[\"count\"])\nplt.xlabel(\"Service Type Description\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of Service Types with Product Price > 100\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "Show me a bar chart of the top 10 documents in the \"Acknowledgement\" functional area, ranked by the highest maximum access count.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\ndocuments = pd.read_sql(\"SELECT * FROM documents\", conn)\ndocument_functional_areas = pd.read_sql(\"SELECT * FROM document_functional_areas\", conn)\nfunctional_areas = pd.read_sql(\"SELECT * FROM functional_areas\", conn)\n\ndocuments.columns = documents.columns.str.lower()\ndocument_functional_areas.columns = document_functional_areas.columns.str.lower()\nfunctional_areas.columns = functional_areas.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(documents, document_functional_areas, on='document_code')\nmerged_df = pd.merge(merged_df, functional_areas, on='functional_area_code')\n\n# Filter by functional_area_description\nfiltered_df = merged_df[merged_df['functional_area_description'] == 'Acknowledgement']\n\n# Group by document_code and calculate max access_count\ngrouped_df = filtered_df.groupby('document_code').agg({'access_count': 'max'}).reset_index()\n\n# Sort by max access_count in descending order and select top 10\ntop_10_df = grouped_df.sort_values('access_count', ascending=False).head(10)\n\n# Create bar plot\nplt.bar(top_10_df['document_code'], top_10_df['access_count'])\nplt.xlabel('Document Code')\nplt.ylabel('Max Access Count')\nplt.title('Top 10 Documents with Max Access Count')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "Show me a bar chart displaying the number of staff members living in each city.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nAddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\nStaff = pd.read_sql(\"SELECT * FROM Staff\", conn)\nAddresses.columns = Addresses.columns.str.lower()\nStaff.columns = Staff.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Addresses, Staff, left_on='address_id', right_on='staff_address_id')\n\n# Group by city and count the number of occurrences\ncity_counts = merged_df.groupby('city').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(city_counts['city'], city_counts['count'])\nplt.xlabel('City')\nplt.ylabel('Count')\nplt.title('Number of Staff in Each City')\nplt.show()"
  },
  {
    "db_id": "customer_deliveries",
    "question": "List the state names and the number of customers living in each state with a bar chart, display bar from high to low order please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read data from customer_addresses table\ncustomer_addresses = pd.read_sql(\"SELECT * FROM customer_addresses\", conn)\n\n# Read data from addresses table\naddresses = pd.read_sql(\"SELECT * FROM addresses\", conn)\n\n# Convert column names to lowercase\ncustomer_addresses.columns = customer_addresses.columns.str.lower()\naddresses.columns = addresses.columns.str.lower()\n\n# merge the two tables on address_id\nmerged_data = pd.merge(customer_addresses, addresses, on=\"address_id\")\n\n# group by state_province_county and count the number of occurrences\ngrouped_data = merged_data.groupby(\"state_province_county\").size().reset_index(name=\"count\")\n\n# sort the data by state_province_county in descending order\nsorted_data = grouped_data.sort_values(\"state_province_county\", ascending=False)\n\n# plot the bar chart\nplt.bar(sorted_data[\"state_province_county\"], sorted_data[\"count\"])\nplt.xlabel(\"State/Province/County\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Customers by State/Province/County\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "tracking_orders",
    "question": "Who is the customer with the highest number of orders, and can you represent the number of orders for each customer using a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\ncustomers.columns = customers.columns.str.lower()\norders.columns = orders.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(customers, orders, on='customer_id')\n\n# Group by customer_name and count the number of orders\ngrouped_df = merged_df.groupby('customer_name').size().reset_index(name='order_count')\n\n# Sort the dataframe by order_count in descending order\nsorted_df = grouped_df.sort_values('order_count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['customer_name'], sorted_df['order_count'])\nplt.xlabel('Customer Name')\nplt.ylabel('Order Count')\nplt.title('Number of Orders per Customer')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "List all the log entry descriptions and count them using a bar chart , and could you show in asc by the log_entry_description please ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nproblem_log = pd.read_sql(\"SELECT * FROM problem_log\", conn)\nproblem_log.columns = problem_log.columns.str.lower()\n\n# Grouping the data by log_entry_description and counting the occurrences\ngrouped_data = problem_log.groupby('log_entry_description').size().reset_index(name='count')\n\n# Sorting the data by log_entry_description in ascending order\nsorted_data = grouped_data.sort_values('log_entry_description')\n\n# Creating the bar plot\nplt.bar(sorted_data['log_entry_description'], sorted_data['count'])\nplt.xlabel('Log Entry Description')\nplt.ylabel('Count')\nplt.title('Occurrences of Log Entry Descriptions')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sakila_1",
    "question": "In a bar chart, please display the name of the category to which the film 'HUNGER ROOF' belongs.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncategory = pd.read_sql(\"SELECT * FROM category\", conn)\nfilm_category = pd.read_sql(\"SELECT * FROM film_category\", conn)\nfilm = pd.read_sql(\"SELECT * FROM film\", conn)\ncategory.columns = category.columns.str.lower()\nfilm_category.columns = film_category.columns.str.lower()\nfilm.columns = film.columns.str.lower()\n\n# Merge the tables\nmerged_df = pd.merge(category, film_category, on='category_id')\nmerged_df = pd.merge(merged_df, film, on='film_id')\n\n# Group by category name and count the number of films\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Sort the dataframe by category name\nsorted_df = grouped_df.sort_values('name')\n\n# Plot the bar chart\nplt.bar(sorted_df['name'], sorted_df['count'])\nplt.xlabel('Category')\nplt.ylabel('Count')\nplt.title('Number of Films in Each Category')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "A bar chart shows the venue for each workshop .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nworkshop = pd.read_sql(\"SELECT * FROM workshop\", conn)\nworkshop.columns = workshop.columns.str.lower()\n\n# Assuming the data is already loaded into a dataframe called 'workshop'\n\n# Grouping the data by venue and counting the occurrences\nvenue_counts = workshop.groupby('venue').size().reset_index(name='count')\n\n# Creating the bar plot\nplt.bar(venue_counts['venue'], venue_counts['count'])\nplt.xlabel('Venue')\nplt.ylabel('Count')\nplt.title('Workshop Venues')\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Show the authors of their total submissions with a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the submission table\nsubmission_df = pd.read_sql(\"SELECT * FROM submission\", conn)\n\n# Convert column names to lowercase\nsubmission_df.columns = submission_df.columns.str.lower()\n\n# Group by Author and count the number of occurrences\nauthor_counts = submission_df.groupby('author').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(author_counts['author'], author_counts['count'])\nplt.xlabel('Author')\nplt.ylabel('Count')\nplt.title('Number of Submissions by Author')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Show me a scatter chart displaying the number of bikes available and docks available for stations that have ever had more than 12 bikes available.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstatus = pd.read_sql(\"SELECT * FROM status\", conn)\nstation.columns = station.columns.str.lower()\nstatus.columns = status.columns.str.lower()\n\n# Merge station and status tables\nmerged_df = pd.merge(station, status, left_on='id', right_on='station_id')\n\n# Filter rows where bikes_available > 12\nfiltered_df = merged_df[merged_df['bikes_available'] > 12]\n\n# Create scatter plot\nplt.scatter(filtered_df['bikes_available'], filtered_df['docks_available'])\nplt.xlabel('Bikes Available')\nplt.ylabel('Docks Available')\nplt.title('Scatter Plot of Bikes Available vs Docks Available')\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "I want to see trend of the number of season by season, and order by the X-axis in ascending.",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the game table\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\n\n# Convert column names to lowercase\ngame.columns = game.columns.str.lower()\n\n# Perform the SQL query\nresult = game.groupby('season').size().reset_index(name='count').sort_values('season')\n\n# Plot the line chart\nplt.plot(result['season'], result['count'])\nplt.xlabel('Season')\nplt.ylabel('Count')\nplt.title('Number of Games per Season')\nplt.show()"
  },
  {
    "db_id": "customer_deliveries",
    "question": "What is the name of the route with the highest number of deliveries, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDelivery_Routes = pd.read_sql(\"SELECT * FROM Delivery_Routes\", conn)\nDelivery_Route_Locations = pd.read_sql(\"SELECT * FROM Delivery_Route_Locations\", conn)\nDelivery_Routes.columns = Delivery_Routes.columns.str.lower()\nDelivery_Route_Locations.columns = Delivery_Route_Locations.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Delivery_Routes, Delivery_Route_Locations, on='route_id')\n\n# Group by route_name and count the number of occurrences\ngrouped_df = merged_df.groupby('route_name').size().reset_index(name='count')\n\n# Create a pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['route_name'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Display the chart\nplt.show()"
  },
  {
    "db_id": "aircraft",
    "question": "Can you create a bar chart displaying the names of aircrafts and the number of times each aircraft has won matches, ordered by the count in descending order?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naircraft = pd.read_sql(\"SELECT * FROM aircraft\", conn)\nMATCH = pd.read_sql(\"SELECT * FROM MATCH\", conn)\naircraft.columns = aircraft.columns.str.lower()\nMATCH.columns = MATCH.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(aircraft, MATCH, left_on='aircraft_id', right_on='winning_aircraft')\n\n# Grouping and counting the winning aircrafts\ngrouped_df = merged_df.groupby('aircraft').size().reset_index(name='count')\n\n# Sorting the dataframe by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plotting the bar chart\nplt.bar(sorted_df['aircraft'], sorted_df['count'])\nplt.xlabel('Aircraft')\nplt.ylabel('Count')\nplt.title('Number of Wins per Aircraft')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Return the number of venues of each workshop in a bar chart, could you rank by the total number in asc?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the workshop table\nworkshop = pd.read_sql(\"SELECT * FROM workshop\", conn)\n\n# Convert column names to lowercase\nworkshop.columns = workshop.columns.str.lower()\n\n# Perform the SQL query\nvenue_counts = workshop.groupby('venue').size().reset_index(name='count')\nvenue_counts = venue_counts.sort_values('count')\n\n# Create the bar plot\nplt.bar(venue_counts['venue'], venue_counts['count'])\nplt.xlabel('Venue')\nplt.ylabel('Count')\nplt.title('Workshop Venue Counts')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death , compare the number of deaths by name with a bar graph , and could you display from high to low by the Number_Deaths ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm.columns = storm.columns.str.lower()\n\n# Assuming the storm data is stored in a dataframe called 'storm'\n\n# Filter the data to include only storms with number_deaths >= 1\nfiltered_storm = storm[storm['number_deaths'] >= 1]\n\n# Sort the filtered data by number_deaths in descending order\nsorted_storm = filtered_storm.sort_values('number_deaths', ascending=False)\n\n# Extract the name and number_deaths columns from the sorted data\nname = sorted_storm['name']\nnumber_deaths = sorted_storm['number_deaths']\n\n# Create a bar plot\nplt.bar(name, number_deaths)\n\n# Add labels and title\nplt.xlabel('Storm Name')\nplt.ylabel('Number of Deaths')\nplt.title('Number of Deaths by Storm')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show the names of singers and the total sales of their songs. Visualize by bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the singer table\nsinger_df = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger_df.columns = map(str.lower, singer_df.columns)\n\n# Read the song table\nsong_df = pd.read_sql(\"SELECT * FROM song\", conn)\nsong_df.columns = map(str.lower, song_df.columns)\n\n# Merge the singer and song tables on Singer_ID\nmerged_df = pd.merge(singer_df, song_df, on=\"singer_id\")\n\n# Group by Name and calculate the sum of Sales\ngrouped_df = merged_df.groupby(\"name\").sales.sum().reset_index()\n\n# Plot the bar chart\nplt.bar(grouped_df[\"name\"], grouped_df[\"sales\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Total Sales\")\nplt.title(\"Total Sales by Singer\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "entertainment_awards",
    "question": ", I want to list by the bars from low to high please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the artwork table\nartwork = pd.read_sql(\"SELECT * FROM artwork\", conn)\n\n# Convert column names to lowercase\nartwork.columns = artwork.columns.str.lower()\n\n# Perform the SQL query\nresult = artwork.groupby('type').size().reset_index(name='count').sort_values('type')\n\n# Generate the bar chart\nplt.bar(result['type'], result['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Artwork Count by Type')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "What are the id and name of the stations that have ever had more than 12 bikes available? Plot them as a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the station table\nstation = pd.read_sql(\"SELECT * FROM station AS T1\", conn)\nstation.columns = map(str.lower, station.columns)\n\n# Read the status table\nstatus = pd.read_sql(\"SELECT * FROM status AS T2\", conn)\nstatus.columns = map(str.lower, status.columns)\n\n# Merge the station and status tables on id\nmerged_data = pd.merge(station, status, left_on='id', right_on='station_id')\n\n# Filter the merged data where bikes_available > 12\nfiltered_data = merged_data[merged_data['bikes_available'] > 12]\n\n# Group the filtered data by name and count the number of occurrences\ngrouped_data = filtered_data.groupby('name').size()\n\n# Plot the bar chart\nplt.bar(grouped_data.index, grouped_data.values)\nplt.xlabel('Station Name')\nplt.ylabel('Count')\nplt.title('Number of Stations with Bikes Available > 12')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "singer",
    "question": "Show me maximal net worth millions by citizenship in a bar , and sort by the maximal net worth millions in descending .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Group by citizenship and calculate the maximum net worth\nmax_net_worth = singer.groupby('citizenship')['net_worth_millions'].max()\n\n# Sort the values in descending order\nmax_net_worth = max_net_worth.sort_values(ascending=False)\n\n# Create a bar plot\nplt.bar(max_net_worth.index, max_net_worth.values)\n\n# Set the x-axis labels\nplt.xlabel('Citizenship')\n\n# Set the y-axis labels\nplt.ylabel('Max Net Worth (Millions)')\n\n# Set the title of the plot\nplt.title('Max Net Worth by Citizenship')\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show all distinct product categories along with the number of mailshots in each category in a bar chart , and show from high to low by the total number please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmailshot_campaigns = pd.read_sql(\"SELECT * FROM mailshot_campaigns\", conn)\nmailshot_campaigns.columns = mailshot_campaigns.columns.str.lower()\n\n# Grouping the data by product_category and counting the occurrences\ngrouped_data = mailshot_campaigns.groupby('product_category').size().reset_index(name='count')\n\n# Sorting the data by count in descending order\nsorted_data = grouped_data.sort_values(by='count', ascending=False)\n\n# Creating the bar plot\nplt.bar(sorted_data['product_category'], sorted_data['count'])\nplt.xlabel('Product Category')\nplt.ylabel('Count')\nplt.title('Number of Campaigns by Product Category')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death , show me the name and the total number of deaths with a bar chart , show Y-axis from high to low order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm.columns = storm.columns.str.lower()\n\n# Assuming the storm data is stored in a dataframe called 'storm'\n\n# Filter the data to include only storms with number_deaths >= 1\nfiltered_storm = storm[storm['number_deaths'] >= 1]\n\n# Sort the filtered data by number_deaths in descending order\nsorted_storm = filtered_storm.sort_values('number_deaths', ascending=False)\n\n# Extract the name and number_deaths columns from the sorted data\nname = sorted_storm['name']\nnumber_deaths = sorted_storm['number_deaths']\n\n# Create a bar plot\nplt.bar(name, number_deaths)\n\n# Set the x-axis labels to be rotated for better readability\nplt.xticks(rotation=90)\n\n# Add labels and title\nplt.xlabel('Storm Name')\nplt.ylabel('Number of Deaths')\nplt.title('Storms with Number of Deaths >= 1')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "I want to know the proportion of the total number for each position .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot.columns = pilot.columns.str.lower()\n\n# Group by position and count the number of occurrences\nposition_counts = pilot.groupby('position').size().reset_index(name='count')\n\n# Create a pie chart\nplt.pie(position_counts['count'], labels=position_counts['position'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Display the chart\nplt.show()"
  },
  {
    "db_id": "small_bank_1",
    "question": "How many accounts have a checking balance higher than their corresponding saving balance, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\nsavings = pd.read_sql(\"SELECT * FROM savings\", conn)\naccounts.columns = accounts.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\nsavings.columns = savings.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(accounts, checking, on='custid')\nmerged_df = pd.merge(merged_df, savings, on='custid')\n\n# Filter the data based on the condition\nfiltered_df = merged_df[merged_df['balance_x'] > merged_df['balance_y']]\n\n# Group by name and count the number of occurrences\ngrouped_df = filtered_df.groupby('name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['name'], grouped_df['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Number of occurrences for each name')\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "A pie chart shows the proportion of the number of locations of the wrestlers .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nwrestler = pd.read_sql(\"SELECT * FROM wrestler\", conn)\nwrestler.columns = wrestler.columns.str.lower()\n\n# Group by location and count the number of wrestlers in each location\nlocation_counts = wrestler.groupby('location').size().reset_index(name='count')\n\n# Plotting a pie chart\nplt.pie(location_counts['count'], labels=location_counts['location'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death , compare the number of deaths by dates active with a bar graph , show y axis in descending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm.columns = storm.columns.str.lower()\n\n# Assuming storm is a DataFrame containing the table data\n\n# Filter the data to include only rows where number_deaths >= 1\nfiltered_data = storm[storm['number_deaths'] >= 1]\n\n# Sort the filtered data by number_deaths in descending order\nsorted_data = filtered_data.sort_values('number_deaths', ascending=False)\n\n# Extract the required columns for visualization\ndates_active = sorted_data['dates_active']\nnumber_deaths = sorted_data['number_deaths']\n\n# Create a bar plot\nplt.bar(dates_active, number_deaths)\n\n# Add labels and title\nplt.xlabel('Dates Active')\nplt.ylabel('Number of Deaths')\nplt.title('Number of Deaths by Dates Active')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show different types of ships and the average tonnage of ships of each type Show bar chart , sort Y in asc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Group by type and calculate average tonnage\nship_avg_tonnage = ship.groupby('type')['tonnage'].mean()\n\n# Sort the average tonnage in ascending order\nship_avg_tonnage = ship_avg_tonnage.sort_values()\n\n# Create a bar plot\nplt.bar(ship_avg_tonnage.index, ship_avg_tonnage.values)\n\n# Set the x-axis label\nplt.xlabel('Type')\n\n# Set the y-axis label\nplt.ylabel('Average Tonnage')\n\n# Set the title of the plot\nplt.title('Average Tonnage by Ship Type')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "products_for_hire",
    "question": "What is the product description of the product booked with an amount of 102.76, and how many times does it appear in the database? Show the results in a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nproducts_booked = pd.read_sql(\"SELECT * FROM products_booked\", conn)\nproducts_for_hire = pd.read_sql(\"SELECT * FROM products_for_hire\", conn)\nproducts_booked.columns = products_booked.columns.str.lower()\nproducts_for_hire.columns = products_for_hire.columns.str.lower()\n\n# Merge the two dataframes on product_id\nmerged_df = pd.merge(products_booked, products_for_hire, on='product_id')\n\n# Filter the merged dataframe based on booked_amount\nfiltered_df = merged_df[merged_df['booked_amount'] == 102.76]\n\n# Group by product_description and count the number of occurrences\ngrouped_df = filtered_df.groupby('product_description').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['product_description'], grouped_df['count'])\nplt.xlabel('Product Description')\nplt.ylabel('Count')\nplt.title('Number of Products Booked with Booked Amount 102.76')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death, compare the number of deaths by name, and I want to order by the names from high to low.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the storm table into a DataFrame\nstorm_df = pd.read_sql(\"SELECT * FROM storm\", conn)\n\n# Convert column names to lowercase\nstorm_df.columns = storm_df.columns.str.lower()\n\n# Filter the DataFrame for rows where number_deaths >= 1\nfiltered_df = storm_df[storm_df['number_deaths'] >= 1]\n\n# Sort the filtered DataFrame by name in descending order\nsorted_df = filtered_df.sort_values('name', ascending=False)\n\n# Create a bar plot of the number of deaths for each storm\nplt.bar(sorted_df['name'], sorted_df['number_deaths'])\nplt.xlabel('Storm Name')\nplt.ylabel('Number of Deaths')\nplt.title('Number of Deaths for Storms')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "List the name and the number of stations for all the cities that have at least 15 stations Show bar chart , and order by the x axis in desc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstation.columns = station.columns.str.lower()\n\n# Group by city and count the number of rows\ncity_counts = station.groupby('city').size().reset_index(name='count')\n\n# Sort the cities in descending order\ncity_counts = city_counts.sort_values('city', ascending=False)\n\n# Create a bar plot\nplt.bar(city_counts['city'], city_counts['count'])\nplt.xlabel('City')\nplt.ylabel('Count')\nplt.title('Number of Stations by City')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "perpetrator",
    "question": "Can you create a pie chart displaying the distribution of occurrences for each perpetrator's name in the database?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\nperpetrator = pd.read_sql(\"SELECT * FROM perpetrator\", conn)\npeople.columns = people.columns.str.lower()\nperpetrator.columns = perpetrator.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(people, perpetrator, on='people_id')\n\n# Group by name and count the occurrences\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['name'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Show all artist names and ages in a bar , rank Y in asc order .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Assuming the data is already loaded into the 'artist' dataframe\n\n# Sort the dataframe by age in ascending order\nsorted_artist = artist.sort_values(by='age')\n\n# Extract the name and age columns\nname = sorted_artist['name']\nage = sorted_artist['age']\n\n# Create a bar plot\nplt.bar(name, age)\n\n# Add labels and title\nplt.xlabel('Name')\nplt.ylabel('Age')\nplt.title('Artist Age')\n\n# Rotate x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Can you create a scatter chart displaying the latitude of each station and the minimum duration of trips that ended at each station?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\nstation.columns = station.columns.str.lower()\ntrip.columns = trip.columns.str.lower()\n\n# Joining the station and trip tables\nmerged_df = pd.merge(station, trip, left_on='id', right_on='end_station_id')\n\n# Grouping by end_station_id and finding the minimum duration\ngrouped_df = merged_df.groupby('end_station_id').agg({'lat': 'first', 'duration': 'min'}).reset_index()\n\n# Scatter plot\nplt.scatter(grouped_df['lat'], grouped_df['duration'])\nplt.xlabel('Latitude')\nplt.ylabel('Minimum Duration')\nplt.title('Scatter plot of Latitude vs Minimum Duration')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Return a line on what are all the calendar dates and day Numbers ? , and rank in descending by the X-axis .",
    "chart": "Line",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nRef_calendar = pd.read_sql(\"SELECT * FROM Ref_calendar\", conn)\nRef_calendar.columns = Ref_calendar.columns.str.lower()\n\n# Assuming the table data is already loaded into a DataFrame called Ref_calendar\n\n# Sort the DataFrame by calendar_date in descending order\nRef_calendar_sorted = Ref_calendar.sort_values(by='calendar_date', ascending=False)\n\n# Extract the calendar_date and day_number columns\ncalendar_date = Ref_calendar_sorted['calendar_date']\nday_number = Ref_calendar_sorted['day_number']\n\n# Plot the line chart\nplt.plot(calendar_date, day_number)\nplt.xlabel('Calendar Date')\nplt.ylabel('Day Number')\nplt.title('Line Chart of Day Number by Calendar Date')\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Bar chart x axis event details y axis how many event details, could you order by the y-axis in ascending please?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the EVENTS table\nevents = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\n\n# Convert column names to lowercase\nevents.columns = events.columns.str.lower()\n\n# Perform the SQL query\nevent_counts = events.groupby('event_details').size().reset_index(name='count')\nevent_counts = event_counts.sort_values('count')\n\n# Generate the bar chart\nplt.bar(event_counts['event_details'], event_counts['count'])\nplt.xlabel('Event Details')\nplt.ylabel('Count')\nplt.title('Event Details Count')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "products_for_hire",
    "question": "How many bookings did each customer make? List the first name as the X-axis, and the count as the Y-axis in the bar chart, list the total number in asc order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Customers and bookings tables\ncustomers = pd.read_sql(\"SELECT * FROM Customers\", conn)\nbookings = pd.read_sql(\"SELECT * FROM bookings\", conn)\n\n# Convert column names to lowercase\ncustomers.columns = customers.columns.str.lower()\nbookings.columns = bookings.columns.str.lower()\n\n# Merge the Customers and bookings tables on customer_id\nmerged_data = pd.merge(customers, bookings, on=\"customer_id\")\n\n# Group by customer_id and count the number of bookings for each customer\ngrouped_data = merged_data.groupby(\"customer_id\").size().reset_index(name=\"count\")\n\n# Sort the data by count in ascending order\nsorted_data = grouped_data.sort_values(\"count\")\n\n# Plot the bar chart\nplt.bar(sorted_data[\"customer_id\"], sorted_data[\"count\"])\nplt.xlabel(\"Customer ID\")\nplt.ylabel(\"Number of Bookings\")\nplt.title(\"Number of Bookings per Customer\")\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "how many regions were affected by each storm?, I want to order in desc by the y axis.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the storm table\nstorm_df = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm_df.columns = map(str.lower, storm_df.columns)\n\n# Read the affected_region table\naffected_region_df = pd.read_sql(\"SELECT * FROM affected_region\", conn)\naffected_region_df.columns = map(str.lower, affected_region_df.columns)\n\n# Merge the storm and affected_region tables\nmerged_df = pd.merge(storm_df, affected_region_df, on=\"storm_id\")\n\n# Perform the SQL query\nresult_df = merged_df.groupby(\"name\").size().reset_index(name=\"count\").sort_values(\"count\", ascending=False)\n\n# Generate the bar plot\nplt.bar(result_df[\"name\"], result_df[\"count\"])\nplt.xlabel(\"Storm Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Affected Regions per Storm\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "Give a bar chart showing how many shops in each carrier, and could you show in ascending by the X?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the stock table\nstock = pd.read_sql(\"SELECT * FROM stock\", conn)\nstock.columns = stock.columns.str.lower()\n\n# Read the device table\ndevice = pd.read_sql(\"SELECT * FROM device\", conn)\ndevice.columns = device.columns.str.lower()\n\n# Read the shop table\nshop = pd.read_sql(\"SELECT * FROM shop\", conn)\nshop.columns = shop.columns.str.lower()\n\n# Merge the tables\nmerged = pd.merge(stock, device, on=\"device_id\")\nmerged = pd.merge(merged, shop, on=\"shop_id\")\n\n# Perform the query\nresult = merged.groupby(\"carrier\").size().reset_index(name=\"count\")\nresult = result.sort_values(\"carrier\")\n\n# Plot the bar chart\nplt.bar(result[\"carrier\"], result[\"count\"])\nplt.xlabel(\"Carrier\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Devices by Carrier\")\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show different citizenship of singers and the number of singers of each citizenship in a bar chart, could you display by the Citizenship in desc please?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the singer table\nsinger_df = pd.read_sql(\"SELECT * FROM singer\", conn)\n\n# Convert column names to lowercase\nsinger_df.columns = singer_df.columns.str.lower()\n\n# Perform the SQL query\nresult = singer_df.groupby('citizenship').size().reset_index(name='count')\nresult = result.sort_values('citizenship', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['citizenship'], result['count'])\nplt.xlabel('Citizenship')\nplt.ylabel('Count')\nplt.title('Number of Singers by Citizenship')\nplt.show()"
  },
  {
    "db_id": "entertainment_awards",
    "question": "How many artworks of each type were nominated in festivals in 2007, represented by a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nnomination = pd.read_sql(\"SELECT * FROM nomination\", conn)\nartwork = pd.read_sql(\"SELECT * FROM artwork\", conn)\nfestival_detail = pd.read_sql(\"SELECT * FROM festival_detail\", conn)\nnomination.columns = nomination.columns.str.lower()\nartwork.columns = artwork.columns.str.lower()\nfestival_detail.columns = festival_detail.columns.str.lower()\n\n# Merge tables\nmerged_df = pd.merge(nomination, artwork, on='artwork_id')\nmerged_df = pd.merge(merged_df, festival_detail, on='festival_id')\n\n# Filter data for year 2007\nfiltered_df = merged_df[merged_df['year'] == 2007]\n\n# Group by artwork type and count\ngrouped_df = filtered_df.groupby('type').size().reset_index(name='count')\n\n# Plot bar chart\nplt.bar(grouped_df['type'], grouped_df['count'])\nplt.xlabel('Artwork Type')\nplt.ylabel('Count')\nplt.title('Artwork Type Distribution in 2007')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Show all artist names and ages in a bar .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Assuming the data is already loaded into a dataframe called 'artist'\n# Selecting the 'name' and 'age' columns\ndata = artist[['name', 'age']]\n\n# Plotting a bar chart\nplt.bar(data['name'], data['age'])\nplt.xlabel('Name')\nplt.ylabel('Age')\nplt.title('Artist Age')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "What is the scatter plot of the count of documents for each location code in the Document_locations table, joined with the Ref_locations table?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDocument_locations = pd.read_sql(\"SELECT * FROM Document_locations\", conn)\nRef_locations = pd.read_sql(\"SELECT * FROM Ref_locations\", conn)\nDocument_locations.columns = Document_locations.columns.str.lower()\nRef_locations.columns = Ref_locations.columns.str.lower()\n\n# Merge the two dataframes on location_code\nmerged_df = pd.merge(Document_locations, Ref_locations, on='location_code')\n\n# Group by location_code and count the number of occurrences\ngrouped_df = merged_df.groupby('location_code').size().reset_index(name='count')\n\n# Create scatter plot\nplt.scatter(grouped_df['location_code'], grouped_df['count'])\nplt.xlabel('Location Code')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Location Code')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Draw a bar chart for showing the id and name of the stations that have ever had more than 12 bikes available.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the station table\nstation = pd.read_sql(\"SELECT * FROM station AS T1\", conn)\nstation.columns = map(str.lower, station.columns)\n\n# Read the status table\nstatus = pd.read_sql(\"SELECT * FROM status AS T2\", conn)\nstatus.columns = map(str.lower, status.columns)\n\n# Merge the station and status tables on id\nmerged_data = pd.merge(station, status, left_on='id', right_on='station_id')\n\n# Filter the merged data where bikes_available > 12\nfiltered_data = merged_data[merged_data['bikes_available'] > 12]\n\n# Group the filtered data by name and count the number of occurrences\ngrouped_data = filtered_data.groupby('name').size()\n\n# Plot the bar chart\nplt.bar(grouped_data.index, grouped_data.values)\nplt.xlabel('Station Name')\nplt.ylabel('Count')\nplt.title('Number of Stations with Bikes Available > 12')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "driving_school",
    "question": "List all payment methods and number of payments using each payment methods with a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Customer_Payments table\ncustomer_payments = pd.read_sql(\"SELECT * FROM Customer_Payments\", conn)\n\n# Convert column names to lowercase\ncustomer_payments.columns = customer_payments.columns.str.lower()\n\n# Perform the SQL query\npayment_counts = customer_payments.groupby('payment_method_code').size()\n\n# Plot the pie chart\nplt.pie(payment_counts, labels=payment_counts.index, autopct='%1.1f%%')\nplt.title('Payment Method Distribution')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "question": "Show me a bar chart displaying the count of documents mailed to each address, ranked in descending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nAddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\nDocuments_Mailed = pd.read_sql(\"SELECT * FROM Documents_Mailed\", conn)\nAddresses.columns = Addresses.columns.str.lower()\nDocuments_Mailed.columns = Documents_Mailed.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Addresses, Documents_Mailed, left_on='address_id', right_on='mailed_to_address_id')\n\n# Group by address_details and count the number of occurrences\ngrouped_df = merged_df.groupby('address_details').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['address_details'], sorted_df['count'])\nplt.xlabel('Address Details')\nplt.ylabel('Count')\nplt.title('Number of Documents Mailed per Address Details')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "In a bar chart, can you display the count of games in each season where the player 'Walter Samuel' got injured?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\ninjury_accident = pd.read_sql(\"SELECT * FROM injury_accident\", conn)\ngame.columns = game.columns.str.lower()\ninjury_accident.columns = injury_accident.columns.str.lower()\n\n# Merge the game and injury_accident dataframes\nmerged_df = pd.merge(game, injury_accident, left_on='id', right_on='game_id')\n\n# Filter the merged dataframe for player 'walter samuel'\nfiltered_df = merged_df[merged_df['player'] == 'Walter Samuel']\n\n# Group by season and count the number of occurrences\ngrouped_df = filtered_df.groupby('season').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['season'], grouped_df['count'])\nplt.xlabel('Season')\nplt.ylabel('Count')\nplt.title('Number of Injuries for Walter Samuel by Season')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "How many artists, out of the total number of artists, did not have an exhibition in 2004? Show the distribution using a pie chart.",
    "chart": "Pie",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\nexhibition.columns = exhibition.columns.str.lower()\nartist.columns = artist.columns.str.lower()\n\n# Perform the SQL query\nno_exhibition = pd.DataFrame({'name': ['no exhibition'], 'count': [artist.shape[0]]})\nexhibition_2004 = pd.merge(exhibition[exhibition['year'] == 2004], artist, on='artist_id', how='inner')\nexhibition_2004_count = exhibition_2004['name'].value_counts().reset_index()\nexhibition_2004_count.columns = ['name', 'count']\n\n# Combine the results\nresult = pd.concat([no_exhibition, exhibition_2004_count]).reset_index(drop=True)\n\n# Plot the pie chart\nplt.pie(result['count'], labels=result['name'], autopct='%1.1f%%')\nplt.title('Exhibition Status')\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "Which shop has the greatest variety of devices in stock, represented by a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstock = pd.read_sql(\"SELECT * FROM stock\", conn)\nshop = pd.read_sql(\"SELECT * FROM shop\", conn)\nstock.columns = stock.columns.str.lower()\nshop.columns = shop.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(stock, shop, on='shop_id')\n\n# Group by shop_name and count the number of devices\ngrouped_df = merged_df.groupby('shop_name').size().reset_index(name='num_devices')\n\n# Sort the dataframe by num_devices in descending order\nsorted_df = grouped_df.sort_values('num_devices', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['shop_name'], sorted_df['num_devices'])\nplt.xlabel('Shop Name')\nplt.ylabel('Number of Devices')\nplt.title('Number of Devices per Shop')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "List name and damage for all storms in a descending order of max speed . Plot them as bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm.columns = storm.columns.str.lower()\n\n# Assuming the storm data is stored in a dataframe called 'storm'\n\n# Sort the storm data by max_speed in descending order\nsorted_storm = storm.sort_values(by='max_speed', ascending=False)\n\n# Select the name and damage_millions_usd columns\nselected_storm = sorted_storm[['name', 'damage_millions_usd']]\n\n# Plot the bar chart\nplt.bar(selected_storm['name'], selected_storm['damage_millions_usd'])\nplt.xlabel('Storm Name')\nplt.ylabel('Damage (Millions USD)')\nplt.title('Damage by Storm')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Draw a scatter chart for what are the ids and durations of the trips with the top 3 durations ?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\ntrip.columns = trip.columns.str.lower()\n\n# Assuming the table data is already loaded into a DataFrame called 'trip'\n# Selecting the required columns and sorting by duration in descending order\ntop_3_trips = trip[['id', 'duration']].sort_values('duration', ascending=False).head(3)\n\n# Creating a scatter plot\nplt.scatter(top_3_trips['id'], top_3_trips['duration'])\n\n# Adding labels and title\nplt.xlabel('ID')\nplt.ylabel('Duration')\nplt.title('Top 3 Trips by Duration')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "icfp_1",
    "question": "Create a pie chart illustrating the distribution of papers affiliated with each country.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ninst = pd.read_sql(\"SELECT * FROM inst\", conn)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\npapers = pd.read_sql(\"SELECT * FROM papers\", conn)\ninst.columns = inst.columns.str.lower()\nauthorship.columns = authorship.columns.str.lower()\npapers.columns = papers.columns.str.lower()\n\n# Perform the join operation\nmerged_data = pd.merge(pd.merge(inst, authorship, on='instid'), papers, on='paperid')\n\n# Group by country and count the number of occurrences\ncountry_counts = merged_data.groupby('country').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(country_counts['count'], labels=country_counts['country'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "How many regions were affected by each storm Visualize by bar chart, and order bars from high to low order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the storm table\nstorm_df = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm_df.columns = map(str.lower, storm_df.columns)\n\n# Read the affected_region table\naffected_region_df = pd.read_sql(\"SELECT * FROM affected_region\", conn)\naffected_region_df.columns = map(str.lower, affected_region_df.columns)\n\n# Merge the storm and affected_region tables\nmerged_df = pd.merge(storm_df, affected_region_df, on=\"storm_id\")\n\n# Perform the SQL query\nresult_df = merged_df.groupby(\"name\").size().reset_index(name=\"count\").sort_values(\"name\", ascending=False)\n\n# Generate the bar chart\nplt.bar(result_df[\"name\"], result_df[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of Storms by Name\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Show me a bar chart of the authors and the number of workshops they submitted to, sorted in ascending order by the number of workshops.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nacceptance = pd.read_sql(\"SELECT * FROM acceptance\", conn)\nsubmission = pd.read_sql(\"SELECT * FROM submission\", conn)\nacceptance.columns = acceptance.columns.str.lower()\nsubmission.columns = submission.columns.str.lower()\n\n# Merge acceptance and submission tables\nmerged_df = pd.merge(acceptance, submission, on='submission_id')\n\n# Group by author and count distinct workshop_id\nresult_df = merged_df.groupby('author')['workshop_id'].nunique().reset_index()\nresult_df.columns = ['author', 'workshop_count']\n\n# Sort by workshop_count in ascending order\nresult_df = result_df.sort_values('workshop_count')\n\n# Plot the bar chart\nplt.bar(result_df['author'], result_df['workshop_count'])\nplt.xlabel('Author')\nplt.ylabel('Workshop Count')\nplt.title('Number of Workshops per Author')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship in a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Group by citizenship and calculate the maximum net worth\nmax_net_worth = singer.groupby('citizenship')['net_worth_millions'].max()\n\n# Create a bar plot\nplt.bar(max_net_worth.index, max_net_worth.values)\n\n# Set the labels and title\nplt.xlabel('Citizenship')\nplt.ylabel('Max Net Worth (Millions)')\nplt.title('Max Net Worth by Citizenship')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "What is the count of procedures that cost more than 1000, visualized in a scatter chart?",
    "chart": "Scatter",
    "hardness": "Extra Hard",
    "code": "import sqlite3\n# Scatter plot\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nprocedures = pd.read_sql(\"SELECT * FROM procedures\", conn)\nphysician = pd.read_sql(\"SELECT * FROM physician\", conn)\ntrained_in = pd.read_sql(\"SELECT * FROM trained_in\", conn)\nprocedures = pd.read_sql(\"SELECT * FROM procedures\", conn)\nprocedures.columns = procedures.columns.str.lower()\nphysician.columns = physician.columns.str.lower()\ntrained_in.columns = trained_in.columns.str.lower()\nprocedures.columns = procedures.columns.str.lower()\n\n# Filter procedures with cost > 1000\nprocedures_filtered = procedures[procedures['cost'] > 1000]\n\n# Group by cost and count the number of procedures\nprocedures_grouped = procedures_filtered.groupby('cost').size().reset_index(name='count')\n\n# Join tables to get procedures performed by physician 'john wen'\nphysician_john_wen = physician[physician['name'] == 'john wen']\njoined_table = pd.merge(physician_john_wen, trained_in, left_on='employeeid', right_on='physician')\njoined_table = pd.merge(joined_table, procedures, left_on='treatment', right_on='code')\n\n# Group by cost and count the number of procedures performed by 'john wen'\njohn_wen_grouped = joined_table.groupby('cost').size().reset_index(name='count')\n\n# Combine the two dataframes\ncombined_data = pd.concat([procedures_grouped, john_wen_grouped])\n\n# Plot the scatter plot\nplt.scatter(combined_data['cost'], combined_data['count'])\nplt.xlabel('Cost')\nplt.ylabel('Count')\nplt.title('Scatter plot of procedure cost and count')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "What is the average duration of trips that started from each station, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\nstation.columns = station.columns.str.lower()\ntrip.columns = trip.columns.str.lower()\n\n# Joining the station and trip tables\nmerged_df = pd.merge(station, trip, left_on='id', right_on='start_station_id')\n\n# Calculating the average duration for each start station\navg_duration = merged_df.groupby('start_station_id')['duration'].mean()\n\n# Getting the names of the start stations\nstart_station_names = merged_df.groupby('start_station_id')['name'].first()\n\n# Creating a bar plot\nplt.bar(start_station_names, avg_duration)\nplt.xlabel('Start Station')\nplt.ylabel('Average Duration')\nplt.title('Average Trip Duration by Start Station')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "List the name for storms and the number of affected regions for each storm, I want to list in asc by the X-axis.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the storm table\nstorm_df = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm_df.columns = map(str.lower, storm_df.columns)\n\n# Read the affected_region table\naffected_region_df = pd.read_sql(\"SELECT * FROM affected_region\", conn)\naffected_region_df.columns = map(str.lower, affected_region_df.columns)\n\n# Merge the storm and affected_region tables\nmerged_df = pd.merge(storm_df, affected_region_df, on=\"storm_id\")\n\n# Perform the SQL query\nresult_df = merged_df.groupby(\"name\").size().reset_index(name=\"count\").sort_values(\"name\")\n\n# Generate the bar plot\nplt.bar(result_df[\"name\"], result_df[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of Storms by Name\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show the names of singers and the total sales of their songs in a bar chart, and show in descending by the Y.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the singer table\nsinger_df = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger_df.columns = map(str.lower, singer_df.columns)\n\n# Read the song table\nsong_df = pd.read_sql(\"SELECT * FROM song\", conn)\nsong_df.columns = map(str.lower, song_df.columns)\n\n# Merge the singer and song tables on Singer_ID\nmerged_df = pd.merge(singer_df, song_df, on=\"singer_id\")\n\n# Group by singer name and calculate the sum of sales\ngrouped_df = merged_df.groupby(\"name\").sum(\"sales\").reset_index()\n\n# Sort by sum of sales in descending order\nsorted_df = grouped_df.sort_values(\"sales\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df[\"name\"], sorted_df[\"sales\"])\nplt.xlabel(\"Singer Name\")\nplt.ylabel(\"Total Sales\")\nplt.title(\"Total Sales by Singer\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "What are the average ages of artists by countries ? Visualize the result with a bar .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Calculate average age by country\navg_age_by_country = artist.groupby('country')['age'].mean()\n\n# Convert the result to a DataFrame\ndf_avg_age_by_country = pd.DataFrame(avg_age_by_country).reset_index()\n\n# Plot the bar chart\nplt.bar(df_avg_age_by_country['country'], df_avg_age_by_country['age'])\nplt.xlabel('Country')\nplt.ylabel('Average Age')\nplt.title('Average Age of Artists by Country')\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "Bar chart x axis log entry description y axis the number of log entry description, and I want to display in descending by the bar please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the problem_log table\nproblem_log = pd.read_sql(\"SELECT * FROM problem_log\", conn)\n\n# Convert column names to lowercase\nproblem_log.columns = problem_log.columns.str.lower()\n\n# Perform the SQL query\nresult = problem_log.groupby('log_entry_description').size().reset_index(name='count')\nresult = result.sort_values('log_entry_description', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['log_entry_description'], result['count'])\nplt.xlabel('Log Entry Description')\nplt.ylabel('Count')\nplt.title('Bar Chart of Log Entry Description')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show me a bar chart displaying the number of missions each ship has been involved in.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmission = pd.read_sql(\"SELECT * FROM mission\", conn)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nmission.columns = mission.columns.str.lower()\nship.columns = ship.columns.str.lower()\n\n# Perform the join operation\nmerged_data = pd.merge(mission, ship, on='ship_id')\n\n# Group by ship name and count the number of missions\nmission_count = merged_data.groupby('name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(mission_count['name'], mission_count['count'])\nplt.xlabel('Ship Name')\nplt.ylabel('Mission Count')\nplt.title('Number of Missions per Ship')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tvshow",
    "question": "For each language, list the number of TV Channels that use it Plot them as bar chart, sort in asc by the bar.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the TV_Channel table\ntv_channel = pd.read_sql(\"SELECT * FROM TV_Channel\", conn)\n\n# Convert column names to lowercase\ntv_channel.columns = tv_channel.columns.str.lower()\n\n# Perform the SQL query\nresult = tv_channel.groupby('language').size().reset_index(name='count').sort_values('language')\n\n# Generate the bar chart\nplt.bar(result['language'], result['count'])\nplt.xlabel('Language')\nplt.ylabel('Count')\nplt.title('Number of TV Channels by Language')\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "How many players are injured in each day? Show a bar chart, list by the Y-axis in ascending.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the game and injury_accident tables\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\ninjury_accident = pd.read_sql(\"SELECT * FROM injury_accident\", conn)\n\n# Convert column names to lowercase\ngame.columns = game.columns.str.lower()\ninjury_accident.columns = injury_accident.columns.str.lower()\n# Merge the game and injury_accident tables on the id column\nmerged_data = pd.merge(game, injury_accident, left_on=\"id\", right_on=\"game_id\")\n\n# Group by Date and count the occurrences\ngrouped_data = merged_data.groupby(\"date\").size().reset_index(name=\"count\")\n\n# Sort the data by count in ascending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=True)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"date\"], sorted_data[\"count\"])\nplt.xlabel(\"Date\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Injury Accidents per Date\")\nplt.xticks(rotation=45)\nplt.show()\n"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death , compare the number of deaths by name with a bar graph .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm.columns = storm.columns.str.lower()\n\n# Assuming storm is a DataFrame containing the table data\n\n# Filter the DataFrame to include only rows where number_deaths >= 1\nfiltered_storm = storm[storm['number_deaths'] >= 1]\n\n# Create a bar plot of name vs number_deaths\nplt.bar(filtered_storm['name'], filtered_storm['number_deaths'])\nplt.xlabel('Name')\nplt.ylabel('Number of Deaths')\nplt.title('Storms with Number of Deaths >= 1')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "Give me a bar chart that group and count names of technicians with a series of machines they are assigned to repair, and list by the total number in desc.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the repair_assignment table\nrepair_assignment = pd.read_sql(\"SELECT * FROM repair_assignment\", conn)\n\n# Read the machine table\nmachine = pd.read_sql(\"SELECT * FROM machine\", conn)\n\n# Read the technician table\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\n\n# Convert column names to lowercase\nrepair_assignment.columns = repair_assignment.columns.str.lower()\nmachine.columns = machine.columns.str.lower()\ntechnician.columns = technician.columns.str.lower()\n\n# merge the tables\nmerged_data = pd.merge(repair_assignment, machine, on=\"machine_id\")\nmerged_data = pd.merge(merged_data, technician, on=\"technician_id\")\n\n# perform the sql query\nresult = merged_data.groupby(\"name\").size().reset_index(name=\"count\").sort_values(by=\"count\", ascending=False)\n\n# plot the bar chart\nplt.bar(result[\"name\"], result[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Repairs by Name\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "club_1",
    "question": "Show me a bar chart displaying the count of members in the club \"Bootup Baltimore\" grouped by age.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nstudent = pd.read_sql(\"SELECT * FROM student\", conn)\nclub.columns = club.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\nstudent.columns = student.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(club, member_of_club, on='clubid')\nmerged_df = pd.merge(merged_df, student, left_on='stuid', right_on='stuid')\n\n# Filter by clubname\nfiltered_df = merged_df[merged_df['clubname'] == 'Bootup Baltimore']\n\n# Group by age and count\ngrouped_df = filtered_df.groupby('age').size().reset_index(name='count')\n\n# Plot bar chart\nplt.bar(grouped_df['age'], grouped_df['count'])\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.title('Number of Students in Bootup Baltimore Club by Age')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "A bar chart compares the ages of all artists , sort by the total number in ascending .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Assuming the data is already loaded into the 'artist' dataframe\n\n# Sort the dataframe by age in ascending order\nsorted_artist = artist.sort_values(by='age')\n\n# Extract the name and age columns\nname = sorted_artist['name']\nage = sorted_artist['age']\n\n# Create a bar plot\nplt.bar(name, age)\n\n# Add labels and title\nplt.xlabel('Name')\nplt.ylabel('Age')\nplt.title('Artist Age')\n\n# Rotate x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "List the number of the name of physicians who took some appointment, and rank by the the number of name from low to high please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the appointment and physician tables\nappointment = pd.read_sql(\"SELECT * FROM appointment\", conn)\nphysician = pd.read_sql(\"SELECT * FROM physician\", conn)\n\n# Convert column names to lowercase\nappointment.columns = appointment.columns.str.lower()\nphysician.columns = physician.columns.str.lower()\n\n# Merge the appointment and physician tables on the Physician column\nmerged_data = pd.merge(appointment, physician, left_on=\"physician\", right_on=\"employeeid\")\n\n# Perform the SQL query and group by Name, count the occurrences, and sort in ascending order\nresult = merged_data.groupby(\"name\").size().reset_index(name=\"count\").sort_values(\"count\", ascending=True)\n\n# Generate the bar chart\nplt.bar(result[\"name\"], result[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Appointments by Physician\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show all distinct product categories along with the number of mailshots in each category Visualize by bar chart , rank x-axis from high to low order please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmailshot_campaigns = pd.read_sql(\"SELECT * FROM mailshot_campaigns\", conn)\nmailshot_campaigns.columns = mailshot_campaigns.columns.str.lower()\n\n# Grouping the data by product_category and counting the occurrences\ngrouped_data = mailshot_campaigns.groupby('product_category').size().reset_index(name='count')\n\n# Sorting the data by product_category in descending order\nsorted_data = grouped_data.sort_values('product_category', ascending=False)\n\n# Creating the bar plot\nplt.bar(sorted_data['product_category'], sorted_data['count'])\nplt.xlabel('Product Category')\nplt.ylabel('Count')\nplt.title('Number of Campaigns by Product Category')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "What does the scatter plot reveal from the database?",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomer_addresses = pd.read_sql(\"SELECT * FROM customer_addresses\", conn)\npremises = pd.read_sql(\"SELECT * FROM premises\", conn)\ncustomer_addresses.columns = customer_addresses.columns.str.lower()\npremises.columns = premises.columns.str.lower()\n\n# Merge customer_addresses and premises dataframes\nmerged_df = pd.merge(customer_addresses, premises, on='premise_id')\n\n# Create scatter plot\nplt.scatter(merged_df['premises_type'], merged_df['address_type_code'])\nplt.xlabel('Premises Type')\nplt.ylabel('Address Type Code')\nplt.title('Scatter Plot of Premises Type vs Address Type Code')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show each premise type and the number of premises in that type Visualize by bar chart , and I want to rank X-axis from high to low order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npremises = pd.read_sql(\"SELECT * FROM premises\", conn)\npremises.columns = premises.columns.str.lower()\n\n# Group by premises_type and count the number of occurrences\npremises_count = premises.groupby('premises_type').size().reset_index(name='count')\n\n# Sort by premises_type in descending order\npremises_count = premises_count.sort_values('premises_type', ascending=False)\n\n# Create bar plot\nplt.bar(premises_count['premises_type'], premises_count['count'])\nplt.xlabel('Premises Type')\nplt.ylabel('Count')\nplt.title('Number of Premises by Type')\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "Show me a line chart representing the count of problem ids reported after 1995, grouped by the date they were reported.",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nproblems = pd.read_sql(\"SELECT * FROM problems\", conn)\nproduct = pd.read_sql(\"SELECT * FROM product\", conn)\nproblems.columns = problems.columns.str.lower()\nproduct.columns = product.columns.str.lower()\n\n# Merge problems and product tables\nmerged_df = pd.merge(problems, product, on='product_id')\n\n# Filter data for date_problem_reported > '1995'\nfiltered_df = merged_df[merged_df['date_problem_reported'] > '1995']\n\n# Group by date_problem_reported and count problem_id\ngrouped_df = filtered_df.groupby('date_problem_reported').count()['problem_id']\n\n# Plot line chart\nplt.plot(grouped_df.index, grouped_df.values)\nplt.xlabel('Date Problem Reported')\nplt.ylabel('Count')\nplt.title('Number of Problems Reported by Date')\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "Create a bar chart showing the total number across team",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\ntechnician.columns = technician.columns.str.lower()\n\n# Grouping the data by 'team' and counting the number of occurrences\nteam_counts = technician.groupby('team').size()\n\n# Creating a bar plot\nplt.bar(team_counts.index, team_counts.values)\n\n# Adding labels and title\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Technician Count by Team')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show different types of ships and the average tonnage of ships of each type . Show bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Calculate average tonnage by ship type\navg_tonnage_by_type = ship.groupby('type')['tonnage'].mean()\n\n# Create bar plot\nplt.bar(avg_tonnage_by_type.index, avg_tonnage_by_type.values)\nplt.xlabel('Ship Type')\nplt.ylabel('Average Tonnage')\nplt.title('Average Tonnage by Ship Type')\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "What is the average age of the members in each club, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nstudent = pd.read_sql(\"SELECT * FROM student\", conn)\nclub.columns = club.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\nstudent.columns = student.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(club, member_of_club, on='clubid')\nmerged_df = pd.merge(merged_df, student, left_on='stuid', right_on='stuid')\n\n# Calculate the average age for each club\navg_age_by_club = merged_df.groupby('clubname')['age'].mean()\n\n# Create a bar plot\nplt.bar(avg_age_by_club.index, avg_age_by_club.values)\nplt.xlabel('Club Name')\nplt.ylabel('Average Age')\nplt.title('Average Age by Club')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "college_3",
    "question": "What is the distribution of courses and their enrollment count for courses that have at least five enrollments, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nCOURSE = pd.read_sql(\"SELECT * FROM COURSE\", conn)\nENROLLED_IN = pd.read_sql(\"SELECT * FROM ENROLLED_IN\", conn)\nCOURSE.columns = COURSE.columns.str.lower()\nENROLLED_IN.columns = ENROLLED_IN.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(COURSE, ENROLLED_IN, on='cid')\n\n# Group by cid and count the number of courses and enrollment count\ngrouped_df = merged_df.groupby('cid').size().reset_index(name='enrollment_count')\n\n# Filter the groups with enrollment count >= 5\nfiltered_df = grouped_df[grouped_df['enrollment_count'] >= 5]\n\n# Count the number of courses\nfiltered_df['number_of_courses'] = filtered_df['cid'].count()\n\n# Plot the pie chart\nplt.pie(filtered_df['number_of_courses'], labels=filtered_df['enrollment_count'])\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "List the count and id of each product in all the orders. ",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the tables from the database\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\norder_items = pd.read_sql(\"SELECT * FROM order_items\", conn)\nproducts = pd.read_sql(\"SELECT * FROM products\", conn)\n\n# Convert column names to lowercase\norders.columns = orders.columns.str.lower()\norder_items.columns = order_items.columns.str.lower()\nproducts.columns = products.columns.str.lower()\n\n# Merge the tables\nmerged_data = pd.merge(pd.merge(orders, order_items, on=\"order_id\"), products, on=\"product_id\")\n\n# Perform the SQL query\nquery_result = merged_data.groupby(\"product_id\").size().reset_index(name=\"count\")\n\n# Scatter plot\nplt.scatter(query_result[\"product_id\"], query_result[\"count\"])\nplt.xlabel(\"Product ID\")\nplt.ylabel(\"Count\")\nplt.title(\"Scatter Plot of Product Count\")\nplt.show()"
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What other details can you tell me about students in reverse alphabetical order, and count them by a bar chart",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Students table\nstudents_df = pd.read_sql(\"SELECT * FROM Students\", conn)\n\n# Convert column names to lowercase\nstudents_df.columns = students_df.columns.str.lower()\n\n# Perform the SQL query\nresult = students_df.groupby('other_student_details').size().reset_index(name='count')\nresult = result.sort_values('other_student_details', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['other_student_details'], result['count'])\nplt.xlabel('Other Student Details')\nplt.ylabel('Count')\nplt.title('Bar Chart of Other Student Details')\nplt.show()"
  },
  {
    "db_id": "e_government",
    "question": "Which parties have the highest number of party forms and what are their corresponding email addresses? Display the results using a bar chart.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nparties = pd.read_sql(\"SELECT * FROM parties\", conn)\nparty_forms = pd.read_sql(\"SELECT * FROM party_forms\", conn)\nparty_forms = pd.read_sql(\"SELECT * FROM party_forms\", conn)\nparties.columns = parties.columns.str.lower()\nparty_forms.columns = party_forms.columns.str.lower()\nparty_forms.columns = party_forms.columns.str.lower()\n\n# Joining tables\nmerged_df = pd.merge(parties, party_forms, on='party_id')\n\n# Subquery to get the most common form_id\nmost_common_form_id = party_forms['form_id'].value_counts().idxmax()\n\n# Filtering data based on the most common form_id\nfiltered_df = merged_df[merged_df['form_id'] == most_common_form_id]\n\n# Grouping by party_email and counting the number of party_forms\ngrouped_df = filtered_df.groupby('party_email').size().reset_index(name='num_party_forms')\n\n# Plotting the bar chart\nplt.bar(grouped_df['party_email'], grouped_df['num_party_forms'])\nplt.xlabel('Party Email')\nplt.ylabel('Number of Party Forms')\nplt.title('Number of Party Forms per Party Email')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "Show me a bar chart displaying the count of staff members living in each city, ranked in descending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nAddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\nStaff = pd.read_sql(\"SELECT * FROM Staff\", conn)\nAddresses.columns = Addresses.columns.str.lower()\nStaff.columns = Staff.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Addresses, Staff, left_on='address_id', right_on='staff_address_id')\n\n# Group by city and count the number of occurrences\ncity_counts = merged_df.groupby('city').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_city_counts = city_counts.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_city_counts['city'], sorted_city_counts['count'])\nplt.xlabel('City')\nplt.ylabel('Count')\nplt.title('Number of Staff in Each City')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Show me a line chart of how how many installation date change over the installation date",
    "chart": "Line",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstation.columns = station.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called 'station'\n\n# Grouping the data by installation_date and counting the occurrences\ngrouped_data = station.groupby('installation_date').size().reset_index(name='count')\n\n# Sorting the data by installation_date\nsorted_data = grouped_data.sort_values('installation_date')\n\n# Plotting the line chart\nplt.plot(sorted_data['installation_date'], sorted_data['count'])\nplt.xlabel('Installation Date')\nplt.ylabel('Count')\nplt.title('Count of Installations by Date')\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "List the count and id of each product in all the orders with a scatter chart.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the tables from the database\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\norder_items = pd.read_sql(\"SELECT * FROM order_items\", conn)\nproducts = pd.read_sql(\"SELECT * FROM products\", conn)\n\n# Convert column names to lowercase\norders.columns = orders.columns.str.lower()\norder_items.columns = order_items.columns.str.lower()\nproducts.columns = products.columns.str.lower()\n\n# Merge the tables\nmerged_data = pd.merge(pd.merge(orders, order_items, on=\"order_id\"), products, on=\"product_id\")\n\n# Perform the SQL query\nquery_result = merged_data.groupby(\"product_id\").size().reset_index(name=\"count\")\n\n# Scatter plot\nplt.scatter(query_result[\"product_id\"], query_result[\"count\"])\nplt.xlabel(\"Product ID\")\nplt.ylabel(\"Count\")\nplt.title(\"Scatter Plot of Product Count\")\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Show all role codes and the number of employees in each role by a bar chart , show in ascending by the Y-axis please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nEmployees.columns = Employees.columns.str.lower()\n\n# Grouping the data by role_code and counting the occurrences\nrole_counts = Employees.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nrole_counts = role_counts.sort_values('count')\n\n# Creating the bar plot\nplt.bar(role_counts['role_code'], role_counts['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Employees by Role Code')\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "A bar chart about what are the ids and details of events that have more than one participants?, and order X in asc order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the EVENTS table\nevents = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\n\n# Read the Participants_in_Events table\nparticipants = pd.read_sql(\"SELECT * FROM Participants_in_Events\", conn)\n\n# Convert column names to lowercase\nevents.columns = events.columns.str.lower()\nparticipants.columns = participants.columns.str.lower()\n\n# merge the events and participants_in_events tables on event_id\nmerged_data = pd.merge(events, participants, on='event_id')\n\n# group by event_details and count the number of event_ids\ngrouped_data = merged_data.groupby('event_details')['event_id'].count().reset_index()\n\n# sort the data by event_details in ascending order\nsorted_data = grouped_data.sort_values('event_details')\n\n# plot the bar chart\nplt.bar(sorted_data['event_details'], sorted_data['event_id'])\nplt.xlabel('Event Details')\nplt.ylabel('Number of Event IDs')\nplt.title('Bar Chart of Event Details')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "twitter_1",
    "question": "Find the name and partition id for users who tweeted less than twice Show bar chart, sort name in asc order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the user_profiles table\nuser_profiles = pd.read_sql(\"SELECT * FROM user_profiles\", conn)\nuser_profiles.columns = map(str.lower, user_profiles.columns)\n\n# Read the tweets table\ntweets = pd.read_sql(\"SELECT * FROM tweets\", conn)\ntweets.columns = map(str.lower, tweets.columns)\n\n# Merge the user_profiles and tweets tables on uid column\nmerged_data = pd.merge(user_profiles, tweets, on=\"uid\")\n\n# Sort the merged data by name column in ascending order\nsorted_data = merged_data.sort_values(by=\"name\")\n\n# Create a bar plot\nplt.bar(sorted_data[\"name\"], sorted_data[\"partitionid\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Partition ID\")\nplt.title(\"Bar Plot of Partition ID by Name\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "Show me a bar chart displaying the club name and average age of members for each club, sorted in descending order by average age.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nstudent = pd.read_sql(\"SELECT * FROM student\", conn)\nclub.columns = club.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\nstudent.columns = student.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(club, member_of_club, on='clubid')\nmerged_df = pd.merge(merged_df, student, left_on='stuid', right_on='stuid')\n\n# Calculate the average age for each club\navg_age_by_club = merged_df.groupby('clubname')['age'].mean().reset_index()\n\n# Sort the clubs by average age in descending order\navg_age_by_club = avg_age_by_club.sort_values('age', ascending=False)\n\n# Plot the bar chart\nplt.bar(avg_age_by_club['clubname'], avg_age_by_club['age'])\nplt.xlabel('Club Name')\nplt.ylabel('Average Age')\nplt.title('Average Age by Club')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "How many trips started from a station in Mountain View and ended at one in Palo Alto, grouped by the start station, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\nstation.columns = station.columns.str.lower()\ntrip.columns = trip.columns.str.lower()\nstation.columns = station.columns.str.lower()\ntrip.columns = trip.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(station, trip, left_on='id', right_on='start_station_id')\nmerged_df = pd.merge(merged_df, station, left_on='end_station_id', right_on='id')\n\n# Filtering the data\nfiltered_df = merged_df[(merged_df['city_x'] == 'Mountain View') & (merged_df['city_y'] == 'Palo Alto')]\n\n# Grouping and counting the number of trips for each start station\ngrouped_df = filtered_df.groupby('name_x').size().reset_index(name='num_trips')\n\n# Plotting the pie chart\nplt.pie(grouped_df['num_trips'], labels=grouped_df['name_x'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.title('Number of Trips from Mountain View to Palo Alto by Start Station')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "What is the total number of different nationalities of all ships ? Give me a bar graph , and I want to list by the Y from low to high .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Group by nationality and count the occurrences\nnationality_counts = ship.groupby('nationality').size().reset_index(name='count')\n\n# Sort the counts in ascending order\nnationality_counts = nationality_counts.sort_values('count')\n\n# Plot the bar chart\nplt.bar(nationality_counts['nationality'], nationality_counts['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Ships by Nationality')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tvshow",
    "question": "What are the pixel aspect ratio and country of origin for all TV channels that do not use English? Show the comparison of the total number of pixel aspect ratio in a bar chart, order names in asc order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the tv_channel table\ntv_channel = pd.read_sql(\"SELECT * FROM tv_channel\", conn)\n\n# Convert column names to lowercase\ntv_channel.columns = tv_channel.columns.str.lower()\n\n# Filter rows where language is not English\nfiltered_tv_channel = tv_channel[tv_channel['language'] != 'English']\n\n# Group by Pixel_aspect_ratio_PAR and count occurrences\ngrouped_tv_channel = filtered_tv_channel.groupby('pixel_aspect_ratio_par').size().reset_index(name='count')\n\n# Sort by Pixel_aspect_ratio_PAR in ascending order\nsorted_tv_channel = grouped_tv_channel.sort_values('pixel_aspect_ratio_par')\n\n# Generate bar plot\nplt.bar(sorted_tv_channel['pixel_aspect_ratio_par'], sorted_tv_channel['count'])\nplt.xlabel('Pixel_aspect_ratio_PAR')\nplt.ylabel('Count')\nplt.title('Count of Pixel_aspect_ratio_PAR for Non-English TV Channels')\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "Show me a bar chart displaying the number of lessons taken by each customer.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nLessons = pd.read_sql(\"SELECT * FROM Lessons\", conn)\nCustomers = pd.read_sql(\"SELECT * FROM Customers\", conn)\nLessons.columns = Lessons.columns.str.lower()\nCustomers.columns = Customers.columns.str.lower()\n\n# Perform the join operation\ndf = pd.merge(Lessons, Customers, on='customer_id')\n\n# Group by first_name and count the number of occurrences\ndf_grouped = df.groupby('first_name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(df_grouped['first_name'], df_grouped['count'])\nplt.xlabel('First Name')\nplt.ylabel('Count')\nplt.title('Number of Lessons per Customer')\nplt.show()"
  },
  {
    "db_id": "icfp_1",
    "question": "Show me a bar chart of the top 10 institutions with the highest number of authors.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nauthors = pd.read_sql(\"SELECT * FROM authors\", conn)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\ninst = pd.read_sql(\"SELECT * FROM inst\", conn)\nauthors.columns = authors.columns.str.lower()\nauthorship.columns = authorship.columns.str.lower()\ninst.columns = inst.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(pd.merge(authors, authorship, on='authid'), inst, on='instid')\n\n# Group by institution name and count\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Sort by count in descending order and select top 10\ntop_10_df = grouped_df.sort_values('count', ascending=False).head(10)\n\n# Plot bar chart\nplt.bar(top_10_df['name'], top_10_df['count'])\nplt.xlabel('Institution')\nplt.ylabel('Count')\nplt.title('Top 10 Institutions by Authorship Count')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death , show me the dates active and the total number of deaths with a bar chart , could you sort by the names in asc ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm.columns = storm.columns.str.lower()\n\n# Assuming storm is a DataFrame containing the table data\n\n# Filter the data where number_deaths >= 1\nfiltered_data = storm[storm['number_deaths'] >= 1]\n\n# Sort the filtered data by dates_active in ascending order\nsorted_data = filtered_data.sort_values('dates_active')\n\n# Create a bar plot\nplt.bar(sorted_data['dates_active'], sorted_data['number_deaths'])\n\n# Add labels and title\nplt.xlabel('Dates Active')\nplt.ylabel('Number of Deaths')\nplt.title('Number of Deaths by Dates Active')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show me the total number by product category in a bar",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmailshot_campaigns = pd.read_sql(\"SELECT * FROM mailshot_campaigns\", conn)\nmailshot_campaigns.columns = mailshot_campaigns.columns.str.lower()\n\n# Grouping the data by product_category and counting the occurrences\ngrouped_data = mailshot_campaigns.groupby('product_category').size().reset_index(name='count')\n\n# Creating a bar plot\nplt.bar(grouped_data['product_category'], grouped_data['count'])\nplt.xlabel('Product Category')\nplt.ylabel('Count')\nplt.title('Number of Campaigns by Product Category')\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "Show the number of teams in elimination in a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"elimination\" table\nelimination_data = pd.read_sql(\"SELECT * FROM elimination\", conn)\n\n# Convert column names to lowercase\nelimination_data.columns = elimination_data.columns.str.lower()\n\n# Perform the SQL query\nteam_counts = elimination_data.groupby('team').size().reset_index(name='count')\n\n# Generate the bar plot\nplt.bar(team_counts['team'], team_counts['count'])\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Number of Eliminations by Team')\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death , compare the total number of deaths by dates_active attribute , sort by the names from low to high .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm.columns = storm.columns.str.lower()\n\n# Assuming storm is a DataFrame containing the table data\n\n# Filter the data where number_deaths >= 1\nfiltered_data = storm[storm['number_deaths'] >= 1]\n\n# Sort the filtered data by dates_active in ascending order\nsorted_data = filtered_data.sort_values('dates_active')\n\n# Create a bar plot\nplt.bar(sorted_data['dates_active'], sorted_data['number_deaths'])\n\n# Add labels and title\nplt.xlabel('Dates Active')\nplt.ylabel('Number of Deaths')\nplt.title('Number of Deaths by Dates Active')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "What is the count of problems reported for each product by either Lacey Bosco or Kenton Champlin, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nproblems = pd.read_sql(\"SELECT * FROM problems\", conn)\nproduct = pd.read_sql(\"SELECT * FROM product\", conn)\nstaff = pd.read_sql(\"SELECT * FROM staff\", conn)\nproblems.columns = problems.columns.str.lower()\nproduct.columns = product.columns.str.lower()\nstaff.columns = staff.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(pd.merge(problems, product, on='product_id'), staff, left_on='reported_by_staff_id', right_on='staff_id')\n\n# Filter staff names\nfiltered_df = merged_df[(merged_df['staff_first_name'].isin(['Lacey', 'Kenton'])) & (merged_df['staff_last_name'].isin(['Bosco', 'Champlin']))]\n\n# Group by product name and count\ngrouped_df = filtered_df.groupby('product_name').size().reset_index(name='count')\n\n# Plot bar chart\nplt.bar(grouped_df['product_name'], grouped_df['count'])\nplt.xlabel('Product Name')\nplt.ylabel('Count')\nplt.title('Number of Problems by Product')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "aircraft",
    "question": "What are the number of the descriptions for the aircrafts?, sort bar in ascending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the aircraft table\naircraft = pd.read_sql(\"SELECT * FROM aircraft\", conn)\n\n# Convert column names to lowercase\naircraft.columns = aircraft.columns.str.lower()\n\n# Perform the SQL query\nresult = aircraft.groupby('description').size().reset_index(name='count').sort_values('description')\n\n# Generate the bar chart\nplt.bar(result['description'], result['count'])\nplt.xlabel('Description')\nplt.ylabel('Count')\nplt.title('Number of Aircraft by Description')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sakila_1",
    "question": "Can you create a bar chart displaying the title of each film and the corresponding number of times it has been rented?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nfilm = pd.read_sql(\"SELECT * FROM film\", conn)\ninventory = pd.read_sql(\"SELECT * FROM inventory\", conn)\nrental = pd.read_sql(\"SELECT * FROM rental\", conn)\nfilm.columns = film.columns.str.lower()\ninventory.columns = inventory.columns.str.lower()\nrental.columns = rental.columns.str.lower()\n\n# Join tables\nmerged_data = pd.merge(film, inventory, on='film_id')\nmerged_data = pd.merge(merged_data, rental, on='inventory_id')\n\n# Group by title and count\ngrouped_data = merged_data.groupby('title').size().reset_index(name='count')\n\n# Plot bar chart\nplt.bar(grouped_data['title'], grouped_data['count'])\nplt.xlabel('Film Title')\nplt.ylabel('Count')\nplt.title('Number of Rentals per Film')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "Give me a bar chart that group and count names of technicians with a series of machines they are assigned to repair, sort X from high to low order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the repair_assignment table\nrepair_assignment = pd.read_sql(\"SELECT * FROM repair_assignment\", conn)\n\n# Read the machine table\nmachine = pd.read_sql(\"SELECT * FROM machine\", conn)\n\n# Read the technician table\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\n\n# Convert column names to lowercase\nrepair_assignment.columns = repair_assignment.columns.str.lower()\nmachine.columns = machine.columns.str.lower()\ntechnician.columns = technician.columns.str.lower()\n\n# merge the tables\nmerged_data = pd.merge(repair_assignment, machine, on=\"machine_id\")\nmerged_data = pd.merge(merged_data, technician, on=\"technician_id\")\n\n# perform the aggregation\naggregated_data = merged_data.groupby(\"name\").size().reset_index(name=\"count\")\naggregated_data = aggregated_data.sort_values(\"name\", ascending=False)\n\n# plot the bar chart\nplt.bar(aggregated_data[\"name\"], aggregated_data[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of Repairs by Name\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "icfp_1",
    "question": "Can you create a pie chart displaying the distribution of the number of papers written by each author who has written a paper with the word \"Monadic\" in the title, and also provide the last names of these authors?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nauthors = pd.read_sql(\"SELECT * FROM authors\", conn)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\npapers = pd.read_sql(\"SELECT * FROM papers\", conn)\nauthors.columns = authors.columns.str.lower()\nauthorship.columns = authorship.columns.str.lower()\npapers.columns = papers.columns.str.lower()\n\n# Merge tables\nmerged_df = pd.merge(authors, authorship, on='authid')\nmerged_df = pd.merge(merged_df, papers, on='paperid')\n\n# Filter rows with title containing 'Monadic'\nfiltered_df = merged_df[merged_df['title'].str.contains('Monadic')]\n\n# Group by lname and count the number of papers\ngrouped_df = filtered_df.groupby('lname').size().reset_index(name='num_papers')\n\n# Plot pie chart\nplt.pie(grouped_df['num_papers'], labels=grouped_df['lname'], autopct='%1.1f%%')\nplt.title('Number of Papers by Author')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "List the name and the number of stations for all the cities that have at least 15 stations with a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"station\" table\nstation_data = pd.read_sql(\"SELECT * FROM station\", conn)\n\n# Convert column names to lowercase\nstation_data.columns = station_data.columns.str.lower()\n\n# Perform the SQL query\ncity_counts = station_data.groupby(\"city\").size()\n\n# Plot the pie chart\nplt.pie(city_counts, labels=city_counts.index, autopct='%1.1f%%')\nplt.title(\"Distribution of Stations by City\")\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "What is the total number of each ship type? Give me a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ship table\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\n\n# Perform the SQL query\nresult = ship_df.groupby('type').size()\n\n# Create the bar plot\nplt.bar(result.index, result.values)\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Number of Ships by Type')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "Give me a pie chart that group and count names of technicians with series of machines they are assigned to repair.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the repair_assignment table\nrepair_assignment = pd.read_sql(\"SELECT * FROM repair_assignment\", conn)\n\n# Read the machine table\nmachine = pd.read_sql(\"SELECT * FROM machine\", conn)\n\n# Read the technician table\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\n\n# Convert column names to lowercase\nrepair_assignment.columns = repair_assignment.columns.str.lower()\nmachine.columns = machine.columns.str.lower()\ntechnician.columns = technician.columns.str.lower()\n\n# merge the tables\nmerged_table = pd.merge(repair_assignment, machine, on=\"machine_id\")\nmerged_table = pd.merge(merged_table, technician, on=\"technician_id\")\n\n# group by name and count occurrences\ngrouped_table = merged_table.groupby(\"name\").size().reset_index(name=\"count\")\n\n# plot the pie chart\nplt.pie(grouped_table[\"count\"], labels=grouped_table[\"name\"], autopct=\"%1.1f%%\")\nplt.axis(\"equal\")\nplt.show()\n"
  },
  {
    "db_id": "company_1",
    "question": "Find the number of employees of each gender whose salary is lower than 50000 Visualize by bar chart , rank in ascending by the X-axis please .",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nemployee = pd.read_sql(\"SELECT * FROM employee\", conn)\nemployee.columns = employee.columns.str.lower()\n\n# Filter the dataframe based on the condition\nfiltered_df = employee[employee['salary'] < 50000]\n\n# Group the filtered dataframe by 'sex' and count the number of occurrences\ngrouped_df = filtered_df.groupby('sex').size().reset_index(name='count')\n\n# Sort the grouped dataframe by 'sex' in ascending order\nsorted_df = grouped_df.sort_values('sex')\n\n# Create a bar plot\nplt.bar(sorted_df['sex'], sorted_df['count'])\nplt.xlabel('Sex')\nplt.ylabel('Count')\nplt.title('Number of Employees with Salary < 50000 by Sex')\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "Create a bar chart showing how many location across location, and show names from low to high order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"shop\" table\nshop_data = pd.read_sql(\"SELECT * FROM shop\", conn)\n\n# Convert column names to lowercase\nshop_data.columns = shop_data.columns.str.lower()\n\n# Perform the SQL query\nresult = shop_data.groupby('location').size().reset_index(name='count').sort_values('location')\n\n# Generate the bar chart\nplt.bar(result['location'], result['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Shops by Location')\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Please draw a bar to show the total number of participants in each type code, and sort Y from high to low order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Participants table\nparticipants = pd.read_sql(\"SELECT * FROM Participants\", conn)\n\n# Convert column names to lowercase\nparticipants.columns = participants.columns.str.lower()\n\n# Perform the SQL query\nresult = participants.groupby('participant_type_code').size().reset_index(name='count').sort_values('count', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['participant_type_code'], result['count'])\nplt.xlabel('Participant Type Code')\nplt.ylabel('Count')\nplt.title('Number of Participants by Participant Type Code')\nplt.show()"
  },
  {
    "db_id": "products_for_hire",
    "question": "How many bookings did each customer make? List the first name as the X-axis, and the count as the Y-axis in the bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Customers and bookings tables\ncustomers = pd.read_sql(\"SELECT * FROM Customers\", conn)\nbookings = pd.read_sql(\"SELECT * FROM bookings\", conn)\n\n# Convert column names to lowercase\ncustomers.columns = customers.columns.str.lower()\nbookings.columns = bookings.columns.str.lower()\n\n# Merge the Customers and bookings tables on customer_id\nmerged_data = pd.merge(customers, bookings, on=\"customer_id\")\n\n# Group by first_name and count the number of occurrences\ngrouped_data = merged_data.groupby(\"first_name\").size().reset_index(name=\"count\")\n\n# Create a bar plot\nplt.bar(grouped_data[\"first_name\"], grouped_data[\"count\"])\nplt.xlabel(\"First Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Bookings per Customer\")\nplt.show()"
  },
  {
    "db_id": "gymnast",
    "question": "Return a bar chart on how many gymnasts are from each hometown?, sort in ascending by the Hometown.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the gymnast and people tables\ngymnast = pd.read_sql(\"SELECT * FROM gymnast\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\n\n# Convert column names to lowercase\ngymnast.columns = map(str.lower, gymnast.columns)\npeople.columns = map(str.lower, people.columns)\n\n# Merge the tables on Gymnast_ID and People_ID\nmerged_data = pd.merge(gymnast, people, left_on=\"gymnast_id\", right_on=\"people_id\")\n\n# Group by Hometown and count the number of occurrences\ngrouped_data = merged_data.groupby(\"hometown\").size().reset_index(name=\"count\")\n\n# Sort the data by Hometown in ascending order\nsorted_data = grouped_data.sort_values(\"hometown\")\n\n# Plot the bar chart\nplt.bar(sorted_data[\"hometown\"], sorted_data[\"count\"])\nplt.xlabel(\"Hometown\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Gymnasts by Hometown\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "How many players are injured in each day? Show a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the game and injury_accident tables\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\ninjury_accident = pd.read_sql(\"SELECT * FROM injury_accident\", conn)\n\n# Convert column names to lowercase\ngame.columns = game.columns.str.lower()\ninjury_accident.columns = injury_accident.columns.str.lower()\n# Merge the game and injury_accident tables on the 'id' column\nmerged_data = pd.merge(game, injury_accident, left_on=\"id\", right_on=\"game_id\")\n\n# Group by Date and count the occurrences\ngrouped_data = merged_data.groupby(\"date\").size().reset_index(name=\"count\")\n\n# Plot the bar chart\nplt.bar(grouped_data[\"date\"], grouped_data[\"count\"])\nplt.xlabel(\"Date\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Injury Accidents per Date\")\nplt.show()\n"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "What is the count of customers with a mailshot outcome code 'No Response' for each customer phone number, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\nmailshot_customers = pd.read_sql(\"SELECT * FROM mailshot_customers\", conn)\ncustomers.columns = customers.columns.str.lower()\nmailshot_customers.columns = mailshot_customers.columns.str.lower()\n\n# Merge the customers and mailshot_customers tables\nmerged_df = pd.merge(customers, mailshot_customers, on='customer_id')\n\n# Filter the merged dataframe for outcome_code = 'No Response'\nfiltered_df = merged_df[merged_df['outcome_code'] == 'No Response']\n\n# Group by customer_phone and count the occurrences\ngrouped_df = filtered_df.groupby('customer_phone').size().reset_index(name='count')\n\n# Sort the dataframe by count in ascending order\nsorted_df = grouped_df.sort_values('count')\n\n# Plot the bar chart\nplt.bar(sorted_df['customer_phone'], sorted_df['count'])\nplt.xlabel('Customer Phone')\nplt.ylabel('Count')\nplt.title('Number of No Response by Customer Phone')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "icfp_1",
    "question": "How many papers were written by authors from the institution \"Google\" in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npapers = pd.read_sql(\"SELECT * FROM papers\", conn)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\ninst = pd.read_sql(\"SELECT * FROM inst\", conn)\npapers.columns = papers.columns.str.lower()\nauthorship.columns = authorship.columns.str.lower()\ninst.columns = inst.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(papers, authorship, on='paperid')\nmerged_df = pd.merge(merged_df, inst, on='instid')\n\n# Filter by institution name\nfiltered_df = merged_df[merged_df['name'] == 'Google']\n\n# Group by institution name and count\ngrouped_df = filtered_df.groupby('name').size().reset_index(name='count')\n\n# Plot bar chart\nplt.bar(grouped_df['name'], grouped_df['count'])\nplt.xlabel('Institution Name')\nplt.ylabel('Count')\nplt.title('Number of Papers by Institution (Google)')\nplt.show()"
  },
  {
    "db_id": "small_bank_1",
    "question": "What is the name and sum of balances corresponding to the account with the lowest sum of checking and savings balances, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\nsavings = pd.read_sql(\"SELECT * FROM savings\", conn)\naccounts.columns = accounts.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\nsavings.columns = savings.columns.str.lower()\n\n# Joining tables\nmerged_df = pd.merge(accounts, checking, on='custid')\nmerged_df = pd.merge(merged_df, savings, on='custid')\n\n# Calculating total balance\nmerged_df['total_balance'] = merged_df['balance_x'] + merged_df['balance_y']\n\n# Sorting by total balance and selecting the lowest balance\nlowest_balance = merged_df.sort_values('total_balance').head(1)\n\n# Creating bar plot\nplt.bar(lowest_balance['name'], lowest_balance['total_balance'])\nplt.xlabel('Name')\nplt.ylabel('Total Balance')\nplt.title('Customer with Lowest Total Balance')\nplt.show()"
  },
  {
    "db_id": "gymnast",
    "question": "Show me a bar chart displaying the names and heights of each gymnast, sorted in ascending order by their heights.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngymnast = pd.read_sql(\"SELECT * FROM gymnast\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\ngymnast.columns = gymnast.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Perform the join operation\nresult = pd.merge(gymnast, people, left_on='gymnast_id', right_on='people_id')\n\n# Sort the result by height in ascending order\nresult = result.sort_values('height')\n\n# Create the bar plot\nplt.bar(result['name'], result['height'])\nplt.xlabel('Name')\nplt.ylabel('Height')\nplt.title('Gymnast Height')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show all distinct product categories along with the number of mailshots in each category Visualize by bar chart , and show from high to low by the total number please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmailshot_campaigns = pd.read_sql(\"SELECT * FROM mailshot_campaigns\", conn)\nmailshot_campaigns.columns = mailshot_campaigns.columns.str.lower()\n\n# Grouping the data by product_category and counting the occurrences\ngrouped_data = mailshot_campaigns.groupby('product_category').size().reset_index(name='count')\n\n# Sorting the data by count in descending order\nsorted_data = grouped_data.sort_values(by='count', ascending=False)\n\n# Creating the bar plot\nplt.bar(sorted_data['product_category'], sorted_data['count'])\nplt.xlabel('Product Category')\nplt.ylabel('Count')\nplt.title('Number of Campaigns by Product Category')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "What are the ids and names of all start stations that were the beginning of at least 200 trips Show bar chart , sort start_station_id from high to low order .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\ntrip.columns = trip.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called 'trip'\n\n# Sort the DataFrame by start_station_id in descending order\nsorted_trip = trip.sort_values(by='start_station_id', ascending=False)\n\n# Extract the start_station_name and start_station_id columns\nstart_station_name = sorted_trip['start_station_name']\nstart_station_id = sorted_trip['start_station_id']\n\n# Create a bar plot\nplt.bar(start_station_name, start_station_id)\n\n# Set the x-axis labels to be rotated for better readability\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Show me a line chart displaying the name of each station and the minimum duration of trips that ended at each station.",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\nstation.columns = station.columns.str.lower()\ntrip.columns = trip.columns.str.lower()\n\n# Joining the station and trip tables\nmerged_df = pd.merge(station, trip, left_on='id', right_on='end_station_id')\n\n# Grouping by end_station_id and finding the minimum duration\ngrouped_df = merged_df.groupby('end_station_id').agg({'name': 'first', 'duration': 'min'}).reset_index()\n\n# Plotting the line chart\nplt.plot(grouped_df['name'], grouped_df['duration'])\nplt.xlabel('End Station')\nplt.ylabel('Minimum Duration')\nplt.title('Minimum Duration by End Station')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "For each citizenship , what is the maximum net worth Visualize by bar chart , and rank by the X in descending .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Group by citizenship and calculate the maximum net worth\nmax_net_worth = singer.groupby('citizenship')['net_worth_millions'].max()\n\n# Sort the data by citizenship in descending order\nmax_net_worth = max_net_worth.sort_index(ascending=False)\n\n# Create a bar plot\nplt.bar(max_net_worth.index, max_net_worth.values)\n\n# Set the labels and title\nplt.xlabel('Citizenship')\nplt.ylabel('Max Net Worth (Millions)')\nplt.title('Max Net Worth by Citizenship')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Find those years for all exhibitions with ticket prices lower than 15 , group by year , and count year , and order by the Y from low to high .",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nexhibition.columns = exhibition.columns.str.lower()\n\n# Filter the dataframe based on the condition ticket_price < 15\nfiltered_exhibition = exhibition[exhibition['ticket_price'] < 15]\n\n# Group the data by year and count the occurrences\ngrouped_data = filtered_exhibition.groupby('year').size().reset_index(name='count')\n\n# Sort the data by count in ascending order\nsorted_data = grouped_data.sort_values('count')\n\n# Create a bar plot\nplt.bar(sorted_data['year'], sorted_data['count'])\nplt.xlabel('Year')\nplt.ylabel('Count')\nplt.title('Exhibition Count by Year (Ticket Price < 15)')\nplt.show()"
  },
  {
    "db_id": "gymnast",
    "question": "Which hometown has the most gymnasts, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngymnast = pd.read_sql(\"SELECT * FROM gymnast\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\ngymnast.columns = gymnast.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(gymnast, people, left_on='gymnast_id', right_on='people_id')\n\n# Group by hometown and count the number of occurrences\ngrouped_df = merged_df.groupby('hometown').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['hometown'], sorted_df['count'])\nplt.xlabel('Hometown')\nplt.ylabel('Count')\nplt.title('Number of Gymnasts by Hometown')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "Find the number of users in each role. Visualize by pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"users\" table\nusers_df = pd.read_sql(\"SELECT * FROM users\", conn)\n\n# Convert column names to lowercase\nusers_df.columns = users_df.columns.str.lower()\n\n# Perform the SQL query and group by role_code\ngrouped_df = users_df.groupby('role_code').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['role_code'], autopct='%1.1f%%')\nplt.title('Distribution of Users by Role Code')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "What are the ids and names of all start stations that were the beginning of at least 200 trips Show bar chart , sort in asc by the Y .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\ntrip.columns = trip.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called 'trip'\n\n# Perform the SQL query\nresult = trip[['start_station_name', 'start_station_id']].sort_values('start_station_id')\n\n# Create the bar plot\nplt.bar(result['start_station_name'], result['start_station_id'])\nplt.xlabel('Start Station Name')\nplt.ylabel('Start Station ID')\nplt.title('Start Station ID by Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "customer_deliveries",
    "question": "List the state names and the number of customers living in each state, and order by the bars from low to high please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read data from customer_addresses table\ncustomer_addresses = pd.read_sql(\"SELECT * FROM customer_addresses\", conn)\n\n# Read data from addresses table\naddresses = pd.read_sql(\"SELECT * FROM addresses\", conn)\n\n# Convert column names to lowercase\ncustomer_addresses.columns = customer_addresses.columns.str.lower()\naddresses.columns = addresses.columns.str.lower()\n\n# merge the two tables on address_id\nmerged_data = pd.merge(customer_addresses, addresses, on=\"address_id\")\n\n# group by state_province_county and count the number of occurrences\ngrouped_data = merged_data.groupby(\"state_province_county\").size().reset_index(name=\"count\")\n\n# sort the data by state_province_county in ascending order\nsorted_data = grouped_data.sort_values(\"state_province_county\")\n\n# plot the bar chart\nplt.bar(sorted_data[\"state_province_county\"], sorted_data[\"count\"])\nplt.xlabel(\"State/Province/County\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Customers by State/Province/County\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "What is the code of each role and the number of employees in each role Show bar chart , order X-axis from low to high order please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nEmployees.columns = Employees.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\nrole_counts = Employees.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by role_code in ascending order\nrole_counts = role_counts.sort_values('role_code')\n\n# Creating a bar plot\nplt.bar(role_counts['role_code'], role_counts['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Employees by Role Code')\nplt.show()"
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Count the section_description, and group by section_description with a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Sections table\nsections = pd.read_sql(\"SELECT * FROM Sections\", conn)\n\n# Convert column names to lowercase\nsections.columns = sections.columns.str.lower()\n\n# Perform the SQL query\nresult = sections.groupby('section_description').size().reset_index(name='count')\n\n# Generate the bar chart\nplt.bar(result['section_description'], result['count'])\nplt.xlabel('Section Description')\nplt.ylabel('Count')\nplt.title('Number of Sections by Description')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "college_3",
    "question": "Show me a bar chart of the count of occurrences for each first name of the students that minor in the department with DNO 140, ordered by the count of occurrences in descending order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nMINOR_IN = pd.read_sql(\"SELECT * FROM MINOR_IN\", conn)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nMINOR_IN.columns = MINOR_IN.columns.str.lower()\nSTUDENT.columns = STUDENT.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(MINOR_IN, STUDENT, left_on='stuid', right_on='stuid')\n\n# Filtering the data\nfiltered_df = merged_df[merged_df['dno'] == 140]\n\n# Grouping and counting by fname\ngrouped_df = filtered_df.groupby('fname').size().reset_index(name='count')\n\n# Sorting by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plotting the bar chart\nplt.bar(sorted_df['fname'], sorted_df['count'])\nplt.xlabel('First Name')\nplt.ylabel('Count')\nplt.title('Number of Students with Minor in DNO 140')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "small_bank_1",
    "question": "Can you create a pie chart displaying the names and checking balances of accounts with a checking balance that is less than the largest checking balance?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\naccounts.columns = accounts.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\n\n# Joining accounts and checking tables\nmerged_df = pd.merge(accounts, checking, on='custid')\n\n# Filtering rows where balance is less than the maximum balance in checking table\nfiltered_df = merged_df[merged_df['balance'] < checking['balance'].max()]\n\n# Grouping by name and counting the occurrences\ngrouped_df = filtered_df.groupby('name').size().reset_index(name='count')\n\n# Creating a pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['name'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Compare the total number of each fate with a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the mission table\nmission_df = pd.read_sql(\"SELECT * FROM mission\", conn)\n\n# Convert column names to lowercase\nmission_df.columns = mission_df.columns.str.lower()\n\n# Perform the SQL query\nresult = mission_df.groupby('fate').size()\n\n# Create the bar plot\nplt.bar(result.index, result.values)\nplt.xlabel('Fate')\nplt.ylabel('Count')\nplt.title('Mission Fate Distribution')\nplt.show()"
  },
  {
    "db_id": "battle_death",
    "question": "Bar chart of the number of date from each date, and display date in descending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the battle table\nbattle_df = pd.read_sql(\"SELECT * FROM battle\", conn)\n\n# Convert column names to lowercase\nbattle_df.columns = battle_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = battle_df.groupby(\"date\").size().reset_index(name=\"count\").sort_values(\"date\", ascending=False)\n\n# Generate the bar plot\nplt.bar(result_df[\"date\"], result_df[\"count\"])\nplt.xlabel(\"Date\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Battles by Date\")\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Show maximal lat from each city, I want to show x-axis from high to low order.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"station\" table\nstation_data = pd.read_sql(\"SELECT * FROM station\", conn)\n\n# Convert column names to lowercase\nstation_data.columns = station_data.columns.str.lower()\n\n# Perform the SQL query\nresult = station_data.groupby(\"city\")[\"lat\"].max().reset_index().sort_values(\"city\", ascending=False)\n\n# Visualize the result using a bar chart\nplt.bar(result[\"city\"], result[\"lat\"])\nplt.xlabel(\"City\")\nplt.ylabel(\"Max Latitude\")\nplt.title(\"Max Latitude by City\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "products_for_hire",
    "question": "How many bookings did each customer make? List the customer id and the count in the scatter chart.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Customers table\ncustomers = pd.read_sql(\"SELECT * FROM Customers\", conn)\n\n# Read the bookings table\nbookings = pd.read_sql(\"SELECT * FROM bookings\", conn)\n\n# Convert column names to lowercase\ncustomers.columns = customers.columns.str.lower()\nbookings.columns = bookings.columns.str.lower()\n\n# merge the customers and bookings tables on customer_id\nmerged_data = pd.merge(customers, bookings, on=\"customer_id\")\n\n# group by customer_id and count the number of bookings\ngrouped_data = merged_data.groupby(\"customer_id\").size().reset_index(name=\"count\")\n\n# scatter plot\nplt.scatter(grouped_data[\"customer_id\"], grouped_data[\"count\"])\nplt.xlabel(\"Customer ID\")\nplt.ylabel(\"Number of Bookings\")\nplt.title(\"Number of Bookings per Customer\")\nplt.show()\n"
  },
  {
    "db_id": "machine_repair",
    "question": "Show names of technicians and the number of machines they are assigned to repair Visualize by bar chart, order by the bar in ascending.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the repair_assignment table\nrepair_assignment = pd.read_sql(\"SELECT * FROM repair_assignment\", conn)\n\n# Read the technician table\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\n\n# Convert column names to lowercase\nrepair_assignment.columns = repair_assignment.columns.str.lower()\ntechnician.columns = technician.columns.str.lower()\n\n# merge the two tables on technician_id\nmerged_data = pd.merge(repair_assignment, technician, on='technician_id')\n\n# group by technician name and count the number of assignments\ngrouped_data = merged_data.groupby('name').size().reset_index(name='count')\n\n# sort the data by technician name in ascending order\nsorted_data = grouped_data.sort_values('name')\n\n# plot the bar chart\nplt.bar(sorted_data['name'], sorted_data['count'])\nplt.xlabel('Technician Name')\nplt.ylabel('Number of Assignments')\nplt.title('Number of Assignments per Technician')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "icfp_1",
    "question": "Show me a pie chart displaying the distribution of the last names of authors and the number of papers they have published.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nauthors = pd.read_sql(\"SELECT * FROM authors\", conn)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\npapers = pd.read_sql(\"SELECT * FROM papers\", conn)\nauthors.columns = authors.columns.str.lower()\nauthorship.columns = authorship.columns.str.lower()\npapers.columns = papers.columns.str.lower()\n\n# Perform the join operation\nmerged_data = pd.merge(authors, authorship, on='authid')\nmerged_data = pd.merge(merged_data, papers, on='paperid')\n\n# Group by lname and count the number of occurrences\ngrouped_data = merged_data.groupby('lname').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_data['count'], labels=grouped_data['lname'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Show all payment method codes and the number of orders for each code by a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the INVOICES table\ninvoices = pd.read_sql(\"SELECT * FROM INVOICES\", conn)\n\n# Convert column names to lowercase\ninvoices.columns = invoices.columns.str.lower()\n\n# Perform the SQL query\npayment_counts = invoices.groupby('payment_method_code').size()\n\n# Plot the pie chart\nplt.pie(payment_counts, labels=payment_counts.index, autopct='%1.1f%%')\nplt.title('Payment Method Distribution')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Show me a bar chart for how many drama workshop groups are there in each city? Return both the city and the count, order by the x axis in asc.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Addresses table\naddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\naddresses.columns = map(str.lower, addresses.columns)\n\n# Read the Drama_Workshop_Groups table\ndrama_workshop_groups = pd.read_sql(\"SELECT * FROM Drama_Workshop_Groups\", conn)\ndrama_workshop_groups.columns = map(str.lower, drama_workshop_groups.columns)\n\n# Merge the two tables on Address_ID\nmerged_data = pd.merge(addresses, drama_workshop_groups, on='address_id')\n\n# Perform the group by and count\ngrouped_data = merged_data.groupby('city_town').size().reset_index(name='count')\n\n# Sort the data by City_Town in ascending order\nsorted_data = grouped_data.sort_values('city_town')\n\n# Plot the bar chart\nplt.bar(sorted_data['city_town'], sorted_data['count'])\nplt.xlabel('City/Town')\nplt.ylabel('Count')\nplt.title('Number of Drama Workshop Groups in Each City/Town')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Can you create a pie chart to display the distribution of service types based on their count?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRef_Service_Types = pd.read_sql(\"SELECT * FROM Ref_Service_Types\", conn)\nServices = pd.read_sql(\"SELECT * FROM Services\", conn)\nRef_Service_Types.columns = Ref_Service_Types.columns.str.lower()\nServices.columns = Services.columns.str.lower()\n\n# Perform the join operation\ndf = pd.merge(Ref_Service_Types, Services, on='service_type_code')\n\n# Group by service_type_code and count the number of occurrences\ndf_grouped = df.groupby('service_type_code').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(df_grouped['count'], labels=df_grouped['service_type_code'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "For each type , what is the average tonnage , show from low to high by the Type .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Group by type and calculate average tonnage\nship_avg_tonnage = ship.groupby('type')['tonnage'].mean()\n\n# Sort the data by type in ascending order\nship_avg_tonnage = ship_avg_tonnage.sort_index()\n\n# Create a bar plot\nplt.bar(ship_avg_tonnage.index, ship_avg_tonnage.values)\n\n# Set the labels and title\nplt.xlabel('Type')\nplt.ylabel('Average Tonnage')\nplt.title('Average Tonnage by Ship Type')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "What are the names of device shops, and what are the carriers that they carry devices in stock for?, could you sort in ascending by the x-axis?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the stock table\nstock = pd.read_sql(\"SELECT * FROM stock\", conn)\nstock.columns = stock.columns.str.lower()\n\n# Read the device table\ndevice = pd.read_sql(\"SELECT * FROM device\", conn)\ndevice.columns = device.columns.str.lower()\n\n# Read the shop table\nshop = pd.read_sql(\"SELECT * FROM shop\", conn)\nshop.columns = shop.columns.str.lower()\n\n# Merge the tables\nmerged = pd.merge(stock, device, on=\"device_id\")\nmerged = pd.merge(merged, shop, on=\"shop_id\")\n\n# Perform the query\nresult = merged.groupby(\"carrier\").size().reset_index(name=\"count\")\nresult = result.sort_values(\"carrier\")\n\n# Plot the bar chart\nplt.bar(result[\"carrier\"], result[\"count\"])\nplt.xlabel(\"Carrier\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Devices by Carrier\")\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "What is the number of entry descriptions of each problem ? , and order by the x axis in ascending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nproblem_log = pd.read_sql(\"SELECT * FROM problem_log\", conn)\nproblem_log.columns = problem_log.columns.str.lower()\n\n# Grouping the data by log_entry_description and counting the occurrences\ngrouped_data = problem_log.groupby('log_entry_description').size().reset_index(name='count')\n\n# Sorting the data by log_entry_description in ascending order\nsorted_data = grouped_data.sort_values('log_entry_description')\n\n# Creating the bar plot\nplt.bar(sorted_data['log_entry_description'], sorted_data['count'])\nplt.xlabel('Log Entry Description')\nplt.ylabel('Count')\nplt.title('Occurrences of Log Entry Descriptions')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "Who is the customer with the highest number of lessons taken, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nLessons = pd.read_sql(\"SELECT * FROM Lessons\", conn)\nCustomers = pd.read_sql(\"SELECT * FROM Customers\", conn)\nLessons.columns = Lessons.columns.str.lower()\nCustomers.columns = Customers.columns.str.lower()\n\n# Perform the join operation\ndf = pd.merge(Lessons, Customers, on='customer_id')\n\n# Filter the data for customers with first name 'Ray'\ndf_ray = df[df['first_name'] == 'Ray']\n\n# Group the data by first name and count the number of rows\ndf_grouped = df_ray.groupby('first_name').size().reset_index(name='count')\n\n# Create the bar plot\nplt.bar(df_grouped['first_name'], df_grouped['count'])\nplt.xlabel('First Name')\nplt.ylabel('Count')\nplt.title('Number of Lessons for Customers with First Name \"Ray\"')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Find dates and attendance for exhibitions that happened in 2004, show me the comparison of attendance by date, I want to sort by the names in ascending.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the exhibition_record table\nexhibition_record = pd.read_sql(\"SELECT * FROM exhibition_record\", conn)\nexhibition_record.columns = map(str.lower, exhibition_record.columns)\n\n# Read the exhibition table\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nexhibition.columns = map(str.lower, exhibition.columns)\n\n# Merge the two tables based on exhibition_id\nmerged_data = pd.merge(exhibition_record, exhibition, on=\"exhibition_id\")\n\n# Filter the data for year 2004\nfiltered_data = merged_data[merged_data[\"year\"] == 2004]\n\n# Sort the data by date\nsorted_data = filtered_data.sort_values(\"date\")\n\n# Plot the bar chart\nplt.bar(sorted_data[\"date\"], sorted_data[\"attendance\"])\nplt.xlabel(\"Date\")\nplt.ylabel(\"Attendance\")\nplt.title(\"Exhibition Attendance in 2004\")\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "What is the total cost for each procedure displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nphysician = pd.read_sql(\"SELECT * FROM physician\", conn)\ntrained_in = pd.read_sql(\"SELECT * FROM trained_in\", conn)\nprocedures = pd.read_sql(\"SELECT * FROM procedures\", conn)\nphysician.columns = physician.columns.str.lower()\ntrained_in.columns = trained_in.columns.str.lower()\nprocedures.columns = procedures.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(pd.merge(physician, trained_in, left_on='employeeid', right_on='physician'), procedures, left_on='treatment', right_on='code')\n\n# Group by code and calculate the sum of cost\ngrouped_df = merged_df.groupby('code')['cost'].sum().reset_index()\n\n# Plot the bar chart\nplt.bar(grouped_df['code'], grouped_df['cost'])\nplt.xlabel('Procedure Code')\nplt.ylabel('Total Cost')\nplt.title('Total Cost of Procedures')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "In a bar chart, please display the marketing regions along with the corresponding count of stores in each marketing region.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nMarketing_Regions = pd.read_sql(\"SELECT * FROM Marketing_Regions\", conn)\nStores = pd.read_sql(\"SELECT * FROM Stores\", conn)\nMarketing_Regions.columns = Marketing_Regions.columns.str.lower()\nStores.columns = Stores.columns.str.lower()\n\n# Perform the join operation\nmerged_data = pd.merge(Marketing_Regions, Stores, on='marketing_region_code')\n\n# Group by marketing_region_name and count the number of stores\nstore_count = merged_data.groupby('marketing_region_name').size().reset_index(name='store_count')\n\n# Plot the bar chart\nplt.bar(store_count['marketing_region_name'], store_count['store_count'])\nplt.xlabel('Marketing Region')\nplt.ylabel('Store Count')\nplt.title('Number of Stores in Each Marketing Region')\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "Visualize a scatter chart on what are each physician's employee id and department id primarily affiliated .",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\naffiliated_with = pd.read_sql(\"SELECT * FROM affiliated_with\", conn)\naffiliated_with.columns = affiliated_with.columns.str.lower()\n\n# Filter the dataframe to include only rows where primaryaffiliation is 1\nfiltered_df = affiliated_with[affiliated_with['primaryaffiliation'] == 1]\n\n# Create a scatter plot of physician vs department\nplt.scatter(filtered_df['physician'], filtered_df['department'])\nplt.xlabel('Physician')\nplt.ylabel('Department')\nplt.title('Scatter plot of Physician vs Department')\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "what are the different role codes for users, and how many users have each?, show from low to high by the X-axis please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"users\" table\nusers = pd.read_sql(\"SELECT * FROM users\", conn)\n\n# Convert column names to lowercase\nusers.columns = users.columns.str.lower()\n\n# Perform the SQL query\nresult = users.groupby('role_code').size().reset_index(name='count').sort_values('role_code')\n\n# Generate the bar chart\nplt.bar(result['role_code'], result['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Users by Role Code')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Show all role codes and the number of employees in each role by a bar chart, show in ascending by the Y-axis please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Employees table\nemployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\n\n# Convert column names to lowercase\nemployees.columns = employees.columns.str.lower()\n\n# Perform the SQL query\nresult = employees.groupby('role_code').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result['role_code'], result['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Employees by Role Code')\nplt.show()"
  },
  {
    "db_id": "gymnast",
    "question": "Show me a line chart of the total points for each age group of gymnasts, with the age groups ordered in descending order of the sum of total points.",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngymnast = pd.read_sql(\"SELECT * FROM gymnast\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\ngymnast.columns = gymnast.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(gymnast, people, left_on='gymnast_id', right_on='people_id')\n\n# Group by age and calculate the sum of total_points\ngrouped_df = merged_df.groupby('age')['total_points'].sum().reset_index()\n\n# Sort the dataframe by the sum of total_points in descending order\nsorted_df = grouped_df.sort_values('total_points', ascending=False)\n\n# Plot the line chart\nplt.plot(sorted_df['age'], sorted_df['total_points'])\nplt.xlabel('Age')\nplt.ylabel('Total Points')\nplt.title('Total Points by Age')\nplt.show()"
  },
  {
    "db_id": "small_bank_1",
    "question": "How many accounts have a checking balance below the average checking balance, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\naccounts.columns = accounts.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\n\n# Joining tables\nmerged_df = pd.merge(accounts, checking, on='custid')\n\n# Calculating average balance\navg_balance = checking['balance'].mean()\n\n# Filtering data\nfiltered_df = merged_df[merged_df['balance'] < avg_balance]\n\n# Grouping and counting by name\ngrouped_df = filtered_df.groupby('name').size().reset_index(name='count')\n\n# Plotting bar chart\nplt.bar(grouped_df['name'], grouped_df['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Number of Accounts by Name')\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "What is the name of the storm that affected both Afghanistan and Albania regions, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naffected_region = pd.read_sql(\"SELECT * FROM affected_region\", conn)\nregion = pd.read_sql(\"SELECT * FROM region\", conn)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\naffected_region.columns = affected_region.columns.str.lower()\nregion.columns = region.columns.str.lower()\nstorm.columns = storm.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(pd.merge(affected_region, region, on='region_id'), storm, on='storm_id')\n\n# Filter by region names\nfiltered_df = merged_df[merged_df['region_name'].isin(['Afghanistan', 'Albania'])]\n\n# Group by storm name and count occurrences\ngrouped_df = filtered_df.groupby('name').size().reset_index(name='count')\n\n# Sort by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot bar chart\nplt.bar(sorted_df['name'], sorted_df['count'])\nplt.xlabel('Storm Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences of Storms in Afghanistan and Albania')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Show all role codes and the number of employees in each role Show bar chart , and show from low to high by the y axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nEmployees.columns = Employees.columns.str.lower()\n\n# Grouping the data by role_code and counting the occurrences\nrole_counts = Employees.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nrole_counts = role_counts.sort_values('count')\n\n# Creating the bar plot\nplt.bar(role_counts['role_code'], role_counts['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Employees by Role Code')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show each premise type and the number of premises in that type with a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"premises\" table\npremises_data = pd.read_sql(\"SELECT * FROM premises\", conn)\n\n# Convert column names to lowercase\npremises_data.columns = premises_data.columns.str.lower()\n\n# Perform the SQL query\npremises_count = premises_data.groupby('premises_type').size().reset_index(name='count')\n\n# Generate the bar chart\nplt.bar(premises_count['premises_type'], premises_count['count'])\nplt.xlabel('Premises Type')\nplt.ylabel('Count')\nplt.title('Number of Premises by Type')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Bar chart x axis role code y axis the total number , I want to display in descending by the Role_Code .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nEmployees.columns = Employees.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\nrole_counts = Employees.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by role_code in descending order\nrole_counts = role_counts.sort_values('role_code', ascending=False)\n\n# Creating a bar plot\nplt.bar(role_counts['role_code'], role_counts['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Employees by Role Code')\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "When were the lesson dates and times taught by staff with the first name Janessa and last name Sawayn visualized in a scatter plot?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nLessons = pd.read_sql(\"SELECT * FROM Lessons\", conn)\nStaff = pd.read_sql(\"SELECT * FROM Staff\", conn)\nLessons.columns = Lessons.columns.str.lower()\nStaff.columns = Staff.columns.str.lower()\n\n# Merge Lessons and Staff dataframes\nmerged_df = pd.merge(Lessons, Staff, on='staff_id')\n\n# Filter the merged dataframe for staff with first name 'Janessa' and last name 'Sawayn'\nfiltered_df = merged_df[(merged_df['first_name'] == 'Janessa') & (merged_df['last_name'] == 'Sawayn')]\n\n# Create scatter plot\nplt.scatter(filtered_df['lesson_date'], filtered_df['lesson_time'])\nplt.xlabel('Date')\nplt.ylabel('Lesson Time')\nplt.title('Lesson Time vs Date for Janessa Sawayn')\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "For each citizenship , how many singers are from that country , and display in asc by the Y .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Group by citizenship and count the number of singers\nsinger_count = singer.groupby('citizenship').size().reset_index(name='count')\n\n# Sort the dataframe by count in ascending order\nsinger_count = singer_count.sort_values('count')\n\n# Create a bar plot\nplt.bar(singer_count['citizenship'], singer_count['count'])\nplt.xlabel('Citizenship')\nplt.ylabel('Count')\nplt.title('Number of Singers by Citizenship')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "On which date was the order with invoice number 10 placed, and how many orders were placed on that date? Visualize the data using a bar chart.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\nshipments = pd.read_sql(\"SELECT * FROM shipments\", conn)\norders.columns = orders.columns.str.lower()\nshipments.columns = shipments.columns.str.lower()\n\n# Merge orders and shipments dataframes\nmerged_df = pd.merge(orders, shipments, on='order_id')\n\n# Filter data for invoice_number = 10\nfiltered_df = merged_df[merged_df['invoice_number'] == 10]\n\n# Group by date_order_placed and count the number of orders\ngrouped_df = filtered_df.groupby('date_order_placed').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['date_order_placed'], sorted_df['count'])\nplt.xlabel('Date Order Placed')\nplt.ylabel('Count')\nplt.title('Number of Orders by Date Order Placed')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Compare the number of songs each singer has, and rank from high to low by the x-axis.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the singer and song tables\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsong = pd.read_sql(\"SELECT * FROM song\", conn)\n\n# Convert column names to lowercase\nsinger.columns = singer.columns.str.lower()\nsong.columns = song.columns.str.lower()\n\n# Merge the singer and song tables on Singer_ID\nmerged_data = pd.merge(singer, song, on=\"singer_id\")\n\n# Perform the group by and count operation\ngrouped_data = merged_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# Sort the data by name in descending order\nsorted_data = grouped_data.sort_values(\"name\", ascending=False)\n\n# Create the bar plot\nplt.bar(sorted_data[\"name\"], sorted_data[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Songs by Singer\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "A bar chart for what are the number of the names of the technicians that are assigned to repair machines with more point values than 70?, I want to order by the bar from high to low.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the repair_assignment table\nrepair_assignment = pd.read_sql(\"SELECT * FROM repair_assignment\", conn)\nrepair_assignment.columns = map(str.lower, repair_assignment.columns)\n\n# Read the machine table\nmachine = pd.read_sql(\"SELECT * FROM machine\", conn)\nmachine.columns = map(str.lower, machine.columns)\n\n# Read the technician table\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\ntechnician.columns = map(str.lower, technician.columns)\n\n# Perform the join operation\nmerged_data = pd.merge(repair_assignment, machine, on=\"machine_id\")\nmerged_data = pd.merge(merged_data, technician, on=\"technician_id\")\n\n# Filter the data based on the condition\nfiltered_data = merged_data[merged_data[\"value_points\"] > 70]\n\n# Group the data by Name and count the occurrences\ngrouped_data = filtered_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# Sort the data by Name in descending order\nsorted_data = grouped_data.sort_values(\"name\", ascending=False)\n\n# Generate the bar plot\nplt.bar(sorted_data[\"name\"], sorted_data[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Repairs by Name\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Display a bar chart for what are the names and id of courses having at most 2 sections?, order by the x axis in desc please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Courses table\ncourses = pd.read_sql(\"SELECT * FROM Courses\", conn)\ncourses.columns = courses.columns.str.lower()\n\n# Read the Sections table\nsections = pd.read_sql(\"SELECT * FROM Sections\", conn)\nsections.columns = sections.columns.str.lower()\n\n# Merge the Courses and Sections tables on course_id\nmerged_data = pd.merge(courses, sections, on=\"course_id\")\n\n# Sort the merged data by course_name in descending order\nsorted_data = merged_data.sort_values(by=\"course_name\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"course_name\"], sorted_data[\"course_id\"])\nplt.xlabel(\"Course Name\")\nplt.ylabel(\"Course ID\")\nplt.title(\"Courses and their IDs\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "icfp_1",
    "question": "Show me a bar chart displaying the number of authors for each institution, and highlight the institution with the highest number of authors.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nauthors = pd.read_sql(\"SELECT * FROM authors\", conn)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\ninst = pd.read_sql(\"SELECT * FROM inst\", conn)\nauthors.columns = authors.columns.str.lower()\nauthorship.columns = authorship.columns.str.lower()\ninst.columns = inst.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(authors, authorship, on='authid')\nmerged_df = pd.merge(merged_df, inst, on='instid')\n\n# Group by institution name and count number of authors\ngrouped_df = merged_df.groupby('name').size().reset_index(name='num_authors')\n\n# Sort by number of authors in descending order and select the top 1\nsorted_df = grouped_df.sort_values('num_authors', ascending=False).head(1)\n\n# Plot the bar chart\nplt.bar(sorted_df['name'], sorted_df['num_authors'])\nplt.xlabel('Institution')\nplt.ylabel('Number of Authors')\nplt.title('Number of Authors by Institution')\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "A pie chart about what are the different software platforms for devices, and how many devices have each?",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the device table\ndevice_df = pd.read_sql(\"SELECT * FROM device\", conn)\n\n# Convert column names to lowercase\ndevice_df.columns = device_df.columns.str.lower()\n\n# Perform the SQL query\nresult = device_df.groupby('software_platform').size()\n\n# Plot the pie chart\nplt.pie(result, labels=result.index, autopct='%1.1f%%')\nplt.title('Software Platform Distribution')\nplt.show()"
  },
  {
    "db_id": "e_government",
    "question": "Create a pie chart displaying the frequency of last names among contact individuals for the organization.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nindividuals = pd.read_sql(\"SELECT * FROM individuals\", conn)\norganization_contact_individuals = pd.read_sql(\"SELECT * FROM organization_contact_individuals\", conn)\nindividuals.columns = individuals.columns.str.lower()\norganization_contact_individuals.columns = organization_contact_individuals.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(individuals, organization_contact_individuals, on='individual_id')\n\n# Group by individual_last_name and count the occurrences\ngrouped_df = merged_df.groupby('individual_last_name').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['individual_last_name'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship by a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"singer\" table\nsinger_data = pd.read_sql(\"SELECT * FROM singer\", conn)\n\n# Convert column names to lowercase\nsinger_data.columns = singer_data.columns.str.lower()\n\n# Group the data by \"citizenship\" and find the maximum \"net_worth_millions\" for each group\ngrouped_data = singer_data.groupby('citizenship')['net_worth_millions'].max()\n\n# Plot the pie chart\nplt.pie(grouped_data, labels=grouped_data.index, autopct='%1.1f%%')\nplt.title('Maximum Net Worth by Citizenship')\nplt.show()\n\n# Close the database connection\nconn.close()"
  },
  {
    "db_id": "machine_repair",
    "question": "For each team , how many technicians are there .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\ntechnician.columns = technician.columns.str.lower()\n\n# Grouping the data by 'team' and counting the number of occurrences\nteam_counts = technician.groupby('team').size()\n\n# Creating a bar plot\nplt.bar(team_counts.index, team_counts.values)\n\n# Adding labels and title\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Technician Count by Team')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "sakila_1",
    "question": "Can you create a pie chart displaying the distribution of films in the inventory and the quantity of copies for each film?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nfilm = pd.read_sql(\"SELECT * FROM film\", conn)\ninventory = pd.read_sql(\"SELECT * FROM inventory\", conn)\nfilm.columns = film.columns.str.lower()\ninventory.columns = inventory.columns.str.lower()\n\n# Perform the join operation\ndf = pd.merge(film, inventory, on='film_id')\n\n# Group by film title and count the number of occurrences\ndf_grouped = df.groupby('title').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(df_grouped['count'], labels=df_grouped['title'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show all distinct product categories along with the number of mailshots in each category in a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmailshot_campaigns = pd.read_sql(\"SELECT * FROM mailshot_campaigns\", conn)\nmailshot_campaigns.columns = mailshot_campaigns.columns.str.lower()\n\n# Grouping the data by product_category and counting the occurrences\ngrouped_data = mailshot_campaigns.groupby('product_category').size().reset_index(name='count')\n\n# Creating a bar plot\nplt.bar(grouped_data['product_category'], grouped_data['count'])\nplt.xlabel('Product Category')\nplt.ylabel('Count')\nplt.title('Number of Campaigns per Product Category')\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship , and sort Y in asc order .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Group by citizenship and calculate the maximum net worth\nmax_net_worth = singer.groupby('citizenship')['net_worth_millions'].max()\n\n# Sort the values in ascending order\nmax_net_worth_sorted = max_net_worth.sort_values()\n\n# Create a bar plot\nplt.bar(max_net_worth_sorted.index, max_net_worth_sorted.values)\n\n# Set the x-axis label\nplt.xlabel('Citizenship')\n\n# Set the y-axis label\nplt.ylabel('Max Net Worth (Millions)')\n\n# Set the title of the plot\nplt.title('Max Net Worth by Citizenship')\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "Bar graph to show the total number from different nationality , I want to show by the X-axis from low to high .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot.columns = pilot.columns.str.lower()\n\n# Grouping the data by nationality and counting the occurrences\nnationality_counts = pilot.groupby('nationality').size().reset_index(name='count')\n\n# Sorting the data by nationality in ascending order\nnationality_counts = nationality_counts.sort_values('nationality')\n\n# Creating the bar plot\nplt.bar(nationality_counts['nationality'], nationality_counts['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Pilots by Nationality')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death, show me the dates active and the total number of deaths with a bar chart, and order in ascending by the Y.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the storm table into a DataFrame\nstorm_df = pd.read_sql(\"SELECT * FROM storm\", conn)\n\n# Convert column names to lowercase\nstorm_df.columns = storm_df.columns.str.lower()\n\n# Filter the DataFrame for rows where number_deaths >= 1\nfiltered_df = storm_df[storm_df['number_deaths'] >= 1]\n\n# Sort the filtered DataFrame by number_deaths in ascending order\nsorted_df = filtered_df.sort_values('number_deaths')\n\n# Create a bar plot\nplt.bar(sorted_df['dates_active'], sorted_df['number_deaths'])\nplt.xlabel('Dates Active')\nplt.ylabel('Number of Deaths')\nplt.title('Number of Deaths by Dates Active')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "A bar chart shows the venue for each workshop , and could you display Y from low to high order please ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nworkshop = pd.read_sql(\"SELECT * FROM workshop\", conn)\nworkshop.columns = workshop.columns.str.lower()\n\n# Grouping the data by venue and counting the occurrences\nvenue_counts = workshop.groupby('venue').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nvenue_counts = venue_counts.sort_values('count')\n\n# Creating the bar plot\nplt.bar(venue_counts['venue'], venue_counts['count'])\nplt.xlabel('Venue')\nplt.ylabel('Count')\nplt.title('Workshop Venues')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show each premise type and the number of premises in that type with a bar chart , and could you order X in ascending order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npremises = pd.read_sql(\"SELECT * FROM premises\", conn)\npremises.columns = premises.columns.str.lower()\n\n# Group by premises_type and count the number of occurrences\npremises_count = premises.groupby('premises_type').size().reset_index(name='count')\n\n# Sort by premises_type in ascending order\npremises_count = premises_count.sort_values('premises_type')\n\n# Create a bar plot\nplt.bar(premises_count['premises_type'], premises_count['count'])\nplt.xlabel('Premises Type')\nplt.ylabel('Count')\nplt.title('Number of Premises by Type')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Show all artist names and the number of exhibitions for each artist in a bar chart, and show from low to high by the Y.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the exhibition and artist tables\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\n\n# Convert column names to lowercase\nexhibition.columns = exhibition.columns.str.lower()\nartist.columns = artist.columns.str.lower()\n\n# Merge the exhibition and artist tables on artist_id\nmerged_data = pd.merge(exhibition, artist, on=\"artist_id\")\n\n# Perform the SQL query and group by artist_id, count the number of exhibitions for each artist\nquery_result = merged_data.groupby(\"artist_id\").size().reset_index(name=\"exhibition_count\")\n\n# Sort the result by exhibition count in ascending order\nsorted_result = query_result.sort_values(\"exhibition_count\", ascending=True)\n\n# Plot the bar chart\nplt.bar(sorted_result[\"artist_id\"], sorted_result[\"exhibition_count\"])\nplt.xlabel(\"Artist ID\")\nplt.ylabel(\"Exhibition Count\")\nplt.title(\"Number of Exhibitions by Artist\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "document_management",
    "question": "Find the number of users in each role Plot them as bar chart , and sort by the names in ascending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nusers = pd.read_sql(\"SELECT * FROM users\", conn)\nusers.columns = users.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\nrole_counts = users.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by role_code in ascending order\nrole_counts = role_counts.sort_values('role_code')\n\n# Creating the bar plot\nplt.bar(role_counts['role_code'], role_counts['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Users by Role Code')\nplt.show()"
  },
  {
    "db_id": "sakila_1",
    "question": "What is the count of films in the inventory for each length, visualized as a scatter chart?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nfilm = pd.read_sql(\"SELECT * FROM film\", conn)\ninventory = pd.read_sql(\"SELECT * FROM inventory\", conn)\nfilm.columns = film.columns.str.lower()\ninventory.columns = inventory.columns.str.lower()\n\n# Join film and inventory tables\ndf = pd.merge(film, inventory, on='film_id')\n\n# Group by length and count the number of occurrences\ndf_grouped = df.groupby('length').size().reset_index(name='count')\n\n# Scatter plot\nplt.scatter(df_grouped['length'], df_grouped['count'])\nplt.xlabel('Length')\nplt.ylabel('Count')\nplt.title('Number of Films by Length')\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "How many members are there in each club, represented by a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nclub.columns = club.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(club, member_of_club, on='clubid')\n\n# Group by clubname and count the number of rows\ngrouped_df = merged_df.groupby('clubname').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['clubname'], grouped_df['count'])\nplt.xlabel('Club Name')\nplt.ylabel('Count')\nplt.title('Number of Members in Each Club')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "aircraft",
    "question": "What is the name of the aircraft that has soared to victory the most number of times, as depicted in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naircraft = pd.read_sql(\"SELECT * FROM aircraft\", conn)\nMATCH = pd.read_sql(\"SELECT * FROM MATCH\", conn)\naircraft.columns = aircraft.columns.str.lower()\nMATCH.columns = MATCH.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(aircraft, MATCH, left_on='aircraft_id', right_on='winning_aircraft')\n\n# Grouping by aircraft and counting the occurrences\ngrouped_df = merged_df.groupby('aircraft').size().reset_index(name='count')\n\n# Sorting by count in descending order and selecting the top 1\ntop_aircraft = grouped_df.sort_values('count', ascending=False).head(1)\n\n# Plotting the bar chart\nplt.bar(top_aircraft['aircraft'], top_aircraft['count'])\nplt.xlabel('Aircraft')\nplt.ylabel('Count')\nplt.title('Top Aircraft by Count')\nplt.show()"
  },
  {
    "db_id": "twitter_1",
    "question": "Find the name of each user and number of tweets tweeted by each of them. Visualize by bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the user_profiles table\nuser_profiles = pd.read_sql(\"SELECT * FROM user_profiles\", conn)\nuser_profiles.columns = map(str.lower, user_profiles.columns)\n\n# Read the tweets table\ntweets = pd.read_sql(\"SELECT * FROM tweets\", conn)\ntweets.columns = map(str.lower, tweets.columns)\n\n# Merge the user_profiles and tweets tables on uid column\nmerged_data = pd.merge(user_profiles, tweets, on='uid')\n\n# Group by uid and count the number of occurrences\ngrouped_data = merged_data.groupby('uid').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_data['uid'], grouped_data['count'])\nplt.xlabel('UID')\nplt.ylabel('Count')\nplt.title('Number of Tweets per User')\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death , compare the number of deaths by dates active with a bar graph , and could you rank by the y-axis in asc ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm.columns = storm.columns.str.lower()\n\n# Assuming storm is a DataFrame containing the table data\n\n# Filter the data to include only rows where number_deaths >= 1\nfiltered_data = storm[storm['number_deaths'] >= 1]\n\n# Sort the filtered data by number_deaths in ascending order\nsorted_data = filtered_data.sort_values('number_deaths')\n\n# Extract the dates_active and number_deaths columns\ndates_active = sorted_data['dates_active']\nnumber_deaths = sorted_data['number_deaths']\n\n# Create a bar plot\nplt.bar(dates_active, number_deaths)\n\n# Add labels and title\nplt.xlabel('Dates Active')\nplt.ylabel('Number of Deaths')\nplt.title('Number of Deaths by Dates Active')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Show all role codes and the number of employees in each role by a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Employees table\nemployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\n\n# Convert column names to lowercase\nemployees.columns = employees.columns.str.lower()\n\n# Perform the SQL query\nresult = employees.groupby('role_code').size().reset_index(name='count')\n\n# Generate the bar chart\nplt.bar(result['role_code'], result['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Employees by Role Code')\n\n# Show the chart\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Bar chart x axis type y axis the total number , list by the Y in desc please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Group by 'type' and count the occurrences\nship_count = ship.groupby('type').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nship_count = ship_count.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(ship_count['type'], ship_count['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Ship Count by Type')\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "Bar chart of the number of position from each position, list by the names in desc.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the pilot table\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\n\n# Convert column names to lowercase\npilot.columns = pilot.columns.str.lower()\n\n# Perform the SQL query\nresult = pilot.groupby('position').size().reset_index(name='count').sort_values('position', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['position'], result['count'])\nplt.xlabel('Position')\nplt.ylabel('Count')\nplt.title('Number of Pilots by Position')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Show me a line chart of how how many installation date change over the installation date , and order x axis from high to low order .",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstation.columns = station.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called 'station'\n\n# Grouping the data by installation_date and counting the occurrences\ngrouped_data = station.groupby('installation_date').size().reset_index(name='count')\n\n# Sorting the data by installation_date in descending order\nsorted_data = grouped_data.sort_values('installation_date', ascending=False)\n\n# Plotting the line chart\nplt.plot(sorted_data['installation_date'], sorted_data['count'])\nplt.xlabel('Installation Date')\nplt.ylabel('Count')\nplt.title('Count of Installations by Date')\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "How does the count of wrestlers in elimination vary for each wrestler's name in a scatter chart?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nelimination = pd.read_sql(\"SELECT * FROM elimination\", conn)\nwrestler = pd.read_sql(\"SELECT * FROM wrestler\", conn)\nelimination.columns = elimination.columns.str.lower()\nwrestler.columns = wrestler.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(elimination, wrestler, on='wrestler_id')\n\n# Group by wrestler name and count the number of wrestler_id occurrences\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Create scatter plot\nplt.scatter(grouped_df['name'], grouped_df['count'])\nplt.xlabel('Wrestler Name')\nplt.ylabel('Count')\nplt.title('Number of Eliminations by Wrestler')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "small_bank_1",
    "question": "Which account has the least total balance, checking or savings, represented by a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\nsavings = pd.read_sql(\"SELECT * FROM savings\", conn)\naccounts.columns = accounts.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\nsavings.columns = savings.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(accounts, checking, on='custid')\nmerged_df = pd.merge(merged_df, savings, on='custid')\n\n# Calculate the total balance\nmerged_df['total_balance'] = merged_df['balance_x'] + merged_df['balance_y']\n\n# Sort the dataframe by total_balance in ascending order\nsorted_df = merged_df.sort_values('total_balance')\n\n# Plot the bar chart\nplt.bar(sorted_df['name'], sorted_df['total_balance'])\nplt.xlabel('Name')\nplt.ylabel('Total Balance')\nplt.title('Total Balance by Customer')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "Show me a bar chart displaying the count of injuries for each season where a player had a 'Foot injury' or 'Knee problem'.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\ninjury_accident = pd.read_sql(\"SELECT * FROM injury_accident\", conn)\ngame.columns = game.columns.str.lower()\ninjury_accident.columns = injury_accident.columns.str.lower()\n\n# Merge the game and injury_accident dataframes\nmerged_df = pd.merge(game, injury_accident, left_on='id', right_on='game_id')\n\n# Filter the merged dataframe for foot injury or knee problem\nfiltered_df = merged_df[(merged_df['injury'] == 'Foot injury') | (merged_df['injury'] == 'Knee problem')]\n\n# Group by season and count the number of occurrences\ngrouped_df = filtered_df.groupby('season').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['season'], grouped_df['count'])\nplt.xlabel('Season')\nplt.ylabel('Count')\nplt.title('Number of Foot Injuries and Knee Problems by Season')\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "Show how many carrriers for each shops in a bar chart, and list in descending by the y-axis please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the stock table\nstock = pd.read_sql(\"SELECT * FROM stock\", conn)\nstock.columns = map(str.lower, stock.columns)\n\n# Read the device table\ndevice = pd.read_sql(\"SELECT * FROM device\", conn)\ndevice.columns = map(str.lower, device.columns)\n\n# Read the shop table\nshop = pd.read_sql(\"SELECT * FROM shop\", conn)\nshop.columns = map(str.lower, shop.columns)\n\n# Merge the tables\nmerged_data = pd.merge(stock, device, on=\"device_id\")\nmerged_data = pd.merge(merged_data, shop, on=\"shop_id\")\n\n# Perform the query\nresult = merged_data.groupby(\"shop_name\").size().reset_index(name=\"count\").sort_values(\"count\", ascending=False)\n\n# Plot the bar chart\nplt.bar(result[\"shop_name\"], result[\"count\"])\nplt.xlabel(\"Shop Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Devices per Shop\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Please draw a bar to show the total number of participants in each type code , list X-axis from low to high order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nParticipants = pd.read_sql(\"SELECT * FROM Participants\", conn)\nParticipants.columns = Participants.columns.str.lower()\n\n# Group by participant_type_code and count the occurrences\ngrouped = Participants.groupby('participant_type_code').size().reset_index(name='count')\n\n# Sort by participant_type_code in ascending order\ngrouped = grouped.sort_values('participant_type_code')\n\n# Create bar plot\nplt.bar(grouped['participant_type_code'], grouped['count'])\nplt.xlabel('Participant Type Code')\nplt.ylabel('Count')\nplt.title('Count of Participants by Participant Type Code')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "How many trips started from Mountain View city and ended at Palo Alto city for each station, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\nstation.columns = station.columns.str.lower()\ntrip.columns = trip.columns.str.lower()\nstation.columns = station.columns.str.lower()\ntrip.columns = trip.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(station, trip, left_on='id', right_on='start_station_id')\nmerged_df = pd.merge(merged_df, station, left_on='end_station_id', right_on='id')\n\n# Filtering the data\nfiltered_df = merged_df[(merged_df['city_x'] == 'Mountain View') & (merged_df['city_y'] == 'Palo Alto')]\n\n# Grouping and counting the stations\ngrouped_df = filtered_df.groupby('name_y').size().reset_index(name='count')\n\n# Plotting the bar chart\nplt.bar(grouped_df['name_y'], grouped_df['count'])\nplt.xlabel('Station')\nplt.ylabel('Count')\nplt.title('Number of Trips from Mountain View to Palo Alto')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Compare how many events by different event details using a bar chart, and sort names from high to low order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the EVENTS table\nevents = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\n\n# Convert column names to lowercase\nevents.columns = events.columns.str.lower()\n\n# Perform the SQL query\nevent_counts = events.groupby('event_details').size().reset_index(name='count')\nevent_counts = event_counts.sort_values('event_details', ascending=False)\n\n# Generate the bar chart\nplt.bar(event_counts['event_details'], event_counts['count'])\nplt.xlabel('Event Details')\nplt.ylabel('Count')\nplt.title('Event Details Count')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Show all artist names and ages in a bar , list Y from high to low order .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Assuming the data is already loaded into the 'artist' dataframe\n\n# Sort the dataframe by age in descending order\nsorted_artist = artist.sort_values(by='age', ascending=False)\n\n# Extract the name and age columns\nname = sorted_artist['name']\nage = sorted_artist['age']\n\n# Create a bar plot\nplt.bar(name, age)\n\n# Set the x-axis label\nplt.xlabel('Name')\n\n# Set the y-axis label\nplt.ylabel('Age')\n\n# Set the title of the plot\nplt.title('Artist Age')\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "What is the count of problems reported after the date of any problems reported by Rylan Homenick, visualized in a scatter chart?",
    "chart": "Scatter",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nproblems = pd.read_sql(\"SELECT * FROM problems\", conn)\nstaff = pd.read_sql(\"SELECT * FROM staff\", conn)\nproblems = pd.read_sql(\"SELECT * FROM problems\", conn)\nstaff = pd.read_sql(\"SELECT * FROM staff\", conn)\nproblems.columns = problems.columns.str.lower()\nstaff.columns = staff.columns.str.lower()\nproblems.columns = problems.columns.str.lower()\nstaff.columns = staff.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(problems, staff, left_on='reported_by_staff_id', right_on='staff_id')\n\n# Filter data\nmax_date = merged_df.loc[(merged_df['staff_first_name'] == 'Rylan') & (merged_df['staff_last_name'] == 'Homenick'), 'date_problem_reported'].max()\nfiltered_df = merged_df.loc[merged_df['date_problem_reported'] > max_date]\n\n# Group by date_problem_reported and count\ngrouped_df = filtered_df.groupby('date_problem_reported').size().reset_index(name='count')\n\n# Scatter plot\nplt.scatter(grouped_df['date_problem_reported'], grouped_df['count'])\nplt.xlabel('Date Problem Reported')\nplt.ylabel('Count')\nplt.title('Scatter Plot of Problem Count by Date')\nplt.show()"
  },
  {
    "db_id": "gymnast",
    "question": "Can you create a scatter plot displaying the ages and heights of the gymnasts, with the data sorted in ascending order by their ages?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngymnast = pd.read_sql(\"SELECT * FROM gymnast\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\ngymnast.columns = gymnast.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(gymnast, people, left_on='gymnast_id', right_on='people_id')\n\n# Sort the merged dataframe by age in ascending order\nsorted_df = merged_df.sort_values('age')\n\n# Create a scatter plot\nplt.scatter(sorted_df['age'], sorted_df['height'])\n\n# Set the labels and title\nplt.xlabel('Age')\nplt.ylabel('Height')\nplt.title('Scatter plot of Age vs Height')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "small_bank_1",
    "question": "Can you create a bar chart displaying the name and total checking and savings balance of the accounts where the savings balance is lower than the corresponding checking balance?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\nsavings = pd.read_sql(\"SELECT * FROM savings\", conn)\naccounts.columns = accounts.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\nsavings.columns = savings.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(accounts, checking, on='custid')\nmerged_df = pd.merge(merged_df, savings, on='custid')\n\n# Filter the data\nfiltered_df = merged_df[merged_df['balance_y'] < merged_df['balance_x']]\n\n# Calculate the total balance\nfiltered_df['total_balance'] = filtered_df['balance_x'] + filtered_df['balance_y']\n\n# Create the bar plot\nplt.bar(filtered_df['name'], filtered_df['total_balance'])\nplt.xlabel('Name')\nplt.ylabel('Total Balance')\nplt.title('Total Balance for Customers with Savings Balance < Checking Balance')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "What are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality Show bar chart , list by the x axis in ascending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot.columns = pilot.columns.str.lower()\n\n# Grouping the data by nationality and counting the occurrences\nnationality_counts = pilot.groupby('nationality').size().reset_index(name='count')\n\n# Sorting the data by nationality in ascending order\nnationality_counts = nationality_counts.sort_values('nationality')\n\n# Creating the bar plot\nplt.bar(nationality_counts['nationality'], nationality_counts['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Pilots by Nationality')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "For each type, what is the average tonnage, show from low to high by the Type.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ship table\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = ship_df.groupby('type')['tonnage'].mean().reset_index().sort_values('type')\n\n# Generate the bar plot\nplt.bar(result_df['type'], result_df['tonnage'])\nplt.xlabel('Type')\nplt.ylabel('Average Tonnage')\nplt.title('Average Tonnage by Ship Type')\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "Can you draw a bar chart to show the number of positions of the pilots ? , list in desc by the X please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot.columns = pilot.columns.str.lower()\n\n# Group by position and count the number of occurrences\nposition_counts = pilot.groupby('position').size().reset_index(name='count')\n\n# Sort the positions in descending order\nposition_counts = position_counts.sort_values('position', ascending=False)\n\n# Create a bar plot\nplt.bar(position_counts['position'], position_counts['count'])\nplt.xlabel('Position')\nplt.ylabel('Count')\nplt.title('Number of Pilots by Position')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Show me a bar chart of the top 10 cities with the highest number of drama workshop groups.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nAddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\nDrama_Workshop_Groups = pd.read_sql(\"SELECT * FROM Drama_Workshop_Groups\", conn)\nAddresses.columns = Addresses.columns.str.lower()\nDrama_Workshop_Groups.columns = Drama_Workshop_Groups.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Addresses, Drama_Workshop_Groups, on='address_id')\n\n# Group by city_town and count the number of rows\ngrouped_df = merged_df.groupby('city_town').size().reset_index(name='count')\n\n# Sort by count in descending order and select top 10 rows\ntop_10_cities = grouped_df.sort_values('count', ascending=False).head(10)\n\n# Plot the bar chart\nplt.bar(top_10_cities['city_town'], top_10_cities['count'])\nplt.xlabel('City/Town')\nplt.ylabel('Count')\nplt.title('Top 10 Cities/Towns with Most Drama Workshop Groups')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "Which customers have orders with the status \"On Road\"? Provide the customer details and the count of their orders with the status \"On Road\" in a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\ncustomers.columns = customers.columns.str.lower()\norders.columns = orders.columns.str.lower()\n\n# Merge customers and orders dataframes\nmerged_df = pd.merge(customers, orders, on='customer_id')\n\n# Filter orders with order_status = 'On Road'\nfiltered_df = merged_df[merged_df['order_status'] == 'On Road']\n\n# Group by customer_details and count the number of orders\ngrouped_df = filtered_df.groupby('customer_details').size().reset_index(name='count')\n\n# Plot pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['customer_details'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "gymnast",
    "question": "Show me a bar chart for how many gymnasts are from each hometown?, could you sort by the Y-axis from high to low?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the gymnast and people tables\ngymnast = pd.read_sql(\"SELECT * FROM gymnast\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\n\n# Convert column names to lowercase\ngymnast.columns = map(str.lower, gymnast.columns)\npeople.columns = map(str.lower, people.columns)\n\n# Merge the tables on Gymnast_ID and People_ID columns\nmerged_data = pd.merge(gymnast, people, left_on=\"gymnast_id\", right_on=\"people_id\")\n\n# Perform the SQL query\nresult = merged_data.groupby(\"hometown\").size().reset_index(name=\"count\").sort_values(by=\"count\", ascending=False)\n\n# Generate the bar plot\nplt.bar(result[\"hometown\"], result[\"count\"])\nplt.xlabel(\"Hometown\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Gymnasts by Hometown\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "question": "Show me a bar chart displaying the shipping agent name and the count of documents for each shipping agent, ordered by the count in descending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRef_Shipping_Agents = pd.read_sql(\"SELECT * FROM Ref_Shipping_Agents\", conn)\nDocuments = pd.read_sql(\"SELECT * FROM Documents\", conn)\nRef_Shipping_Agents.columns = Ref_Shipping_Agents.columns.str.lower()\nDocuments.columns = Documents.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Ref_Shipping_Agents, Documents, left_on='shipping_agent_code', right_on='shipping_agent_code')\n\n# Perform the group by and count operation\ngrouped_df = merged_df.groupby('shipping_agent_name').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['shipping_agent_name'], sorted_df['count'])\nplt.xlabel('Shipping Agent')\nplt.ylabel('Count')\nplt.title('Number of Documents per Shipping Agent')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Compare all countries with a bar chart , I want to order by the bars in asc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Group by country and count the number of artists in each country\ncountry_counts = artist.groupby('country').size().reset_index(name='count')\n\n# Sort the dataframe by country in ascending order\ncountry_counts = country_counts.sort_values('country')\n\n# Create a bar plot\nplt.bar(country_counts['country'], country_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Artists by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "A bar chart about what are the different software platforms for devices, and how many devices have each?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the device table\ndevice_df = pd.read_sql(\"SELECT * FROM device\", conn)\n\n# Convert column names to lowercase\ndevice_df.columns = device_df.columns.str.lower()\n\n# Perform the SQL query\nresult = device_df.groupby('software_platform').size().reset_index(name='count')\n\n# Generate the bar chart\nplt.bar(result['software_platform'], result['count'])\nplt.xlabel('Software Platform')\nplt.ylabel('Count')\nplt.title('Number of Devices by Software Platform')\n\n# Show the chart\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "Which customers have canceled the purchase of the product \"food\" (item status: \"Cancel\") and what is the total number of cancels for each customer? Show the results in a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\norder_items = pd.read_sql(\"SELECT * FROM order_items\", conn)\nproducts = pd.read_sql(\"SELECT * FROM products\", conn)\n\ncustomers.columns = customers.columns.str.lower()\norders.columns = orders.columns.str.lower()\norder_items.columns = order_items.columns.str.lower()\nproducts.columns = products.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(customers, orders, on='customer_id')\nmerged_df = pd.merge(merged_df, order_items, on='order_id')\nmerged_df = pd.merge(merged_df, products, on='product_id')\n\n# Filter data\nfiltered_df = merged_df[(merged_df['order_item_status'] == 'Cancel') & (merged_df['product_name'] == 'food')]\n\n# Group by customer_name and count cancels\ngrouped_df = filtered_df.groupby('customer_name').size().reset_index(name='Total Cancels')\n\n# Plot bar chart\nplt.bar(grouped_df['customer_name'], grouped_df['Total Cancels'])\nplt.xlabel('Customer Name')\nplt.ylabel('Total Cancels')\nplt.title('Total Cancels by Customer')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "List the physicians' employee ids together with their primary affiliation departments' ids . Plot them as scatter chart .",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\naffiliated_with = pd.read_sql(\"SELECT * FROM affiliated_with\", conn)\naffiliated_with.columns = affiliated_with.columns.str.lower()\n\n# Filter the dataframe to include only rows where primaryaffiliation is 1\nfiltered_df = affiliated_with[affiliated_with['primaryaffiliation'] == 1]\n\n# Create a scatter plot of physician vs department\nplt.scatter(filtered_df['physician'], filtered_df['department'])\nplt.xlabel('Physician')\nplt.ylabel('Department')\nplt.title('Scatter plot of Physician vs Department')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show different types of ships and the number of ships of each type in a bar chart , I want to list from low to high by the names .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Grouping the ship dataframe by type and counting the occurrences\nship_grouped = ship.groupby('type').size().reset_index(name='count')\n\n# Sorting the ship_grouped dataframe by type in ascending order\nship_grouped = ship_grouped.sort_values('type')\n\n# Creating the bar plot\nplt.bar(ship_grouped['type'], ship_grouped['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Count of Ships by Type')\nplt.show()"
  },
  {
    "db_id": "entertainment_awards",
    "question": "How many nominations are there for each festival, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nnomination = pd.read_sql(\"SELECT * FROM nomination\", conn)\nfestival_detail = pd.read_sql(\"SELECT * FROM festival_detail\", conn)\nnomination.columns = nomination.columns.str.lower()\nfestival_detail.columns = festival_detail.columns.str.lower()\n\n# Merge the nomination and festival_detail dataframes\nmerged_df = pd.merge(nomination, festival_detail, on='festival_id')\n\n# Group by festival_name and count the occurrences\ngrouped_df = merged_df.groupby('festival_name').size().reset_index(name='count')\n\n# Create a pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['festival_name'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Display the chart\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "What is the code of each role and the number of employees in each role . Show bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nEmployees.columns = Employees.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\nrole_counts = Employees.groupby('role_code').size()\n\n# Creating a bar plot\nplt.bar(role_counts.index, role_counts.values)\n\n# Adding labels and title\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Employees by Role Code')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "tvshow",
    "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings . Visualize by pie chart .",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nTV_series = pd.read_sql(\"SELECT * FROM TV_series\", conn)\nTV_series.columns = TV_series.columns.str.lower()\n\n# Assuming TV_series is a DataFrame containing the table data\n\n# Selecting the top 3 episodes with highest ratings\ntop_episodes = TV_series.sort_values('rating', ascending=False).head(3)\n\n# Creating a pie chart to visualize the ratings of the top episodes\nplt.pie(top_episodes['rating'], labels=top_episodes['episode'], autopct='%1.1f%%')\nplt.title('Top 3 Episodes by Rating')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "question": "Show me a bar chart displaying the count of documents shipped by each shipping agent.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRef_Shipping_Agents = pd.read_sql(\"SELECT * FROM Ref_Shipping_Agents\", conn)\nDocuments = pd.read_sql(\"SELECT * FROM Documents\", conn)\nRef_Shipping_Agents.columns = Ref_Shipping_Agents.columns.str.lower()\nDocuments.columns = Documents.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Ref_Shipping_Agents, Documents, on='shipping_agent_code')\n\n# Perform the group by operation and count the number of documents for each shipping agent\ngrouped_df = merged_df.groupby('shipping_agent_name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['shipping_agent_name'], grouped_df['count'])\nplt.xlabel('Shipping Agent')\nplt.ylabel('Count')\nplt.title('Number of Documents per Shipping Agent')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "gymnast",
    "question": "Show me a bar chart displaying the count of gymnasts for each age, ordered in ascending order by the count.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngymnast = pd.read_sql(\"SELECT * FROM gymnast\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\ngymnast.columns = gymnast.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(gymnast, people, left_on='gymnast_id', right_on='people_id')\n\n# Group by age and count the number of occurrences\ngrouped_df = merged_df.groupby('age').size().reset_index(name='count')\n\n# Sort the dataframe by count in ascending order\nsorted_df = grouped_df.sort_values('count', ascending=True)\n\n# Create the bar plot\nplt.bar(sorted_df['age'], sorted_df['count'])\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.title('Number of Gymnasts by Age')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "For each city , return the highest latitude among its stations . Show a pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstation.columns = station.columns.str.lower()\n\n# Assuming the table data is stored in a DataFrame called 'station'\n\n# Grouping the data by city and finding the maximum latitude\ngrouped_data = station.groupby('city')['lat'].max()\n\n# Creating a pie chart\nplt.pie(grouped_data, labels=grouped_data.index, autopct='%1.1f%%')\nplt.title('Maximum Latitude by City')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Show all role codes and the number of employees in each role by a bar chart , could you sort from low to high by the names ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nEmployees.columns = Employees.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\nrole_counts = Employees.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by role_code in ascending order\nrole_counts = role_counts.sort_values('role_code')\n\n# Creating a bar plot\nplt.bar(role_counts['role_code'], role_counts['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Employees by Role Code')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "How many drama workshop groups are there in each city? Show a bar chart displaying the count for each city.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nAddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\nDrama_Workshop_Groups = pd.read_sql(\"SELECT * FROM Drama_Workshop_Groups\", conn)\nAddresses.columns = Addresses.columns.str.lower()\nDrama_Workshop_Groups.columns = Drama_Workshop_Groups.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Addresses, Drama_Workshop_Groups, on='address_id')\n\n# Group by city_town and count the number of rows\ngrouped_df = merged_df.groupby('city_town').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['city_town'], grouped_df['count'])\nplt.xlabel('City/Town')\nplt.ylabel('Count')\nplt.title('Number of Drama Workshop Groups by City/Town')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show each premise type and the number of premises in that type Visualize by bar chart , and show by the Y in ascending please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\npremises = pd.read_sql(\"SELECT * FROM premises\", conn)\npremises.columns = premises.columns.str.lower()\n\n# Group by premises_type and count the number of occurrences\npremises_count = premises.groupby('premises_type').size().reset_index(name='count')\n\n# Sort the dataframe by count in ascending order\npremises_count = premises_count.sort_values('count')\n\n# Create a bar plot\nplt.bar(premises_count['premises_type'], premises_count['count'])\nplt.xlabel('Premises Type')\nplt.ylabel('Count')\nplt.title('Number of Premises by Type')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death, show me the name and the total number of deaths with a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the storm table\nstorm_df = pd.read_sql(\"SELECT * FROM storm\", conn)\n\n# Convert column names to lowercase\nstorm_df.columns = storm_df.columns.str.lower()\n\n# Filter the data for number_deaths >= 1\nfiltered_df = storm_df[storm_df['number_deaths'] >= 1]\n\n# Select the required columns\nfiltered_df = filtered_df[['name', 'number_deaths']]\n\n# Plot the bar chart\nplt.bar(filtered_df['name'], filtered_df['number_deaths'])\nplt.xlabel('Name')\nplt.ylabel('Number of Deaths')\nplt.title('Storms with Number of Deaths >= 1')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "products_for_hire",
    "question": "How many coupons with the same coupon amount are owned by both good and bad customers, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDiscount_Coupons = pd.read_sql(\"SELECT * FROM Discount_Coupons\", conn)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\nDiscount_Coupons = pd.read_sql(\"SELECT * FROM Discount_Coupons\", conn)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\nDiscount_Coupons.columns = Discount_Coupons.columns.str.lower()\ncustomers.columns = customers.columns.str.lower()\nDiscount_Coupons.columns = Discount_Coupons.columns.str.lower()\ncustomers.columns = customers.columns.str.lower()\n\n# Perform the SQL query using pandas merge\ndf = pd.merge(Discount_Coupons, customers, left_on='coupon_id', right_on='coupon_id')\ngood_customers = df[df['good_or_bad_customer'] == 'good']\nbad_customers = df[df['good_or_bad_customer'] == 'bad']\n\n# Get the coupon amounts for good and bad customers\ngood_coupon_amounts = good_customers['coupon_amount']\nbad_coupon_amounts = bad_customers['coupon_amount']\n\n# Create a new dataframe with the intersected coupon amounts\nintersected_coupon_amounts = pd.merge(good_coupon_amounts, bad_coupon_amounts, how='inner')\n\n# Group by coupon amount and count the occurrences\ncoupon_amount_counts = intersected_coupon_amounts.groupby('coupon_amount').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(coupon_amount_counts['coupon_amount'], coupon_amount_counts['count'])\nplt.xlabel('Coupon Amount')\nplt.ylabel('Count')\nplt.title('Coupon Amount Distribution for Good and Bad Customers')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Bar chart x axis location code y axis how many location code , display by the y-axis from high to low .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDocument_locations = pd.read_sql(\"SELECT * FROM Document_locations\", conn)\nDocument_locations.columns = Document_locations.columns.str.lower()\n\n# Group by location_code and count the occurrences\nlocation_counts = Document_locations.groupby('location_code').size().reset_index(name='count')\n\n# Sort by count in descending order\nlocation_counts = location_counts.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(location_counts['location_code'], location_counts['count'])\nplt.xlabel('Location Code')\nplt.ylabel('Count')\nplt.title('Document Locations')\nplt.show()"
  },
  {
    "db_id": "college_3",
    "question": "What is the bar chart displaying the maximum and minimum gradepoints for students living in NYC?",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nENROLLED_IN = pd.read_sql(\"SELECT * FROM ENROLLED_IN\", conn)\nGRADECONVERSION = pd.read_sql(\"SELECT * FROM GRADECONVERSION\", conn)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nENROLLED_IN = pd.read_sql(\"SELECT * FROM ENROLLED_IN\", conn)\nGRADECONVERSION = pd.read_sql(\"SELECT * FROM GRADECONVERSION\", conn)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nENROLLED_IN.columns = ENROLLED_IN.columns.str.lower()\nGRADECONVERSION.columns = GRADECONVERSION.columns.str.lower()\nSTUDENT.columns = STUDENT.columns.str.lower()\nENROLLED_IN.columns = ENROLLED_IN.columns.str.lower()\nGRADECONVERSION.columns = GRADECONVERSION.columns.str.lower()\nSTUDENT.columns = STUDENT.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(pd.merge(ENROLLED_IN, GRADECONVERSION, left_on='grade', right_on='lettergrade'), STUDENT, on='stuid')\n\n# Filter data for city_code = 'nyc'\nfiltered_df = merged_df[merged_df['city_code'] == 'nyc']\n\n# Calculate max and min gradepoint\nmax_gradepoint = filtered_df['gradepoint'].max()\nmin_gradepoint = filtered_df['gradepoint'].min()\n\n# Create bar plot\nlabels = ['max gradepoint', 'min gradepoint']\nvalues = [max_gradepoint, min_gradepoint]\n\nplt.bar(labels, values)\nplt.xlabel('Label')\nplt.ylabel('Value')\nplt.title('Max and Min Gradepoint in NYC')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Show the average of artists' age by country , and I want to order by the X-axis in asc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Calculate average age by country\navg_age_by_country = artist.groupby('country')['age'].mean().reset_index()\n\n# Sort by country in ascending order\navg_age_by_country = avg_age_by_country.sort_values('country')\n\n# Plot the bar chart\nplt.bar(avg_age_by_country['country'], avg_age_by_country['age'])\nplt.xlabel('Country')\nplt.ylabel('Average Age')\nplt.title('Average Age of Artists by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "How many members in club \"Bootup Baltimore\" are below the age of 18, visualized with a scatter chart?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nstudent = pd.read_sql(\"SELECT * FROM student\", conn)\nclub.columns = club.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\nstudent.columns = student.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(club, member_of_club, on='clubid')\nmerged_df = pd.merge(merged_df, student, left_on='stuid', right_on='stuid')\n\n# Filter data\nfiltered_df = merged_df[(merged_df['clubname'] == 'Bootup Baltimore') & (merged_df['age'] < 18)]\n\n# Group by age and count\ngrouped_df = filtered_df.groupby('age').size().reset_index(name='count')\n\n# Scatter plot\nplt.scatter(grouped_df['age'], grouped_df['count'])\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.title('Count of Students by Age')\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "What are each physician's employee id and department id primarily affiliated . Plot them as scatter chart .",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\naffiliated_with = pd.read_sql(\"SELECT * FROM affiliated_with\", conn)\naffiliated_with.columns = affiliated_with.columns.str.lower()\n\n# Filter the dataframe to select rows where primaryaffiliation is 1\nfiltered_df = affiliated_with[affiliated_with['primaryaffiliation'] == 1]\n\n# Create a scatter plot of physician vs department\nplt.scatter(filtered_df['physician'], filtered_df['department'])\nplt.xlabel('Physician')\nplt.ylabel('Department')\nplt.title('Scatter plot of Physician vs Department')\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "Return a bar on what are the different role codes for users, and how many users have each?, rank by the total number in ascending please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the users table\nusers = pd.read_sql(\"SELECT * FROM users\", conn)\n\n# Convert column names to lowercase\nusers.columns = users.columns.str.lower()\n\n# Perform the SQL query\nresult = users.groupby('role_code').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result['role_code'], result['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Users by Role Code')\nplt.show()"
  },
  {
    "db_id": "tvshow",
    "question": "List each language and the number of TV Channels using it Visualize by bar chart, and list in desc by the X.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the TV_Channel table\ndf = pd.read_sql(\"SELECT * FROM TV_Channel\", conn)\n\n# Convert column names to lowercase\ndf.columns = df.columns.str.lower()\n\n# Perform the SQL query\nresult = df.groupby('language').size().reset_index(name='count').sort_values('language', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['language'], result['count'])\nplt.xlabel('Language')\nplt.ylabel('Count')\nplt.title('Number of TV Channels by Language')\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship , could you show by the Y in descending please ?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Group by citizenship and calculate the maximum net worth\nmax_net_worth = singer.groupby('citizenship')['net_worth_millions'].max()\n\n# Sort the values in descending order\nmax_net_worth = max_net_worth.sort_values(ascending=False)\n\n# Create a bar plot\nplt.bar(max_net_worth.index, max_net_worth.values)\n\n# Set the labels and title\nplt.xlabel('Citizenship')\nplt.ylabel('Max Net Worth (Millions)')\nplt.title('Max Net Worth by Citizenship')\n\n# Rotate the x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "icfp_1",
    "question": "How many papers have been published under the institution \"Indiana University\" using a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npapers = pd.read_sql(\"SELECT * FROM papers\", conn)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\ninst = pd.read_sql(\"SELECT * FROM inst\", conn)\npapers.columns = papers.columns.str.lower()\nauthorship.columns = authorship.columns.str.lower()\ninst.columns = inst.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(papers, authorship, on='paperid')\nmerged_df = pd.merge(merged_df, inst, on='instid')\n\n# Filter by institution name\nfiltered_df = merged_df[merged_df['name'] == 'Indiana University']\n\n# Group by institution name and count\ngrouped_df = filtered_df.groupby('name').size().reset_index(name='count')\n\n# Plot bar chart\nplt.bar(grouped_df['name'], grouped_df['count'])\nplt.xlabel('Institution Name')\nplt.ylabel('Count')\nplt.title('Number of Papers by Institution')\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "Bar graph to show the total number from different role code , and order by the the total number from high to low .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nusers = pd.read_sql(\"SELECT * FROM users\", conn)\nusers.columns = users.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\nrole_counts = users.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by count in descending order\nrole_counts = role_counts.sort_values(by='count', ascending=False)\n\n# Creating the bar plot\nplt.bar(role_counts['role_code'], role_counts['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Users by Role Code')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Bar chart x axis type y axis the total number , and show X-axis in asc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Grouping the ship dataframe by type and counting the occurrences\nship_grouped = ship.groupby('type').size().reset_index(name='count')\n\n# Sorting the ship_grouped dataframe by type in ascending order\nship_grouped = ship_grouped.sort_values('type')\n\n# Creating the bar plot\nplt.bar(ship_grouped['type'], ship_grouped['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Count of Ships by Type')\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "Show me a bar chart displaying the storm name and the count of affected regions for each storm, sorted in ascending order by the count of affected regions.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\naffected_region = pd.read_sql(\"SELECT * FROM affected_region\", conn)\nstorm.columns = storm.columns.str.lower()\naffected_region.columns = affected_region.columns.str.lower()\n\n# Perform the join operation\nmerged_data = pd.merge(storm, affected_region, on='storm_id')\n\n# Group by storm name and count the occurrences\ngrouped_data = merged_data.groupby('name').size().reset_index(name='count')\n\n# Sort the data by count in ascending order\nsorted_data = grouped_data.sort_values('count')\n\n# Create the bar plot\nplt.bar(sorted_data['name'], sorted_data['count'])\nplt.xlabel('Storm Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Storm Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Create a pie chart showing maximal lat across city .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstation.columns = station.columns.str.lower()\n\n# Assuming the table data is stored in a DataFrame called 'station'\n\n# Grouping the data by city and finding the maximum latitude\ngrouped_data = station.groupby('city')['lat'].max()\n\n# Creating a pie chart\nplt.pie(grouped_data, labels=grouped_data.index, autopct='%1.1f%%')\nplt.title('Maximum Latitude by City')\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "How many patients are taking each medication, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nMedication = pd.read_sql(\"SELECT * FROM Medication\", conn)\nPrescribes = pd.read_sql(\"SELECT * FROM Prescribes\", conn)\nMedication.columns = Medication.columns.str.lower()\nPrescribes.columns = Prescribes.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Medication, Prescribes, left_on='code', right_on='medication')\n\n# Perform the group by operation and count the occurrences\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Create a pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['name'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Display the pie chart\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Give me a bar chart about the number of countries in the artist table",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Assuming the data is already loaded into the 'artist' dataframe\n\n# Grouping the data by country and counting the occurrences\ncountry_counts = artist.groupby('country').size().reset_index(name='count')\n\n# Creating the bar plot\nplt.bar(country_counts['country'], country_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Artists by Country')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show different types of ships and the number of ships of each type Show bar chart , list by the Y in desc please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Group by 'type' and count the occurrences\nship_count = ship.groupby('type').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nship_count = ship_count.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(ship_count['type'], ship_count['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Ship Count by Type')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "What is the description of each service type with a product price above 100, and what is their average product price over time?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRef_Service_Types = pd.read_sql(\"SELECT * FROM Ref_Service_Types\", conn)\nServices = pd.read_sql(\"SELECT * FROM Services\", conn)\nRef_Service_Types.columns = Ref_Service_Types.columns.str.lower()\nServices.columns = Services.columns.str.lower()\n\n# Merge the two dataframes\nmerged_df = pd.merge(Ref_Service_Types, Services, on='service_type_code')\n\n# Filter the dataframe for product_price > 100\nfiltered_df = merged_df[merged_df['product_price'] > 100]\n\n# Group by service_type_description and calculate average product_price\ngrouped_df = filtered_df.groupby('service_type_description')['product_price'].mean().reset_index()\n\n# Plot the line chart\nplt.plot(grouped_df['service_type_description'], grouped_df['product_price'])\nplt.xlabel('Service Type Description')\nplt.ylabel('Average Product Price')\nplt.title('Average Product Price by Service Type Description')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "products_for_hire",
    "question": "What are the names of products with availability equal to 1 and their availability status displayed in a scatter chart?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nview_product_availability = pd.read_sql(\"SELECT * FROM view_product_availability\", conn)\nproducts_for_hire = pd.read_sql(\"SELECT * FROM products_for_hire\", conn)\nview_product_availability.columns = view_product_availability.columns.str.lower()\nproducts_for_hire.columns = products_for_hire.columns.str.lower()\n\n# Merge the two dataframes\nmerged_df = pd.merge(view_product_availability, products_for_hire, on='product_id')\n\n# Filter the merged dataframe for available products\navailable_products = merged_df[merged_df['available_yn'] == 1]\n\n# Create a scatter plot\nplt.scatter(available_products['product_name'], available_products['available_yn'])\nplt.xlabel('Product Name')\nplt.ylabel('Availability')\nplt.title('Product Availability')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "Can you create a pie chart to display the distribution of storms based on the range of cities affected, categorized as 1-4, 5-9, and 10+?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\naffected_region = pd.read_sql(\"SELECT * FROM affected_region\", conn)\nstorm.columns = storm.columns.str.lower()\naffected_region.columns = affected_region.columns.str.lower()\n\n# Merge the storm and affected_region tables\nmerged_df = pd.merge(storm, affected_region, on='storm_id')\n\n# Create a new column 'city_range' based on the number of affected cities\nmerged_df['city_range'] = pd.cut(merged_df['number_city_affected'], bins=[0, 4, 9, float('inf')], labels=['1-4', '5-9', '10+'])\n\n# Group by 'city_range' and count the number of occurrences\ngrouped_df = merged_df.groupby('city_range').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['city_range'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.title('Distribution of Affected Cities')\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "What are the problem id and log id assigned to the staff named Rylan Homenick, visualized in a scatter chart?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstaff = pd.read_sql(\"SELECT * FROM staff\", conn)\nproblem_log = pd.read_sql(\"SELECT * FROM problem_log\", conn)\nstaff.columns = staff.columns.str.lower()\nproblem_log.columns = problem_log.columns.str.lower()\n\n# Merge staff and problem_log tables\nmerged_df = pd.merge(staff, problem_log, left_on='staff_id', right_on='assigned_to_staff_id')\n\n# Filter the data for staff with first name 'Rylan' and last name 'Homenick'\nfiltered_df = merged_df[(merged_df['staff_first_name'] == 'Rylan') & (merged_df['staff_last_name'] == 'Homenick')]\n\n# Create a scatter plot\nplt.scatter(filtered_df['problem_id'], filtered_df['problem_log_id'])\nplt.xlabel('Problem ID')\nplt.ylabel('Problem Log ID')\nplt.title('Scatter Plot of Problem ID vs Problem Log ID')\nplt.show()"
  },
  {
    "db_id": "aircraft",
    "question": "Which aircrafts have achieved multiple victories in matches, and can you display their names in a bar chart sorted from highest to lowest number of wins?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naircraft = pd.read_sql(\"SELECT * FROM aircraft\", conn)\nMATCH = pd.read_sql(\"SELECT * FROM MATCH\", conn)\naircraft.columns = aircraft.columns.str.lower()\nMATCH.columns = MATCH.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(aircraft, MATCH, left_on='aircraft_id', right_on='winning_aircraft')\n\n# Grouping and counting the number of occurrences\ngrouped_df = merged_df.groupby('aircraft').size().reset_index(name='count')\n\n# Filtering the results\nfiltered_df = grouped_df[grouped_df['count'] >= 2]\n\n# Sorting the results\nsorted_df = filtered_df.sort_values('count', ascending=False)\n\n# Plotting the bar chart\nplt.bar(sorted_df['aircraft'], sorted_df['count'])\nplt.xlabel('Aircraft')\nplt.ylabel('Count')\nplt.title('Number of Wins per Aircraft')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "restaurant_1",
    "question": "List how many students in each last name who majored in 600 using a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Student table\nstudent_df = pd.read_sql(\"SELECT * FROM Student\", conn)\n\n# Convert column names to lowercase\nstudent_df.columns = student_df.columns.str.lower()\n\n# Filter the data for students with Major = 600\nfiltered_df = student_df[student_df['major'] == 600]\n\n# Group by LName and count the occurrences\ngrouped_df = filtered_df.groupby('lname').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['lname'], grouped_df['count'])\nplt.xlabel('Last Name')\nplt.ylabel('Count')\nplt.title('Number of Students by Last Name')\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show different citizenship of singers and the number of singers of each citizenship . Plot them as bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Grouping the singer dataframe by citizenship and counting the number of occurrences\ncitizenship_count = singer.groupby('citizenship').size().reset_index(name='count')\n\n# Creating a bar plot\nplt.bar(citizenship_count['citizenship'], citizenship_count['count'])\nplt.xlabel('Citizenship')\nplt.ylabel('Count')\nplt.title('Number of Singers by Citizenship')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "How many drama workshop groups are there in each city? Return both the city and the count Plot them as bar chart, order in ascending by the x-axis.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Addresses table\naddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\naddresses.columns = map(str.lower, addresses.columns)\n\n# Read the Drama_Workshop_Groups table\ndrama_workshop_groups = pd.read_sql(\"SELECT * FROM Drama_Workshop_Groups\", conn)\ndrama_workshop_groups.columns = map(str.lower, drama_workshop_groups.columns)\n\n# Merge the two tables on Address_ID\nmerged_data = pd.merge(addresses, drama_workshop_groups, on='address_id')\n\n# Perform the group by and count\ngrouped_data = merged_data.groupby('city_town').size().reset_index(name='count')\n\n# Sort the data by City_Town in ascending order\nsorted_data = grouped_data.sort_values('city_town')\n\n# Plot the bar chart\nplt.bar(sorted_data['city_town'], sorted_data['count'])\nplt.xlabel('City/Town')\nplt.ylabel('Count')\nplt.title('Number of Drama Workshop Groups in Each City/Town')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Compare how many events by different event details using a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEVENTS = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\nEVENTS.columns = EVENTS.columns.str.lower()\n\n# Group by event_details and count the occurrences\nevent_counts = EVENTS.groupby('event_details').size().reset_index(name='count')\n\n# Create a bar plot\nplt.bar(event_counts['event_details'], event_counts['count'])\nplt.xlabel('Event Details')\nplt.ylabel('Count')\nplt.title('Event Details Count')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "What are the names of procedures physician John Wen was trained in, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nphysician = pd.read_sql(\"SELECT * FROM physician\", conn)\ntrained_in = pd.read_sql(\"SELECT * FROM trained_in\", conn)\nprocedures = pd.read_sql(\"SELECT * FROM procedures\", conn)\nphysician.columns = physician.columns.str.lower()\ntrained_in.columns = trained_in.columns.str.lower()\nprocedures.columns = procedures.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(pd.merge(physician, trained_in, left_on='employeeid', right_on='physician'),\n                     procedures, left_on='treatment', right_on='code')\n\n# Filtering the data for 'john wen'\nfiltered_df = merged_df[merged_df['name_x'] == 'John Wen']\n\n# Grouping and counting the procedures\ngrouped_df = filtered_df.groupby('name_y').size().reset_index(name='count')\n\n# Sorting the data by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Selecting the top 5 procedures\ntop_5_df = sorted_df.head(5)\n\n# Plotting the bar chart\nplt.bar(top_5_df['name_y'], top_5_df['count'])\nplt.xlabel('Procedure')\nplt.ylabel('Count')\nplt.title('Top 5 Procedures for John Wen')\nplt.show()"
  },
  {
    "db_id": "gymnast",
    "question": "Which hometowns and total points of gymnasts with a total score greater than 57.5 can be represented in a scatter plot?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngymnast = pd.read_sql(\"SELECT * FROM gymnast\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\ngymnast.columns = gymnast.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Merge the two dataframes\nmerged_df = pd.merge(gymnast, people, left_on='gymnast_id', right_on='people_id')\n\n# Filter the dataframe based on total_points > 57.5\nfiltered_df = merged_df[merged_df['total_points'] > 57.5]\n\n# Create a scatter plot\nplt.scatter(filtered_df['hometown'], filtered_df['total_points'])\nplt.xlabel('Hometown')\nplt.ylabel('Total Points')\nplt.title('Scatter Plot of Total Points vs Hometown')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Give me a bar for what is the code of each role and the number of employees in each role ?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nEmployees.columns = Employees.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\nrole_counts = Employees.groupby('role_code').size()\n\n# Creating a bar plot\nplt.bar(role_counts.index, role_counts.values)\n\n# Adding labels and title\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Employees by Role Code')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "e_government",
    "question": "What is the distribution of party forms in the database, represented by a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nforms = pd.read_sql(\"SELECT * FROM forms\", conn)\nparty_forms = pd.read_sql(\"SELECT * FROM party_forms\", conn)\nforms.columns = forms.columns.str.lower()\nparty_forms.columns = party_forms.columns.str.lower()\n\n# Merge the two dataframes on form_id\nmerged_df = pd.merge(forms, party_forms, on='form_id')\n\n# Group by form_name and count the number of occurrences\ngrouped_df = merged_df.groupby('form_name').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plot the pie chart\nplt.pie(sorted_df['count'], labels=sorted_df['form_name'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "sakila_1",
    "question": "What are the top 10 cities with the most addresses, and how many addresses does each city have? Show the information using a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naddress = pd.read_sql(\"SELECT * FROM address\", conn)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\naddress.columns = address.columns.str.lower()\ncity.columns = city.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(address, city, on='city_id')\n\n# Perform the group by and count operation\ngrouped_df = merged_df.groupby('city').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Select the top 10 cities\ntop_10_cities = sorted_df.head(10)\n\n# Plot the bar chart\nplt.bar(top_10_cities['city'], top_10_cities['count'])\nplt.xlabel('City')\nplt.ylabel('Count')\nplt.title('Top 10 Cities by Count')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "How many missions are there for each fate, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmission = pd.read_sql(\"SELECT * FROM mission\", conn)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nmission.columns = mission.columns.str.lower()\nship.columns = ship.columns.str.lower()\n\n# Joining the mission and ship tables\nmerged_df = pd.merge(mission, ship, on='ship_id')\n\n# Grouping by fate and counting the occurrences\ngrouped_df = merged_df.groupby('fate').size().reset_index(name='count')\n\n# Creating a pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['fate'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "battle_death",
    "question": "Bar chart of the number of date from each date , and rank by the Y-axis from low to high .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nbattle = pd.read_sql(\"SELECT * FROM battle\", conn)\nbattle.columns = battle.columns.str.lower()\n\n# Group by date and count the occurrences\ndate_counts = battle.groupby('date').size().reset_index(name='count')\n\n# Sort by count in ascending order\ndate_counts = date_counts.sort_values('count')\n\n# Plot the bar chart\nplt.bar(date_counts['date'], date_counts['count'])\nplt.xlabel('Date')\nplt.ylabel('Count')\nplt.title('Occurrences by Date')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "What is the total number of different nationalities of all ships ? Give me a bar graph , and sort by the Y-axis from high to low .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Group by nationality and count the occurrences\nnationality_count = ship.groupby('nationality').size().reset_index(name='count')\n\n# Sort by count in descending order\nnationality_count = nationality_count.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(nationality_count['nationality'], nationality_count['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Ships by Nationality')\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "Bar chart x axis away team y axis the number of away team, I want to rank by the y-axis from high to low.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the game table\ngame_df = pd.read_sql(\"SELECT * FROM game\", conn)\n\n# Convert column names to lowercase\ngame_df.columns = game_df.columns.str.lower()\n\n# Perform the SQL query\nresult = game_df.groupby('away_team').size().reset_index(name='count').sort_values('count', ascending=False)\n\n# Create the bar plot\nplt.bar(result['away_team'], result['count'])\nplt.xlabel('Away Team')\nplt.ylabel('Count')\nplt.title('Number of Games by Away Team')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "List the name and count of each product in all orders with a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the tables from the database\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\norder_items = pd.read_sql(\"SELECT * FROM order_items\", conn)\nproducts = pd.read_sql(\"SELECT * FROM products\", conn)\n\n# Convert column names to lowercase\norders.columns = orders.columns.str.lower()\norder_items.columns = order_items.columns.str.lower()\nproducts.columns = products.columns.str.lower()\n\n# Merge the tables\nmerged_data = pd.merge(orders, order_items, on=\"order_id\")\nmerged_data = pd.merge(merged_data, products, on=\"product_id\")\n\n# Group by product name and calculate the sum of counts\ngrouped_data = merged_data.groupby(\"product_name\").size().reset_index(name=\"count\")\n\n# Plot the pie chart\nplt.pie(grouped_data[\"count\"], labels=grouped_data[\"product_name\"], autopct=\"%1.1f%%\")\nplt.axis(\"equal\")\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Give me a bar for what is the code of each role and the number of employees in each role ? , and sort x axis in desc order please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nEmployees.columns = Employees.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\nrole_counts = Employees.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by role_code in descending order\nrole_counts = role_counts.sort_values('role_code', ascending=False)\n\n# Creating a bar plot\nplt.bar(role_counts['role_code'], role_counts['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Employees by Role Code')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Display a bar chart for what is the code of each location and the number of documents in that location?, rank in descending by the y-axis.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the Document_locations table\ndf = pd.read_sql(\"SELECT * FROM Document_locations\", conn)\n\n# Convert column names to lowercase\ndf.columns = df.columns.str.lower()\n\n# Perform the SQL query\nresult = df.groupby('location_code').size().reset_index(name='count').sort_values(by='count', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['location_code'], result['count'])\nplt.xlabel('Location Code')\nplt.ylabel('Count')\nplt.title('Document Locations')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show different types of ships and the average tonnage of ships of each type in a pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Calculate average tonnage by ship type\nship_avg_tonnage = ship.groupby('type')['tonnage'].mean()\n\n# Create a pie chart\nplt.pie(ship_avg_tonnage, labels=ship_avg_tonnage.index, autopct='%1.1f%%')\nplt.title('Average Tonnage by Ship Type')\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "What is the number of their teams in elimination? Draw a bar chart, and list x axis in desc order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"elimination\" table\nelimination_data = pd.read_sql(\"SELECT * FROM elimination\", conn)\n\n# Convert column names to lowercase\nelimination_data.columns = elimination_data.columns.str.lower()\n\n# Perform the SQL query\nteam_counts = elimination_data.groupby('team').size().reset_index(name='count')\nteam_counts = team_counts.sort_values('team', ascending=False)\n\n# Generate the bar plot\nplt.bar(team_counts['team'], team_counts['count'])\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Number of Eliminations by Team')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Return a scatter chart on what are the id of each employee and the number of document destruction authorised by that employee ?",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nDocuments_to_be_destroyed = pd.read_sql(\"SELECT * FROM Documents_to_be_destroyed\", conn)\nDocuments_to_be_destroyed.columns = Documents_to_be_destroyed.columns.str.lower()\n\n# Group by destruction_authorised_by_employee_id and count the number of documents\ngrouped_data = Documents_to_be_destroyed.groupby('destruction_authorised_by_employee_id').size().reset_index(name='count')\n\n# Scatter plot\nplt.scatter(grouped_data['destruction_authorised_by_employee_id'], grouped_data['count'])\nplt.xlabel('Destruction Authorised by Employee ID')\nplt.ylabel('Count')\nplt.title('Number of Documents by Destruction Authorised by Employee ID')\nplt.show()"
  },
  {
    "db_id": "entertainment_awards",
    "question": "Show the total number from each type , and order y axis in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nartwork = pd.read_sql(\"SELECT * FROM artwork\", conn)\nartwork.columns = artwork.columns.str.lower()\n\n# Group the artwork by type and count the number of occurrences\nartwork_counts = artwork.groupby('type').size().reset_index(name='count')\n\n# Sort the artwork counts in ascending order\nartwork_counts = artwork_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(artwork_counts['type'], artwork_counts['count'])\n\n# Set the x-axis label\nplt.xlabel('Type')\n\n# Set the y-axis label\nplt.ylabel('Count')\n\n# Set the title of the plot\nplt.title('Artwork Count by Type')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "soccer_1",
    "question": ", show preferred_foot in descending order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read data from the Player_Attributes table\nplayer_attributes = pd.read_sql(\"SELECT * FROM Player_Attributes\", conn)\n\n# Convert column names to lowercase\nplayer_attributes.columns = player_attributes.columns.str.lower()\n\n# Filter data where overall_rating > 80\nfiltered_data = player_attributes[player_attributes['overall_rating'] > 80]\n\n# Group data by preferred_foot and count the number of records\ngrouped_data = filtered_data.groupby('preferred_foot').size().reset_index(name='count')\n\n# Sort data by preferred_foot in descending order\nsorted_data = grouped_data.sort_values('preferred_foot', ascending=False)\n\n# Create a bar plot\nplt.bar(sorted_data['preferred_foot'], sorted_data['count'])\nplt.xlabel('Preferred Foot')\nplt.ylabel('Count')\nplt.title('Number of Players with Overall Rating > 80 by Preferred Foot')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "question": "How many employees does each role have? List role id and number of employees in a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the ROLES table\nroles_df = pd.read_sql(\"SELECT * FROM ROLES\", conn)\n\n# Read the Employees table\nemployees_df = pd.read_sql(\"SELECT * FROM Employees\", conn)\n\n# Convert column names to lowercase\nroles_df.columns = roles_df.columns.str.lower()\nemployees_df.columns = employees_df.columns.str.lower()\n\n# merge the two tables on role_code\nmerged_df = pd.merge(roles_df, employees_df, on='role_code')\n\n# group by role_code and count the number of occurrences\ngrouped_df = merged_df.groupby('role_code').size().reset_index(name='count')\n\n# plot the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['role_code'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()\n"
  },
  {
    "db_id": "document_management",
    "question": "Bar graph to show the total number from different role code , and rank X-axis in ascending order please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nusers = pd.read_sql(\"SELECT * FROM users\", conn)\nusers.columns = users.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\nrole_counts = users.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by role_code in ascending order\nrole_counts = role_counts.sort_values('role_code')\n\n# Creating the bar plot\nplt.bar(role_counts['role_code'], role_counts['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Users by Role Code')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Find dates and attendance for exhibitions that happened in 2004, show me the attendance by date with a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the exhibition_record table\nexhibition_record = pd.read_sql(\"SELECT * FROM exhibition_record\", conn)\nexhibition_record.columns = map(str.lower, exhibition_record.columns)\n\n# Read the exhibition table\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nexhibition.columns = map(str.lower, exhibition.columns)\n\n# Merge the two tables based on exhibition_id\nmerged_data = pd.merge(exhibition_record, exhibition, on=\"exhibition_id\")\n\n# Filter the data for year 2004\nfiltered_data = merged_data[merged_data[\"year\"] == 2004]\n\n# Plot the bar chart\nplt.bar(filtered_data[\"date\"], filtered_data[\"attendance\"])\nplt.xlabel(\"Date\")\nplt.ylabel(\"Attendance\")\nplt.title(\"Exhibition Attendance in 2004\")\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "Can you create a pie chart to display the distribution of order counts for each customer?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\ncustomers.columns = customers.columns.str.lower()\norders.columns = orders.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(customers, orders, on='customer_id')\n\n# Group by customer_name and count the number of orders\ngrouped_df = merged_df.groupby('customer_name').size().reset_index(name='order_count')\n\n# Plot the pie chart\nplt.pie(grouped_df['order_count'], labels=grouped_df['customer_name'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "Which club has the largest proportion of female students, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nstudent = pd.read_sql(\"SELECT * FROM student\", conn)\nclub.columns = club.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\nstudent.columns = student.columns.str.lower()\n\n# Perform the SQL query\nresult = pd.merge(pd.merge(club, member_of_club, on='clubid'), student, on='stuid')\nresult = result[result['sex'] == 'F']\nresult = result.groupby('clubname').size().reset_index(name='female_count')\n\n# Create the pie chart\nplt.pie(result['female_count'], labels=result['clubname'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Show the chart\nplt.show()"
  },
  {
    "db_id": "e_government",
    "question": "What is the count of each service name in the party_services table displayed in a scatter chart?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nservices = pd.read_sql(\"SELECT * FROM services\", conn)\nparty_services = pd.read_sql(\"SELECT * FROM party_services\", conn)\nservices.columns = services.columns.str.lower()\nparty_services.columns = party_services.columns.str.lower()\n\n# Join the two tables\nmerged_df = pd.merge(services, party_services, on='service_id')\n\n# Group by service_name and count the occurrences\ngrouped_df = merged_df.groupby('service_name').size().reset_index(name='count')\n\n# Scatter plot\nplt.scatter(grouped_df['service_name'], grouped_df['count'])\nplt.xlabel('Service Name')\nplt.ylabel('Count')\nplt.title('Count of Services')\nplt.show()"
  },
  {
    "db_id": "college_3",
    "question": "Show me a bar chart of the names of courses that have at least five enrollments and the corresponding number of enrollments for each course.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nCOURSE = pd.read_sql(\"SELECT * FROM COURSE\", conn)\nENROLLED_IN = pd.read_sql(\"SELECT * FROM ENROLLED_IN\", conn)\nCOURSE.columns = COURSE.columns.str.lower()\nENROLLED_IN.columns = ENROLLED_IN.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(COURSE, ENROLLED_IN, on='cid')\n\n# Group by course and count the number of enrollments\nenrollment_count = merged_df.groupby('cname').size()\n\n# Filter courses with enrollment count >= 5\nfiltered_count = enrollment_count[enrollment_count >= 5]\n\n# Plot the bar chart\nplt.bar(filtered_count.index, filtered_count.values)\nplt.xlabel('Course')\nplt.ylabel('Enrollment Count')\nplt.title('Enrollment Count for Courses with 5 or more enrollments')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "insurance_and_eClaims",
    "question": "Compute the total the total number across policy type code as a pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\npolicies = pd.read_sql(\"SELECT * FROM policies\", conn)\npolicies.columns = policies.columns.str.lower()\n\n# Group by policy_type_code and count the number of occurrences\npolicy_counts = policies.groupby('policy_type_code').size().reset_index(name='count')\n\n# Plotting a pie chart\nplt.pie(policy_counts['count'], labels=policy_counts['policy_type_code'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "Can you create a scatter chart displaying the names of pilots and the models of aircraft they have flown with?",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npilot_record = pd.read_sql(\"SELECT * FROM pilot_record\", conn)\naircraft = pd.read_sql(\"SELECT * FROM aircraft\", conn)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot_record.columns = pilot_record.columns.str.lower()\naircraft.columns = aircraft.columns.str.lower()\npilot.columns = pilot.columns.str.lower()\n\n# Merge the tables\nmerged_df = pd.merge(pilot_record, aircraft, on='aircraft_id')\nmerged_df = pd.merge(merged_df, pilot, on='pilot_id')\n\n# Create a scatter plot\nplt.scatter(merged_df['pilot_name'], merged_df['model'])\nplt.xlabel('Pilot Name')\nplt.ylabel('Aircraft Model')\nplt.title('Pilot vs Aircraft Model')\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "Who is the nurse with the fewest appointments, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nnurse = pd.read_sql(\"SELECT * FROM nurse\", conn)\nappointment = pd.read_sql(\"SELECT * FROM appointment\", conn)\nnurse.columns = nurse.columns.str.lower()\nappointment.columns = appointment.columns.str.lower()\n\n# Merge nurse and appointment tables\nmerged_df = pd.merge(nurse, appointment, left_on='employeeid', right_on='prepnurse')\n\n# Group by nurse name and count the number of appointments\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Sort the dataframe by count in ascending order\nsorted_df = grouped_df.sort_values('count')\n\n# Create bar plot\nplt.bar(sorted_df['name'], sorted_df['count'])\nplt.xlabel('Nurse Name')\nplt.ylabel('Number of Appointments')\nplt.title('Number of Appointments per Nurse')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "what are the event details of the services that have the type code 'Marriage', and count them by a bar chart, and show from high to low by the bars.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the EVENTS table\nevents = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\nevents.columns = map(str.lower, events.columns)\n\n# Read the Services table\nservices = pd.read_sql(\"SELECT * FROM Services\", conn)\nservices.columns = map(str.lower, services.columns)\n\n# Merge the EVENTS and Services tables on Service_ID\nmerged_data = pd.merge(events, services, on=\"service_id\")\n\n# Filter the merged data for Service_Type_Code = 'Marriage'\nfiltered_data = merged_data[merged_data[\"service_type_code\"] == \"Marriage\"]\n\n# Group by Event_Details and count the occurrences\ngrouped_data = filtered_data.groupby(\"event_details\").size().reset_index(name=\"count\")\n\n# Sort the grouped data by Event_Details in descending order\nsorted_data = grouped_data.sort_values(\"event_details\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"event_details\"], sorted_data[\"count\"])\nplt.xlabel(\"Event Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Event Details for Marriage Services\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "Draw a bar chart for what are the different nationalities of pilots? Show each nationality and the number of pilots of each nationality.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the pilot table\npilot_df = pd.read_sql(\"SELECT * FROM pilot\", conn)\n\n# Convert column names to lowercase\npilot_df.columns = pilot_df.columns.str.lower()\n\n# Perform the SQL query\nresult = pilot_df.groupby('nationality').size().reset_index(name='count')\n\n# Generate the bar chart\nplt.bar(result['nationality'], result['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Pilots by Nationality')\n\n# Show the chart\nplt.show()"
  },
  {
    "db_id": "small_bank_1",
    "question": "How many accounts have a higher checking balance than their corresponding saving balance, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\nsavings = pd.read_sql(\"SELECT * FROM savings\", conn)\naccounts.columns = accounts.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\nsavings.columns = savings.columns.str.lower()\n\n# Merge tables\nmerged = pd.merge(accounts, checking, on='custid')\nmerged = pd.merge(merged, savings, on='custid')\n\n# Create a new column 'category' based on the condition\nmerged['category'] = merged.apply(lambda row: 'higher checking balance' if row['balance_x'] > row['balance_y'] else 'not higher checking balance', axis=1)\n\n# Group by 'category' and count the occurrences\ngrouped = merged.groupby('category').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped['count'], labels=grouped['category'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "What are the top 5 states or counties with the highest number of stores in the marketing region code \"CA\" shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nAddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\nStores = pd.read_sql(\"SELECT * FROM Stores\", conn)\nAddresses.columns = Addresses.columns.str.lower()\nStores.columns = Stores.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(Addresses, Stores, on='address_id')\n\n# Filtering the data\nfiltered_df = merged_df[merged_df['marketing_region_code'] == 'CA']\n\n# Grouping and counting\ngrouped_df = filtered_df.groupby('state_county').size().reset_index(name='count')\n\n# Sorting and selecting top 5\ntop_5_df = grouped_df.sort_values('count', ascending=False).head(5)\n\n# Creating the bar plot\nplt.bar(top_5_df['state_county'], top_5_df['count'])\nplt.xlabel('State County')\nplt.ylabel('Count')\nplt.title('Top 5 State Counties with Highest Count')\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "How much in total does customer with first name as Carole and last name as Bernhard paid, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nCustomer_Payments = pd.read_sql(\"SELECT * FROM Customer_Payments\", conn)\nCustomers = pd.read_sql(\"SELECT * FROM Customers\", conn)\nCustomer_Payments = pd.read_sql(\"SELECT * FROM Customer_Payments\", conn)\nCustomers = pd.read_sql(\"SELECT * FROM Customers\", conn)\nCustomer_Payments.columns = Customer_Payments.columns.str.lower()\nCustomers.columns = Customers.columns.str.lower()\nCustomer_Payments.columns = Customer_Payments.columns.str.lower()\nCustomers.columns = Customers.columns.str.lower()\n\n# Perform the SQL query\ndf = pd.merge(Customer_Payments, Customers, on='customer_id')\ncarole_df = df[(df['first_name'] == 'carole') & (df['last_name'] == 'bernhard')]\nother_df = df[(df['first_name'] != 'carole') | (df['last_name'] != 'bernhard')]\n\n# Calculate the total payment for Carole Bernhard\ncarole_total_payment = carole_df['amount_payment'].sum()\n\n# Calculate the total payment for other customers\nother_total_payment = other_df['amount_payment'].sum()\n\n# Create a dataframe for the pie chart\ndata = {'name': ['carole bernhard', 'other customers'],\n        'total_payment': [carole_total_payment, other_total_payment]}\ndf_pie = pd.DataFrame(data)\n\n# Create the pie chart\nplt.pie(df_pie['total_payment'], labels=df_pie['name'], autopct='%1.1f%%')\nplt.title('Payment Distribution')\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "What is the number of entry descriptions of each problem ?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nproblem_log = pd.read_sql(\"SELECT * FROM problem_log\", conn)\nproblem_log.columns = problem_log.columns.str.lower()\n\n# Grouping the data by log_entry_description and counting the occurrences\ngrouped_data = problem_log.groupby('log_entry_description').size().reset_index(name='count')\n\n# Creating the bar plot\nplt.bar(grouped_data['log_entry_description'], grouped_data['count'])\nplt.xlabel('Log Entry Description')\nplt.ylabel('Count')\nplt.title('Occurrences of Log Entry Descriptions')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Show me a bar chart displaying the service type description and the count of services for each service type that offers both the photo and film products.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRef_Service_Types = pd.read_sql(\"SELECT * FROM Ref_Service_Types\", conn)\nServices = pd.read_sql(\"SELECT * FROM Services\", conn)\nRef_Service_Types.columns = Ref_Service_Types.columns.str.lower()\nServices.columns = Services.columns.str.lower()\n\n# Joining the tables\ndf = pd.merge(Ref_Service_Types, Services, on='service_type_code')\n\n# Filtering the data\ndf_filtered = df[df['product_name'].isin(['photo', 'film'])]\n\n# Grouping and counting\ndf_grouped = df_filtered.groupby('service_type_description').size().reset_index(name='count')\n\n# Sorting the data\ndf_sorted = df_grouped.sort_values('count', ascending=True)\n\n# Plotting the bar chart\nplt.bar(df_sorted['service_type_description'], df_sorted['count'])\nplt.xlabel('Service Type Description')\nplt.ylabel('Count')\nplt.title('Count of Services by Service Type Description')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death, show me the dates active and the total number of deaths with a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the storm table into a pandas DataFrame\nstorm_df = pd.read_sql(\"SELECT * FROM storm\", conn)\n\n# Convert column names to lowercase\nstorm_df.columns = storm_df.columns.str.lower()\n\n# Filter the DataFrame for rows where number_deaths is greater than or equal to 1\nfiltered_df = storm_df[storm_df['number_deaths'] >= 1]\n\n# Create a bar plot of Dates_active vs Number_Deaths\nplt.bar(filtered_df['dates_active'], filtered_df['number_deaths'])\nplt.xlabel('Dates Active')\nplt.ylabel('Number of Deaths')\nplt.title('Number of Deaths by Dates Active')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show me the comparison of the total number of every ship type with a bar graph , and display in desc by the Y-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Group by 'type' and count the occurrences\nship_count = ship.groupby('type').size().reset_index(name='count')\n\n# Sort by count in descending order\nship_count = ship_count.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(ship_count['type'], ship_count['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Ship Type Count')\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Visualize a bar chart for how many authors submit to the workshop , order total number from low to high order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nsubmission = pd.read_sql(\"SELECT * FROM submission\", conn)\nsubmission.columns = submission.columns.str.lower()\n\n# Group by author and count the number of submissions\nauthor_counts = submission.groupby('author').size().reset_index(name='count')\n\n# Sort the author counts in ascending order\nauthor_counts = author_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(author_counts['author'], author_counts['count'])\nplt.xlabel('Author')\nplt.ylabel('Count')\nplt.title('Number of Submissions by Author')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "battle_death",
    "question": "A bar chart listing the number of battle date, and sort total number from low to high order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the battle table\nbattle_df = pd.read_sql(\"SELECT * FROM battle\", conn)\n\n# Convert column names to lowercase\nbattle_df.columns = battle_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = battle_df.groupby('date').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result_df['date'], result_df['count'])\nplt.xlabel('Date')\nplt.ylabel('Count')\nplt.title('Number of Battles per Date')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "college_3",
    "question": "Show me a bar chart displaying the number of students minoring in each department.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDEPARTMENT = pd.read_sql(\"SELECT * FROM DEPARTMENT\", conn)\nDEPARTMENT = pd.read_sql(\"SELECT * FROM DEPARTMENT\", conn)\nMINOR_IN = pd.read_sql(\"SELECT * FROM MINOR_IN\", conn)\nDEPARTMENT.columns = DEPARTMENT.columns.str.lower()\nDEPARTMENT.columns = DEPARTMENT.columns.str.lower()\nMINOR_IN.columns = MINOR_IN.columns.str.lower()\n\n# Perform the SQL query\nquery_result = pd.merge(DEPARTMENT, MINOR_IN, on='dno', how='left')\nquery_result = query_result.groupby('dname').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(query_result['dname'], query_result['count'])\nplt.xlabel('Department Name')\nplt.ylabel('Count')\nplt.title('Number of Students in Each Department')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "What are the different role codes for users , and how many users have each Show bar chart , and rank in desc by the bars .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nusers = pd.read_sql(\"SELECT * FROM users\", conn)\nusers.columns = users.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\ngrouped_data = users.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by role_code in descending order\nsorted_data = grouped_data.sort_values('role_code', ascending=False)\n\n# Creating the bar plot\nplt.bar(sorted_data['role_code'], sorted_data['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Users by Role Code')\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "Show how many shops in each carrier with a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the tables from the database\nstock = pd.read_sql(\"SELECT * FROM stock\", conn)\ndevice = pd.read_sql(\"SELECT * FROM device\", conn)\nshop = pd.read_sql(\"SELECT * FROM shop\", conn)\n\n# Convert column names to lowercase\nstock.columns = stock.columns.str.lower()\ndevice.columns = device.columns.str.lower()\nshop.columns = shop.columns.str.lower()\n\n# Merge the tables\nmerged_data = pd.merge(stock, device, on=\"device_id\")\nmerged_data = pd.merge(merged_data, shop, on=\"shop_id\")\n\n# Perform the query and group by carrier\ngrouped_data = merged_data.groupby(\"carrier\").size()\n\n# Plot the pie chart\nplt.pie(grouped_data, labels=grouped_data.index, autopct=\"%1.1f%%\")\nplt.title(\"Distribution of Carriers\")\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "List the name and the number of stations for all the cities that have at least 15 stations with a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"station\" table\nstation_data = pd.read_sql(\"SELECT * FROM station\", conn)\n\n# Convert column names to lowercase\nstation_data.columns = station_data.columns.str.lower()\n\n# Perform the SQL query\nresult = station_data.groupby('city').size()\n\n# Plot the bar chart\nplt.bar(result.index, result.values)\nplt.xlabel('City')\nplt.ylabel('Count')\nplt.title('Number of Stations in Each City')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "How many storms occured in each region Visualize by bar chart, and could you display the total number from low to high order?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the region and affected_region tables\nregion = pd.read_sql(\"SELECT * FROM region\", conn)\naffected_region = pd.read_sql(\"SELECT * FROM affected_region\", conn)\n\n# Convert column names to lowercase\nregion.columns = region.columns.str.lower()\naffected_region.columns = affected_region.columns.str.lower()\n\n# Merge the region and affected_region tables on region_id\nmerged_data = pd.merge(region, affected_region, on=\"region_id\")\n\n# Group by region_name and count the number of occurrences\ngrouped_data = merged_data.groupby(\"region_name\").size().reset_index(name=\"count\")\n\n# Sort the data by count in ascending order\nsorted_data = grouped_data.sort_values(\"count\")\n\n# Plot the bar chart\nplt.bar(sorted_data[\"region_name\"], sorted_data[\"count\"])\nplt.xlabel(\"Region Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Occurrences by Region\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "What are the names and ages of artists ? Show the result in a bar graph , list y axis in descending order .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Assuming the data is already loaded into the 'artist' dataframe\n\n# Sort the dataframe by age in descending order\nsorted_artist = artist.sort_values(by='age', ascending=False)\n\n# Extract the name and age columns\nname = sorted_artist['name']\nage = sorted_artist['age']\n\n# Create a bar plot\nplt.bar(name, age)\n\n# Set the x-axis label\nplt.xlabel('Name')\n\n# Set the y-axis label\nplt.ylabel('Age')\n\n# Set the title of the plot\nplt.title('Artist Age')\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Show me a bar chart of the names and ids of stations that had an average availability of more than 14 bikes or were installed in December.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstatus = pd.read_sql(\"SELECT * FROM status\", conn)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstation.columns = station.columns.str.lower()\nstatus.columns = status.columns.str.lower()\nstation.columns = station.columns.str.lower()\n\n# Joining station and status tables\nmerged_df = pd.merge(station, status, left_on='id', right_on='station_id')\n\n# Grouping by station_id and filtering by average bikes_available > 14\ngrouped_df = merged_df.groupby('station_id').filter(lambda x: x['bikes_available'].mean() > 14)\n\n# Selecting name and id columns from the filtered dataframe\nfiltered_df = grouped_df[['name', 'id']]\n\n# Filtering stations with installation_date starting with '12/'\nfiltered_df = pd.concat([filtered_df, station[station['installation_date'].str.startswith('12/')][['name', 'id']]])\n\n# Plotting the bar chart\nplt.bar(filtered_df['name'], filtered_df['id'])\nplt.xlabel('Station Name')\nplt.ylabel('Station ID')\nplt.title('Stations with Average Bikes Available > 14 and Installation Date starting with 12/')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "Show the number of games for each away team in a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the game table\ngame_df = pd.read_sql(\"SELECT * FROM game\", conn)\n\n# Convert column names to lowercase\ngame_df.columns = game_df.columns.str.lower()\n\n# Perform the SQL query\nresult = game_df.groupby('away_team').size()\n\n# Plot the pie chart\nplt.pie(result, labels=result.index, autopct='%1.1f%%')\nplt.title('Away Team Distribution')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "What is the employee id and role name for all employees with the role name \"Human Resource\" or \"Manager\" displayed in a scatter chart?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nROLES = pd.read_sql(\"SELECT * FROM ROLES\", conn)\nEmployees.columns = Employees.columns.str.lower()\nROLES.columns = ROLES.columns.str.lower()\n\n# Merge Employees and ROLES dataframes\nmerged_df = pd.merge(Employees, ROLES, left_on='role_code', right_on='role_code')\n\n# Filter the merged dataframe for role_name 'human resource' or 'manager'\nfiltered_df = merged_df[(merged_df['role_name'] == 'Human Resource') | (merged_df['role_name'] == 'Manager')]\n\n# Create scatter plot\nplt.scatter(filtered_df['employee_id'], filtered_df['role_name'])\nplt.xlabel('Employee ID')\nplt.ylabel('Role Name')\nplt.title('Scatter Plot of Employee ID vs Role Name')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "What is the workshop group ID and count of services with product name \"film\" for each workshop group? Show the results in a bar chart, sorted in descending order of count.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDrama_Workshop_Groups = pd.read_sql(\"SELECT * FROM Drama_Workshop_Groups\", conn)\nServices = pd.read_sql(\"SELECT * FROM Services\", conn)\nDrama_Workshop_Groups.columns = Drama_Workshop_Groups.columns.str.lower()\nServices.columns = Services.columns.str.lower()\n\n# Merge Drama_Workshop_Groups and Services on workshop_group_id\nmerged_df = pd.merge(Drama_Workshop_Groups, Services, on='workshop_group_id')\n\n# Filter rows where product_name is \"film\"\nfiltered_df = merged_df[merged_df['product_name'] == 'film']\n\n# Group by workshop_group_id and count the number of occurrences\ngrouped_df = filtered_df.groupby('workshop_group_id').size().reset_index(name='count')\n\n# Sort by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['workshop_group_id'], sorted_df['count'])\nplt.xlabel('Workshop Group ID')\nplt.ylabel('Count')\nplt.title('Number of Occurrences of Workshop Group ID for Film')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "What are the various outcomes of the missions involving ships from the United States, and how many missions fall into each category? Show the data using a bar chart.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nmission = pd.read_sql(\"SELECT * FROM mission\", conn)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nmission.columns = mission.columns.str.lower()\nship.columns = ship.columns.str.lower()\n\n# Joining the mission and ship tables\nmerged_df = pd.merge(mission, ship, on='ship_id')\n\n# Filtering the data for ships with nationality as 'United States'\nfiltered_df = merged_df[merged_df['nationality'] == 'United States']\n\n# Grouping the data by fate and counting the occurrences\ngrouped_df = filtered_df.groupby('fate').size().reset_index(name='count')\n\n# Sorting the data by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plotting the bar chart\nplt.bar(sorted_df['fate'], sorted_df['count'])\nplt.xlabel('Fate')\nplt.ylabel('Count')\nplt.title('Number of Missions by Fate for Ships with Nationality as United States')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death , show me the name and the total number of deaths with a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm.columns = storm.columns.str.lower()\n\n# Assuming storm is a DataFrame containing the table data\n\n# Filter the DataFrame to include only rows where number_deaths >= 1\nfiltered_storm = storm[storm['number_deaths'] >= 1]\n\n# Create a bar plot of name vs number_deaths\nplt.bar(filtered_storm['name'], filtered_storm['number_deaths'])\nplt.xlabel('Name')\nplt.ylabel('Number of Deaths')\nplt.title('Storms with Number of Deaths >= 1')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tvshow",
    "question": "List each language and the number of TV Channels using it in a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the TV_Channel table\ntv_channel = pd.read_sql(\"SELECT * FROM TV_Channel\", conn)\n\n# Convert column names to lowercase\ntv_channel.columns = tv_channel.columns.str.lower()\n\n# Perform the SQL query\nresult = tv_channel.groupby('language').size().reset_index(name='count')\n\n# Generate the bar chart\nplt.bar(result['language'], result['count'])\nplt.xlabel('Language')\nplt.ylabel('Count')\nplt.title('Number of TV Channels by Language')\n\n# Show the bar chart\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "Show me a bar chart of the product id and the count of problems reported after 1986-11-13 for each product, ranked in descending order of the count.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nproblems = pd.read_sql(\"SELECT * FROM problems\", conn)\nproduct = pd.read_sql(\"SELECT * FROM product\", conn)\nproblems.columns = problems.columns.str.lower()\nproduct.columns = product.columns.str.lower()\n\n# Merge problems and product tables\nmerged_df = pd.merge(problems, product, on='product_id')\n\n# Filter data based on date_problem_reported\nfiltered_df = merged_df[merged_df['date_problem_reported'] > '1986-11-13']\n\n# Group by product_id and count the number of occurrences\ngrouped_df = filtered_df.groupby('product_id').size().reset_index(name='count')\n\n# Sort by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['product_id'], sorted_df['count'])\nplt.xlabel('Product ID')\nplt.ylabel('Count')\nplt.title('Number of Problems Reported by Product')\nplt.show()"
  },
  {
    "db_id": "college_3",
    "question": "What is the count of courses with the name INTRODUCTION TO COMPUTER SCIENCE in each department's room, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nCOURSE = pd.read_sql(\"SELECT * FROM COURSE\", conn)\nDEPARTMENT = pd.read_sql(\"SELECT * FROM DEPARTMENT\", conn)\nCOURSE.columns = COURSE.columns.str.lower()\nDEPARTMENT.columns = DEPARTMENT.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(COURSE, DEPARTMENT, on='dno')\n\n# Filter the data based on the course name\nfiltered_df = merged_df[merged_df['cname'] == 'INTRODUCTION TO COMPUTER SCIENCE']\n\n# Group the data by room and count the number of occurrences\ngrouped_df = filtered_df.groupby('room').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['room'], grouped_df['count'])\nplt.xlabel('Room')\nplt.ylabel('Count')\nplt.title('Number of students in each room for \"Introduction to Computer Science\" course')\nplt.show()"
  },
  {
    "db_id": "products_for_hire",
    "question": "Take the first name of all the good customers as the X-axis and gender of all the good customers as Y-axis in a bar chart, list by the Y in asc.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the customers table\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\n\n# Convert column names to lowercase\ncustomers.columns = customers.columns.str.lower()\n\n# Filter the customers table for good customers\ngood_customers = customers[customers['good_or_bad_customer'] == 'good']\n\n# Sort the good customers by gender\nsorted_customers = good_customers.sort_values('gender_mf')\n\n# Create a bar plot of first_name and gender_mf\nplt.bar(sorted_customers['first_name'], sorted_customers['gender_mf'])\n\n# Set the x-axis label\nplt.xlabel('First Name')\n\n# Set the y-axis label\nplt.ylabel('Gender')\n\n# Set the title of the plot\nplt.title('Good Customers by Gender')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "e_government",
    "question": "Which party has utilized the services the most number of times, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nparties = pd.read_sql(\"SELECT * FROM parties\", conn)\nparty_services = pd.read_sql(\"SELECT * FROM party_services\", conn)\nparties.columns = parties.columns.str.lower()\nparty_services.columns = party_services.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(parties, party_services, left_on='party_id', right_on='customer_id')\n\n# Grouping by party_email and counting the occurrences\ngrouped_df = merged_df.groupby('party_email').size().reset_index(name='count')\n\n# Sorting by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plotting the bar chart\nplt.bar(sorted_df['party_email'], sorted_df['count'])\nplt.xlabel('Party Email')\nplt.ylabel('Count')\nplt.title('Number of Services per Party Email')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "Draw a bar chart for how many medications are prescribed for each brand?, rank in descending by the y axis.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the medication and prescribes tables\nmedication = pd.read_sql(\"SELECT * FROM medication\", conn)\nprescribes = pd.read_sql(\"SELECT * FROM prescribes\", conn)\n\n# Convert column names to lowercase\nmedication.columns = medication.columns.str.lower()\nprescribes.columns = prescribes.columns.str.lower()\n\n# Perform the join and group by brand\nmerged_data = pd.merge(medication, prescribes, left_on=\"code\", right_on=\"medication\")\ngrouped_data = merged_data.groupby(\"brand\").size().reset_index(name=\"count\")\n\n# Sort the data by count in descending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=False)\n\n# Generate the bar plot\nplt.bar(sorted_data[\"brand\"], sorted_data[\"count\"])\nplt.xlabel(\"Brand\")\nplt.ylabel(\"Count\")\nplt.title(\"Medication Count by Brand\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "icfp_1",
    "question": "Show me a bar chart displaying the count of papers written by each author.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nauthors = pd.read_sql(\"SELECT * FROM authors\", conn)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\npapers = pd.read_sql(\"SELECT * FROM papers\", conn)\nauthors.columns = authors.columns.str.lower()\nauthorship.columns = authorship.columns.str.lower()\npapers.columns = papers.columns.str.lower()\n\n# Perform the join operation\nmerged_data = pd.merge(pd.merge(authors, authorship, on='authid'), papers, on='paperid')\n\n# Group by lname and count the number of titles\ngrouped_data = merged_data.groupby('lname').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_data['lname'], grouped_data['count'])\nplt.xlabel('Last Name')\nplt.ylabel('Count')\nplt.title('Number of Titles by Last Name')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Find dates and attendance for exhibitions that happened in 2004, show me the comparison of attendance by date, could you list y-axis in desc order?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the exhibition_record table\nexhibition_record = pd.read_sql(\"SELECT * FROM exhibition_record\", conn)\nexhibition_record.columns = map(str.lower, exhibition_record.columns)\n\n# Read the exhibition table\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nexhibition.columns = map(str.lower, exhibition.columns)\n\n# Merge the two tables based on exhibition_id\nmerged_data = pd.merge(exhibition_record, exhibition, on=\"exhibition_id\")\n\n# Filter the data for year 2004\nfiltered_data = merged_data[merged_data[\"year\"] == 2004]\n\n# Sort the data by attendance in descending order\nsorted_data = filtered_data.sort_values(by=\"attendance\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"date\"], sorted_data[\"attendance\"])\nplt.xlabel(\"Date\")\nplt.ylabel(\"Attendance\")\nplt.title(\"Exhibition Attendance in 2004\")\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "On a line chart, please display the placement date of the order with invoice number 10 and the corresponding number of orders placed on that date.",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\nshipments = pd.read_sql(\"SELECT * FROM shipments\", conn)\norders.columns = orders.columns.str.lower()\nshipments.columns = shipments.columns.str.lower()\n\n# Merge orders and shipments dataframes\nmerged_df = pd.merge(orders, shipments, on='order_id')\n\n# Filter the merged dataframe for invoice_number = 10\nfiltered_df = merged_df[merged_df['invoice_number'] == 10]\n\n# Group by date_order_placed and count the number of rows\ngrouped_df = filtered_df.groupby('date_order_placed').size().reset_index(name='count')\n\n# Plot the line chart\nplt.plot(grouped_df['date_order_placed'], grouped_df['count'])\nplt.xlabel('Date Order Placed')\nplt.ylabel('Count')\nplt.title('Number of Orders Placed on Each Date')\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "Can you create a pie chart displaying the distribution of orders among each customer?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\ncustomers.columns = customers.columns.str.lower()\norders.columns = orders.columns.str.lower()\n\n# Perform the join operation\nmerged_data = pd.merge(customers, orders, on='customer_id')\n\n# Group by customer_name and count the number of orders\ngrouped_data = merged_data.groupby('customer_name').size().reset_index(name='order_count')\n\n# Create a pie chart\nplt.pie(grouped_data['order_count'], labels=grouped_data['customer_name'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Display the chart\nplt.show()"
  },
  {
    "db_id": "browser_web",
    "question": "Find the number of web accelerators used for each Operating system , and I want to rank x-axis from high to low order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nweb_client_accelerator = pd.read_sql(\"SELECT * FROM web_client_accelerator\", conn)\nweb_client_accelerator.columns = web_client_accelerator.columns.str.lower()\n\n# Group by operating_system and count the occurrences\noperating_system_counts = web_client_accelerator.groupby('operating_system').size().reset_index(name='count')\n\n# Sort the counts by operating_system in descending order\noperating_system_counts = operating_system_counts.sort_values('operating_system', ascending=False)\n\n# Create a bar plot\nplt.bar(operating_system_counts['operating_system'], operating_system_counts['count'])\nplt.xlabel('Operating System')\nplt.ylabel('Count')\nplt.title('Number of Clients by Operating System')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Show all cities along with the number of drama workshop groups in each city with a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Addresses table\naddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\naddresses.columns = map(str.lower, addresses.columns)\n\n# Read the Drama_Workshop_Groups table\ndrama_workshop_groups = pd.read_sql(\"SELECT * FROM Drama_Workshop_Groups\", conn)\ndrama_workshop_groups.columns = map(str.lower, drama_workshop_groups.columns)\n\n# Merge the two tables on Address_ID\nmerged_data = pd.merge(addresses, drama_workshop_groups, on=\"address_id\")\n\n# Group by City_Town and count the number of occurrences\ngrouped_data = merged_data.groupby(\"city_town\").size().reset_index(name=\"count\")\n\n# Plot the bar chart\nplt.bar(grouped_data[\"city_town\"], grouped_data[\"count\"])\nplt.xlabel(\"City/Town\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Drama Workshop Groups in Each City/Town\")\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "Please compare the frequency of the position of the pilots using a bar chart , and could you order by the bars from high to low ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot.columns = pilot.columns.str.lower()\n\n# Group by position and count the number of occurrences\nposition_counts = pilot.groupby('position').size().reset_index(name='count')\n\n# Sort the positions in descending order\nposition_counts = position_counts.sort_values('position', ascending=False)\n\n# Create a bar plot\nplt.bar(position_counts['position'], position_counts['count'])\nplt.xlabel('Position')\nplt.ylabel('Count')\nplt.title('Number of Pilots by Position')\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Show the number of venue from each venue , could you list by the Y-axis in asc please ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nworkshop = pd.read_sql(\"SELECT * FROM workshop\", conn)\nworkshop.columns = workshop.columns.str.lower()\n\n# Grouping the data by venue and counting the occurrences\nvenue_counts = workshop.groupby('venue').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nvenue_counts = venue_counts.sort_values('count')\n\n# Creating the bar plot\nplt.bar(venue_counts['venue'], venue_counts['count'])\nplt.xlabel('Venue')\nplt.ylabel('Count')\nplt.title('Workshop Venues')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "question": "Show a bar chart about how many employees does each role have?, sort x-axis from low to high order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ROLES table\nroles_df = pd.read_sql(\"SELECT * FROM ROLES\", conn)\nroles_df.columns = map(str.lower, roles_df.columns)\n\n# Read the Employees table\nemployees_df = pd.read_sql(\"SELECT * FROM Employees\", conn)\nemployees_df.columns = map(str.lower, employees_df.columns)\n\n# Merge the ROLES and Employees tables on role_code\nmerged_df = pd.merge(roles_df, employees_df, on=\"role_code\")\n\n# Group by role_description and count the number of occurrences\ngrouped_df = merged_df.groupby(\"role_description\").size().reset_index(name=\"count\")\n\n# Sort the dataframe by role_description in ascending order\nsorted_df = grouped_df.sort_values(\"role_description\", ascending=True)\n\n# Create a bar plot\nplt.bar(sorted_df[\"role_description\"], sorted_df[\"count\"])\nplt.xlabel(\"Role Description\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Employees by Role Description\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "How many lessons were taught by each staff member whose first name contains the letter 'a' in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nLessons = pd.read_sql(\"SELECT * FROM Lessons\", conn)\nStaff = pd.read_sql(\"SELECT * FROM Staff\", conn)\nLessons.columns = Lessons.columns.str.lower()\nStaff.columns = Staff.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Lessons, Staff, on='staff_id')\n\n# Filter the data based on staff names containing 'a'\nfiltered_df = merged_df[merged_df['first_name'].str.contains('a')]\n\n# Group the data by staff name and count the number of lessons\ngrouped_df = filtered_df.groupby('first_name').size().reset_index(name='num_lessons')\n\n# Plot the bar chart\nplt.bar(grouped_df['first_name'], grouped_df['num_lessons'])\nplt.xlabel('Staff Name')\nplt.ylabel('Number of Lessons')\nplt.title('Number of Lessons by Staff Name')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "For all artist names who are not from the United States, show the total number of each year.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the artist table\nartist_df = pd.read_sql(\"SELECT * FROM artist\", conn)\n\n# Convert column names to lowercase\nartist_df.columns = artist_df.columns.str.lower()\n\n# Filter out artists from the United States\nfiltered_df = artist_df[artist_df['country'] != 'United States']\n\n# Group by Year_Join and count the number of artists\ngrouped_df = filtered_df.groupby('year_join').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['year_join'], grouped_df['count'])\nplt.xlabel('Year Joined')\nplt.ylabel('Count')\nplt.title('Number of Artists Joined by Year (excluding United States)')\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Show me a bar chart displaying the number of authors who have submitted to more than one workshop.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nacceptance = pd.read_sql(\"SELECT * FROM acceptance\", conn)\nsubmission = pd.read_sql(\"SELECT * FROM submission\", conn)\nacceptance.columns = acceptance.columns.str.lower()\nsubmission.columns = submission.columns.str.lower()\n\n# Merge acceptance and submission tables\nmerged_df = pd.merge(acceptance, submission, on='submission_id')\n\n# Group by author and count the number of distinct workshop_ids\ngrouped_df = merged_df.groupby('author').agg({'workshop_id': pd.Series.nunique})\n\n# Filter authors with count of distinct workshop_ids greater than 1\nfiltered_df = grouped_df[grouped_df['workshop_id'] > 1]\n\n# Plot the bar chart\nplt.bar(filtered_df.index, filtered_df['workshop_id'])\nplt.xlabel('Author')\nplt.ylabel('Count of Distinct Workshop IDs')\nplt.title('Authors with Multiple Workshop IDs')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "What is the theme and artist name for the exhibition with a bar chart ticket price higher than the average?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nexhibition.columns = exhibition.columns.str.lower()\nartist.columns = artist.columns.str.lower()\nexhibition.columns = exhibition.columns.str.lower()\n\n# Joining exhibition and artist tables\nresult = pd.merge(exhibition, artist, on='artist_id')\n\n# Calculating average ticket price\navg_ticket_price = exhibition['ticket_price'].mean()\n\n# Filtering the data based on ticket price condition\nfiltered_data = result[result['ticket_price'] > avg_ticket_price]\n\n# Grouping the data by theme and artist name\ngrouped_data = filtered_data.groupby(['theme', 'name']).size().reset_index(name='count')\n\n# Plotting the bar chart\nplt.bar(grouped_data['theme'], grouped_data['count'])\nplt.xlabel('Theme')\nplt.ylabel('Count')\nplt.title('Exhibition Theme vs Artist Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Show maximal lat from each city, show total number in descending order please.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"station\" table\nstation_data = pd.read_sql(\"SELECT * FROM station\", conn)\n\n# Convert column names to lowercase\nstation_data.columns = station_data.columns.str.lower()\n\n# Perform the SQL query\nresult = station_data.groupby(\"city\")[\"lat\"].max().reset_index().sort_values(\"lat\", ascending=False)\n\n# Plot the bar chart\nplt.bar(result[\"city\"], result[\"lat\"])\nplt.xlabel(\"City\")\nplt.ylabel(\"Max Latitude\")\nplt.title(\"Max Latitude by City\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "What is the trend in the average number of days held for each team in the elimination, shown in a line chart?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nelimination = pd.read_sql(\"SELECT * FROM elimination\", conn)\nwrestler = pd.read_sql(\"SELECT * FROM wrestler\", conn)\nelimination.columns = elimination.columns.str.lower()\nwrestler.columns = wrestler.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(elimination, wrestler, on='wrestler_id')\n\n# Calculate the average days held per team\navg_days_held = merged_df.groupby('team')['days_held'].mean()\n\n# Create a line plot\nplt.plot(avg_days_held.index, avg_days_held.values)\nplt.xlabel('Team')\nplt.ylabel('Average Days Held')\nplt.title('Average Days Held per Team')\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "For each payment method, how many payments were made Show bar chart, could you display in descending by the bar?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Customer_Payments table\ncustomer_payments = pd.read_sql(\"SELECT * FROM Customer_Payments\", conn)\n\n# Convert column names to lowercase\ncustomer_payments.columns = customer_payments.columns.str.lower()\n\n# Perform the SQL query\npayment_counts = customer_payments.groupby('payment_method_code').size().reset_index(name='count')\npayment_counts = payment_counts.sort_values('payment_method_code', ascending=False)\n\n# Generate the bar chart\nplt.bar(payment_counts['payment_method_code'], payment_counts['count'])\nplt.xlabel('Payment Method Code')\nplt.ylabel('Count')\nplt.title('Payment Method Counts')\nplt.show()"
  },
  {
    "db_id": "perpetrator",
    "question": "What is the count of perpetrators in each country, \"China\" and \"Japan\", represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\nperpetrator = pd.read_sql(\"SELECT * FROM perpetrator\", conn)\npeople.columns = people.columns.str.lower()\nperpetrator.columns = perpetrator.columns.str.lower()\n\n# Merge the two dataframes\nmerged_df = pd.merge(people, perpetrator, on='people_id')\n\n# Filter the data for countries 'China' and 'Japan'\nfiltered_df = merged_df[merged_df['country'].isin(['China', 'Japan'])]\n\n# Group by country and count the occurrences\ngrouped_df = filtered_df.groupby('country').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['country'], sorted_df['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of People by Country (China and Japan)')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show me the comparison of the total number of every ship type with a bar graph .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Group by 'type' and count the occurrences\nship_count = ship.groupby('type').size().reset_index(name='count')\n\n# Create bar plot\nplt.bar(ship_count['type'], ship_count['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Ship Type Count')\nplt.show()"
  },
  {
    "db_id": "twitter_1",
    "question": "Find the name and partition id for users who tweeted less than twice Show bar chart, could you show by the name from high to low?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the user_profiles table\nuser_profiles = pd.read_sql(\"SELECT * FROM user_profiles\", conn)\nuser_profiles.columns = map(str.lower, user_profiles.columns)\n\n# Read the tweets table\ntweets = pd.read_sql(\"SELECT * FROM tweets\", conn)\ntweets.columns = map(str.lower, tweets.columns)\n\n# Merge the user_profiles and tweets tables on uid column\nmerged_data = pd.merge(user_profiles, tweets, on=\"uid\")\n\n# Sort the merged data by name in descending order\nsorted_data = merged_data.sort_values(by=\"name\", ascending=False)\n\n# Create a bar plot of name and partitionid\nplt.bar(sorted_data[\"name\"], sorted_data[\"partitionid\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Partition ID\")\nplt.title(\"Bar Plot of Name and Partition ID\")\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "Which physicians, along with their respective doses, are among the top 10 prescribers with the highest doses, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nphysician = pd.read_sql(\"SELECT * FROM physician\", conn)\nprescribes = pd.read_sql(\"SELECT * FROM prescribes\", conn)\nphysician.columns = physician.columns.str.lower()\nprescribes.columns = prescribes.columns.str.lower()\n\n# Joining physician and prescribes tables\nmerged_df = pd.merge(physician, prescribes, left_on='employeeid', right_on='physician')\n\n# Sorting by dose in descending order and selecting top 10 rows\ntop_10 = merged_df.sort_values('dose', ascending=False).head(10)\n\n# Creating bar plot\nplt.bar(top_10['name'], top_10['dose'])\nplt.xlabel('Physician')\nplt.ylabel('Dose')\nplt.title('Top 10 Physicians by Dose')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Draw a bar chart that counts the number of venues of each workshop , order from high to low by the x-axis please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nworkshop = pd.read_sql(\"SELECT * FROM workshop\", conn)\nworkshop.columns = workshop.columns.str.lower()\n\n# Grouping the data by venue and counting the occurrences\nvenue_counts = workshop.groupby('venue').size().reset_index(name='count')\n\n# Sorting the data by venue in descending order\nvenue_counts = venue_counts.sort_values('venue', ascending=False)\n\n# Creating the bar plot\nplt.bar(venue_counts['venue'], venue_counts['count'])\nplt.xlabel('Venue')\nplt.ylabel('Count')\nplt.title('Workshop Venues')\nplt.show()"
  },
  {
    "db_id": "tvshow",
    "question": "Draw a bar chart for what are 3 most highly rated episodes in the TV series table and what were those ratings ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nTV_series = pd.read_sql(\"SELECT * FROM TV_series\", conn)\nTV_series.columns = TV_series.columns.str.lower()\n\n# Assuming TV_series is a DataFrame containing the table data\n\n# Sort the DataFrame by rating in descending order and select the top 3 rows\ntop_episodes = TV_series.sort_values(by='rating', ascending=False).head(3)\n\n# Extract the episode and rating columns\nepisodes = top_episodes['episode']\nratings = top_episodes['rating']\n\n# Create a bar plot\nplt.bar(episodes, ratings)\n\n# Set the x-axis label\nplt.xlabel('Episode')\n\n# Set the y-axis label\nplt.ylabel('Rating')\n\n# Set the title of the plot\nplt.title('Top 3 Episodes by Rating')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship in a bar chart, I want to display y axis from low to high order.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"singer\" table\nsinger_data = pd.read_sql(\"SELECT * FROM singer\", conn)\n\n# Convert column names to lowercase\nsinger_data.columns = singer_data.columns.str.lower()\n\n# Group by \"citizenship\" and calculate the maximum \"net_worth_millions\"\ngrouped_data = singer_data.groupby('citizenship')['net_worth_millions'].max().reset_index()\n\n# Sort the data by maximum net worth in ascending order\nsorted_data = grouped_data.sort_values('net_worth_millions', ascending=True)\n\n# Create a bar plot\nplt.bar(sorted_data['citizenship'], sorted_data['net_worth_millions'])\nplt.xlabel('Citizenship')\nplt.ylabel('Maximum Net Worth (Millions)')\nplt.title('Maximum Net Worth by Citizenship')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "customer_deliveries",
    "question": "Can you create a bar chart displaying the number of customers living in each state, ordered from highest to lowest?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomer_addresses = pd.read_sql(\"SELECT * FROM customer_addresses\", conn)\naddresses = pd.read_sql(\"SELECT * FROM addresses\", conn)\ncustomer_addresses.columns = customer_addresses.columns.str.lower()\naddresses.columns = addresses.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(customer_addresses, addresses, on='address_id')\n\n# Group by state_province_county and count the number of occurrences\ngrouped_df = merged_df.groupby('state_province_county').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['state_province_county'], sorted_df['count'])\nplt.xlabel('State/Province/County')\nplt.ylabel('Count')\nplt.title('Number of Customers by State/Province/County')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Show me a bar chart displaying the count of stores in each city.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nAddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\nStores = pd.read_sql(\"SELECT * FROM Stores\", conn)\nAddresses.columns = Addresses.columns.str.lower()\nStores.columns = Stores.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Addresses, Stores, on='address_id')\n\n# Group by city_town and count the number of occurrences\ngrouped_df = merged_df.groupby('city_town').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['city_town'], grouped_df['count'])\nplt.xlabel('City/Town')\nplt.ylabel('Count')\nplt.title('Number of Stores in Each City/Town')\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "I want to see trend of the number of season by season , and order by the X-axis in ascending .",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\ngame.columns = game.columns.str.lower()\n\n# Grouping the data by season and counting the number of games in each season\nseason_count = game.groupby('season').size().reset_index(name='count')\n\n# Sorting the data by season in ascending order\nseason_count = season_count.sort_values('season')\n\n# Creating a line plot\nplt.plot(season_count['season'], season_count['count'])\n\n# Adding labels and title\nplt.xlabel('Season')\nplt.ylabel('Count')\nplt.title('Number of Games by Season')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Show how many country from each country , could you list by the Y from low to high ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Group by country and count the number of artists in each country\ncountry_counts = artist.groupby('country').size().reset_index(name='count')\n\n# Sort the counts in ascending order\ncountry_counts = country_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(country_counts['country'], country_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Artists by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "List the physicians' employee ids together with their primary affiliation departments' ids with a scatter chart .",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\naffiliated_with = pd.read_sql(\"SELECT * FROM affiliated_with\", conn)\naffiliated_with.columns = affiliated_with.columns.str.lower()\n\n# Filter the dataframe to include only rows where primaryaffiliation is 1\nfiltered_df = affiliated_with[affiliated_with['primaryaffiliation'] == 1]\n\n# Create a scatter plot of physician vs department\nplt.scatter(filtered_df['physician'], filtered_df['department'])\nplt.xlabel('Physician')\nplt.ylabel('Department')\nplt.title('Scatter plot of Physician vs Department')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Please return a scatter chart to show each start station's longitude and the corresponding average duration of trips started there.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the 'station' table\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstation.columns = map(str.lower, station.columns)\n\n# Read the 'trip' table\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\ntrip.columns = map(str.lower, trip.columns)\n\n# Merge the 'station' and 'trip' tables on 'id' and 'start_station_id' columns respectively\nmerged_data = pd.merge(station, trip, left_on='id', right_on='start_station_id')\n\n# Group by 'start_station_id' and calculate the average of 'duration'\ngrouped_data = merged_data.groupby('start_station_id')['duration'].mean()\n\n# Create a scatter plot\nplt.scatter(grouped_data.index, grouped_data.values)\nplt.xlabel('Longitude')\nplt.ylabel('Average Duration')\nplt.title('Scatter Plot of Average Duration vs Longitude')\nplt.show()"
  },
  {
    "db_id": "college_3",
    "question": "Show me a bar chart of the top 5 departments with the highest number of faculty members.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nfaculty = pd.read_sql(\"SELECT * FROM faculty\", conn)\nmember_of = pd.read_sql(\"SELECT * FROM member_of\", conn)\nfaculty.columns = faculty.columns.str.lower()\nmember_of.columns = member_of.columns.str.lower()\n\n# Joining the faculty and member_of tables\nmerged_df = pd.merge(faculty, member_of, on='facid')\n\n# Grouping by dno and counting the number of occurrences\ngrouped_df = merged_df.groupby('dno').size().reset_index(name='count')\n\n# Sorting by count in descending order and selecting the top 5 rows\ntop_5_df = grouped_df.sort_values('count', ascending=False).head(5)\n\n# Creating the bar plot\nplt.bar(top_5_df['dno'], top_5_df['count'])\nplt.xlabel('Department Number')\nplt.ylabel('Count')\nplt.title('Top 5 Departments with Highest Faculty Count')\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Please draw a bar to show the total number of participants in each type code , and I want to show by the y-axis from low to high please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nParticipants = pd.read_sql(\"SELECT * FROM Participants\", conn)\nParticipants.columns = Participants.columns.str.lower()\n\n# Grouping and counting participant_type_code\ngrouped = Participants.groupby('participant_type_code').size().reset_index(name='count')\n\n# Sorting by count in ascending order\nsorted_grouped = grouped.sort_values('count')\n\n# Creating bar plot\nplt.bar(sorted_grouped['participant_type_code'], sorted_grouped['count'])\nplt.xlabel('Participant Type Code')\nplt.ylabel('Count')\nplt.title('Count of Participants by Participant Type Code')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show all distinct product categories along with the number of mailshots in each category in a bar chart , and list Y-axis from low to high order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmailshot_campaigns = pd.read_sql(\"SELECT * FROM mailshot_campaigns\", conn)\nmailshot_campaigns.columns = mailshot_campaigns.columns.str.lower()\n\n# Grouping the data by product_category and counting the occurrences\ngrouped_data = mailshot_campaigns.groupby('product_category').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nsorted_data = grouped_data.sort_values('count')\n\n# Creating the bar plot\nplt.bar(sorted_data['product_category'], sorted_data['count'])\nplt.xlabel('Product Category')\nplt.ylabel('Count')\nplt.title('Number of Campaigns by Product Category')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "company_1",
    "question": "Find the number of employees of each gender whose salary is lower than 50000 Visualize by bar chart , could you rank in descending by the Sex ?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nemployee = pd.read_sql(\"SELECT * FROM employee\", conn)\nemployee.columns = employee.columns.str.lower()\n\n# Filter the dataframe\nfiltered_df = employee[employee['salary'] < 50000]\n\n# Group by sex and count the number of occurrences\ngrouped_df = filtered_df.groupby('sex').size().reset_index(name='count')\n\n# Sort the dataframe by sex in descending order\nsorted_df = grouped_df.sort_values('sex', ascending=False)\n\n# Create the bar plot\nplt.bar(sorted_df['sex'], sorted_df['count'])\nplt.xlabel('Sex')\nplt.ylabel('Count')\nplt.title('Number of Employees with Salary < 50000 by Sex')\nplt.show()"
  },
  {
    "db_id": "customer_deliveries",
    "question": "List the state names and the number of customers living in each state with a bar chart, could you rank by the the total number in asc please?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read data from the customer_addresses table\ncustomer_addresses = pd.read_sql(\"SELECT * FROM customer_addresses\", conn)\n\n# Read data from the addresses table\naddresses = pd.read_sql(\"SELECT * FROM addresses\", conn)\n\n# Convert column names to lowercase\ncustomer_addresses.columns = customer_addresses.columns.str.lower()\naddresses.columns = addresses.columns.str.lower()\n\n# merge the two tables on address_id\nmerged_data = pd.merge(customer_addresses, addresses, on=\"address_id\")\n\n# group by state_province_county and count the number of occurrences\ngrouped_data = merged_data.groupby(\"state_province_county\").size().reset_index(name=\"count\")\n\n# sort the data by count in ascending order\nsorted_data = grouped_data.sort_values(\"count\")\n\n# plot the bar chart\nplt.bar(sorted_data[\"state_province_county\"], sorted_data[\"count\"])\nplt.xlabel(\"State/Province/County\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Customers by State/Province/County\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "How does the number of orders placed on each order date for products with a price higher than 1000 change over time? Show me a line chart.",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nCustomer_Orders = pd.read_sql(\"SELECT * FROM Customer_Orders\", conn)\nORDER_ITEMS = pd.read_sql(\"SELECT * FROM ORDER_ITEMS\", conn)\nProducts = pd.read_sql(\"SELECT * FROM Products\", conn)\nCustomer_Orders.columns = Customer_Orders.columns.str.lower()\nORDER_ITEMS.columns = ORDER_ITEMS.columns.str.lower()\nProducts.columns = Products.columns.str.lower()\n\n# Merge the tables\nmerged_df = pd.merge(Customer_Orders, ORDER_ITEMS, on='order_id')\nmerged_df = pd.merge(merged_df, Products, on='product_id')\n\n# Filter the data\nfiltered_df = merged_df[merged_df['product_price'] > 1000]\n\n# Group by order_date and count the number of rows\ngrouped_df = filtered_df.groupby('order_date').size().reset_index(name='count')\n\n# Plot the line chart\nplt.plot(grouped_df['order_date'], grouped_df['count'])\nplt.xlabel('Order Date')\nplt.ylabel('Count')\nplt.title('Number of Orders per Date')\nplt.show()"
  },
  {
    "db_id": "gymnast",
    "question": "What is the distribution of total points among gymnasts, with each slice representing the sum of points for the gymnast with the lowest age?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngymnast = pd.read_sql(\"SELECT * FROM gymnast\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\ngymnast.columns = gymnast.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(gymnast, people, left_on='gymnast_id', right_on='people_id')\n\n# Grouping by age and calculating the sum of total_points\ngrouped_df = merged_df.groupby('age')['total_points'].sum().reset_index()\n\n# Sorting by age in ascending order and selecting the first row\nsorted_df = grouped_df.sort_values('age', ascending=True).head(1)\n\n# Creating a pie chart\nplt.pie(sorted_df['total_points'], labels=sorted_df['age'], autopct='%1.1f%%')\nplt.title('Total Points by Age')\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "How many regions were impacted by each storm, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\naffected_region = pd.read_sql(\"SELECT * FROM affected_region\", conn)\nstorm.columns = storm.columns.str.lower()\naffected_region.columns = affected_region.columns.str.lower()\n\n# Merge the storm and affected_region tables\nmerged_df = pd.merge(storm, affected_region, on='storm_id')\n\n# Group by storm name and count the occurrences\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['name'], grouped_df['count'])\nplt.xlabel('Storm Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences for Each Storm')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "small_bank_1",
    "question": "Can you create a pie chart to display the distribution of the total saving balance across different account names?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nsavings = pd.read_sql(\"SELECT * FROM savings\", conn)\naccounts.columns = accounts.columns.str.lower()\nsavings.columns = savings.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(accounts, savings, on='custid')\n\n# Group by name and calculate the sum of balance\ngrouped_df = merged_df.groupby('name')['balance'].sum().reset_index()\n\n# Create a pie chart\nplt.pie(grouped_df['balance'], labels=grouped_df['name'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Display the chart\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Compare how many events by different event details using a bar chart , and sort names from high to low order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEVENTS = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\nEVENTS.columns = EVENTS.columns.str.lower()\n\n# Group by event_details and count the occurrences\nevent_counts = EVENTS.groupby('event_details').size().reset_index(name='count')\n\n# Sort the event_details in descending order\nevent_counts = event_counts.sort_values('event_details', ascending=False)\n\n# Create a bar plot\nplt.bar(event_counts['event_details'], event_counts['count'])\nplt.xlabel('Event Details')\nplt.ylabel('Count')\nplt.title('Event Details Count')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Return the number of venues of each workshop in a bar chart , could you rank by the total number in asc ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nworkshop = pd.read_sql(\"SELECT * FROM workshop\", conn)\nworkshop.columns = workshop.columns.str.lower()\n\n# Grouping the data by venue and counting the occurrences\nvenue_counts = workshop.groupby('venue').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nvenue_counts = venue_counts.sort_values('count')\n\n# Creating the bar plot\nplt.bar(venue_counts['venue'], venue_counts['count'])\nplt.xlabel('Venue')\nplt.ylabel('Count')\nplt.title('Workshop Venues')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "Can you create a pie chart displaying the distribution of records among pilots by their names?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npilot_record = pd.read_sql(\"SELECT * FROM pilot_record\", conn)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot_record.columns = pilot_record.columns.str.lower()\npilot.columns = pilot.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(pilot_record, pilot, on='pilot_id')\n\n# Group by pilot_name and count the number of records\ngrouped_df = merged_df.groupby('pilot_name').size().reset_index(name='num_records')\n\n# Create a pie chart\nplt.pie(grouped_df['num_records'], labels=grouped_df['pilot_name'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Give me a bar chart about the number of countries in the artist table, and show by the Y from low to high please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the artist table\nartist_df = pd.read_sql(\"SELECT * FROM artist\", conn)\n\n# Convert column names to lowercase\nartist_df.columns = artist_df.columns.str.lower()\n\n# Perform the SQL query\ncountry_counts = artist_df.groupby('country').size().reset_index(name='count')\ncountry_counts = country_counts.sort_values('count')\n\n# Create the bar plot\nplt.bar(country_counts['country'], country_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Artists by Country')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "gymnast",
    "question": "Can you create a scatter plot to display the distribution of names among gymnasts and the frequency of each name?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngymnast = pd.read_sql(\"SELECT * FROM gymnast\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\ngymnast.columns = gymnast.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(gymnast, people, left_on='gymnast_id', right_on='people_id')\n\n# Group by name and count the number of occurrences\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Create scatter plot\nplt.scatter(grouped_df['name'], grouped_df['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Number of Gymnasts per Person')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show me a bar chart of the count of customers with a mailshot outcome code 'No Response' for each customer name, sorted in ascending order by count.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\nmailshot_customers = pd.read_sql(\"SELECT * FROM mailshot_customers\", conn)\ncustomers.columns = customers.columns.str.lower()\nmailshot_customers.columns = mailshot_customers.columns.str.lower()\n\n# Merge the two dataframes on customer_id\nmerged_df = pd.merge(customers, mailshot_customers, on='customer_id')\n\n# Filter the merged dataframe for outcome_code = 'No Response'\nfiltered_df = merged_df[merged_df['outcome_code'] == 'No Response']\n\n# Group by customer_name and count the occurrences\ngrouped_df = filtered_df.groupby('customer_name').size().reset_index(name='count')\n\n# Sort the dataframe by count in ascending order\nsorted_df = grouped_df.sort_values('count')\n\n# Plot the bar chart\nplt.bar(sorted_df['customer_name'], sorted_df['count'])\nplt.xlabel('Customer Name')\nplt.ylabel('Count')\nplt.title('Number of No Response by Customer')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "What is the name of each shop and the total quantity of devices in stock for each shop, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstock = pd.read_sql(\"SELECT * FROM stock\", conn)\nshop = pd.read_sql(\"SELECT * FROM shop\", conn)\nstock.columns = stock.columns.str.lower()\nshop.columns = shop.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(stock, shop, on='shop_id')\n\n# Group by shop_name and calculate the sum of quantity\ngrouped_df = merged_df.groupby('shop_name')['quantity'].sum().reset_index()\n\n# Create the bar plot\nplt.bar(grouped_df['shop_name'], grouped_df['quantity'])\nplt.xlabel('Shop Name')\nplt.ylabel('Total Quantity')\nplt.title('Total Quantity by Shop')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Return a bar chart showing the total number of ships' nationalities , and order Nationality in asc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Grouping the data by nationality and counting the occurrences\nnationality_count = ship.groupby('nationality').size().reset_index(name='count')\n\n# Sorting the data by nationality in ascending order\nnationality_count = nationality_count.sort_values('nationality')\n\n# Creating the bar plot\nplt.bar(nationality_count['nationality'], nationality_count['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Ships by Nationality')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "Bar graph to show the total number from different nationality, list in ascending by the the total number .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the pilot table\npilot_df = pd.read_sql(\"SELECT * FROM pilot\", conn)\n\n# Convert column names to lowercase\npilot_df.columns = pilot_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = pilot_df.groupby('nationality').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result_df['nationality'], result_df['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Pilots by Nationality')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show different types of ships and the number of ships of each type with a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the 'ship' table into a pandas DataFrame\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\n\n# Perform the SQL query and group by 'type'\ngrouped_df = ship_df.groupby('type').size().reset_index(name='count')\n\n# Create a pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['type'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Display the pie chart\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "A bar chart about what is the name of every city that has at least 15 stations and how many stations does it have ? , and rank in asc by the bars .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstation.columns = station.columns.str.lower()\n\n# Group by city and count the number of rows\ncity_counts = station.groupby('city').size().reset_index(name='count')\n\n# Sort the cities in ascending order\ncity_counts = city_counts.sort_values('city')\n\n# Create a bar plot\nplt.bar(city_counts['city'], city_counts['count'])\nplt.xlabel('City')\nplt.ylabel('Count')\nplt.title('Number of Stations in Each City')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "Which city has the fewest number of customers, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nCustomers = pd.read_sql(\"SELECT * FROM Customers\", conn)\nAddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\nCustomers.columns = Customers.columns.str.lower()\nAddresses.columns = Addresses.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Customers, Addresses, left_on='customer_address_id', right_on='address_id')\n\n# Group by city and count the number of occurrences\ncity_counts = merged_df.groupby('city').size().reset_index(name='count')\n\n# Sort the dataframe by count in ascending order\nsorted_city_counts = city_counts.sort_values('count')\n\n# Plot the bar chart\nplt.bar(sorted_city_counts['city'], sorted_city_counts['count'])\nplt.xlabel('City')\nplt.ylabel('Count')\nplt.title('Number of Customers by City')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "entertainment_awards",
    "question": "Show the ids and names of festivals that have at least two nominations for artworks with a pie chart.",
    "chart": "Pie",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the tables from the database\nnomination = pd.read_sql(\"SELECT * FROM nomination\", conn)\nartwork = pd.read_sql(\"SELECT * FROM artwork\", conn)\nfestival_detail = pd.read_sql(\"SELECT * FROM festival_detail\", conn)\n\n# Convert column names to lowercase\nnomination.columns = nomination.columns.str.lower()\nartwork.columns = artwork.columns.str.lower()\nfestival_detail.columns = festival_detail.columns.str.lower()\n\n# Merge the tables\nmerged_data = pd.merge(nomination, artwork, on=\"artwork_id\")\nmerged_data = pd.merge(merged_data, festival_detail, on=\"festival_id\")\n\n# Group by festival name and count the number of nominations\ngrouped_data = merged_data.groupby(\"festival_name\").size()\n\n# Plot the pie chart\nplt.pie(grouped_data, labels=grouped_data.index, autopct=\"%1.1f%%\")\nplt.title(\"Distribution of Nominations by Festival\")\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Give the proportion of what are the different product names? What is the average product price for each of them?",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the PRODUCTS table\nproducts = pd.read_sql(\"SELECT * FROM PRODUCTS\", conn)\n\n# Convert column names to lowercase\nproducts.columns = map(str.lower, products.columns)\n\n# Calculate the average product price for each product name\navg_price = products.groupby('product_name')['product_price'].mean()\n\n# Create a pie chart\nplt.pie(avg_price, labels=avg_price.index, autopct='%1.1f%%')\nplt.title('Average Product Price by Product Name')\nplt.show()"
  },
  {
    "db_id": "icfp_1",
    "question": "How many authors from the institution \"Google\" have each last name? Show the count for each last name in a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nauthors = pd.read_sql(\"SELECT * FROM authors\", conn)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\ninst = pd.read_sql(\"SELECT * FROM inst\", conn)\nauthors.columns = authors.columns.str.lower()\nauthorship.columns = authorship.columns.str.lower()\ninst.columns = inst.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(authors, authorship, on='authid')\nmerged_df = pd.merge(merged_df, inst, on='instid')\n\n# Filter by inst name\nfiltered_df = merged_df[merged_df['name'] == 'Google']\n\n# Group by lname and count\ngrouped_df = filtered_df.groupby('lname').size().reset_index(name='count')\n\n# Plot bar chart\nplt.bar(grouped_df['lname'], grouped_df['count'])\nplt.xlabel('Last Name')\nplt.ylabel('Count')\nplt.title('Number of Authors by Last Name at Google')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "what are the event details of the services that have the type code 'Marriage', and count them by a bar chart, show in descending by the Y please.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the EVENTS table\nevents = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\nevents.columns = map(str.lower, events.columns)\n\n# Read the Services table\nservices = pd.read_sql(\"SELECT * FROM Services\", conn)\nservices.columns = map(str.lower, services.columns)\n\n# Merge the EVENTS and Services tables on Service_ID\nmerged_data = pd.merge(events, services, on=\"service_id\")\n\n# Filter the merged data for Service_Type_Code = 'Marriage'\nfiltered_data = merged_data[merged_data[\"service_type_code\"] == \"Marriage\"]\n\n# Group by Event_Details and count the occurrences\ngrouped_data = filtered_data.groupby(\"event_details\").size().reset_index(name=\"count\")\ngrouped_data = grouped_data.sort_values(by=\"count\", ascending=False)\n\n# Plot the bar chart\nplt.bar(grouped_data[\"event_details\"], grouped_data[\"count\"])\nplt.xlabel(\"Event Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Events by Event Details\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tvshow",
    "question": "List top 3 highest Rating TV series . List the TV series's Episode and Rating in a bar chart .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nTV_series = pd.read_sql(\"SELECT * FROM TV_series\", conn)\nTV_series.columns = TV_series.columns.str.lower()\n\n# Assuming TV_series is a DataFrame containing the table data\n\n# Sort the DataFrame by rating in descending order and select the top 3 rows\ntop_episodes = TV_series.sort_values(by='rating', ascending=False).head(3)\n\n# Extract the episode and rating columns\nepisodes = top_episodes['episode']\nratings = top_episodes['rating']\n\n# Create a bar plot\nplt.bar(episodes, ratings)\n\n# Set the x-axis label\nplt.xlabel('Episode')\n\n# Set the y-axis label\nplt.ylabel('Rating')\n\n# Set the title of the plot\nplt.title('Top 3 Episodes by Rating')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Find those years for all exhibitions with ticket prices lower than 15 , return a bar chart that groups by year and counts the total number of years , and I want to display in ascending by the total number .",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nexhibition.columns = exhibition.columns.str.lower()\n\n# Filter the dataframe based on the condition ticket_price < 15\nfiltered_exhibition = exhibition[exhibition['ticket_price'] < 15]\n\n# Group the data by year and count the occurrences\ngrouped_data = filtered_exhibition.groupby('year').size().reset_index(name='count')\n\n# Sort the data by count in ascending order\nsorted_data = grouped_data.sort_values('count')\n\n# Create a bar plot\nplt.bar(sorted_data['year'], sorted_data['count'])\nplt.xlabel('Year')\nplt.ylabel('Count')\nplt.title('Exhibition Count by Year (Ticket Price < 15)')\nplt.show()"
  },
  {
    "db_id": "restaurant_1",
    "question": "List how many students in each last name who majored in 600 using a bar chart , and show names from high to low order .",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nStudent = pd.read_sql(\"SELECT * FROM Student\", conn)\nStudent.columns = Student.columns.str.lower()\n\n# Filter the dataframe based on the condition 'major = 600'\nfiltered_df = Student[Student['major'] == 600]\n\n# Group the dataframe by 'lname' and count the occurrences\ngrouped_df = filtered_df.groupby('lname').size().reset_index(name='count')\n\n# Sort the dataframe by 'lname' in descending order\nsorted_df = grouped_df.sort_values('lname', ascending=False)\n\n# Create the bar plot\nplt.bar(sorted_df['lname'], sorted_df['count'])\nplt.xlabel('Last Name')\nplt.ylabel('Count')\nplt.title('Number of Students by Last Name')\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "Which shops have a variety of devices in stock and what is the quantity of devices they have? Show the information using a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstock = pd.read_sql(\"SELECT * FROM stock\", conn)\nshop = pd.read_sql(\"SELECT * FROM shop\", conn)\nstock.columns = stock.columns.str.lower()\nshop.columns = shop.columns.str.lower()\n\n# Merge stock and shop tables\nmerged_df = pd.merge(stock, shop, on='shop_id')\n\n# Group by shop_name and count the number of devices\ngrouped_df = merged_df.groupby('shop_name').size().reset_index(name='num_of_devices')\n\n# Filter shops with more than 1 device\nfiltered_df = grouped_df[grouped_df['num_of_devices'] > 1]\n\n# Plot the bar chart\nplt.bar(filtered_df['shop_name'], filtered_df['num_of_devices'])\nplt.xlabel('Shop Name')\nplt.ylabel('Number of Devices')\nplt.title('Number of Devices in Shops with More than 1 Device')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Please draw a bar to show the total number of participants in each type code.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Participants table\nparticipants = pd.read_sql(\"SELECT * FROM Participants\", conn)\n\n# Convert column names to lowercase\nparticipants.columns = participants.columns.str.lower()\n\n# Perform the SQL query\nresult = participants.groupby('participant_type_code').size()\n\n# Create the bar plot\nplt.bar(result.index, result.values)\nplt.xlabel('Participant Type Code')\nplt.ylabel('Count')\nplt.title('Number of Participants by Type')\nplt.show()"
  },
  {
    "db_id": "college_3",
    "question": "What is the distribution of last names among students who minor in the department with DNO 140, represented by a line chart?",
    "chart": "Line",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nMINOR_IN = pd.read_sql(\"SELECT * FROM MINOR_IN\", conn)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nMINOR_IN.columns = MINOR_IN.columns.str.lower()\nSTUDENT.columns = STUDENT.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(MINOR_IN, STUDENT, left_on='stuid', right_on='stuid')\n\n# Filter the data based on the condition\nfiltered_df = merged_df[merged_df['dno'] == 140]\n\n# Group the data by lname and count the occurrences\ngrouped_df = filtered_df.groupby('lname').size().reset_index(name='count')\n\n# Plot the line chart\nplt.plot(grouped_df['lname'], grouped_df['count'])\nplt.xlabel('Last Name')\nplt.ylabel('Count')\nplt.title('Number of Students with Minor in Department 140')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Bar chart x axis type y axis the total number",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Grouping the ship dataframe by type and counting the occurrences\nship_grouped = ship.groupby('type').size().reset_index(name='count')\n\n# Creating a bar plot\nplt.bar(ship_grouped['type'], ship_grouped['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Ship Types')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Bar chart x axis role code y axis the total number",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nEmployees.columns = Employees.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\nrole_counts = Employees.groupby('role_code').size()\n\n# Creating a bar plot\nplt.bar(role_counts.index, role_counts.values)\n\n# Adding labels and title\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Employees by Role Code')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Bar graph to show how many nationality from different nationality , order in descending by the x axis please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Grouping the data by nationality and counting the occurrences\nnationality_counts = ship.groupby('nationality').size().reset_index(name='count')\n\n# Sorting the data by nationality in descending order\nnationality_counts = nationality_counts.sort_values('nationality', ascending=False)\n\n# Creating the bar plot\nplt.bar(nationality_counts['nationality'], nationality_counts['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Ships by Nationality')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "For the top 3 days with the largest max gust speeds, show the date and average temperature with a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the weather table\nweather = pd.read_sql(\"SELECT * FROM weather\", conn)\n\n# Convert column names to lowercase\nweather.columns = weather.columns.str.lower()\n\n# Perform the SQL query\nquery = \"\"\"\n    SELECT date, mean_temperature_f\n    FROM weather\n    ORDER BY max_gust_speed_mph DESC\n    LIMIT 3\n\"\"\"\nresult = pd.read_sql(query, conn)\n\n# Close the database connection\nconn.close()\n\n# Plot the bar chart\nplt.bar(result[\"date\"], result[\"mean_temperature_f\"])\nplt.xlabel(\"Date\")\nplt.ylabel(\"Mean Temperature (F)\")\nplt.title(\"Top 3 Dates with Highest Max Gust Speed\")\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Bar chart x axis name y axis age , and display in ascending by the X-axis .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Assuming the data is already loaded into the 'artist' dataframe\n\n# Sort the dataframe by name in ascending order\nsorted_artist = artist.sort_values(by='name')\n\n# Extract the name and age columns\nname = sorted_artist['name']\nage = sorted_artist['age']\n\n# Create a bar plot\nplt.bar(name, age)\n\n# Set the x-axis label\nplt.xlabel('Name')\n\n# Set the y-axis label\nplt.ylabel('Age')\n\n# Set the title of the plot\nplt.title('Artist Age by Name')\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "entertainment_awards",
    "question": "Show the ids and names of festivals that have at least two nominations for artworks by a bar chart, display names in asc order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the tables from the database\nnomination = pd.read_sql(\"SELECT * FROM nomination\", conn)\nartwork = pd.read_sql(\"SELECT * FROM artwork\", conn)\nfestival_detail = pd.read_sql(\"SELECT * FROM festival_detail\", conn)\n\n# Convert column names to lowercase\nnomination.columns = nomination.columns.str.lower()\nartwork.columns = artwork.columns.str.lower()\nfestival_detail.columns = festival_detail.columns.str.lower()\n\n# Merge the tables\nmerged_data = pd.merge(nomination, artwork, on=\"artwork_id\")\nmerged_data = pd.merge(merged_data, festival_detail, on=\"festival_id\")\n\n# Sort the merged data by festival name\nsorted_data = merged_data.sort_values(by=\"festival_name\")\n\n# Create a bar plot\nplt.bar(sorted_data[\"festival_name\"], sorted_data[\"festival_id\"])\nplt.xlabel(\"Festival Name\")\nplt.ylabel(\"Festival ID\")\nplt.title(\"Festival ID by Festival Name\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "What is the line chart displaying the total attendance for each exhibition date in the year 2004?",
    "chart": "Line",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nexhibition_record = pd.read_sql(\"SELECT * FROM exhibition_record\", conn)\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nexhibition_record.columns = exhibition_record.columns.str.lower()\nexhibition.columns = exhibition.columns.str.lower()\n\n# Merge exhibition_record and exhibition tables\nmerged_df = pd.merge(exhibition_record, exhibition, on='exhibition_id')\n\n# Filter data for year 2004\nfiltered_df = merged_df[merged_df['year'] == 2004]\n\n# Group by date and calculate sum of attendance\ngrouped_df = filtered_df.groupby('date')['attendance'].sum().reset_index()\n\n# Sort by date\nsorted_df = grouped_df.sort_values('date')\n\n# Plot line chart\nplt.plot(sorted_df['date'], sorted_df['attendance'])\nplt.xlabel('Date')\nplt.ylabel('Attendance')\nplt.title('Attendance by Date in 2004')\nplt.show()"
  },
  {
    "db_id": "icfp_1",
    "question": "What is the last name of the author of the paper titled \"Binders Unbound\" represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nauthors = pd.read_sql(\"SELECT * FROM authors\", conn)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\npapers = pd.read_sql(\"SELECT * FROM papers\", conn)\nauthors.columns = authors.columns.str.lower()\nauthorship.columns = authorship.columns.str.lower()\npapers.columns = papers.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(authors, authorship, on='authid')\nmerged_df = pd.merge(merged_df, papers, on='paperid')\n\n# Filter by title\nfiltered_df = merged_df[merged_df['title'] == 'Binders Unbound']\n\n# Group by lname and count\ngrouped_df = filtered_df.groupby('lname').size().reset_index(name='count')\n\n# Plot bar chart\nplt.bar(grouped_df['lname'], grouped_df['count'])\nplt.xlabel('Last Name')\nplt.ylabel('Count')\nplt.title('Number of Authors by Last Name for \"binders unbound\"')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Give me a bar chart for the total number of each payment method code , show by the X in ascending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nINVOICES = pd.read_sql(\"SELECT * FROM INVOICES\", conn)\nINVOICES.columns = INVOICES.columns.str.lower()\n\n# Grouping the data by payment_method_code and counting the number of occurrences\npayment_counts = INVOICES.groupby('payment_method_code').size().reset_index(name='count')\n\n# Sorting the data by payment_method_code in ascending order\npayment_counts = payment_counts.sort_values('payment_method_code')\n\n# Creating the bar plot\nplt.bar(payment_counts['payment_method_code'], payment_counts['count'])\nplt.xlabel('Payment Method Code')\nplt.ylabel('Count')\nplt.title('Number of Invoices by Payment Method Code')\nplt.show()"
  },
  {
    "db_id": "gymnast",
    "question": "Show me a bar chart displaying the names and heights of the gymnasts, with the bars arranged in descending order by height.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngymnast = pd.read_sql(\"SELECT * FROM gymnast\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\ngymnast.columns = gymnast.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Perform the join operation\nresult = pd.merge(gymnast, people, left_on='gymnast_id', right_on='people_id')\n\n# Sort the result by height in descending order\nresult = result.sort_values('height', ascending=False)\n\n# Plot the bar chart\nplt.bar(result['name'], result['height'])\nplt.xlabel('Name')\nplt.ylabel('Height')\nplt.title('Gymnast Height')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Show me a bar chart of the event IDs and participant counts for events with multiple participants, sorted in ascending order by participant count.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEVENTS = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\nParticipants_in_Events = pd.read_sql(\"SELECT * FROM Participants_in_Events\", conn)\nEVENTS.columns = EVENTS.columns.str.lower()\nParticipants_in_Events.columns = Participants_in_Events.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(EVENTS, Participants_in_Events, on='event_id')\n\n# Group by event_id and count the number of participants\ngrouped_df = merged_df.groupby('event_id').size().reset_index(name='count')\n\n# Filter events with count greater than 1\nfiltered_df = grouped_df[grouped_df['count'] > 1]\n\n# Sort the events by count in ascending order\nsorted_df = filtered_df.sort_values('count')\n\n# Plot the bar chart\nplt.bar(sorted_df['event_id'], sorted_df['count'])\nplt.xlabel('Event ID')\nplt.ylabel('Number of Participants')\nplt.title('Events with more than 1 participant')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Show all payment method codes and the number of orders for each code Show bar chart, display X from high to low order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the INVOICES table\ninvoices = pd.read_sql(\"SELECT * FROM INVOICES\", conn)\n\n# Convert column names to lowercase\ninvoices.columns = invoices.columns.str.lower()\n\n# Perform the SQL query\nresult = invoices.groupby('payment_method_code').size().reset_index(name='count')\nresult = result.sort_values('payment_method_code', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['payment_method_code'], result['count'])\nplt.xlabel('Payment Method Code')\nplt.ylabel('Count')\nplt.title('Number of Invoices by Payment Method Code')\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "Show me a bar chart of the dates of orders placed by the customer named \"Jeramie\" and the corresponding number of orders on each date, sorted in descending order of the number of orders.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\ncustomers.columns = customers.columns.str.lower()\norders.columns = orders.columns.str.lower()\n\n# Joining customers and orders tables\nmerged_df = pd.merge(customers, orders, on='customer_id')\n\n# Filtering data for customer_name = 'Jeramie'\nfiltered_df = merged_df[merged_df['customer_name'] == 'Jeramie']\n\n# Grouping by date_order_placed and counting the number of orders\ngrouped_df = filtered_df.groupby('date_order_placed').size().reset_index(name='count')\n\n# Sorting by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plotting the bar chart\nplt.bar(sorted_df['date_order_placed'], sorted_df['count'])\nplt.xlabel('Date Order Placed')\nplt.ylabel('Count')\nplt.title('Number of Orders Placed by Date for Customer Jeramie')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Visualize a bar chart for how many authors submit to the workshop , and list bars in asc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsubmission = pd.read_sql(\"SELECT * FROM submission\", conn)\nsubmission.columns = submission.columns.str.lower()\n\n# Group by author and count the number of submissions\nauthor_counts = submission.groupby('author').size().reset_index(name='count')\n\n# Sort the author counts by author name\nauthor_counts = author_counts.sort_values('author')\n\n# Create a bar plot\nplt.bar(author_counts['author'], author_counts['count'])\nplt.xlabel('Author')\nplt.ylabel('Count')\nplt.title('Number of Submissions by Author')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "Draw a bar chart for what are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality , and could you display total number from low to high order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot.columns = pilot.columns.str.lower()\n\n# Group by nationality and count the number of pilots\nnationality_count = pilot.groupby('nationality').size().reset_index(name='count')\n\n# Sort the dataframe by count in ascending order\nnationality_count = nationality_count.sort_values('count')\n\n# Create a bar plot\nplt.bar(nationality_count['nationality'], nationality_count['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Pilots by Nationality')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Draw a bar chart for showing the id and name of the stations that have ever had more than 12 bikes available, and rank id in asc order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the station and status tables\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstatus = pd.read_sql(\"SELECT * FROM status\", conn)\n\n# Convert column names to lowercase\nstation.columns = station.columns.str.lower()\nstatus.columns = status.columns.str.lower()\n\n# Merge the station and status tables on id\nmerged_data = pd.merge(station, status, left_on=\"id\", right_on=\"station_id\")\n\n# Filter the merged data where bikes_available > 12\nfiltered_data = merged_data[merged_data[\"bikes_available\"] > 12]\n\n# Sort the filtered data by id in ascending order\nsorted_data = filtered_data.sort_values(\"id\", ascending=True)\n\n# Create a bar plot of name and id\nplt.bar(sorted_data[\"name\"], sorted_data[\"id\"])\nplt.xlabel(\"Station Name\")\nplt.ylabel(\"Station ID\")\nplt.title(\"Stations with Bikes Available > 12\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "tracking_orders",
    "question": "Compare the number of names of each product by a bar chart.\n",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the tables from the database\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\norder_items = pd.read_sql(\"SELECT * FROM order_items\", conn)\nproducts = pd.read_sql(\"SELECT * FROM products\", conn)\n\n# Convert column names to lowercase\norders.columns = orders.columns.str.lower()\norder_items.columns = order_items.columns.str.lower()\nproducts.columns = products.columns.str.lower()\n\n# Merge the tables\nmerged_data = pd.merge(orders, order_items, on=\"order_id\")\nmerged_data = pd.merge(merged_data, products, on=\"product_id\")\n\n# Perform the aggregation\naggregated_data = merged_data.groupby(\"product_name\").size().reset_index(name=\"count\")\n\n# Plot the bar chart\nplt.bar(aggregated_data[\"product_name\"], aggregated_data[\"count\"])\nplt.xlabel(\"Product Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Product Count\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "What is the total number of each ship type? Give me a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the \"ship\" table into a pandas DataFrame\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\n\n# Perform the SQL query and group by \"type\"\ngrouped_df = ship_df.groupby(\"type\").size().reset_index(name=\"count\")\n\n# Plot the pie chart\nplt.pie(grouped_df[\"count\"], labels=grouped_df[\"type\"], autopct=\"%1.1f%%\")\nplt.axis(\"equal\")\nplt.show()"
  },
  {
    "db_id": "sakila_1",
    "question": "Can you create a line chart to display the number of cities in each country that have at least 3 cities?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncity.columns = city.columns.str.lower()\ncountry.columns = country.columns.str.lower()\n\n# Joining city and country tables\nmerged_df = pd.merge(city, country, on='country_id')\n\n# Grouping by country and counting the number of cities\ngrouped_df = merged_df.groupby('country').size().reset_index(name='num_cities')\n\n# Filtering countries with at least 3 cities\nfiltered_df = grouped_df[grouped_df['num_cities'] >= 3]\n\n# Sorting by number of cities in descending order\nsorted_df = filtered_df.sort_values('num_cities', ascending=False)\n\n# Plotting the data as a line chart\nplt.plot(sorted_df['country'], sorted_df['num_cities'])\nplt.xlabel('Country')\nplt.ylabel('Number of Cities')\nplt.title('Number of Cities per Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "restaurant_1",
    "question": "How many times has Linda Smith visited each restaurant, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nStudent = pd.read_sql(\"SELECT * FROM Student\", conn)\nVisits_Restaurant = pd.read_sql(\"SELECT * FROM Visits_Restaurant\", conn)\nRestaurant = pd.read_sql(\"SELECT * FROM Restaurant\", conn)\nStudent.columns = Student.columns.str.lower()\nVisits_Restaurant.columns = Visits_Restaurant.columns.str.lower()\nRestaurant.columns = Restaurant.columns.str.lower()\n\n# Perform the SQL query\nresult = pd.merge(pd.merge(Student, Visits_Restaurant, on='stuid'), Restaurant, on='resid')\nresult = result[(result['fname'] == 'Linda') & (result['lname'] == 'Smith')]\nresult = result.groupby('resname').size().reset_index(name='count')\n\n# Visualize the result using a bar chart\nplt.bar(result['resname'], result['count'])\nplt.xlabel('Restaurant Name')\nplt.ylabel('Count')\nplt.title('Number of Visits to Restaurants by Linda Smith')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Group by the result and count them by a bar chart, rank from low to high by the Y.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the acceptance table\nacceptance = pd.read_sql(\"SELECT * FROM acceptance\", conn)\n\n# Convert column names to lowercase\nacceptance.columns = acceptance.columns.str.lower()\n\n# Perform the SQL query\nresult_counts = acceptance.groupby('result').size().reset_index(name='count')\nresult_counts = result_counts.sort_values('count')\n\n# Generate the bar chart\nplt.bar(result_counts['result'], result_counts['count'])\nplt.xlabel('Result')\nplt.ylabel('Count')\nplt.title('Count of Results')\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Group and count details for the events using a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the EVENTS table\nevents = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\n\n# Convert column names to lowercase\nevents.columns = events.columns.str.lower()\n\n# Perform the SQL query\nevent_counts = events.groupby('event_details').size().reset_index(name='count')\n\n# Generate the bar chart\nplt.bar(event_counts['event_details'], event_counts['count'])\nplt.xlabel('Event Details')\nplt.ylabel('Count')\nplt.title('Event Details Count')\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "How many unique club names does each student have in the database? Show the count using a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nstudent = pd.read_sql(\"SELECT * FROM student\", conn)\nclub.columns = club.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\nstudent.columns = student.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(pd.merge(club, member_of_club, on='clubid'), student, on='stuid')\n\n# Group by student id and count distinct club names\ngrouped_df = merged_df.groupby('stuid')['clubname'].nunique().reset_index()\n\n# Plot the bar chart\nplt.bar(grouped_df['stuid'], grouped_df['clubname'])\nplt.xlabel('Student ID')\nplt.ylabel('Number of Clubs')\nplt.title('Number of Clubs Joined by Each Student')\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "List the number of games in each season with a line chart , and order in descending by the X .",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\ngame.columns = game.columns.str.lower()\n\n# Grouping the data by season and counting the number of games in each season\nseason_count = game.groupby('season').size().reset_index(name='count')\n\n# Sorting the data by season in descending order\nseason_count = season_count.sort_values('season', ascending=False)\n\n# Plotting the line chart\nplt.plot(season_count['season'], season_count['count'])\nplt.xlabel('Season')\nplt.ylabel('Count')\nplt.title('Number of Games by Season')\nplt.show()"
  },
  {
    "db_id": "company_1",
    "question": "Find the number of employees of each gender whose salary is lower than 50000 Visualize by bar chart , could you rank Y-axis in ascending order ?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nemployee = pd.read_sql(\"SELECT * FROM employee\", conn)\nemployee.columns = employee.columns.str.lower()\n\n# Filter the dataframe based on the condition\nfiltered_df = employee[employee['salary'] < 50000]\n\n# Group the filtered dataframe by 'sex' and count the number of occurrences\ngrouped_df = filtered_df.groupby('sex').size().reset_index(name='count')\n\n# Sort the grouped dataframe by count in ascending order\nsorted_df = grouped_df.sort_values('count')\n\n# Create a bar plot\nplt.bar(sorted_df['sex'], sorted_df['count'])\nplt.xlabel('Sex')\nplt.ylabel('Count')\nplt.title('Number of Employees with Salary < 50000 by Sex')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Show me a bar chart displaying the count of drama workshop groups for each state/county in the Addresses table, sorted in descending order of count.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nAddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\nDrama_Workshop_Groups = pd.read_sql(\"SELECT * FROM Drama_Workshop_Groups\", conn)\nAddresses.columns = Addresses.columns.str.lower()\nDrama_Workshop_Groups.columns = Drama_Workshop_Groups.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Addresses, Drama_Workshop_Groups, on='address_id')\n\n# Group by state_county and count the number of occurrences\ngrouped_df = merged_df.groupby('state_county').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['state_county'], sorted_df['count'])\nplt.xlabel('State County')\nplt.ylabel('Count')\nplt.title('Number of Drama Workshop Groups by State County')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "Show different teams of technicians and the number of technicians in each team , and could you sort X in asc order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\ntechnician.columns = technician.columns.str.lower()\n\n# Grouping the data by team and counting the number of technicians in each team\nteam_counts = technician.groupby('team').size().reset_index(name='count')\n\n# Sorting the data by team in ascending order\nteam_counts = team_counts.sort_values('team')\n\n# Creating a bar plot\nplt.bar(team_counts['team'], team_counts['count'])\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Number of Technicians in Each Team')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show each premise type and the number of premises in that type with a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npremises = pd.read_sql(\"SELECT * FROM premises\", conn)\npremises.columns = premises.columns.str.lower()\n\n# Group by premises_type and count the number of occurrences\npremises_count = premises.groupby('premises_type').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(premises_count['premises_type'], premises_count['count'])\nplt.xlabel('Premises Type')\nplt.ylabel('Count')\nplt.title('Number of Premises by Type')\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "Can you draw a bar chart to show the number of positions of the pilots ?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot.columns = pilot.columns.str.lower()\n\n# Group by position and count the number of occurrences\nposition_counts = pilot.groupby('position').size().reset_index(name='count')\n\n# Create a bar plot\nplt.bar(position_counts['position'], position_counts['count'])\nplt.xlabel('Position')\nplt.ylabel('Count')\nplt.title('Number of Pilots by Position')\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Show the authors of their total submissions with a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the submission table\nsubmission_df = pd.read_sql(\"SELECT * FROM submission\", conn)\n\n# Convert column names to lowercase\nsubmission_df.columns = submission_df.columns.str.lower()\n\n# Perform the SQL query\nauthor_counts = submission_df.groupby('author').size()\n\n# Create a pie chart\nplt.pie(author_counts, labels=author_counts.index, autopct='%1.1f%%')\nplt.title('Author Distribution')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show the outcome code of mailshots along with the number of mailshots in each outcome code with a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the mailshot_customers table\nmailshot_customers = pd.read_sql(\"SELECT * FROM mailshot_customers\", conn)\n\n# Convert column names to lowercase\nmailshot_customers.columns = map(str.lower, mailshot_customers.columns)\n\n# Perform the SQL query\noutcome_counts = mailshot_customers.groupby('outcome_code').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(outcome_counts['count'], labels=outcome_counts['outcome_code'], autopct='%1.1f%%')\nplt.title('Outcome Code Distribution')\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "Give me a bar for what are the names of the technicians and how many machines are they assigned to repair?, display the total number in ascending order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the repair_assignment table\nrepair_assignment = pd.read_sql(\"SELECT * FROM repair_assignment\", conn)\n\n# Read the technician table\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\n\n# Convert column names to lowercase\nrepair_assignment.columns = repair_assignment.columns.str.lower()\ntechnician.columns = technician.columns.str.lower()\n\n# merge the two tables on technician_id\nmerged_data = pd.merge(repair_assignment, technician, on='technician_id')\n\n# group by technician name and count the number of assignments\ngrouped_data = merged_data.groupby('name').size().reset_index(name='count')\n\n# sort the data by count in ascending order\nsorted_data = grouped_data.sort_values('count')\n\n# plot the bar chart\nplt.bar(sorted_data['name'], sorted_data['count'])\nplt.xlabel('Technician Name')\nplt.ylabel('Number of Assignments')\nplt.title('Number of Assignments per Technician')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "hospital_1",
    "question": "Can you create a pie chart to display the distribution of appointments among different nurses and their respective appointment counts?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nnurse = pd.read_sql(\"SELECT * FROM nurse\", conn)\nappointment = pd.read_sql(\"SELECT * FROM appointment\", conn)\nnurse.columns = nurse.columns.str.lower()\nappointment.columns = appointment.columns.str.lower()\n\n# Merge nurse and appointment tables\nmerged_df = pd.merge(nurse, appointment, left_on='employeeid', right_on='prepnurse')\n\n# Group by nurse name and count the number of appointments\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Plot pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['name'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "products_for_hire",
    "question": "How many bookings did each customer make? Show the customer id as the Y-axis and the first name as the X-axis in a bar chart, sort Y in descending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Customers table\ncustomers = pd.read_sql(\"SELECT * FROM Customers\", conn)\n\n# Read the bookings table\nbookings = pd.read_sql(\"SELECT * FROM bookings\", conn)\n\n# Convert column names to lowercase\ncustomers.columns = customers.columns.str.lower()\nbookings.columns = bookings.columns.str.lower()\n\n# merge the two tables on customer_id\nmerged_data = pd.merge(customers, bookings, on=\"customer_id\")\n\n# sort the merged data by customer_id in descending order\nsorted_data = merged_data.sort_values(by=\"customer_id\", ascending=False)\n\n# extract the first_name and customer_id columns\ndata = sorted_data[[\"first_name\", \"customer_id\"]]\n\n# plot the bar chart\nplt.bar(data[\"first_name\"], data[\"customer_id\"])\nplt.xlabel(\"First Name\")\nplt.ylabel(\"Customer ID\")\nplt.title(\"Customer ID by First Name\")\nplt.show()\n"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "For each product with some problems, list the count of problems and the product id. Show the correlation.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the 'problems' table\nproblems_df = pd.read_sql(\"SELECT * FROM problems\", conn)\n\n# Read the 'product' table\nproduct_df = pd.read_sql(\"SELECT * FROM product\", conn)\n\n# Convert column names to lowercase\nproblems_df.columns = problems_df.columns.str.lower()\nproduct_df.columns = product_df.columns.str.lower()\n\n# merge the two tables on 'product_id'\nmerged_df = pd.merge(problems_df, product_df, on='product_id')\n\n# group by 'product_id' and count the number of rows\ngrouped_df = merged_df.groupby('product_id').size().reset_index(name='count')\n\n# scatter plot\nplt.scatter(grouped_df['product_id'], grouped_df['count'])\nplt.xlabel('Product ID')\nplt.ylabel('Count')\nplt.title('Scatter Plot of Count vs Product ID')\nplt.show()\n"
  },
  {
    "db_id": "workshop_paper",
    "question": "Show me a bar chart displaying the count of acceptance results for each author, sorted in descending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nacceptance = pd.read_sql(\"SELECT * FROM acceptance\", conn)\nsubmission = pd.read_sql(\"SELECT * FROM submission\", conn)\nacceptance.columns = acceptance.columns.str.lower()\nsubmission.columns = submission.columns.str.lower()\n\n# Merge acceptance and submission tables\nmerged_df = pd.merge(acceptance, submission, on='submission_id')\n\n# Group by author and count the results\nresult_df = merged_df.groupby('author').size().reset_index(name='count')\n\n# Sort by count in descending order\nresult_df = result_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(result_df['author'], result_df['count'])\nplt.xlabel('Author')\nplt.ylabel('Count')\nplt.title('Number of Results by Author')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "icfp_1",
    "question": "Which authors, among those who have written papers with the word \"Functional\" in their titles, have the most occurrences? Display the first names of the authors in a bar chart.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nauthors = pd.read_sql(\"SELECT * FROM authors\", conn)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\npapers = pd.read_sql(\"SELECT * FROM papers\", conn)\nauthors.columns = authors.columns.str.lower()\nauthorship.columns = authorship.columns.str.lower()\npapers.columns = papers.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(authors, authorship, on='authid')\nmerged_df = pd.merge(merged_df, papers, on='paperid')\n\n# Filter rows with title containing 'functional'\nfiltered_df = merged_df[merged_df['title'].str.contains('functional', case=False)]\n\n# Group by fname and count\ngrouped_df = filtered_df.groupby('fname').size().reset_index(name='count')\n\n# Sort by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot bar chart\nplt.bar(sorted_df['fname'], sorted_df['count'])\nplt.xlabel('Author')\nplt.ylabel('Count')\nplt.title('Number of Papers with \"Functional\" in Title by Author')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "A bar chart compares the ages of all artists , rank by the X from low to high .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Assuming the data is already loaded into the 'artist' dataframe\n\n# Sort the dataframe by name in ascending order\nsorted_artist = artist.sort_values(by='name')\n\n# Extract the name and age columns\nname = sorted_artist['name']\nage = sorted_artist['age']\n\n# Create a bar plot\nplt.bar(name, age)\n\n# Set the x-axis label\nplt.xlabel('Name')\n\n# Set the y-axis label\nplt.ylabel('Age')\n\n# Set the title of the plot\nplt.title('Artist Age by Name')\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "A pie chart showing the number of customer addresses in each premises type.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read data from customer_addresses table\ncustomer_addresses = pd.read_sql(\"SELECT * FROM customer_addresses\", conn)\n\n# Read data from premises table\npremises = pd.read_sql(\"SELECT * FROM premises\", conn)\n\n# Convert column names to lowercase\ncustomer_addresses.columns = customer_addresses.columns.str.lower()\npremises.columns = premises.columns.str.lower()\n\n# merge the two tables on premise_id\nmerged_data = pd.merge(customer_addresses, premises, on=\"premise_id\")\n\n# group by premises_type and count the occurrences\ngrouped_data = merged_data.groupby(\"premises_type\").size().reset_index(name=\"count\")\n\n# plot the pie chart\nplt.pie(grouped_data[\"count\"], labels=grouped_data[\"premises_type\"], autopct=\"%1.1f%%\")\nplt.title(\"Distribution of Premises Types\")\nplt.show()\n"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Show me a bar chart displaying the day number on the x-axis and the count of documents on the y-axis.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nAll_documents = pd.read_sql(\"SELECT * FROM All_documents\", conn)\nRef_calendar = pd.read_sql(\"SELECT * FROM Ref_calendar\", conn)\nAll_documents.columns = All_documents.columns.str.lower()\nRef_calendar.columns = Ref_calendar.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(All_documents, Ref_calendar, left_on='date_stored', right_on='calendar_date')\n\n# Group by day_number and count the number of records\ngrouped_df = merged_df.groupby('day_number').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['day_number'], grouped_df['count'])\nplt.xlabel('Day Number')\nplt.ylabel('Count')\nplt.title('Number of Documents by Day Number')\nplt.show()"
  },
  {
    "db_id": "company_office",
    "question": "Draw a bar chart for what are the name and assets of each company, sorted in ascending order of company name?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Companies table\ncompanies = pd.read_sql(\"SELECT * FROM Companies\", conn)\n\n# Convert column names to lowercase\ncompanies.columns = companies.columns.str.lower()\n\n# Sort the data by name in ascending order\ncompanies = companies.sort_values(by='name')\n\n# Extract the required columns\nname = companies['name']\nassets_billion = companies['assets_billion']\n\n# Create a bar plot\nplt.bar(name, assets_billion)\nplt.xlabel('Company Name')\nplt.ylabel('Assets (in billions)')\nplt.title('Company Assets')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "For each product which has problems, what are the number of problems and the product id. Visualize by scatter chart.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the 'problems' table\nproblems_df = pd.read_sql(\"SELECT * FROM problems\", conn)\n\n# Read the 'product' table\nproduct_df = pd.read_sql(\"SELECT * FROM product\", conn)\n\n# Convert column names to lowercase\nproblems_df.columns = problems_df.columns.str.lower()\nproduct_df.columns = product_df.columns.str.lower()\n\n# merge the two tables on 'product_id'\nmerged_df = pd.merge(problems_df, product_df, on='product_id')\n\n# group by 'product_id' and count the number of rows\ngrouped_df = merged_df.groupby('product_id').size().reset_index(name='count')\n\n# scatter plot\nplt.scatter(grouped_df['product_id'], grouped_df['count'])\nplt.xlabel('Product ID')\nplt.ylabel('Count')\nplt.title('Scatter Plot of Count vs Product ID')\nplt.show()\n"
  },
  {
    "db_id": "bike_1",
    "question": "What are the names and average durations of the top 5 start stations with the longest average trip durations, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\nstation.columns = station.columns.str.lower()\ntrip.columns = trip.columns.str.lower()\n\n# Joining the station and trip tables\nmerged_df = pd.merge(station, trip, left_on='id', right_on='start_station_id')\n\n# Grouping by start_station_id and calculating the average duration\ngrouped_df = merged_df.groupby('start_station_id').agg({'name': 'first', 'duration': 'mean'}).reset_index()\n\n# Sorting by average duration in descending order and selecting top 5 rows\ntop_5_stations = grouped_df.sort_values('duration', ascending=False).head(5)\n\n# Creating the bar plot\nplt.bar(top_5_stations['name'], top_5_stations['duration'])\nplt.xlabel('Station Name')\nplt.ylabel('Average Duration')\nplt.title('Top 5 Stations with Highest Average Duration')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Compare the average of artists' age by country in a bar graph , and could you show Country from low to high order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Calculate average age by country\navg_age_by_country = artist.groupby('country')['age'].mean().reset_index()\n\n# Sort by country in ascending order\navg_age_by_country = avg_age_by_country.sort_values('country')\n\n# Plot bar chart\nplt.bar(avg_age_by_country['country'], avg_age_by_country['age'])\nplt.xlabel('Country')\nplt.ylabel('Average Age')\nplt.title('Average Age of Artists by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "List the number of games in each season with a line chart , sort from high to low by the X .",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\ngame.columns = game.columns.str.lower()\n\n# Grouping the data by season and counting the number of games in each season\nseason_count = game.groupby('season').size().reset_index(name='count')\n\n# Sorting the data by season in descending order\nseason_count = season_count.sort_values('season', ascending=False)\n\n# Plotting the line chart\nplt.plot(season_count['season'], season_count['count'])\nplt.xlabel('Season')\nplt.ylabel('Count')\nplt.title('Number of Games by Season')\nplt.show()"
  },
  {
    "db_id": "entertainment_awards",
    "question": "Show the ids and names of festivals that have at least two nominations for artworks by a bar chart.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the tables from the database\nnomination = pd.read_sql(\"SELECT * FROM nomination\", conn)\nartwork = pd.read_sql(\"SELECT * FROM artwork\", conn)\nfestival_detail = pd.read_sql(\"SELECT * FROM festival_detail\", conn)\n\n# Convert column names to lowercase\nnomination.columns = nomination.columns.str.lower()\nartwork.columns = artwork.columns.str.lower()\nfestival_detail.columns = festival_detail.columns.str.lower()\n\n# Merge the tables\nmerged_data = pd.merge(nomination, artwork, on=\"artwork_id\")\nmerged_data = pd.merge(merged_data, festival_detail, on=\"festival_id\")\n\n# Group by festival name and count the number of nominations\ngrouped_data = merged_data.groupby(\"festival_name\").size().reset_index(name=\"count\")\n\n# Plot the bar chart\nplt.bar(grouped_data[\"festival_name\"], grouped_data[\"count\"])\nplt.xlabel(\"Festival Name\")\nplt.ylabel(\"Number of Nominations\")\nplt.title(\"Number of Nominations per Festival\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "How many players are injured in each day? Show a bar chart, and I want to order from high to low by the x-axis.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the game and injury_accident tables\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\ninjury_accident = pd.read_sql(\"SELECT * FROM injury_accident\", conn)\n\n# Convert column names to lowercase\ngame.columns = game.columns.str.lower()\ninjury_accident.columns = injury_accident.columns.str.lower()\n# Merge the game and injury_accident tables on the correct column name\nmerged_data = pd.merge(game, injury_accident, left_on=\"id\", right_on=\"game_id\")\n\n# Group by Date and count the occurrences\ngrouped_data = merged_data.groupby(\"date\").size().reset_index(name=\"count\")\n\n# Sort the data by Date in descending order\nsorted_data = grouped_data.sort_values(\"date\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"date\"], sorted_data[\"count\"])\nplt.xlabel(\"Date\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Injury Accidents per Date\")\nplt.xticks(rotation=45)\nplt.show()\n"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "How many documents for different location code ? Plot a bar chart to show the proportion .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDocument_locations = pd.read_sql(\"SELECT * FROM Document_locations\", conn)\nDocument_locations.columns = Document_locations.columns.str.lower()\n\n# Group by location_code and count the occurrences\nlocation_counts = Document_locations.groupby('location_code').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(location_counts['location_code'], location_counts['count'])\nplt.xlabel('Location Code')\nplt.ylabel('Count')\nplt.title('Document Locations')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Show all payment method codes and the number of orders for each code in a bar chart, list by the Y from high to low.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the INVOICES table\ninvoices = pd.read_sql(\"SELECT * FROM INVOICES\", conn)\n\n# Convert column names to lowercase\ninvoices.columns = invoices.columns.str.lower()\n\n# Perform the SQL query\npayment_counts = invoices.groupby('payment_method_code').size().reset_index(name='count')\npayment_counts = payment_counts.sort_values(by='count', ascending=False)\n\n# Generate the bar plot\nplt.bar(payment_counts['payment_method_code'], payment_counts['count'])\nplt.xlabel('Payment Method Code')\nplt.ylabel('Count')\nplt.title('Number of Invoices by Payment Method')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Show me a bar chart for how many drama workshop groups are there in each city? Return both the city and the count, and I want to show names from high to low order please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Addresses table\naddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\naddresses.columns = map(str.lower, addresses.columns)\n\n# Read the Drama_Workshop_Groups table\ndrama_workshop_groups = pd.read_sql(\"SELECT * FROM Drama_Workshop_Groups\", conn)\ndrama_workshop_groups.columns = map(str.lower, drama_workshop_groups.columns)\n\n# Merge the two tables on Address_ID\nmerged_data = pd.merge(addresses, drama_workshop_groups, on='address_id')\n\n# Perform the group by and count\ngrouped_data = merged_data.groupby('city_town').size().reset_index(name='count')\n\n# Sort the data by City_Town in descending order\nsorted_data = grouped_data.sort_values('city_town', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data['city_town'], sorted_data['count'])\nplt.xlabel('City_Town')\nplt.ylabel('Count')\nplt.title('Number of Drama Workshop Groups in Each City_Town')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "icfp_1",
    "question": "Show me a bar chart displaying the number of papers written by each author.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nauthors = pd.read_sql(\"SELECT * FROM authors\", conn)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\npapers = pd.read_sql(\"SELECT * FROM papers\", conn)\nauthors.columns = authors.columns.str.lower()\nauthorship.columns = authorship.columns.str.lower()\npapers.columns = papers.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(authors, authorship, on='authid')\nmerged_df = pd.merge(merged_df, papers, on='paperid')\n\n# Group by lname and count paperid\ngrouped_df = merged_df.groupby('lname')['paperid'].count().reset_index()\n\n# Sort by lname in descending order\nsorted_df = grouped_df.sort_values('lname', ascending=False)\n\n# Plot bar chart\nplt.bar(sorted_df['lname'], sorted_df['paperid'])\nplt.xlabel('Last Name')\nplt.ylabel('Number of Papers')\nplt.title('Number of Papers by Last Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "A bar chart for what are the number of the names of the technicians that are assigned to repair machines with more point values than 70?, and could you sort how many name from low to high order?",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the repair_assignment table\nrepair_assignment = pd.read_sql(\"SELECT * FROM repair_assignment\", conn)\n\n# Read the machine table\nmachine = pd.read_sql(\"SELECT * FROM machine\", conn)\n\n# Read the technician table\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\n\n# Convert column names to lowercase\nrepair_assignment.columns = repair_assignment.columns.str.lower()\nmachine.columns = machine.columns.str.lower()\ntechnician.columns = technician.columns.str.lower()\n\n# merge the tables\nmerged_data = pd.merge(repair_assignment, machine, on=\"machine_id\")\nmerged_data = pd.merge(merged_data, technician, on=\"technician_id\")\n\n# filter the data\nfiltered_data = merged_data[merged_data[\"value_points\"] > 70]\n\n# group by name and count occurrences\ngrouped_data = filtered_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# sort the data by count in ascending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=True)\n\n# plot the bar chart\nplt.bar(sorted_data[\"name\"], sorted_data[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Repairs by Name\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "machine_repair",
    "question": "Show different teams of technicians and the number of technicians in each team, list by the bar in desc.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the technician table\ntechnician_df = pd.read_sql(\"SELECT * FROM technician\", conn)\n\n# Convert column names to lowercase\ntechnician_df.columns = technician_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = technician_df.groupby('team').size().reset_index(name='count').sort_values('team', ascending=False)\n\n# Generate the bar chart\nplt.bar(result_df['team'], result_df['count'])\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Technician Count by Team')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Show me a bar chart displaying the total number of order items for each product with a price above 2000.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nORDER_ITEMS = pd.read_sql(\"SELECT * FROM ORDER_ITEMS\", conn)\nProducts = pd.read_sql(\"SELECT * FROM Products\", conn)\nORDER_ITEMS.columns = ORDER_ITEMS.columns.str.lower()\nProducts.columns = Products.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(ORDER_ITEMS, Products, on='product_id')\n\n# Filter the data based on product_price > 2000\nfiltered_df = merged_df[merged_df['product_price'] > 2000]\n\n# Group by product_name and count the total_order_items\ngrouped_df = filtered_df.groupby('product_name').size().reset_index(name='total_order_items')\n\n# Plot the bar chart\nplt.bar(grouped_df['product_name'], grouped_df['total_order_items'])\nplt.xlabel('Product Name')\nplt.ylabel('Total Order Items')\nplt.title('Total Order Items per Product (Product Price > 2000)')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Bin the Year into weekday interval, then group and count by Year.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the exhibition table\nexhibition_df = pd.read_sql(\"SELECT * FROM exhibition\", conn)\n\n# Convert column names to lowercase\nexhibition_df.columns = exhibition_df.columns.str.lower()\n\n# Group by Year and count the occurrences\nyear_counts = exhibition_df.groupby('year').size().reset_index(name='count')\n\n# Create a bar plot\nplt.bar(year_counts['year'], year_counts['count'])\nplt.xlabel('Year')\nplt.ylabel('Count')\nplt.title('Exhibition Count by Year')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "What is the name of the storm that affected both Afghanistan and Albania regions, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naffected_region = pd.read_sql(\"SELECT * FROM affected_region\", conn)\nregion = pd.read_sql(\"SELECT * FROM region\", conn)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\naffected_region.columns = affected_region.columns.str.lower()\nregion.columns = region.columns.str.lower()\nstorm.columns = storm.columns.str.lower()\n\n# Merge tables affected_region, region, and storm\nmerged_data = pd.merge(pd.merge(affected_region, region, on='region_id'), storm, on='storm_id')\n\n# Filter data for Afghanistan and Albania\nfiltered_data = merged_data[(merged_data['region_name'] == 'Afghanistan') | (merged_data['region_name'] == 'Albania')]\n\n# Group by storm name and count occurrences\ngrouped_data = filtered_data.groupby('name').size().reset_index(name='count')\n\n# Plot pie chart\nplt.pie(grouped_data['count'], labels=grouped_data['name'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.title('Storm Distribution in Afghanistan and Albania')\nplt.show()"
  },
  {
    "db_id": "gymnast",
    "question": "Show me a bar chart displaying the average total points for each age group of gymnasts, ranked by the sum of total points in descending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngymnast = pd.read_sql(\"SELECT * FROM gymnast\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\ngymnast.columns = gymnast.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(gymnast, people, left_on='gymnast_id', right_on='people_id')\n\n# Group by age and calculate the average total points\ngrouped_df = merged_df.groupby('age')['total_points'].mean().reset_index()\n\n# Sort the dataframe by total points in descending order\nsorted_df = grouped_df.sort_values('total_points', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['age'], sorted_df['total_points'])\nplt.xlabel('Age')\nplt.ylabel('Average Total Points')\nplt.title('Average Total Points by Age')\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Compare the number of participants in each participant type code using a bar chart, order from low to high by the X-axis please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Participants table\nparticipants = pd.read_sql(\"SELECT * FROM Participants\", conn)\n\n# Convert column names to lowercase\nparticipants.columns = participants.columns.str.lower()\n\n# Perform the SQL query\nresult = participants.groupby('participant_type_code').size().reset_index(name='count').sort_values('participant_type_code')\n\n# Generate the bar chart\nplt.bar(result['participant_type_code'], result['count'])\nplt.xlabel('Participant Type Code')\nplt.ylabel('Count')\nplt.title('Number of Participants by Type')\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Draw a bar chart that counts the number of venues of each workshop , could you rank by the total number in asc ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nworkshop = pd.read_sql(\"SELECT * FROM workshop\", conn)\nworkshop.columns = workshop.columns.str.lower()\n\n# Grouping the data by venue and counting the occurrences\nvenue_counts = workshop.groupby('venue').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nvenue_counts = venue_counts.sort_values('count')\n\n# Creating the bar plot\nplt.bar(venue_counts['venue'], venue_counts['count'])\nplt.xlabel('Venue')\nplt.ylabel('Count')\nplt.title('Workshop Venues')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "twitter_1",
    "question": "List the name and number of followers for each user , and sort the results by the number of followers in descending order with a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nuser_profiles = pd.read_sql(\"SELECT * FROM user_profiles\", conn)\nuser_profiles.columns = user_profiles.columns.str.lower()\n\n# Assuming user_profiles is a DataFrame containing the table data\n\n# Sort the DataFrame by followers in descending order\nsorted_profiles = user_profiles.sort_values(by='followers', ascending=False)\n\n# Extract the name and followers columns\nnames = sorted_profiles['name']\nfollowers = sorted_profiles['followers']\n\n# Create a bar plot\nplt.bar(names, followers)\n\n# Add labels and title\nplt.xlabel('Name')\nplt.ylabel('Followers')\nplt.title('Number of Followers by User')\n\n# Rotate x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Show maximal lat from each city, and could you list by the total number in asc?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"station\" table\nstation_data = pd.read_sql(\"SELECT * FROM station\", conn)\n\n# Convert column names to lowercase\nstation_data.columns = station_data.columns.str.lower()\n\n# Perform the SQL query\nresult = station_data.groupby(\"city\")[\"lat\"].max().sort_values(ascending=True)\n\n# Create the bar plot\nplt.bar(result.index, result.values)\nplt.xlabel(\"City\")\nplt.ylabel(\"Max Latitude\")\nplt.title(\"Max Latitude by City\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "Can you create a pie chart displaying the count of each procedure name that costs more than 1000 but John Wen was not trained in?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nprocedures = pd.read_sql(\"SELECT * FROM procedures\", conn)\ntrained_in = pd.read_sql(\"SELECT * FROM trained_in\", conn)\nphysician = pd.read_sql(\"SELECT * FROM physician\", conn)\nprocedures.columns = procedures.columns.str.lower()\ntrained_in.columns = trained_in.columns.str.lower()\nphysician.columns = physician.columns.str.lower()\n\n# Perform the SQL query using pandas merge\nresult = pd.merge(pd.merge(procedures, trained_in, left_on='code', right_on='treatment'), physician, left_on='physician', right_on='employeeid')\n\n# Filter the data based on the conditions in the SQL query\nfiltered_result = result[(result['name_y'] != 'john wen') & (result['cost'] > 1000)]\n\n# Group the data by procedure name and count the occurrences\ngrouped_result = filtered_result.groupby('name_x').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_result['count'], labels=grouped_result['name_x'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Compare all countries with a bar chart , could you display by the bars in descending ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Group by country and count the number of artists in each country\ncountry_counts = artist.groupby('country').size().reset_index(name='count')\n\n# Sort the dataframe by country in descending order\ncountry_counts = country_counts.sort_values('country', ascending=False)\n\n# Plot the bar chart\nplt.bar(country_counts['country'], country_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Artists by Country')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Can you create a pie chart displaying the distribution of artists' names participating in each exhibition, along with the corresponding theme of each exhibition?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nexhibition.columns = exhibition.columns.str.lower()\nartist.columns = artist.columns.str.lower()\n\n# Perform the join operation\nresult = pd.merge(exhibition, artist, on='artist_id')\n\n# Group by theme and concatenate artist names\ngrouped = result.groupby('theme')['name'].apply(lambda x: ', '.join(x.unique())).reset_index()\n\n# Plot the pie chart\nplt.pie(grouped['name'], labels=grouped['theme'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death , show me the name and the total number of deaths with a bar chart , and order by the x-axis from low to high please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm.columns = storm.columns.str.lower()\n\n# Filter the storm dataframe\nfiltered_storm = storm[storm['number_deaths'] >= 1]\n\n# Sort the filtered dataframe by name\nsorted_storm = filtered_storm.sort_values('name')\n\n# Create the bar plot\nplt.bar(sorted_storm['name'], sorted_storm['number_deaths'])\nplt.xlabel('Name')\nplt.ylabel('Number of Deaths')\nplt.title('Storms with Number of Deaths >= 1')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "aircraft",
    "question": "A pie chart for what are the number of the descriptions for the aircrafts?",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the aircraft table\naircraft = pd.read_sql(\"SELECT * FROM aircraft\", conn)\n\n# Convert column names to lowercase\naircraft.columns = aircraft.columns.str.lower()\n\n# Perform the SQL query\ndescription_count = aircraft.groupby('description').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(description_count['count'], labels=description_count['description'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Can you create a pie chart to display the distribution of stations that have had more than 12 bikes available?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstatus = pd.read_sql(\"SELECT * FROM status\", conn)\nstation.columns = station.columns.str.lower()\nstatus.columns = status.columns.str.lower()\n\n# Merge station and status tables\nmerged_df = pd.merge(station, status, left_on='id', right_on='station_id')\n\n# Filter rows where bikes_available > 12\nfiltered_df = merged_df[merged_df['bikes_available'] > 12]\n\n# Group by station name and count the number of rows\ngrouped_df = filtered_df.groupby('name').size().reset_index(name='count')\n\n# Plot pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['name'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.title('Number of Stations with Bikes Available > 12')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Give me a bar chart about the number of customer addresses in each premises type, display premises_type in asc order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read data from customer_addresses table\ncustomer_addresses = pd.read_sql(\"SELECT * FROM customer_addresses\", conn)\n\n# Read data from premises table\npremises = pd.read_sql(\"SELECT * FROM premises\", conn)\n\n# Convert column names to lowercase\ncustomer_addresses.columns = customer_addresses.columns.str.lower()\npremises.columns = premises.columns.str.lower()\n\n# merge the two tables on premise_id\nmerged_data = pd.merge(customer_addresses, premises, on=\"premise_id\")\n\n# group by premises_type and count the occurrences\ngrouped_data = merged_data.groupby(\"premises_type\").size().reset_index(name=\"count\")\n\n# sort the data by premises_type in ascending order\nsorted_data = grouped_data.sort_values(\"premises_type\")\n\n# plot the bar chart\nplt.bar(sorted_data[\"premises_type\"], sorted_data[\"count\"])\nplt.xlabel(\"Premises Type\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of Premises Types\")\nplt.show()\n"
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "what are the names and id of courses having at most 2 sections?, show by the X from low to high.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Courses table\ncourses = pd.read_sql(\"SELECT * FROM Courses\", conn)\ncourses.columns = courses.columns.str.lower()\n\n# Read the Sections table\nsections = pd.read_sql(\"SELECT * FROM Sections\", conn)\nsections.columns = sections.columns.str.lower()\n\n# Merge the Courses and Sections tables on course_id\nmerged_data = pd.merge(courses, sections, on=\"course_id\")\n\n# Sort the merged data by course_name\nsorted_data = merged_data.sort_values(by=\"course_name\")\n\n# Create a bar plot of course_name and course_id\nplt.bar(sorted_data[\"course_name\"], sorted_data[\"course_id\"])\nplt.xlabel(\"Course Name\")\nplt.ylabel(\"Course ID\")\nplt.title(\"Course ID by Course Name\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "Show me a bar chart of the number of staff members living in each city, sorted in descending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nAddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\nStaff = pd.read_sql(\"SELECT * FROM Staff\", conn)\nAddresses.columns = Addresses.columns.str.lower()\nStaff.columns = Staff.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Addresses, Staff, left_on='address_id', right_on='staff_address_id')\n\n# Group by city and count the number of occurrences\ncity_counts = merged_df.groupby('city').size().reset_index(name='count')\n\n# Sort by count in descending order and select the top 5 cities\ntop_cities = city_counts.sort_values('count', ascending=False).head(5)\n\n# Plot the bar chart\nplt.bar(top_cities['city'], top_cities['count'])\nplt.xlabel('City')\nplt.ylabel('Count')\nplt.title('Top 5 Cities with Highest Staff Count')\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "How many orders were placed on each date by the customer named \"Jeramie\" in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\ncustomers.columns = customers.columns.str.lower()\norders.columns = orders.columns.str.lower()\n\n# Joining customers and orders tables\nmerged_df = pd.merge(customers, orders, on='customer_id')\n\n# Filtering data for customer_name = 'jeramie'\nfiltered_df = merged_df[merged_df['customer_name'] == 'Jeramie']\n\n# Grouping data by date_order_placed and counting the number of orders\ngrouped_df = filtered_df.groupby('date_order_placed').size().reset_index(name='count')\n\n# Plotting the bar chart\nplt.bar(grouped_df['date_order_placed'], grouped_df['count'])\nplt.xlabel('Date Order Placed')\nplt.ylabel('Count')\nplt.title('Number of Orders Placed by Date for Customer Jeramie')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "What are the values of docks_available and bikes_available for stations that have 7 bikes available, visualized in a scatter plot?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstatus = pd.read_sql(\"SELECT * FROM status\", conn)\nstation.columns = station.columns.str.lower()\nstatus.columns = status.columns.str.lower()\n\n# Merge station and status tables\nmerged_df = pd.merge(station, status, left_on='id', right_on='station_id')\n\n# Filter rows where bikes_available is 7\nfiltered_df = merged_df[merged_df['bikes_available'] == 7]\n\n# Create scatter plot\nplt.scatter(filtered_df['docks_available'], filtered_df['bikes_available'])\nplt.xlabel('Docks Available')\nplt.ylabel('Bikes Available')\nplt.title('Scatter Plot of Docks Available vs Bikes Available')\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "List all payment methods and number of payments using each payment methods Plot them as bar chart, display names in ascending order please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Customer_Payments table\ncustomer_payments = pd.read_sql(\"SELECT * FROM Customer_Payments\", conn)\n\n# Convert column names to lowercase\ncustomer_payments.columns = customer_payments.columns.str.lower()\n\n# Perform the SQL query\npayment_counts = customer_payments.groupby('payment_method_code').size().reset_index(name='count')\npayment_counts = payment_counts.sort_values('payment_method_code')\n\n# Generate the bar chart\nplt.bar(payment_counts['payment_method_code'], payment_counts['count'])\nplt.xlabel('Payment Method Code')\nplt.ylabel('Count')\nplt.title('Payment Method Counts')\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "Show me a bar chart of the pilots' names and the fleet series of the aircraft they have flown with, ranked by pilot rank.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npilot_record = pd.read_sql(\"SELECT * FROM pilot_record\", conn)\naircraft = pd.read_sql(\"SELECT * FROM aircraft\", conn)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot_record.columns = pilot_record.columns.str.lower()\naircraft.columns = aircraft.columns.str.lower()\npilot.columns = pilot.columns.str.lower()\n\n# Merge the tables\nmerged_df = pd.merge(pilot_record, aircraft, on='aircraft_id')\nmerged_df = pd.merge(merged_df, pilot, on='pilot_id')\n\n# Sort the merged dataframe by rank\nsorted_df = merged_df.sort_values(by='rank')\n\n# Create a bar plot\nplt.bar(sorted_df['pilot_name'], sorted_df['fleet_series'])\nplt.xlabel('Pilot Name')\nplt.ylabel('Fleet Series')\nplt.title('Pilot Fleet Series')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "icfp_1",
    "question": "Show me a bar chart displaying the count of papers written by each author.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nauthors = pd.read_sql(\"SELECT * FROM authors\", conn)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\npapers = pd.read_sql(\"SELECT * FROM papers\", conn)\nauthors.columns = authors.columns.str.lower()\nauthorship.columns = authorship.columns.str.lower()\npapers.columns = papers.columns.str.lower()\n\n# Perform the join operation\nmerged_data = pd.merge(pd.merge(authors, authorship, on='authid'), papers, on='paperid')\n\n# Group by lname and count the number of titles\ngrouped_data = merged_data.groupby('lname').agg({'title': 'count'}).reset_index()\n\n# Sort the data by count in descending order\nsorted_data = grouped_data.sort_values('title', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data['lname'], sorted_data['title'])\nplt.xlabel('Last Name')\nplt.ylabel('Number of Titles')\nplt.title('Number of Titles by Last Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "List all the log entry descriptions and count them using a bar chart , show in descending by the X-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nproblem_log = pd.read_sql(\"SELECT * FROM problem_log\", conn)\nproblem_log.columns = problem_log.columns.str.lower()\n\n# Grouping the data by log_entry_description and counting the occurrences\ngrouped_data = problem_log.groupby('log_entry_description').size().reset_index(name='count')\n\n# Sorting the data by log_entry_description in descending order\nsorted_data = grouped_data.sort_values('log_entry_description', ascending=False)\n\n# Creating the bar plot\nplt.bar(sorted_data['log_entry_description'], sorted_data['count'])\nplt.xlabel('Log Entry Description')\nplt.ylabel('Count')\nplt.title('Occurrences of Log Entry Descriptions')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Return a pie chart to show the proportion of participant type code.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Participants table\nparticipants = pd.read_sql(\"SELECT * FROM Participants\", conn)\n\n# Convert column names to lowercase\nparticipants.columns = participants.columns.str.lower()\n\n# Perform the SQL query\nresult = participants.groupby('participant_type_code').size()\n\n# Plot the pie chart\nplt.pie(result, labels=result.index, autopct='%1.1f%%')\nplt.title('Participant Type Distribution')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Show the id of each employee and the number of document destruction authorised by that employee by a scatter chart .",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nDocuments_to_be_destroyed = pd.read_sql(\"SELECT * FROM Documents_to_be_destroyed\", conn)\nDocuments_to_be_destroyed.columns = Documents_to_be_destroyed.columns.str.lower()\n\n# Group by destruction_authorised_by_employee_id and count the number of documents\ngrouped_data = Documents_to_be_destroyed.groupby('destruction_authorised_by_employee_id').size().reset_index(name='count')\n\n# Scatter plot\nplt.scatter(grouped_data['destruction_authorised_by_employee_id'], grouped_data['count'])\nplt.xlabel('Destruction Authorised by Employee ID')\nplt.ylabel('Count')\nplt.title('Number of Documents by Destruction Authorised by Employee ID')\nplt.show()"
  },
  {
    "db_id": "insurance_and_eClaims",
    "question": "For each policy type , return its type code and its count in the record Visualize by bar chart , and order from high to low by the X please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npolicies = pd.read_sql(\"SELECT * FROM policies\", conn)\npolicies.columns = policies.columns.str.lower()\n\n# Group by policy_type_code and count the number of occurrences\npolicy_counts = policies.groupby('policy_type_code').size().reset_index(name='count')\n\n# Sort the dataframe by policy_type_code in descending order\npolicy_counts = policy_counts.sort_values('policy_type_code', ascending=False)\n\n# Create a bar plot\nplt.bar(policy_counts['policy_type_code'], policy_counts['count'])\nplt.xlabel('Policy Type Code')\nplt.ylabel('Count')\nplt.title('Number of Policies by Policy Type Code')\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "Give a bar chart showing how many shops in each carrier, I want to show by the bars from high to low.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the stock table\nstock = pd.read_sql(\"SELECT * FROM stock\", conn)\nstock.columns = stock.columns.str.lower()\n\n# Read the device table\ndevice = pd.read_sql(\"SELECT * FROM device\", conn)\ndevice.columns = device.columns.str.lower()\n\n# Read the shop table\nshop = pd.read_sql(\"SELECT * FROM shop\", conn)\nshop.columns = shop.columns.str.lower()\n\n# Merge the tables\nmerged_data = pd.merge(stock, device, on=\"device_id\")\nmerged_data = pd.merge(merged_data, shop, on=\"shop_id\")\n\n# Perform the query\nresult = merged_data.groupby(\"carrier\").size().reset_index(name=\"count\")\nresult = result.sort_values(\"carrier\", ascending=False)\n\n# Plot the bar chart\nplt.bar(result[\"carrier\"], result[\"count\"])\nplt.xlabel(\"Carrier\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Devices by Carrier\")\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "For each station, just simply show its longitude and the average duration of trips that started from the station using a scatter chart.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the 'station' table\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstation.columns = map(str.lower, station.columns)\n\n# Read the 'trip' table\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\ntrip.columns = map(str.lower, trip.columns)\n\n# Merge the 'station' and 'trip' tables on 'id' and 'start_station_id' columns respectively\nmerged_data = pd.merge(station, trip, left_on='id', right_on='start_station_id')\n\n# Group by 'start_station_id' and calculate the average of 'duration'\ngrouped_data = merged_data.groupby('start_station_id')['duration'].mean()\n\n# Create a scatter plot\nplt.scatter(grouped_data.index, grouped_data.values)\nplt.xlabel('Longitude')\nplt.ylabel('Average Duration')\nplt.title('Scatter Plot of Average Duration vs Longitude')\nplt.show()"
  },
  {
    "db_id": "sakila_1",
    "question": "What is the title and count of the film with the highest number of copies in inventory, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nfilm = pd.read_sql(\"SELECT * FROM film\", conn)\ninventory = pd.read_sql(\"SELECT * FROM inventory\", conn)\nfilm.columns = film.columns.str.lower()\ninventory.columns = inventory.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(film, inventory, on='film_id')\n\n# Group by title and count the number of inventory for each title\ngrouped_df = merged_df.groupby('title').size().reset_index(name='inventory_count')\n\n# Sort the dataframe by inventory_count in descending order\nsorted_df = grouped_df.sort_values('inventory_count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['title'], sorted_df['inventory_count'])\nplt.xlabel('Film Title')\nplt.ylabel('Inventory Count')\nplt.title('Inventory Count by Film Title')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "I want to know the proportion of the total number for each customer status code .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nCustomers = pd.read_sql(\"SELECT * FROM Customers\", conn)\nCustomers.columns = Customers.columns.str.lower()\n\n# Assuming Customers is a DataFrame containing the table data\n\n# Grouping the data by customer_status_code and counting the occurrences\ngrouped_data = Customers.groupby('customer_status_code').size()\n\n# Creating a pie chart\nplt.pie(grouped_data, labels=grouped_data.index, autopct='%1.1f%%')\nplt.title('Customer Status')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "What is the count of documents for each calendar date in the All_documents table, represented by a line chart?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nAll_documents = pd.read_sql(\"SELECT * FROM All_documents\", conn)\nRef_calendar = pd.read_sql(\"SELECT * FROM Ref_calendar\", conn)\nAll_documents.columns = All_documents.columns.str.lower()\nRef_calendar.columns = Ref_calendar.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(All_documents, Ref_calendar, left_on='date_stored', right_on='calendar_date')\n\n# Group by calendar_date and count the number of occurrences\ngrouped_df = merged_df.groupby('calendar_date').size().reset_index(name='count')\n\n# Sort the dataframe by calendar_date\nsorted_df = grouped_df.sort_values('calendar_date')\n\n# Plot the line chart\nplt.plot(sorted_df['calendar_date'], sorted_df['count'])\nplt.xlabel('Calendar Date')\nplt.ylabel('Count')\nplt.title('Count of Documents by Calendar Date')\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "How many storms occured in each region Visualize by bar chart, sort from high to low by the X-axis.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the region table\nregion_df = pd.read_sql(\"SELECT * FROM region\", conn)\nregion_df.columns = map(str.lower, region_df.columns)\n\n# Read the affected_region table\naffected_region_df = pd.read_sql(\"SELECT * FROM affected_region\", conn)\naffected_region_df.columns = map(str.lower, affected_region_df.columns)\n\n# Merge the region and affected_region tables\nmerged_df = pd.merge(region_df, affected_region_df, on=\"region_id\")\n\n# Group by region_name and count the number of occurrences\ngrouped_df = merged_df.groupby(\"region_name\").size().reset_index(name=\"count\")\n\n# Sort the dataframe by region_name in descending order\nsorted_df = grouped_df.sort_values(\"region_name\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df[\"region_name\"], sorted_df[\"count\"])\nplt.xlabel(\"Region Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Occurrences by Region\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "question": "How many employees does each role have? Plot a bar chart listing role id and number of employees, display by the role_code in descending please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ROLES table\nroles_df = pd.read_sql(\"SELECT * FROM ROLES\", conn)\nroles_df.columns = roles_df.columns.str.lower()\n\n# Read the Employees table\nemployees_df = pd.read_sql(\"SELECT * FROM Employees\", conn)\nemployees_df.columns = employees_df.columns.str.lower()\n\n# Merge the ROLES and Employees tables on role_code\nmerged_df = pd.merge(roles_df, employees_df, on=\"role_code\")\n\n# Group by role_code and count the number of occurrences\ngrouped_df = merged_df.groupby(\"role_code\").size().reset_index(name=\"count\")\n\n# Sort the dataframe by role_code in descending order\nsorted_df = grouped_df.sort_values(\"role_code\", ascending=False)\n\n# Create a bar plot\nplt.bar(sorted_df[\"role_code\"], sorted_df[\"count\"])\nplt.xlabel(\"Role Code\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Employees by Role Code\")\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "Show a pie chart to compare the number of each position of the pilot .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot.columns = pilot.columns.str.lower()\n\n# Group by position and count the number of occurrences\nposition_counts = pilot.groupby('position').size().reset_index(name='count')\n\n# Create a pie chart\nplt.pie(position_counts['count'], labels=position_counts['position'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Display the chart\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "List the name and cost of all procedures sorted by the cost from the highest to the lowest by a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nprocedures = pd.read_sql(\"SELECT * FROM procedures\", conn)\nprocedures.columns = procedures.columns.str.lower()\n\n# Assuming procedures is a DataFrame containing the table data\n\n# Sort the DataFrame by cost in descending order\nsorted_procedures = procedures.sort_values(by='cost', ascending=False)\n\n# Extract the name and cost columns\nnames = sorted_procedures['name']\ncosts = sorted_procedures['cost']\n\n# Create a bar plot\nplt.bar(names, costs)\n\n# Set the x-axis label\nplt.xlabel('Procedure')\n\n# Set the y-axis label\nplt.ylabel('Cost')\n\n# Set the title\nplt.title('Procedure Costs')\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "perpetrator",
    "question": "Return a bar chart on what are the countries of perpetrators? Show each country and the corresponding number of perpetrators there.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the perpetrator table\nperpetrator_df = pd.read_sql(\"SELECT * FROM perpetrator\", conn)\n\n# Convert column names to lowercase\nperpetrator_df.columns = perpetrator_df.columns.str.lower()\n\n# Perform the group by operation\ngrouped_df = perpetrator_df.groupby('country').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['country'], grouped_df['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Perpetrators by Country')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "What is the scatter plot of the quality rank and name of technicians assigned to machines?",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nrepair_assignment = pd.read_sql(\"SELECT * FROM repair_assignment\", conn)\nmachine = pd.read_sql(\"SELECT * FROM machine\", conn)\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\nrepair_assignment.columns = repair_assignment.columns.str.lower()\nmachine.columns = machine.columns.str.lower()\ntechnician.columns = technician.columns.str.lower()\n\n# Perform the join operation\ndf = pd.merge(pd.merge(repair_assignment, machine, on='machine_id'), technician, on='technician_id')\n\n# Create a scatter plot\nplt.scatter(df['quality_rank'], df['name'])\nplt.xlabel('Quality Rank')\nplt.ylabel('Technician Name')\nplt.title('Scatter Plot of Quality Rank vs Technician Name')\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "Bar graph to show the total number from different role code , order by the the total number in ascending please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nusers = pd.read_sql(\"SELECT * FROM users\", conn)\nusers.columns = users.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\nrole_counts = users.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nrole_counts = role_counts.sort_values('count')\n\n# Creating a bar plot\nplt.bar(role_counts['role_code'], role_counts['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Users by Role Code')\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "Give a bar chart showing how many shops in each carrier, list by the the number of carrier in desc.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the stock table\nstock = pd.read_sql(\"SELECT * FROM stock\", conn)\nstock.columns = map(str.lower, stock.columns)\n\n# Read the device table\ndevice = pd.read_sql(\"SELECT * FROM device\", conn)\ndevice.columns = map(str.lower, device.columns)\n\n# Read the shop table\nshop = pd.read_sql(\"SELECT * FROM shop\", conn)\nshop.columns = map(str.lower, shop.columns)\n\n# Merge the tables\nmerged_data = pd.merge(stock, device, on=\"device_id\")\nmerged_data = pd.merge(merged_data, shop, on=\"shop_id\")\n\n# Perform the query\nresult = merged_data.groupby(\"carrier\").size().reset_index(name=\"count\")\nresult = result.sort_values(\"count\", ascending=False)\n\n# Plot the bar chart\nplt.bar(result[\"carrier\"], result[\"count\"])\nplt.xlabel(\"Carrier\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Devices by Carrier\")\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "What is the name of every city that has at least 15 stations and how many stations does it have Visualize by bar chart , rank in asc by the bars .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstation.columns = station.columns.str.lower()\n\n# Group by city and count the number of rows\ncity_counts = station.groupby('city').size().reset_index(name='count')\n\n# Sort the cities in ascending order\ncity_counts = city_counts.sort_values('city')\n\n# Create a bar plot\nplt.bar(city_counts['city'], city_counts['count'])\nplt.xlabel('City')\nplt.ylabel('Count')\nplt.title('Number of Stations in Each City')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show how many premises for different premises type in a pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\npremises = pd.read_sql(\"SELECT * FROM premises\", conn)\npremises.columns = premises.columns.str.lower()\n\n# Group by premises_type and count the occurrences\npremises_count = premises.groupby('premises_type').size().reset_index(name='count')\n\n# Create a pie chart\nplt.pie(premises_count['count'], labels=premises_count['premises_type'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Display the chart\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "A pie chart showing the total number of each ship's nationality.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ship table\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\n\n# Perform the SQL query\nresult = ship_df.groupby('nationality').size()\n\n# Plot the pie chart\nplt.pie(result, labels=result.index, autopct='%1.1f%%')\nplt.title('Nationality Distribution')\nplt.show()"
  },
  {
    "db_id": "perpetrator",
    "question": "What is the average height of perpetrators for each date, visualized in a line chart?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\nperpetrator = pd.read_sql(\"SELECT * FROM perpetrator\", conn)\npeople.columns = people.columns.str.lower()\nperpetrator.columns = perpetrator.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(people, perpetrator, on='people_id')\n\n# Calculate the average height for each date\navg_height_by_date = merged_df.groupby('date')['height'].mean()\n\n# Create a line plot\nplt.plot(avg_height_by_date.index, avg_height_by_date.values)\nplt.xlabel('Date')\nplt.ylabel('Average Height')\nplt.title('Average Height by Date')\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death , compare the number of deaths by dates active with a bar graph .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm.columns = storm.columns.str.lower()\n\n# Assuming storm is a DataFrame containing the table data\n\n# Filter the data to include only rows where number_deaths >= 1\nfiltered_data = storm[storm['number_deaths'] >= 1]\n\n# Select the columns dates_active and number_deaths\nselected_data = filtered_data[['dates_active', 'number_deaths']]\n\n# Plot a bar chart\nplt.bar(selected_data['dates_active'], selected_data['number_deaths'])\nplt.xlabel('Dates Active')\nplt.ylabel('Number of Deaths')\nplt.title('Number of Deaths by Dates Active')\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show different citizenship of singers and the number of singers of each citizenship in a bar chart , and rank in asc by the X .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Group by citizenship and count the number of singers\nsinger_count = singer.groupby('citizenship').size().reset_index(name='count')\n\n# Sort the data by citizenship in ascending order\nsinger_count = singer_count.sort_values('citizenship')\n\n# Create a bar plot\nplt.bar(singer_count['citizenship'], singer_count['count'])\nplt.xlabel('Citizenship')\nplt.ylabel('Count')\nplt.title('Number of Singers by Citizenship')\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "Show me a bar chart displaying the count of medications prescribed for each brand, ranked in descending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmedication = pd.read_sql(\"SELECT * FROM medication\", conn)\nprescribes = pd.read_sql(\"SELECT * FROM prescribes\", conn)\nmedication.columns = medication.columns.str.lower()\nprescribes.columns = prescribes.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(medication, prescribes, left_on='code', right_on='medication')\n\n# Group by brand and count the occurrences\nbrand_counts = merged_df.groupby('brand').size().reset_index(name='count')\n\n# Sort the counts in descending order\nsorted_counts = brand_counts.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_counts['brand'], sorted_counts['count'])\nplt.xlabel('Brand')\nplt.ylabel('Count')\nplt.title('Medication Brand Counts')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "small_bank_1",
    "question": "What is the total balance in the checking account and savings account for the customer named Brown, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nsavings = pd.read_sql(\"SELECT * FROM savings\", conn)\naccounts.columns = accounts.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\naccounts.columns = accounts.columns.str.lower()\nsavings.columns = savings.columns.str.lower()\n\n# Joining tables\ndf = pd.merge(accounts, checking, on='custid')\ndf = df[df['name'] == 'brown']\nchecking_total_balance = df['balance'].sum()\n\ndf = pd.merge(accounts, savings, on='custid')\ndf = df[df['name'] == 'brown']\nsavings_total_balance = df['balance'].sum()\n\n# Creating bar plot\naccount_types = ['checking', 'savings']\ntotal_balances = [checking_total_balance, savings_total_balance]\n\nplt.bar(account_types, total_balances)\nplt.xlabel('Account Type')\nplt.ylabel('Total Balance')\nplt.title('Total Balance by Account Type for Brown')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Give me a bar chart about the number of countries in the artist table, and list by the Country in asc.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the artist table\nartist_df = pd.read_sql(\"SELECT * FROM artist\", conn)\n\n# Convert column names to lowercase\nartist_df.columns = artist_df.columns.str.lower()\n\n# Perform the SQL query\nresult = artist_df.groupby('country').size().reset_index(name='count').sort_values('country')\n\n# Generate the bar chart\nplt.bar(result['country'], result['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Artists by Country')\nplt.show()"
  },
  {
    "db_id": "gymnast",
    "question": "Can you create a pie chart to display the distribution of gymnasts across different height ranges?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngymnast = pd.read_sql(\"SELECT * FROM gymnast\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\ngymnast.columns = gymnast.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(gymnast, people, left_on='gymnast_id', right_on='people_id')\n\n# Create a new column 'height_range' based on the height values\nmerged_df['height_range'] = pd.cut(merged_df['height'], bins=[0, 150, 160, 170, float('inf')],\n                                   labels=['under 150cm', '150-159cm', '160-169cm', 'above 170cm'])\n\n# Group by 'height_range' and count the number of occurrences\ngrouped_df = merged_df.groupby('height_range').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['height_range'], autopct='%1.1f%%')\nplt.title('Distribution of Gymnasts by Height Range')\nplt.show()"
  },
  {
    "db_id": "browser_web",
    "question": "Find the number of web accelerators used for each Operating system , I want to display in ascending by the X .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nweb_client_accelerator = pd.read_sql(\"SELECT * FROM web_client_accelerator\", conn)\nweb_client_accelerator.columns = web_client_accelerator.columns.str.lower()\n\n# Group by operating_system and count the occurrences\noperating_system_counts = web_client_accelerator.groupby('operating_system').size().reset_index(name='count')\n\n# Sort the counts by operating_system in ascending order\noperating_system_counts = operating_system_counts.sort_values('operating_system')\n\n# Create a bar plot\nplt.bar(operating_system_counts['operating_system'], operating_system_counts['count'])\nplt.xlabel('Operating System')\nplt.ylabel('Count')\nplt.title('Number of Clients by Operating System')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "perpetrator",
    "question": "Bar chart x axis country y axis the total number",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperpetrator = pd.read_sql(\"SELECT * FROM perpetrator\", conn)\nperpetrator.columns = perpetrator.columns.str.lower()\n\n# Group by country and count the number of occurrences\nperpetrator_count = perpetrator.groupby('country').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(perpetrator_count['country'], perpetrator_count['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Perpetrators by Country')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show me the total number by product category in a bar , I want to show from high to low by the Y .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmailshot_campaigns = pd.read_sql(\"SELECT * FROM mailshot_campaigns\", conn)\nmailshot_campaigns.columns = mailshot_campaigns.columns.str.lower()\n\n# Grouping the data by product_category and counting the occurrences\ngrouped_data = mailshot_campaigns.groupby('product_category').size().reset_index(name='count')\n\n# Sorting the data by count in descending order\nsorted_data = grouped_data.sort_values(by='count', ascending=False)\n\n# Creating the bar plot\nplt.bar(sorted_data['product_category'], sorted_data['count'])\nplt.xlabel('Product Category')\nplt.ylabel('Count')\nplt.title('Number of Campaigns by Product Category')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Bar chart x axis participant type code y axis the number of participant type code , show by the bar in desc please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nParticipants = pd.read_sql(\"SELECT * FROM Participants\", conn)\nParticipants.columns = Participants.columns.str.lower()\n\n# Group by participant_type_code and count the occurrences\ngrouped = Participants.groupby('participant_type_code').size().reset_index(name='count')\n\n# Sort by participant_type_code in descending order\ngrouped = grouped.sort_values('participant_type_code', ascending=False)\n\n# Create bar plot\nplt.bar(grouped['participant_type_code'], grouped['count'])\nplt.xlabel('Participant Type Code')\nplt.ylabel('Count')\nplt.title('Count of Participants by Participant Type Code')\nplt.show()"
  },
  {
    "db_id": "restaurant_1",
    "question": "List how many students in each last name who majored in 600 using a bar chart , and sort by the bars from low to high .",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nStudent = pd.read_sql(\"SELECT * FROM Student\", conn)\nStudent.columns = Student.columns.str.lower()\n\n# Filter the dataframe based on the condition major = 600\nfiltered_df = Student[Student['major'] == 600]\n\n# Group the filtered dataframe by lname and count the occurrences\ngrouped_df = filtered_df.groupby('lname').size().reset_index(name='count')\n\n# Sort the grouped dataframe by lname in ascending order\nsorted_df = grouped_df.sort_values('lname')\n\n# Create a bar plot\nplt.bar(sorted_df['lname'], sorted_df['count'])\nplt.xlabel('Last Name')\nplt.ylabel('Count')\nplt.title('Number of Students by Last Name')\nplt.show()"
  },
  {
    "db_id": "aircraft",
    "question": "A bar chart for what are the number of the descriptions for the aircrafts?, and show by the Description in descending.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the aircraft table\naircraft = pd.read_sql(\"SELECT * FROM aircraft\", conn)\n\n# Convert column names to lowercase\naircraft.columns = aircraft.columns.str.lower()\n\n# Perform the SQL query\nresult = aircraft.groupby('description').size().reset_index(name='count').sort_values('description', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['description'], result['count'])\nplt.xlabel('Description')\nplt.ylabel('Count')\nplt.title('Number of Aircraft by Description')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "products_for_hire",
    "question": "How many bookings did each customer make? List the first name as the X-axis, and the count as the Y-axis in the bar chart, and show by the x axis in desc.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Customers and bookings tables\ncustomers = pd.read_sql(\"SELECT * FROM Customers\", conn)\nbookings = pd.read_sql(\"SELECT * FROM bookings\", conn)\n\n# Convert column names to lowercase\ncustomers.columns = customers.columns.str.lower()\nbookings.columns = bookings.columns.str.lower()\n\n# Merge the Customers and bookings tables on customer_id\nmerged_data = pd.merge(customers, bookings, on=\"customer_id\")\n\n# Group by first_name and count the number of bookings for each customer\ngrouped_data = merged_data.groupby(\"first_name\").size().reset_index(name=\"count\")\n\n# Sort the data by first_name in descending order\nsorted_data = grouped_data.sort_values(\"first_name\", ascending=False)\n\n# Create a bar plot\nplt.bar(sorted_data[\"first_name\"], sorted_data[\"count\"])\nplt.xlabel(\"First Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Bookings per Customer\")\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "What is the bar chart displaying the clubname and the count of members for the \"Tennis Club\"?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nstudent = pd.read_sql(\"SELECT * FROM student\", conn)\nclub.columns = club.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\nstudent.columns = student.columns.str.lower()\n\n# Join tables\ndf = pd.merge(club, member_of_club, on='clubid')\ndf = pd.merge(df, student, on='stuid')\n\n# Filter by clubname\ndf = df[df['clubname'] == 'Tennis Club']\n\n# Group by clubname and count\ndf_grouped = df.groupby('clubname').size().reset_index(name='count')\n\n# Plot bar chart\nplt.bar(df_grouped['clubname'], df_grouped['count'])\nplt.xlabel('Club Name')\nplt.ylabel('Count')\nplt.title('Number of Students in Tennis Club')\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "Show me a bar chart of the top 10 customers with the highest number of orders in \"Packing\" status.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\ncustomers.columns = customers.columns.str.lower()\norders.columns = orders.columns.str.lower()\n\n# Joining customers and orders tables\nmerged_df = pd.merge(customers, orders, on='customer_id')\n\n# Filtering orders with order_status = 'Packing'\nfiltered_df = merged_df[merged_df['order_status'] == 'Packing']\n\n# Grouping by customer_name and counting the number of orders\ngrouped_df = filtered_df.groupby('customer_name').size().reset_index(name='order_count')\n\n# Sorting by order_count in descending order and selecting top 10 rows\ntop_10_customers = grouped_df.sort_values('order_count', ascending=False).head(10)\n\n# Creating bar plot\nplt.bar(top_10_customers['customer_name'], top_10_customers['order_count'])\nplt.xlabel('Customer Name')\nplt.ylabel('Order Count')\nplt.title('Top 10 Customers with Most Orders')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "Create a bar chart showing how many location across location , and I want to display X from high to low order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nshop = pd.read_sql(\"SELECT * FROM shop\", conn)\nshop.columns = shop.columns.str.lower()\n\n# Group by location and count the occurrences\nlocation_counts = shop.groupby('location').size().reset_index(name='count')\n\n# Sort by location in descending order\nlocation_counts = location_counts.sort_values('location', ascending=False)\n\n# Create bar plot\nplt.bar(location_counts['location'], location_counts['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Shops by Location')\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "Which technicians are responsible for repairing machines with a point value exceeding 70, and what is the count of machines repaired by each technician? Display the results using a bar chart.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nrepair_assignment = pd.read_sql(\"SELECT * FROM repair_assignment\", conn)\nmachine = pd.read_sql(\"SELECT * FROM machine\", conn)\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\nrepair_assignment.columns = repair_assignment.columns.str.lower()\nmachine.columns = machine.columns.str.lower()\ntechnician.columns = technician.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(repair_assignment, machine, on='machine_id')\nmerged_df = pd.merge(merged_df, technician, on='technician_id')\n\n# Filtering the data\nfiltered_df = merged_df[merged_df['value_points'] > 70]\n\n# Grouping and counting the technician names\ngrouped_df = filtered_df.groupby('name').size().reset_index(name='count')\n\n# Sorting the data by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plotting the bar chart\nplt.bar(sorted_df['name'], sorted_df['count'])\nplt.xlabel('Technician Name')\nplt.ylabel('Count')\nplt.title('Number of Assignments per Technician')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show all distinct product categories along with the number of mailshots in each category in a bar chart , list in desc by the x axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmailshot_campaigns = pd.read_sql(\"SELECT * FROM mailshot_campaigns\", conn)\nmailshot_campaigns.columns = mailshot_campaigns.columns.str.lower()\n\n# Grouping the data by product_category and counting the occurrences\ngrouped_data = mailshot_campaigns.groupby('product_category').size().reset_index(name='count')\n\n# Sorting the data by product_category in descending order\nsorted_data = grouped_data.sort_values('product_category', ascending=False)\n\n# Creating the bar plot\nplt.bar(sorted_data['product_category'], sorted_data['count'])\nplt.xlabel('Product Category')\nplt.ylabel('Count')\nplt.title('Number of Campaigns by Product Category')\nplt.show()"
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "what are the names and id of courses having at most 2 sections?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Courses table\ncourses = pd.read_sql(\"SELECT * FROM Courses\", conn)\ncourses.columns = courses.columns.str.lower()\n\n# Read the Sections table\nsections = pd.read_sql(\"SELECT * FROM Sections\", conn)\nsections.columns = sections.columns.str.lower()\n\n# Merge the Courses and Sections tables on course_id\nmerged_data = pd.merge(courses, sections, on='course_id')\n\n# Group by course_name and count the number of occurrences\ncourse_counts = merged_data.groupby('course_name').size()\n\n# Plot the bar chart\nplt.bar(course_counts.index, course_counts.values)\nplt.xlabel('Course Name')\nplt.ylabel('Count')\nplt.title('Number of Sections per Course')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship in a bar chart , show by the x axis from low to high .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Group by citizenship and calculate the maximum net worth\nmax_net_worth = singer.groupby('citizenship')['net_worth_millions'].max()\n\n# Sort the data by citizenship in ascending order\nmax_net_worth = max_net_worth.sort_index()\n\n# Create a bar plot\nplt.bar(max_net_worth.index, max_net_worth.values)\n\n# Set the labels and title\nplt.xlabel('Citizenship')\nplt.ylabel('Max Net Worth (Millions)')\nplt.title('Max Net Worth by Citizenship')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Show the authors of their total submissions with a bar chart , and display x axis from high to low order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsubmission = pd.read_sql(\"SELECT * FROM submission\", conn)\nsubmission.columns = submission.columns.str.lower()\n\n# Group by author and count the number of submissions\nauthor_counts = submission.groupby('author').size().reset_index(name='count')\n\n# Sort the author counts in descending order\nauthor_counts = author_counts.sort_values('author', ascending=False)\n\n# Create a bar plot\nplt.bar(author_counts['author'], author_counts['count'])\nplt.xlabel('Author')\nplt.ylabel('Count')\nplt.title('Number of Submissions by Author')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "How many events did each participant attend, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nParticipants = pd.read_sql(\"SELECT * FROM Participants\", conn)\nParticipants_in_Events = pd.read_sql(\"SELECT * FROM Participants_in_Events\", conn)\nParticipants.columns = Participants.columns.str.lower()\nParticipants_in_Events.columns = Participants_in_Events.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Participants, Participants_in_Events, on='participant_id')\n\n# Group by participant_id and count the occurrences\ngrouped_df = merged_df.groupby('participant_id').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['participant_id'], grouped_df['count'])\nplt.xlabel('Participant ID')\nplt.ylabel('Count')\nplt.title('Number of Events per Participant')\nplt.show()"
  },
  {
    "db_id": "twitter_1",
    "question": "Find the name of each user and number of tweets tweeted by each of them Visualize by bar chart, and I want to list by the total number in desc.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the user_profiles table\nuser_profiles = pd.read_sql(\"SELECT * FROM user_profiles\", conn)\nuser_profiles.columns = map(str.lower, user_profiles.columns)\n\n# Read the tweets table\ntweets = pd.read_sql(\"SELECT * FROM tweets\", conn)\ntweets.columns = map(str.lower, tweets.columns)\n\n# Merge the user_profiles and tweets tables on uid column\nmerged_data = pd.merge(user_profiles, tweets, on=\"uid\")\n\n# Perform the SQL query\nresult = merged_data.groupby(\"name\").size().reset_index(name=\"count\").sort_values(by=\"count\", ascending=False)\n\n# Generate the bar plot\nplt.bar(result[\"name\"], result[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Tweets by User\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "insurance_and_eClaims",
    "question": "For each policy type , return its type code and its count in the record Visualize by bar chart , and rank the total number from low to high order please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\npolicies = pd.read_sql(\"SELECT * FROM policies\", conn)\npolicies.columns = policies.columns.str.lower()\n\n# Group by policy_type_code and count the number of occurrences\npolicy_counts = policies.groupby('policy_type_code').size().reset_index(name='count')\n\n# Sort the counts in ascending order\npolicy_counts = policy_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(policy_counts['policy_type_code'], policy_counts['count'])\nplt.xlabel('Policy Type Code')\nplt.ylabel('Count')\nplt.title('Number of Policies by Policy Type Code')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Bar chart x axis location code y axis how many location code",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDocument_locations = pd.read_sql(\"SELECT * FROM Document_locations\", conn)\nDocument_locations.columns = Document_locations.columns.str.lower()\n\n# Group by location_code and count the occurrences\nlocation_counts = Document_locations.groupby('location_code').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(location_counts['location_code'], location_counts['count'])\nplt.xlabel('Location Code')\nplt.ylabel('Count')\nplt.title('Document Locations')\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "Bar chart x axis away team y axis the number of away team, sort by the bars in asc.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the game table\ngame_df = pd.read_sql(\"SELECT * FROM game\", conn)\n\n# Convert column names to lowercase\ngame_df.columns = game_df.columns.str.lower()\n\n# Perform the SQL query\nresult = game_df.groupby('away_team').size().reset_index(name='count').sort_values('away_team')\n\n# Generate the bar plot\nplt.bar(result['away_team'], result['count'])\nplt.xlabel('Away Team')\nplt.ylabel('Count')\nplt.title('Number of Games by Away Team')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "Can you create a scatter plot to display the date and product id of the orders placed between 1975-01-01 and 1976-01-01?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\norder_items = pd.read_sql(\"SELECT * FROM order_items\", conn)\norders.columns = orders.columns.str.lower()\norder_items.columns = order_items.columns.str.lower()\n\n# Merge orders and order_items dataframes\nmerged_df = pd.merge(orders, order_items, on='order_id')\n\n# Filter data for the specified date range\nfiltered_df = merged_df[(merged_df['date_order_placed'] >= '1975-01-01') & (merged_df['date_order_placed'] <= '1976-01-01')]\n\n# Create scatter plot\nplt.scatter(filtered_df['date_order_placed'], filtered_df['product_id'])\nplt.xlabel('Date Order Placed')\nplt.ylabel('Product ID')\nplt.title('Scatter Plot of Product ID vs Date Order Placed')\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Visualize a bar chart for how many authors submit to the workshop .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsubmission = pd.read_sql(\"SELECT * FROM submission\", conn)\nsubmission.columns = submission.columns.str.lower()\n\n# Group by author and count the number of submissions\nauthor_counts = submission.groupby('author').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(author_counts['author'], author_counts['count'])\nplt.xlabel('Author')\nplt.ylabel('Count')\nplt.title('Number of Submissions by Author')\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "Show me a bar chart displaying the count of prescriptions for each medication, sorted in descending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nMedication = pd.read_sql(\"SELECT * FROM Medication\", conn)\nPrescribes = pd.read_sql(\"SELECT * FROM Prescribes\", conn)\nMedication.columns = Medication.columns.str.lower()\nPrescribes.columns = Prescribes.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Medication, Prescribes, left_on='code', right_on='medication')\n\n# Perform the group by and count operation\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Generate the bar plot\nplt.bar(sorted_df['name'], sorted_df['count'])\nplt.xlabel('Medication')\nplt.ylabel('Count')\nplt.title('Medication Count')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sakila_1",
    "question": "Show me a line chart displaying the rental date and the count of rentals for each date.",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nfilm = pd.read_sql(\"SELECT * FROM film\", conn)\ninventory = pd.read_sql(\"SELECT * FROM inventory\", conn)\nrental = pd.read_sql(\"SELECT * FROM rental\", conn)\nfilm.columns = film.columns.str.lower()\ninventory.columns = inventory.columns.str.lower()\nrental.columns = rental.columns.str.lower()\n\n# Merge tables\nmerged_df = pd.merge(film, inventory, on='film_id')\nmerged_df = pd.merge(merged_df, rental, on='inventory_id')\n\n# Convert rental_date column to datetime\nmerged_df['rental_date'] = pd.to_datetime(merged_df['rental_date'])\n\n# Group by rental_date and count\ngrouped_df = merged_df.groupby(merged_df['rental_date'].dt.date).size().reset_index(name='count')\n\n# Plot line chart\nplt.plot(grouped_df['rental_date'], grouped_df['count'])\nplt.xlabel('Rental Date')\nplt.ylabel('Count')\nplt.title('Number of Rentals per Date')\nplt.show()"
  },
  {
    "db_id": "insurance_and_eClaims",
    "question": "Find the number of records of each policy type and its type code. Plot them as pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the policies table\npolicies = pd.read_sql(\"SELECT * FROM policies\", conn)\n\n# Convert column names to lowercase\npolicies.columns = policies.columns.str.lower()\n\n# Perform the SQL query\npolicy_counts = policies.groupby('policy_type_code').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(policy_counts['count'], labels=policy_counts['policy_type_code'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Show me a bar chart displaying the count of acceptance results for each author in the submission table.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nacceptance = pd.read_sql(\"SELECT * FROM acceptance\", conn)\nsubmission = pd.read_sql(\"SELECT * FROM submission\", conn)\nacceptance.columns = acceptance.columns.str.lower()\nsubmission.columns = submission.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(acceptance, submission, on='submission_id')\n\n# Group by author and count the results\nresult_df = merged_df.groupby('author').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(result_df['author'], result_df['count'])\nplt.xlabel('Author')\nplt.ylabel('Count')\nplt.title('Number of Results by Author')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Give me a bar chart about the number of countries in the artist table , and show by the Y from low to high please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Group by country and count the number of artists in each country\ncountry_counts = artist.groupby('country').size().reset_index(name='count')\n\n# Sort the counts in ascending order\ncountry_counts = country_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(country_counts['country'], country_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Artists by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "What are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot.columns = pilot.columns.str.lower()\n\n# Group by nationality and count the number of pilots\nnationality_count = pilot.groupby('nationality').size().reset_index(name='count')\n\n# Plot pie chart\nplt.pie(nationality_count['count'], labels=nationality_count['nationality'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "Show me a bar chart displaying the average age of members in each club, sorted in ascending order of average age.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nstudent = pd.read_sql(\"SELECT * FROM student\", conn)\nclub.columns = club.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\nstudent.columns = student.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(club, member_of_club, on='clubid')\nmerged_df = pd.merge(merged_df, student, left_on='stuid', right_on='stuid')\n\n# Group by clubname and calculate average age\navg_age_by_club = merged_df.groupby('clubname')['age'].mean().reset_index()\n\n# Sort by average age in ascending order\navg_age_by_club = avg_age_by_club.sort_values('age')\n\n# Plot bar chart\nplt.bar(avg_age_by_club['clubname'], avg_age_by_club['age'])\nplt.xlabel('Club Name')\nplt.ylabel('Average Age')\nplt.title('Average Age by Club')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Which country has the highest number of exhibitions, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nexhibition.columns = exhibition.columns.str.lower()\nartist.columns = artist.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(exhibition, artist, on='artist_id')\n\n# Group by country and count the number of exhibitions\ngrouped_df = merged_df.groupby('country').size().reset_index(name='exhibitions')\n\n# Sort by exhibitions in descending order and select the top 1\ntop_country = grouped_df.sort_values('exhibitions', ascending=False).head(1)\n\n# Visualize the result using a bar chart\nplt.bar(top_country['country'], top_country['exhibitions'])\nplt.xlabel('Country')\nplt.ylabel('Number of Exhibitions')\nplt.title('Top Country with the Most Exhibitions')\nplt.show()"
  },
  {
    "db_id": "insurance_and_eClaims",
    "question": "Bar chart x axis policy type code y axis the total number , and order in ascending by the X-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npolicies = pd.read_sql(\"SELECT * FROM policies\", conn)\npolicies.columns = policies.columns.str.lower()\n\n# Group by policy_type_code and count the number of occurrences\npolicy_counts = policies.groupby('policy_type_code').size().reset_index(name='count')\n\n# Sort the dataframe by policy_type_code in ascending order\npolicy_counts = policy_counts.sort_values('policy_type_code')\n\n# Create a bar plot\nplt.bar(policy_counts['policy_type_code'], policy_counts['count'])\nplt.xlabel('Policy Type Code')\nplt.ylabel('Count')\nplt.title('Number of Policies by Policy Type Code')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show all distinct product categories along with the number of mailshots in each category in a bar chart , I want to sort in asc by the x-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmailshot_campaigns = pd.read_sql(\"SELECT * FROM mailshot_campaigns\", conn)\nmailshot_campaigns.columns = mailshot_campaigns.columns.str.lower()\n\n# Grouping the data by product_category and counting the occurrences\ngrouped_data = mailshot_campaigns.groupby('product_category').size().reset_index(name='count')\n\n# Sorting the data by product_category in ascending order\nsorted_data = grouped_data.sort_values('product_category')\n\n# Creating the bar plot\nplt.bar(sorted_data['product_category'], sorted_data['count'])\nplt.xlabel('Product Category')\nplt.ylabel('Count')\nplt.title('Number of Campaigns by Product Category')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show all distinct product categories along with the number of mailshots in each category Visualize by bar chart, rank x-axis from high to low order please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the mailshot_campaigns table\nmailshot_campaigns = pd.read_sql(\"SELECT * FROM mailshot_campaigns\", conn)\n\n# Convert column names to lowercase\nmailshot_campaigns.columns = map(str.lower, mailshot_campaigns.columns)\n\n# Perform the SQL query\nresult = mailshot_campaigns.groupby('product_category').size().reset_index(name='count')\nresult = result.sort_values('product_category', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['product_category'], result['count'])\nplt.xlabel('Product Category')\nplt.ylabel('Count')\nplt.title('Count of Mailshot Campaigns by Product Category')\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "What is the zip code of the customer with the first name Carole and last name Bernhard? Can you show the number of customers with the same zip code in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nCustomers = pd.read_sql(\"SELECT * FROM Customers\", conn)\nAddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\nCustomers.columns = Customers.columns.str.lower()\nAddresses.columns = Addresses.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Customers, Addresses, left_on='customer_address_id', right_on='address_id')\n\n# Filter the data for the specific customer\nfiltered_df = merged_df[(merged_df['first_name'] == 'Carole') & (merged_df['last_name'] == 'Bernhard')]\n\n# Group the data by zip_postcode and count the number of occurrences\ngrouped_df = filtered_df.groupby('zip_postcode').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['zip_postcode'], grouped_df['count'])\nplt.xlabel('Zip Postcode')\nplt.ylabel('Count')\nplt.title('Number of Customers by Zip Postcode')\nplt.show()"
  },
  {
    "db_id": "sakila_1",
    "question": "How many films are there in each category? List the genre name and the count with a bar chart, and list the total number in asc order please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read data from the film_category table\nfilm_category = pd.read_sql(\"SELECT * FROM film_category\", conn)\n\n# Read data from the category table\ncategory = pd.read_sql(\"SELECT * FROM category\", conn)\n\n# Convert column names to lowercase\nfilm_category.columns = film_category.columns.str.lower()\ncategory.columns = category.columns.str.lower()\n\n# merge the film_category and category tables on category_id\nmerged_data = pd.merge(film_category, category, on=\"category_id\")\n\n# group by category_id and count the number of occurrences\ngrouped_data = merged_data.groupby(\"category_id\").size().reset_index(name=\"count\")\n\n# sort the data by count in ascending order\nsorted_data = grouped_data.sort_values(\"count\")\n\n# plot the bar chart\nplt.bar(sorted_data[\"category_id\"], sorted_data[\"count\"])\nplt.xlabel(\"Category ID\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Films per Category\")\nplt.show()\n"
  },
  {
    "db_id": "entertainment_awards",
    "question": "Show the ids and names of festivals that have at least two nominations for artworks Plot them as bar chart, could you show by the X-axis from low to high?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the tables from the database\nnomination = pd.read_sql(\"SELECT * FROM nomination\", conn)\nartwork = pd.read_sql(\"SELECT * FROM artwork\", conn)\nfestival_detail = pd.read_sql(\"SELECT * FROM festival_detail\", conn)\n\n# Convert column names to lowercase\nnomination.columns = nomination.columns.str.lower()\nartwork.columns = artwork.columns.str.lower()\nfestival_detail.columns = festival_detail.columns.str.lower()\n\n# Merge the tables\nmerged_data = pd.merge(nomination, artwork, on=\"artwork_id\")\nmerged_data = pd.merge(merged_data, festival_detail, on=\"festival_id\")\n\n# Sort the merged data by festival name\nsorted_data = merged_data.sort_values(by=\"festival_name\")\n\n# Create a bar plot\nplt.bar(sorted_data[\"festival_name\"], sorted_data[\"festival_id\"])\nplt.xlabel(\"Festival Name\")\nplt.ylabel(\"Festival ID\")\nplt.title(\"Festival ID by Festival Name\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Show all calendar dates and day Numbers Plot them as line chart , list by the X-axis in asc please .",
    "chart": "Line",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nRef_calendar = pd.read_sql(\"SELECT * FROM Ref_calendar\", conn)\nRef_calendar.columns = Ref_calendar.columns.str.lower()\n\n# Assuming you have already read the table data into Ref_calendar dataframe\n\n# Sort the dataframe by calendar_date\nRef_calendar = Ref_calendar.sort_values(by='calendar_date')\n\n# Plotting the line chart\nplt.plot(Ref_calendar['calendar_date'], Ref_calendar['day_number'])\nplt.xlabel('Calendar Date')\nplt.ylabel('Day Number')\nplt.title('Line Chart of Day Number')\nplt.show()"
  },
  {
    "db_id": "college_3",
    "question": "Show me a bar chart of the full names of faculties who are members of the department with department number 520, grouped by first name and last name.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nFACULTY = pd.read_sql(\"SELECT * FROM FACULTY\", conn)\nMEMBER_OF = pd.read_sql(\"SELECT * FROM MEMBER_OF\", conn)\nFACULTY.columns = FACULTY.columns.str.lower()\nMEMBER_OF.columns = MEMBER_OF.columns.str.lower()\n\n# Perform the join operation\nresult = pd.merge(FACULTY, MEMBER_OF, on='facid')\n\n# Filter the data based on the condition\nfiltered_data = result[result['dno'] == 520]\n\n# Group the data by fname and lname and count the occurrences\ngrouped_data = filtered_data.groupby(['fname', 'lname']).size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_data['lname'], grouped_data['count'])\nplt.xlabel('Last Name')\nplt.ylabel('Count')\nplt.title('Faculty Members in Department 520')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show different types of ships and the number of ships of each type in a bar chart, and show Type in desc order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ship table\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\n\n# Perform the SQL query\nresult = ship_df.groupby('type').size().reset_index(name='count').sort_values('type', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['type'], result['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Number of Ships by Type')\nplt.show()"
  },
  {
    "db_id": "small_bank_1",
    "question": "Which account has the highest total checking and saving balance, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\nsavings = pd.read_sql(\"SELECT * FROM savings\", conn)\naccounts.columns = accounts.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\nsavings.columns = savings.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(accounts, checking, on='custid')\nmerged_df = pd.merge(merged_df, savings, on='custid')\n\n# Calculate the total balance\nmerged_df['total_balance'] = merged_df['balance_x'] + merged_df['balance_y']\n\n# Sort the dataframe by total_balance in descending order\nsorted_df = merged_df.sort_values(by='total_balance', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['name'], sorted_df['total_balance'])\nplt.xlabel('Name')\nplt.ylabel('Total Balance')\nplt.title('Total Balance by Customer')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "perpetrator",
    "question": "Show me a bar chart of the heights of people, ranked in descending order based on the number of people they injured.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\nperpetrator = pd.read_sql(\"SELECT * FROM perpetrator\", conn)\npeople.columns = people.columns.str.lower()\nperpetrator.columns = perpetrator.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(people, perpetrator, on='people_id')\n\n# Group by height and count the number of injured\ngrouped_df = merged_df.groupby('height')['injured'].count().reset_index()\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values('injured', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['height'], sorted_df['injured'])\nplt.xlabel('Height')\nplt.ylabel('Count of Injured')\nplt.title('Count of Injured by Height')\nplt.show()"
  },
  {
    "db_id": "entertainment_awards",
    "question": "How many nominated artworks of type \"Program Talent Show\" are there for each festival, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nnomination = pd.read_sql(\"SELECT * FROM nomination\", conn)\nartwork = pd.read_sql(\"SELECT * FROM artwork\", conn)\nfestival_detail = pd.read_sql(\"SELECT * FROM festival_detail\", conn)\n\nnomination.columns = nomination.columns.str.lower()\nartwork.columns = artwork.columns.str.lower()\nfestival_detail.columns = festival_detail.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(nomination, artwork, on='artwork_id')\nmerged_df = pd.merge(merged_df, festival_detail, on='festival_id')\n\n# Filter the data based on the artwork type\nfiltered_df = merged_df[merged_df['type'] == 'Program Talent Show']\n\n# Group by festival name and count the number of occurrences\ngrouped_df = filtered_df.groupby('festival_name').size().reset_index(name='count')\n\n# Create a pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['festival_name'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Display the chart\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "Show names of technicians and the number of machines they are assigned to repair Visualize by bar chart, and sort by the total number in asc.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the repair_assignment table\nrepair_assignment = pd.read_sql(\"SELECT * FROM repair_assignment\", conn)\n\n# Read the technician table\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\n\n# Convert column names to lowercase\nrepair_assignment.columns = repair_assignment.columns.str.lower()\ntechnician.columns = technician.columns.str.lower()\n\n# merge the two tables on technician_id\nmerged_data = pd.merge(repair_assignment, technician, on='technician_id')\n\n# group by technician name and count the number of assignments\ngrouped_data = merged_data.groupby('name').size().reset_index(name='count')\n\n# sort the data by count in ascending order\nsorted_data = grouped_data.sort_values('count')\n\n# plot the bar chart\nplt.bar(sorted_data['name'], sorted_data['count'])\nplt.xlabel('Technician Name')\nplt.ylabel('Number of Assignments')\nplt.title('Number of Assignments per Technician')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "gymnast",
    "question": "Create a pie chart displaying the distribution of gymnasts by their distinct hometowns, considering only those with a total points score greater than 57.5.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngymnast = pd.read_sql(\"SELECT * FROM gymnast\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\ngymnast.columns = gymnast.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Merge the two tables\nmerged_df = pd.merge(gymnast, people, left_on='gymnast_id', right_on='people_id')\n\n# Filter the data based on total_points > 57.5\nfiltered_df = merged_df[merged_df['total_points'] > 57.5]\n\n# Group by hometown and count the number of occurrences\ngrouped_df = filtered_df.groupby('hometown').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['hometown'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.title('Distribution of Gymnasts by Hometown')\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "Can you draw a bar chart to show the number of positions of the pilots ? , and I want to order bar in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot.columns = pilot.columns.str.lower()\n\n# Grouping the data by position and counting the occurrences\nposition_counts = pilot.groupby('position').size().reset_index(name='count')\n\n# Sorting the data by position in ascending order\nposition_counts = position_counts.sort_values('position')\n\n# Creating the bar plot\nplt.bar(position_counts['position'], position_counts['count'])\nplt.xlabel('Position')\nplt.ylabel('Count')\nplt.title('Number of Pilots by Position')\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "Show me a bar chart of the technicians' names and the number of machine series they repair, sorted in descending order by the count of machine series repaired.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nrepair_assignment = pd.read_sql(\"SELECT * FROM repair_assignment\", conn)\nmachine = pd.read_sql(\"SELECT * FROM machine\", conn)\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\nrepair_assignment.columns = repair_assignment.columns.str.lower()\nmachine.columns = machine.columns.str.lower()\ntechnician.columns = technician.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(pd.merge(repair_assignment, machine, on='machine_id'), technician, on='technician_id')\n\n# Grouping by technician name and counting machine series\ngrouped_df = merged_df.groupby('name')['machine_series'].count().reset_index()\n\n# Sorting by count in descending order\nsorted_df = grouped_df.sort_values('machine_series', ascending=False)\n\n# Plotting the bar chart\nplt.bar(sorted_df['name'], sorted_df['machine_series'])\nplt.xlabel('Technician Name')\nplt.ylabel('Count of Machine Series')\nplt.title('Count of Machine Series by Technician')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show different types of ships and the number of ships of each type in a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Grouping the ship dataframe by type and counting the occurrences\nship_grouped = ship.groupby('type').size().reset_index(name='count')\n\n# Creating a bar plot\nplt.bar(ship_grouped['type'], ship_grouped['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Ship Types')\nplt.show()"
  },
  {
    "db_id": "customer_deliveries",
    "question": "List the state names and the number of customers living in each state, order from low to high by the the total number .",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read data from the customer_addresses table\ncustomer_addresses = pd.read_sql(\"SELECT * FROM customer_addresses\", conn)\n\n# Read data from the addresses table\naddresses = pd.read_sql(\"SELECT * FROM addresses\", conn)\n\n# Convert column names to lowercase\ncustomer_addresses.columns = customer_addresses.columns.str.lower()\naddresses.columns = addresses.columns.str.lower()\n\n# merge the two tables on address_id\nmerged_data = pd.merge(customer_addresses, addresses, on=\"address_id\")\n\n# group by state_province_county and count the number of occurrences\ngrouped_data = merged_data.groupby(\"state_province_county\").size().reset_index(name=\"count\")\n\n# sort the data by count in ascending order\nsorted_data = grouped_data.sort_values(\"count\")\n\n# plot the bar chart\nplt.bar(sorted_data[\"state_province_county\"], sorted_data[\"count\"])\nplt.xlabel(\"State/Province/County\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Customers by State/Province/County\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "theme_gallery",
    "question": "Find dates and attendance for exhibitions that happened in 2004, show me the comparison of attendance by date.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the exhibition_record table\nexhibition_record = pd.read_sql(\"SELECT * FROM exhibition_record\", conn)\nexhibition_record.columns = map(str.lower, exhibition_record.columns)\n\n# Read the exhibition table\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nexhibition.columns = map(str.lower, exhibition.columns)\n\n# Merge the two tables based on exhibition_id\nmerged_data = pd.merge(exhibition_record, exhibition, on=\"exhibition_id\")\n\n# Filter the data for year 2004\nfiltered_data = merged_data[merged_data[\"year\"] == 2004]\n\n# Plot the bar chart\nplt.bar(filtered_data[\"date\"], filtered_data[\"attendance\"])\nplt.xlabel(\"Date\")\nplt.ylabel(\"Attendance\")\nplt.title(\"Exhibition Attendance in 2004\")\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "browser_web",
    "question": "Show me a bar chart displaying the number of web accelerators each browser is compatible with.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nbrowser = pd.read_sql(\"SELECT * FROM browser\", conn)\naccelerator_compatible_browser = pd.read_sql(\"SELECT * FROM accelerator_compatible_browser\", conn)\nbrowser.columns = browser.columns.str.lower()\naccelerator_compatible_browser.columns = accelerator_compatible_browser.columns.str.lower()\n\n# Join the two tables\nmerged_df = pd.merge(browser, accelerator_compatible_browser, left_on='id', right_on='browser_id')\n\n# Group by name and count the number of rows\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['name'], grouped_df['count'])\nplt.xlabel('Browser Name')\nplt.ylabel('Count')\nplt.title('Number of Accelerator Compatible Browsers')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show how many customer addresses in each address type code with a bar chart, and could you display by the Y in descending?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the customer_addresses table\ncustomer_addresses = pd.read_sql(\"SELECT * FROM customer_addresses\", conn)\n\n# Read the premises table\npremises = pd.read_sql(\"SELECT * FROM premises\", conn)\n\n# Convert column names to lowercase\ncustomer_addresses.columns = customer_addresses.columns.str.lower()\npremises.columns = premises.columns.str.lower()\n\n# merge the customer_addresses and premises tables on premise_id\nmerged_data = pd.merge(customer_addresses, premises, on=\"premise_id\")\n\n# group by address_type_code and count the occurrences\ngrouped_data = merged_data.groupby(\"address_type_code\").size().reset_index(name=\"count\")\n\n# sort the data by count in descending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=False)\n\n# plot the bar chart\nplt.bar(sorted_data[\"address_type_code\"], sorted_data[\"count\"])\nplt.xlabel(\"Address Type Code\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of Address Types\")\nplt.show()\n"
  },
  {
    "db_id": "theme_gallery",
    "question": "Show me a bar chart displaying the count of artists for each exhibition theme, ranked in descending order of count.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nexhibition.columns = exhibition.columns.str.lower()\nartist.columns = artist.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(exhibition, artist, on='artist_id')\n\n# Perform the group by and count operation\ngrouped_df = merged_df.groupby('theme')['name'].nunique().reset_index()\ngrouped_df.columns = ['theme', 'count']\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['theme'], sorted_df['count'])\nplt.xlabel('Theme')\nplt.ylabel('Count')\nplt.title('Number of Artists per Theme')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death, compare the total number of deaths by dates_active attribute, rank by the Dates_active in desc.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the storm table into a pandas DataFrame\nstorm_df = pd.read_sql(\"SELECT * FROM storm\", conn)\n\n# Convert column names to lowercase\nstorm_df.columns = storm_df.columns.str.lower()\n\n# Filter the DataFrame for rows where number_deaths >= 1\nfiltered_df = storm_df[storm_df['number_deaths'] >= 1]\n\n# Sort the filtered DataFrame by Dates_active in descending order\nsorted_df = filtered_df.sort_values('dates_active', ascending=False)\n\n# Create a bar plot\nplt.bar(sorted_df['dates_active'], sorted_df['number_deaths'])\nplt.xlabel('Dates Active')\nplt.ylabel('Number of Deaths')\nplt.title('Number of Deaths by Dates Active')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "How many injury accidents occurred in each game season, and what is the count for each season, displayed in a bar chart sorted in descending order of game season?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\ninjury_accident = pd.read_sql(\"SELECT * FROM injury_accident\", conn)\ngame.columns = game.columns.str.lower()\ninjury_accident.columns = injury_accident.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(game, injury_accident, left_on='id', right_on='game_id')\n\n# Group by season and count the number of occurrences\ngrouped_df = merged_df.groupby('season').size().reset_index(name='count')\n\n# Sort the dataframe by season in descending order\nsorted_df = grouped_df.sort_values('season', ascending=False)\n\n# Create the bar plot\nplt.bar(sorted_df['season'], sorted_df['count'])\nplt.xlabel('Season')\nplt.ylabel('Count')\nplt.title('Number of Injury Accidents by Season')\nplt.show()"
  },
  {
    "db_id": "restaurant_1",
    "question": "List how many students in each last name who majored in 600 using a bar chart, and show names from high to low order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the Student table\nstudent_data = pd.read_sql(\"SELECT * FROM Student\", conn)\n\n# Convert column names to lowercase\nstudent_data.columns = student_data.columns.str.lower()\n\n# Filter the data based on the condition Major = 600\nfiltered_data = student_data[student_data['major'] == 600]\n\n# Group the data by LName and count the occurrences\ngrouped_data = filtered_data.groupby('lname').size().reset_index(name='count')\n\n# Sort the data by LName in descending order\nsorted_data = grouped_data.sort_values('lname', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data['lname'], sorted_data['count'])\nplt.xlabel('Last Name')\nplt.ylabel('Count')\nplt.title('Number of Students by Last Name')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "For each type , what is the average tonnage . Plot them as pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Calculate average tonnage by ship type\nship_avg_tonnage = ship.groupby('type')['tonnage'].mean()\n\n# Create a pie chart\nplt.pie(ship_avg_tonnage, labels=ship_avg_tonnage.index, autopct='%1.1f%%')\nplt.title('Average Tonnage by Ship Type')\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "A bar chart for listing the number of the name of physicians who took some appointment, order by the y axis from high to low.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the appointment table\nappointment = pd.read_sql(\"SELECT * FROM appointment\", conn)\n\n# Read the physician table\nphysician = pd.read_sql(\"SELECT * FROM physician\", conn)\n\n# Convert column names to lowercase\nappointment.columns = appointment.columns.str.lower()\nphysician.columns = physician.columns.str.lower()\n\n# merge the appointment and physician tables on the physician column\nmerged_data = pd.merge(appointment, physician, left_on=\"physician\", right_on=\"employeeid\")\n\n# group by name and count the occurrences\ngrouped_data = merged_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# sort the data by count in descending order\nsorted_data = grouped_data.sort_values(by=\"count\", ascending=False)\n\n# plot the bar chart\nplt.bar(sorted_data[\"name\"], sorted_data[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Appointments by Physician\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "What are the different product names ? What is the average product price for each of them .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nPRODUCTS = pd.read_sql(\"SELECT * FROM PRODUCTS\", conn)\nPRODUCTS.columns = PRODUCTS.columns.str.lower()\n\n# Assuming you have already read the table data into a DataFrame called PRODUCTS\n\n# Calculate the average product price for each product name\navg_price = PRODUCTS.groupby('product_name')['product_price'].mean()\n\n# Create a pie chart\nplt.pie(avg_price, labels=avg_price.index, autopct='%1.1f%%')\nplt.title('Average Product Price by Product Name')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show different types of ships and the number of ships of each type Show bar chart , list in ascending by the names .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Grouping the ship dataframe by type and counting the occurrences\nship_grouped = ship.groupby('type').size().reset_index(name='count')\n\n# Sorting the ship_grouped dataframe by type in ascending order\nship_grouped = ship_grouped.sort_values('type')\n\n# Creating the bar plot\nplt.bar(ship_grouped['type'], ship_grouped['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Count of Ships by Type')\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "Bar chart x axis log entry description y axis the number of log entry description , could you show in asc by the log_entry_description please ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nproblem_log = pd.read_sql(\"SELECT * FROM problem_log\", conn)\nproblem_log.columns = problem_log.columns.str.lower()\n\n# Grouping the data by log_entry_description and counting the occurrences\ngrouped_data = problem_log.groupby('log_entry_description').size().reset_index(name='count')\n\n# Sorting the data by log_entry_description in ascending order\nsorted_data = grouped_data.sort_values('log_entry_description')\n\n# Creating the bar plot\nplt.bar(sorted_data['log_entry_description'], sorted_data['count'])\nplt.xlabel('Log Entry Description')\nplt.ylabel('Count')\nplt.title('Occurrences of Log Entry Descriptions')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "aircraft",
    "question": "What is the distribution of total passengers among aircraft associated with airports that have a total number of passengers bigger than 10000000, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naircraft = pd.read_sql(\"SELECT * FROM aircraft\", conn)\nairport_aircraft = pd.read_sql(\"SELECT * FROM airport_aircraft\", conn)\nairport = pd.read_sql(\"SELECT * FROM airport\", conn)\naircraft.columns = aircraft.columns.str.lower()\nairport_aircraft.columns = airport_aircraft.columns.str.lower()\nairport.columns = airport.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(aircraft, airport_aircraft, on='aircraft_id')\nmerged_df = pd.merge(merged_df, airport, on='airport_id')\n\n# Filter data\nfiltered_df = merged_df[merged_df['total_passengers'] > 10000000]\n\n# Group by aircraft and calculate sum of total_passengers\ngrouped_df = filtered_df.groupby('aircraft')['total_passengers'].sum().reset_index()\n\n# Plot pie chart\nplt.pie(grouped_df['total_passengers'], labels=grouped_df['aircraft'], autopct='%1.1f%%')\nplt.title('Total Passengers by Aircraft')\nplt.show()"
  },
  {
    "db_id": "battle_death",
    "question": "Bar chart of the number of date from each date , and could you show in ascending by the x axis ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nbattle = pd.read_sql(\"SELECT * FROM battle\", conn)\nbattle.columns = battle.columns.str.lower()\n\n# Grouping the data by date and counting the occurrences\ngrouped_data = battle.groupby('date').size().reset_index(name='count')\n\n# Sorting the data by date in ascending order\nsorted_data = grouped_data.sort_values('date')\n\n# Creating the bar plot\nplt.bar(sorted_data['date'], sorted_data['count'])\nplt.xlabel('Date')\nplt.ylabel('Count')\nplt.title('Occurrences by Date')\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "What is the count of problems reported after the date of any problems reported by the staff Rylan Homenick, grouped by problem id and ordered by problem id in ascending order, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nproblems = pd.read_sql(\"SELECT * FROM problems\", conn)\nstaff = pd.read_sql(\"SELECT * FROM staff\", conn)\nproblems = pd.read_sql(\"SELECT * FROM problems\", conn)\nstaff = pd.read_sql(\"SELECT * FROM staff\", conn)\nproblems.columns = problems.columns.str.lower()\nstaff.columns = staff.columns.str.lower()\nproblems.columns = problems.columns.str.lower()\nstaff.columns = staff.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(problems, staff, left_on='reported_by_staff_id', right_on='staff_id')\n\n# Filter data\nmax_date = merged_df.loc[(merged_df['staff_first_name'] == 'Rylan') & (merged_df['staff_last_name'] == 'Homenick'), 'date_problem_reported'].max()\nfiltered_df = merged_df.loc[merged_df['date_problem_reported'] > max_date]\n\n# Group and count\ngrouped_df = filtered_df.groupby('problem_id').size().reset_index(name='count')\n\n# Sort by problem_id\nsorted_df = grouped_df.sort_values('problem_id')\n\n# Plot bar chart\nplt.bar(sorted_df['problem_id'], sorted_df['count'])\nplt.xlabel('Problem ID')\nplt.ylabel('Count')\nplt.title('Number of Problems by Problem ID')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Show me a bar chart of the installation date for each ending station, sorted in descending order by the number of trips for each installation date.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\ntrip.columns = trip.columns.str.lower()\nstation.columns = station.columns.str.lower()\n\n# Joining trip and station tables\nmerged_df = pd.merge(trip, station, left_on='end_station_id', right_on='id')\n\n# Grouping by installation_date and counting the number of trips\ngrouped_df = merged_df.groupby('installation_date').size().reset_index(name='count')\n\n# Sorting by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plotting the bar chart\nplt.bar(sorted_df['installation_date'], sorted_df['count'])\nplt.xlabel('Installation Date')\nplt.ylabel('Count')\nplt.title('Number of Trips by Installation Date')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "I want to see trend of the number of season by season",
    "chart": "Line",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\ngame.columns = game.columns.str.lower()\n\n# Grouping the data by season and counting the number of occurrences\nseason_counts = game.groupby('season').size().reset_index(name='count')\n\n# Plotting the line chart\nplt.plot(season_counts['season'], season_counts['count'])\nplt.xlabel('Season')\nplt.ylabel('Count')\nplt.title('Number of Games per Season')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Show me a bar chart for what are the different product names? What is the average product price for each of them?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the PRODUCTS table\nproducts = pd.read_sql(\"SELECT * FROM PRODUCTS\", conn)\n\n# Convert column names to lowercase\nproducts.columns = products.columns.str.lower()\n\n# Perform the SQL query\nresult = products.groupby('product_name')['product_price'].mean().reset_index()\n\n# Generate the bar chart\nplt.bar(result['product_name'], result['product_price'])\nplt.xlabel('Product Name')\nplt.ylabel('Average Product Price')\nplt.title('Average Product Price by Product Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "List the name of physicians who took some appointment, and count them by a bar chart, sort Y-axis in ascending order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the appointment and physician tables\nappointment = pd.read_sql(\"SELECT * FROM appointment\", conn)\nphysician = pd.read_sql(\"SELECT * FROM physician\", conn)\n\n# Convert column names to lowercase\nappointment.columns = appointment.columns.str.lower()\nphysician.columns = physician.columns.str.lower()\n\n# Merge the appointment and physician tables on the Physician column\nmerged_data = pd.merge(appointment, physician, left_on=\"physician\", right_on=\"employeeid\")\n\n# Perform the SQL query and group by Name, count the occurrences, and sort in ascending order\nresult = merged_data.groupby(\"name\").size().reset_index(name=\"count\").sort_values(\"count\", ascending=True)\n\n# Generate the bar chart\nplt.bar(result[\"name\"], result[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Appointments by Physician\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "What are the names of procedures that physician John Wen was trained in, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nphysician = pd.read_sql(\"SELECT * FROM physician\", conn)\ntrained_in = pd.read_sql(\"SELECT * FROM trained_in\", conn)\nprocedures = pd.read_sql(\"SELECT * FROM procedures\", conn)\nphysician.columns = physician.columns.str.lower()\ntrained_in.columns = trained_in.columns.str.lower()\nprocedures.columns = procedures.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(pd.merge(physician, trained_in, left_on='employeeid', right_on='physician'), procedures, left_on='treatment', right_on='code')\n\n# Filter the data for the specific physician\nfiltered_df = merged_df[merged_df['name_x'] == 'John Wen']\n\n# Group by procedure name and count the occurrences\ngrouped_df = filtered_df.groupby('name_y').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['name_y'], grouped_df['count'])\nplt.xlabel('Procedure Name')\nplt.ylabel('Count')\nplt.title('Number of Procedures for John Wen')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "browser_web",
    "question": "In a bar chart, please show me the number of times the web accelerator 'CACHEbox' and browser 'Internet Explorer' became compatible in each year. Additionally, can you tell me when they first became compatible?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\n\naccelerator_compatible_browser = pd.read_sql(\"SELECT * FROM accelerator_compatible_browser\", conn)\nbrowser = pd.read_sql(\"SELECT * FROM browser\", conn)\nweb_client_accelerator = pd.read_sql(\"SELECT * FROM web_client_accelerator\", conn)\n\naccelerator_compatible_browser.columns = accelerator_compatible_browser.columns.str.lower()\nbrowser.columns = browser.columns.str.lower()\nweb_client_accelerator.columns = web_client_accelerator.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(accelerator_compatible_browser, browser, left_on='browser_id', right_on='id')\nmerged_df = pd.merge(merged_df, web_client_accelerator, left_on='accelerator_id', right_on='id')\n\n# Filter data\nfiltered_df = merged_df[(merged_df['name_x'] == 'Internet Explorer') & (merged_df['name_y'] == 'CACHEbox')]\n\n# Group by compatible_since_year and count\ngrouped_df = filtered_df.groupby('compatible_since_year').size().reset_index(name='count')\n\n# Plot bar chart\nplt.bar(grouped_df['compatible_since_year'], grouped_df['count'])\nplt.xlabel('Compatible Since Year')\nplt.ylabel('Count')\nplt.title('Number of Compatible Browsers with Internet Explorer and CACHEbox')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Show me a scatter plot of destroyed by employee id and the total number for .",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nDocuments_to_be_destroyed = pd.read_sql(\"SELECT * FROM Documents_to_be_destroyed\", conn)\nDocuments_to_be_destroyed.columns = Documents_to_be_destroyed.columns.str.lower()\n\n# Assuming the table data is stored in a DataFrame called \"Documents_to_be_destroyed\"\n\n# Grouping the data by \"destroyed_by_employee_id\" and counting the occurrences\ndestroyed_counts = Documents_to_be_destroyed.groupby('destroyed_by_employee_id').size().reset_index(name='count')\n\n# Creating a scatter plot\nplt.scatter(destroyed_counts['destroyed_by_employee_id'], destroyed_counts['count'])\n\n# Adding labels and title\nplt.xlabel('Destroyed by Employee ID')\nplt.ylabel('Count')\nplt.title('Number of Documents Destroyed by Employee')\n\n# Displaying the scatter plot\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show me a bar chart displaying the count of missions for each ship involved in a mission launched after 1928, ordered by the count in descending order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmission = pd.read_sql(\"SELECT * FROM mission\", conn)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nmission.columns = mission.columns.str.lower()\nship.columns = ship.columns.str.lower()\n\n# Joining the mission and ship tables\nmerged_df = pd.merge(mission, ship, on='ship_id')\n\n# Filtering the merged dataframe based on the condition\nfiltered_df = merged_df[merged_df['launched_year'] > 1928]\n\n# Grouping the filtered dataframe by ship name and counting the number of occurrences\ngrouped_df = filtered_df.groupby('name').size().reset_index(name='count')\n\n# Sorting the grouped dataframe by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plotting the bar chart\nplt.bar(sorted_df['name'], sorted_df['count'])\nplt.xlabel('Ship Name')\nplt.ylabel('Count')\nplt.title('Number of Missions by Ship (Launched Year > 1928)')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Bar chart x axis name y axis age",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Assuming the data is already loaded into a dataframe called 'artist'\n# Selecting the 'name' and 'age' columns\ndata = artist[['name', 'age']]\n\n# Plotting a bar chart\nplt.bar(data['name'], data['age'])\nplt.xlabel('Name')\nplt.ylabel('Age')\nplt.title('Artist Age')\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "Which customers have orders with status \"Packing\"? Show me a bar chart displaying the customer names and the count of their orders with status \"Packing\".",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\ncustomers.columns = customers.columns.str.lower()\norders.columns = orders.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(customers, orders, on='customer_id')\n\n# Filter the data based on order_status\nfiltered_df = merged_df[merged_df['order_status'] == 'Packing']\n\n# Group by customer_name and count the number of rows\ngrouped_df = filtered_df.groupby('customer_name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['customer_name'], grouped_df['count'])\nplt.xlabel('Customer Name')\nplt.ylabel('Count')\nplt.title('Number of Orders in Packing Status by Customer')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "List the distinct payment method codes with the number of orders mad in a bar chart , list in asc by the y axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nINVOICES = pd.read_sql(\"SELECT * FROM INVOICES\", conn)\nINVOICES.columns = INVOICES.columns.str.lower()\n\n# Grouping the data by payment_method_code and counting the occurrences\npayment_counts = INVOICES.groupby('payment_method_code').size()\n\n# Sorting the counts in ascending order\npayment_counts = payment_counts.sort_values()\n\n# Creating the bar plot\nplt.bar(payment_counts.index, payment_counts.values)\n\n# Adding labels and title\nplt.xlabel('Payment Method Code')\nplt.ylabel('Count')\nplt.title('Number of Invoices by Payment Method Code')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "List the distinct payment method codes with the number of orders mad in a bar chart, and show by the X in ascending.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the INVOICES table\ninvoices = pd.read_sql(\"SELECT * FROM INVOICES\", conn)\n\n# Convert column names to lowercase\ninvoices.columns = invoices.columns.str.lower()\n\n# Perform the SQL query\nresult = invoices.groupby('payment_method_code').size().reset_index(name='count').sort_values('payment_method_code')\n\n# Generate the bar chart\nplt.bar(result['payment_method_code'], result['count'])\nplt.xlabel('Payment Method Code')\nplt.ylabel('Count')\nplt.title('Number of Invoices by Payment Method Code')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Show all role codes and the number of employees in each role Show bar chart , and could you show by the bars in desc please ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nEmployees.columns = Employees.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\nrole_counts = Employees.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by role_code in descending order\nrole_counts = role_counts.sort_values('role_code', ascending=False)\n\n# Creating a bar plot\nplt.bar(role_counts['role_code'], role_counts['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Employees by Role Code')\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "Show me a bar chart of the count of students in each major who are members of the \"Bootup Baltimore\" club, sorted in descending order of count.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstudent = pd.read_sql(\"SELECT * FROM student\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\nstudent.columns = student.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\nclub.columns = club.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(student, member_of_club, on='stuid')\nmerged_df = pd.merge(merged_df, club, on='clubid')\n\n# Filter data\nfiltered_df = merged_df[merged_df['clubname'] == 'Bootup Baltimore']\n\n# Group by major and count\ngrouped_df = filtered_df.groupby('major').size().reset_index(name='count')\n\n# Sort by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot bar chart\nplt.bar(sorted_df['major'], sorted_df['count'])\nplt.xlabel('Major')\nplt.ylabel('Count')\nplt.title('Number of Students in Bootup Baltimore by Major')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show the names of singers and the total sales of their songs in a bar chart, and order bar in asc order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the singer table\nsinger_df = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger_df.columns = map(str.lower, singer_df.columns)\n\n# Read the song table\nsong_df = pd.read_sql(\"SELECT * FROM song\", conn)\nsong_df.columns = map(str.lower, song_df.columns)\n\n# Merge the singer and song tables on Singer_ID\nmerged_df = pd.merge(singer_df, song_df, on=\"singer_id\")\n\n# Group by singer name and calculate the sum of sales\ngrouped_df = merged_df.groupby(\"name\").sum(\"sales\")\n\n# Sort the dataframe by name in ascending order\nsorted_df = grouped_df.sort_values(\"name\", ascending=True)\n\n# Plot the bar chart\nplt.bar(sorted_df.index, sorted_df[\"sales\"])\nplt.xlabel(\"Singer Name\")\nplt.ylabel(\"Total Sales\")\nplt.title(\"Total Sales by Singer\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "What is the total number of different nationalities of all ships? Give me a bar graph, and list in asc by the X please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ship table\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = ship_df.groupby('nationality').size().reset_index(name='count').sort_values('nationality')\n\n# Generate the bar plot\nplt.bar(result_df['nationality'], result_df['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Ships by Nationality')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Show me a bar chart for what are the ids and details of events that have more than one participants?, I want to show by the x axis in descending please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the EVENTS table\nevents = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\nevents.columns = map(str.lower, events.columns)\n\n# Read the Participants_in_Events table\nparticipants = pd.read_sql(\"SELECT * FROM Participants_in_Events\", conn)\nparticipants.columns = map(str.lower, participants.columns)\n\n# Merge the EVENTS and Participants_in_Events tables on Event_ID\nmerged_data = pd.merge(events, participants, on=\"event_id\")\n\n# Group by Event_Details and count the number of Event_IDs\ngrouped_data = merged_data.groupby(\"event_details\")[\"event_id\"].count().reset_index()\n\n# Sort the data by Event_Details in descending order\nsorted_data = grouped_data.sort_values(\"event_details\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"event_details\"], sorted_data[\"event_id\"])\nplt.xlabel(\"Event Details\")\nplt.ylabel(\"Number of Event IDs\")\nplt.title(\"Bar Chart of Event Details and Event IDs\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "entertainment_awards",
    "question": "How many festivals were held each year and how many nominations were made in each festival, visualized as a scatter plot?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nnomination = pd.read_sql(\"SELECT * FROM nomination\", conn)\nfestival_detail = pd.read_sql(\"SELECT * FROM festival_detail\", conn)\nnomination.columns = nomination.columns.str.lower()\nfestival_detail.columns = festival_detail.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(nomination, festival_detail, on='festival_id')\n\n# Group by year and count the number of festival names\ngrouped_df = merged_df.groupby('year').size().reset_index(name='count')\n\n# Create scatter plot\nplt.scatter(grouped_df['year'], grouped_df['count'])\nplt.xlabel('Year')\nplt.ylabel('Count')\nplt.title('Number of Festivals per Year')\nplt.show()"
  },
  {
    "db_id": "aircraft",
    "question": "Which airport, associated with the aircraft \"Robinson R-22\", has the lowest average total number of passengers? Show the results in a bar chart.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naircraft = pd.read_sql(\"SELECT * FROM aircraft\", conn)\nairport_aircraft = pd.read_sql(\"SELECT * FROM airport_aircraft\", conn)\nairport = pd.read_sql(\"SELECT * FROM airport\", conn)\naircraft.columns = aircraft.columns.str.lower()\nairport_aircraft.columns = airport_aircraft.columns.str.lower()\nairport.columns = airport.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(aircraft, airport_aircraft, on='aircraft_id')\nmerged_df = pd.merge(merged_df, airport, on='airport_id')\n\n# Filter the data for 'Robinson R-22' aircraft\nfiltered_df = merged_df[merged_df['aircraft'] == 'Robinson R-22']\n\n# Group by airport_name and calculate average total_passengers\ngrouped_df = filtered_df.groupby('airport_name').agg({'total_passengers': 'mean'}).reset_index()\n\n# Sort the data by average total_passengers in ascending order\nsorted_df = grouped_df.sort_values('total_passengers')\n\n# Plot the bar chart\nplt.bar(sorted_df['airport_name'], sorted_df['total_passengers'])\nplt.xlabel('Airport Name')\nplt.ylabel('Average Total Passengers')\nplt.title('Average Total Passengers for Robinson R-22 Aircraft')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Tell me the trend using a line chart to show the total number of the station over the installation date , could you sort by the x-axis in asc ?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstation.columns = station.columns.str.lower()\n\n# Group by installation_date and count the occurrences\nstation_count = station.groupby('installation_date').size().reset_index(name='count')\n\n# Sort by installation_date in ascending order\nstation_count = station_count.sort_values('installation_date')\n\n# Plot the line chart\nplt.plot(station_count['installation_date'], station_count['count'])\nplt.xlabel('Installation Date')\nplt.ylabel('Count')\nplt.title('Number of Installations by Date')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Show me a bar chart displaying the count of exhibitions for each attendance value where the attendance is more than 100 or the ticket price is below 10.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nexhibition_record = pd.read_sql(\"SELECT * FROM exhibition_record\", conn)\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nexhibition_record.columns = exhibition_record.columns.str.lower()\nexhibition.columns = exhibition.columns.str.lower()\n\n# Merge exhibition_record and exhibition tables\nmerged_df = pd.merge(exhibition_record, exhibition, on='exhibition_id')\n\n# Filter the merged dataframe based on the conditions\nfiltered_df = merged_df[(merged_df['attendance'] > 100) | (merged_df['ticket_price'] < 10)]\n\n# Group by attendance and count the number of occurrences\ngrouped_df = filtered_df.groupby('attendance').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['attendance'], grouped_df['count'])\nplt.xlabel('Attendance')\nplt.ylabel('Count')\nplt.title('Exhibition Attendance Distribution')\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death , compare the number of deaths by name .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm.columns = storm.columns.str.lower()\n\n# Assuming storm is a DataFrame containing the table data\n\n# Filter the DataFrame to include only rows where number_deaths >= 1\nfiltered_storm = storm[storm['number_deaths'] >= 1]\n\n# Create a bar plot of name vs number_deaths\nplt.bar(filtered_storm['name'], filtered_storm['number_deaths'])\nplt.xlabel('Name')\nplt.ylabel('Number of Deaths')\nplt.title('Storms with Number of Deaths >= 1')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Give me a bar for what is the code of each role and the number of employees in each role ? , could you sort from low to high by the names ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nEmployees.columns = Employees.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\nrole_counts = Employees.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by role_code in ascending order\nrole_counts = role_counts.sort_values('role_code')\n\n# Creating a bar plot\nplt.bar(role_counts['role_code'], role_counts['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Employees by Role Code')\nplt.show()"
  },
  {
    "db_id": "aircraft",
    "question": "Can you create a bar chart displaying the number of matches won by each aircraft?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naircraft = pd.read_sql(\"SELECT * FROM aircraft\", conn)\nMATCH = pd.read_sql(\"SELECT * FROM MATCH\", conn)\naircraft.columns = aircraft.columns.str.lower()\nMATCH.columns = MATCH.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(aircraft, MATCH, left_on='aircraft_id', right_on='winning_aircraft')\n\n# Grouping by aircraft and counting the number of occurrences\ngrouped_df = merged_df.groupby('aircraft').size().reset_index(name='count')\n\n# Creating the bar plot\nplt.bar(grouped_df['aircraft'], grouped_df['count'])\nplt.xlabel('Aircraft')\nplt.ylabel('Count')\nplt.title('Number of Wins per Aircraft')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "plot scatter on what are the id of each employee and the number of document destruction authorised by that employee ?",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nDocuments_to_be_destroyed = pd.read_sql(\"SELECT * FROM Documents_to_be_destroyed\", conn)\nDocuments_to_be_destroyed.columns = Documents_to_be_destroyed.columns.str.lower()\n\n# Group by destruction_authorised_by_employee_id and count the number of documents\ngrouped_data = Documents_to_be_destroyed.groupby('destruction_authorised_by_employee_id').size().reset_index(name='count')\n\n# Scatter plot\nplt.scatter(grouped_data['destruction_authorised_by_employee_id'], grouped_data['count'])\nplt.xlabel('Destruction Authorised by Employee ID')\nplt.ylabel('Count')\nplt.title('Number of Documents by Destruction Authorised by Employee ID')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Bar graph to show how many nationality from different nationality, list in desc by the total number.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the 'ship' table into a DataFrame\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\n\n# Perform the SQL query\nresult = ship_df.groupby('nationality').size().reset_index(name='count').sort_values('count', ascending=False)\n\n# Create the bar plot\nplt.bar(result['nationality'], result['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Ships by Nationality')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Group and count details for the events using a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the EVENTS table\nevents = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\n\n# Convert column names to lowercase\nevents.columns = events.columns.str.lower()\n\n# Perform the SQL query\nevent_counts = events.groupby('event_details').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(event_counts['count'], labels=event_counts['event_details'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "What are the average ages of artists by countries? Visualize the result with a bar, display in ascending by the X-axis.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the artist table\nartist_df = pd.read_sql(\"SELECT * FROM artist\", conn)\n\n# Convert column names to lowercase\nartist_df.columns = artist_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = artist_df.groupby(\"country\")[\"age\"].mean().reset_index().sort_values(\"country\")\n\n# Generate the bar plot\nplt.bar(result_df[\"country\"], result_df[\"age\"])\nplt.xlabel(\"Country\")\nplt.ylabel(\"Average Age\")\nplt.title(\"Average Age of Artists by Country\")\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show the shipping charge and customer id for customer orders with order status Cancelled or Paid by a scatter chart.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the customer_orders table\ncustomer_orders = pd.read_sql(\"SELECT * FROM customer_orders\", conn)\n\n# Convert column names to lowercase\ncustomer_orders.columns = customer_orders.columns.str.lower()\n\n# Filter the data for cancelled and paid orders\nfiltered_orders = customer_orders[(customer_orders['order_status_code'] == 'Cancelled') | (customer_orders['order_status_code'] == 'Paid')]\n\n# Create a scatter plot\nplt.scatter(filtered_orders['order_shipping_charges'], filtered_orders['customer_id'])\nplt.xlabel('Order Shipping Charges')\nplt.ylabel('Customer ID')\nplt.title('Scatter Plot of Order Shipping Charges vs Customer ID')\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death , compare the number of deaths by name , order by the Y from high to low .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm.columns = storm.columns.str.lower()\n\n# Assuming the storm data is stored in a dataframe called 'storm'\n\n# Filter the data to include only storms with number_deaths >= 1\nfiltered_storm = storm[storm['number_deaths'] >= 1]\n\n# Sort the filtered data by number_deaths in descending order\nsorted_storm = filtered_storm.sort_values('number_deaths', ascending=False)\n\n# Extract the name and number_deaths columns from the sorted data\nname = sorted_storm['name']\nnumber_deaths = sorted_storm['number_deaths']\n\n# Create a bar plot\nplt.bar(name, number_deaths)\n\n# Add labels and title\nplt.xlabel('Storm Name')\nplt.ylabel('Number of Deaths')\nplt.title('Number of Deaths by Storm')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "browser_web",
    "question": "What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998, and how many browsers are there for each name, displayed in a bar chart sorted in descending order by the number of browsers?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nbrowser = pd.read_sql(\"SELECT * FROM browser\", conn)\naccelerator_compatible_browser = pd.read_sql(\"SELECT * FROM accelerator_compatible_browser\", conn)\nweb_client_accelerator = pd.read_sql(\"SELECT * FROM web_client_accelerator\", conn)\nbrowser.columns = browser.columns.str.lower()\naccelerator_compatible_browser.columns = accelerator_compatible_browser.columns.str.lower()\nweb_client_accelerator.columns = web_client_accelerator.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(browser, accelerator_compatible_browser, left_on='id', right_on='browser_id')\nmerged_df = pd.merge(merged_df, web_client_accelerator, left_on='accelerator_id', right_on='id')\n\n# Filter data\nfiltered_df = merged_df[(merged_df['name_y'] == 'CProxy') & (merged_df['compatible_since_year'] > 1998)]\n\n# Group by and count\ngrouped_df = filtered_df.groupby('name_x').size().reset_index(name='num_browsers')\n\n# Sort by num_browsers\nsorted_df = grouped_df.sort_values('num_browsers', ascending=False)\n\n# Plot bar chart\nplt.bar(sorted_df['name_x'], sorted_df['num_browsers'])\nplt.xlabel('Browser Name')\nplt.ylabel('Number of Browsers')\nplt.title('Number of Browsers by Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What are the names and ids of every course with less than 2 sections Visualize by bar chart, could you list by the total number in descending please?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Courses table\ncourses = pd.read_sql(\"SELECT * FROM Courses\", conn)\ncourses.columns = courses.columns.str.lower()\n\n# Read the Sections table\nsections = pd.read_sql(\"SELECT * FROM Sections\", conn)\nsections.columns = sections.columns.str.lower()\n\n# Merge the Courses and Sections tables on course_id\nmerged_data = pd.merge(courses, sections, on=\"course_id\")\n\n# Sort the merged data by course_id in descending order\nsorted_data = merged_data.sort_values(by=\"course_id\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"course_name\"], sorted_data[\"course_id\"])\nplt.xlabel(\"Course Name\")\nplt.ylabel(\"Course ID\")\nplt.title(\"Course ID vs Course Name\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "insurance_and_eClaims",
    "question": "Which customer holds the record for the highest number of policies involved, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npolicies = pd.read_sql(\"SELECT * FROM policies\", conn)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\npolicies.columns = policies.columns.str.lower()\ncustomers.columns = customers.columns.str.lower()\n\n# Joining policies and customers tables\nmerged_df = pd.merge(policies, customers, on='customer_id')\n\n# Grouping by customer_details and counting the number of policies\ngrouped_df = merged_df.groupby('customer_details').size().reset_index(name='num_policies')\n\n# Sorting by num_policies in descending order\nsorted_df = grouped_df.sort_values('num_policies', ascending=False)\n\n# Plotting the bar chart\nplt.bar(sorted_df['customer_details'], sorted_df['num_policies'])\nplt.xlabel('Customer Details')\nplt.ylabel('Number of Policies')\nplt.title('Number of Policies per Customer Details')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Show all calendar dates and day Numbers in a line chart , list in asc by the x-axis .",
    "chart": "Line",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nRef_calendar = pd.read_sql(\"SELECT * FROM Ref_calendar\", conn)\nRef_calendar.columns = Ref_calendar.columns.str.lower()\n\n# Assuming you have already read the table data into Ref_calendar dataframe\n\n# Sort the dataframe by calendar_date\nRef_calendar = Ref_calendar.sort_values(by='calendar_date')\n\n# Plotting the line chart\nplt.plot(Ref_calendar['calendar_date'], Ref_calendar['day_number'])\nplt.xlabel('Calendar Date')\nplt.ylabel('Day Number')\nplt.title('Line Chart of Day Number')\nplt.show()"
  },
  {
    "db_id": "restaurant_1",
    "question": "List how many students in each last name who majored in 600 using a bar chart .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nStudent = pd.read_sql(\"SELECT * FROM Student\", conn)\nStudent.columns = Student.columns.str.lower()\n\n# Filter the dataframe to include only rows where major is 600\nfiltered_df = Student[Student['major'] == 600]\n\n# Group the dataframe by lname and count the occurrences\ngrouped_df = filtered_df.groupby('lname').size().reset_index(name='count')\n\n# Create a bar plot\nplt.bar(grouped_df['lname'], grouped_df['count'])\nplt.xlabel('Last Name')\nplt.ylabel('Count')\nplt.title('Number of Students by Last Name')\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "Visualize a bar chart for what is the number of their teams in elimination?, order in ascending by the y axis please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the data from the \"elimination\" table\nelimination_data = pd.read_sql(\"SELECT * FROM elimination\", conn)\n\n# Convert column names to lowercase\nelimination_data.columns = elimination_data.columns.str.lower()\n\n# Perform the SQL query\nteam_counts = elimination_data.groupby('team').size().reset_index(name='count').sort_values('count')\n\n# Create a bar plot\nplt.bar(team_counts['team'], team_counts['count'])\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Number of Eliminations by Team')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "What is the distribution of wrestlers in each team in the elimination, represented by a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nelimination = pd.read_sql(\"SELECT * FROM elimination\", conn)\nwrestler = pd.read_sql(\"SELECT * FROM wrestler\", conn)\nelimination.columns = elimination.columns.str.lower()\nwrestler.columns = wrestler.columns.str.lower()\n\n# Perform the join operation\nresult = pd.merge(elimination, wrestler, on='wrestler_id')\n\n# Group by team and count the number of wrestlers in each team\nteam_counts = result.groupby('team').size()\n\n# Plot the pie chart\nplt.pie(team_counts, labels=team_counts.index, autopct='%1.1f%%')\nplt.title('Number of Wrestlers in Each Team')\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "what are the different software platforms for devices , and how many devices have each ?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ndevice = pd.read_sql(\"SELECT * FROM device\", conn)\ndevice.columns = device.columns.str.lower()\n\n# Grouping the data by software_platform and counting the occurrences\ngrouped_data = device.groupby('software_platform').size().reset_index(name='count')\n\n# Creating the bar plot\nplt.bar(grouped_data['software_platform'], grouped_data['count'])\nplt.xlabel('Software Platform')\nplt.ylabel('Count')\nplt.title('Device Count by Software Platform')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show all distinct product categories along with the number of mailshots in each category in a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the mailshot_campaigns table\nmailshot_campaigns = pd.read_sql(\"SELECT * FROM mailshot_campaigns\", conn)\n\n# Convert column names to lowercase\nmailshot_campaigns.columns = map(str.lower, mailshot_campaigns.columns)\n\n# Perform the SQL query\nresult = mailshot_campaigns.groupby('product_category').size()\n\n# Plot the pie chart\nplt.pie(result, labels=result.index, autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Tell me the proportion of the nationality of all ships .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Grouping the data by nationality and counting the occurrences\nnationality_count = ship.groupby('nationality').size().reset_index(name='count')\n\n# Creating a pie chart\nplt.pie(nationality_count['count'], labels=nationality_count['nationality'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Displaying the chart\nplt.show()"
  },
  {
    "db_id": "restaurant_1",
    "question": "For those female students with age is older than 18 who are not majoring in 600, tell me how many students of different first names using a bar chart, rank by the how many fname in desc please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the Student table\nstudent_data = pd.read_sql(\"SELECT * FROM Student\", conn)\n\n# Convert column names to lowercase\nstudent_data.columns = student_data.columns.str.lower()\n\n# Filter the data based on the conditions\nfiltered_data = student_data[(student_data['age'] > 18) & (student_data['major'] != 600) & (student_data['sex'] == 'F')]\n\n# Group the data by Fname and count the occurrences\ngrouped_data = filtered_data.groupby('fname').size().reset_index(name='count')\n\n# Sort the data by count in descending order\nsorted_data = grouped_data.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data['fname'], sorted_data['count'])\nplt.xlabel('Fname')\nplt.ylabel('Count')\nplt.title('Number of Students by Fname')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "I want to know the proportion of total number for each product category .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmailshot_campaigns = pd.read_sql(\"SELECT * FROM mailshot_campaigns\", conn)\nmailshot_campaigns.columns = mailshot_campaigns.columns.str.lower()\n\n# Group by product_category and count the number of occurrences\ncategory_counts = mailshot_campaigns.groupby('product_category').size().reset_index(name='count')\n\n# Create a pie chart\nplt.pie(category_counts['count'], labels=category_counts['product_category'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Display the chart\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "Show me a bar chart displaying the number of employees living in each state that has 2 to 4 employees.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nAddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\nStaff = pd.read_sql(\"SELECT * FROM Staff\", conn)\nAddresses.columns = Addresses.columns.str.lower()\nStaff.columns = Staff.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Addresses, Staff, left_on='address_id', right_on='staff_address_id')\n\n# Group by state_province_county and count the number of occurrences\ngrouped_df = merged_df.groupby('state_province_county').size().reset_index(name='count')\n\n# Filter the results based on the count range\nfiltered_df = grouped_df[(grouped_df['count'] >= 2) & (grouped_df['count'] <= 4)]\n\n# Plot the bar chart\nplt.bar(filtered_df['state_province_county'], filtered_df['count'])\nplt.xlabel('State/Province/County')\nplt.ylabel('Count')\nplt.title('Number of Staff by State/Province/County')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Bar chart x axis location code y axis how many location code , and list x-axis in asc order please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDocument_locations = pd.read_sql(\"SELECT * FROM Document_locations\", conn)\nDocument_locations.columns = Document_locations.columns.str.lower()\n\n# Group by location_code and count the occurrences\nlocation_counts = Document_locations.groupby('location_code').size().reset_index(name='count')\n\n# Sort by location_code in ascending order\nlocation_counts = location_counts.sort_values('location_code')\n\n# Create bar plot\nplt.bar(location_counts['location_code'], location_counts['count'])\nplt.xlabel('Location Code')\nplt.ylabel('Count')\nplt.title('Document Locations')\nplt.show()"
  },
  {
    "db_id": "products_for_hire",
    "question": "Take the first name of all the good customers as the X-axis and gender of all the good customers as Y-axis in a bar chart, show y-axis in descending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the customers table\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\n\n# Convert column names to lowercase\ncustomers.columns = customers.columns.str.lower()\n\n# Filter the customers table for good customers\ngood_customers = customers[customers['good_or_bad_customer'] == 'good']\n\n# Sort the good customers by gender in descending order\nsorted_customers = good_customers.sort_values('gender_mf', ascending=False)\n\n# Create a bar plot of first_name and gender_mf\nplt.bar(sorted_customers['first_name'], sorted_customers['gender_mf'])\n\n# Set the x-axis label\nplt.xlabel('First Name')\n\n# Set the y-axis label\nplt.ylabel('Gender')\n\n# Set the title of the plot\nplt.title('Good Customers by Gender')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "Find the number of users in each role Plot them as bar chart , display total number from low to high order please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nusers = pd.read_sql(\"SELECT * FROM users\", conn)\nusers.columns = users.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\nrole_counts = users.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nrole_counts = role_counts.sort_values('count')\n\n# Creating a bar plot\nplt.bar(role_counts['role_code'], role_counts['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Users by Role Code')\nplt.show()"
  },
  {
    "db_id": "gymnast",
    "question": "Which hometowns have at least two gymnasts and what is the count of gymnasts from each hometown, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngymnast = pd.read_sql(\"SELECT * FROM gymnast\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\ngymnast.columns = gymnast.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(gymnast, people, left_on='gymnast_id', right_on='people_id')\n\n# Grouping by hometown and counting\ngrouped_df = merged_df.groupby('hometown').size().reset_index(name='count')\n\n# Filtering by count >= 2\nfiltered_df = grouped_df[grouped_df['count'] >= 2]\n\n# Plotting the bar chart\nplt.bar(filtered_df['hometown'], filtered_df['count'])\nplt.xlabel('Hometown')\nplt.ylabel('Count')\nplt.title('Number of Gymnasts from Each Hometown (Count >= 2)')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Give me a bar chart for the total number of each payment method code",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nINVOICES = pd.read_sql(\"SELECT * FROM INVOICES\", conn)\nINVOICES.columns = INVOICES.columns.str.lower()\n\n# Grouping the invoices by payment method code and counting the occurrences\npayment_counts = INVOICES.groupby('payment_method_code').size()\n\n# Creating a bar plot\nplt.bar(payment_counts.index, payment_counts.values)\n\n# Adding labels and title\nplt.xlabel('Payment Method Code')\nplt.ylabel('Count')\nplt.title('Number of Invoices by Payment Method Code')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Create a bar chart showing the number of author across author , could you list in asc by the Author ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsubmission = pd.read_sql(\"SELECT * FROM submission\", conn)\nsubmission.columns = submission.columns.str.lower()\n\n# Group by author and count the number of submissions\nauthor_counts = submission.groupby('author').size().reset_index(name='count')\n\n# Sort the author counts by author name\nauthor_counts = author_counts.sort_values('author')\n\n# Create a bar plot\nplt.bar(author_counts['author'], author_counts['count'])\nplt.xlabel('Author')\nplt.ylabel('Count')\nplt.title('Number of Submissions by Author')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "What are the average ages of artists by countries? Visualize the result with a bar, and I want to display in asc by the total number.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the artist table\nartist_df = pd.read_sql(\"SELECT * FROM artist\", conn)\n\n# Convert column names to lowercase\nartist_df.columns = artist_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = artist_df.groupby('country')['age'].mean().reset_index().sort_values('age')\n\n# Create the bar plot\nplt.bar(result_df['country'], result_df['age'])\nplt.xlabel('Country')\nplt.ylabel('Average Age')\nplt.title('Average Age of Artists by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "e_government",
    "question": "Show me a bar chart displaying the number of times each party has utilized the services.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nparties = pd.read_sql(\"SELECT * FROM parties\", conn)\nparty_services = pd.read_sql(\"SELECT * FROM party_services\", conn)\nparties.columns = parties.columns.str.lower()\nparty_services.columns = party_services.columns.str.lower()\n\n# Merge the parties and party_services dataframes\nmerged_df = pd.merge(parties, party_services, left_on='party_id', right_on='customer_id')\n\n# Group by party_email and count the number of occurrences\ngrouped_df = merged_df.groupby('party_email').size().reset_index(name='count')\n\n# Sort the dataframe by party_email in descending order\nsorted_df = grouped_df.sort_values('party_email', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['party_email'], sorted_df['count'])\nplt.xlabel('Party Email')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Party Email')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "Find the number of medications prescribed for each brand Plot them as bar chart, and I want to order y axis from high to low order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the medication and prescribes tables\nmedication = pd.read_sql(\"SELECT * FROM medication\", conn)\nprescribes = pd.read_sql(\"SELECT * FROM prescribes\", conn)\n\n# Convert column names to lowercase\nmedication.columns = medication.columns.str.lower()\nprescribes.columns = prescribes.columns.str.lower()\n\n# Perform the join and group by brand\nmerged_data = pd.merge(medication, prescribes, left_on=\"code\", right_on=\"medication\")\ngrouped_data = merged_data.groupby(\"brand\").size().reset_index(name=\"count\")\n\n# Sort the data by count in descending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=False)\n\n# Generate the bar plot\nplt.bar(sorted_data[\"brand\"], sorted_data[\"count\"])\nplt.xlabel(\"Brand\")\nplt.ylabel(\"Count\")\nplt.title(\"Medication Count by Brand\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "icfp_1",
    "question": "How many authors have written a specific number of papers, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nauthors = pd.read_sql(\"SELECT * FROM authors\", conn)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\npapers = pd.read_sql(\"SELECT * FROM papers\", conn)\nauthors.columns = authors.columns.str.lower()\nauthorship.columns = authorship.columns.str.lower()\npapers.columns = papers.columns.str.lower()\n\n# Perform the SQL query using pandas merge\nsub_query = pd.merge(authors, authorship, on='authid')\nsub_query = pd.merge(sub_query, papers, on='paperid')\nsub_query = sub_query.groupby(['fname', 'lname']).agg(num_papers=('paperid', 'count')).reset_index()\n\n# Group by num_papers and count the number of authors\nresult = sub_query.groupby('num_papers').size().reset_index(name='num_authors')\n\n# Plot the bar chart\nplt.bar(result['num_papers'], result['num_authors'])\nplt.xlabel('Number of Papers')\nplt.ylabel('Number of Authors')\nplt.title('Number of Authors vs Number of Papers')\nplt.show()"
  },
  {
    "db_id": "products_for_hire",
    "question": "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check, and count them by a line chart",
    "chart": "Line",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the payments table\npayments = pd.read_sql(\"SELECT * FROM payments\", conn)\n\n# Convert column names to lowercase\npayments.columns = payments.columns.str.lower()\n\n# Filter the data\nfiltered_payments = payments[(payments['amount_paid'] > 300) | (payments['payment_type_code'] == 'Check')]\n\n# Group by payment_date and count the occurrences\ngrouped_payments = filtered_payments.groupby('payment_date').size().reset_index(name='count')\n\n# Plot the line chart\nplt.plot(grouped_payments['payment_date'], grouped_payments['count'])\nplt.xlabel('Payment Date')\nplt.ylabel('Count')\nplt.title('Number of Payments')\nplt.show()"
  },
  {
    "db_id": "aircraft",
    "question": "Show me a bar chart of the count of aircraft for each location, ordered by the count in descending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naircraft = pd.read_sql(\"SELECT * FROM aircraft\", conn)\nMATCH = pd.read_sql(\"SELECT * FROM MATCH\", conn)\naircraft.columns = aircraft.columns.str.lower()\nMATCH.columns = MATCH.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(aircraft, MATCH, left_on='aircraft_id', right_on='winning_aircraft')\n\n# Perform the group by and count operation\ngrouped_df = merged_df.groupby('location').agg({'aircraft': 'count'}).reset_index()\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values('aircraft', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['location'], sorted_df['aircraft'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Aircraft by Location')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Find dates and attendance for exhibitions that happened in 2004, show me the attendance by date with a bar chart, and could you show by the bars in desc?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the exhibition_record table\nexhibition_record = pd.read_sql(\"SELECT * FROM exhibition_record\", conn)\nexhibition_record.columns = map(str.lower, exhibition_record.columns)\n\n# Read the exhibition table\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nexhibition.columns = map(str.lower, exhibition.columns)\n\n# Merge the two tables based on exhibition_id\nmerged_data = pd.merge(exhibition_record, exhibition, on=\"exhibition_id\")\n\n# Filter the data for year 2004\nfiltered_data = merged_data[merged_data[\"year\"] == 2004]\n\n# Sort the data by date in descending order\nsorted_data = filtered_data.sort_values(\"date\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"date\"], sorted_data[\"attendance\"])\nplt.xlabel(\"Date\")\nplt.ylabel(\"Attendance\")\nplt.title(\"Exhibition Attendance in 2004\")\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "For each citizenship , what is the maximum net worth Visualize by bar chart , sort in asc by the bar .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Group by citizenship and calculate the maximum net worth\nmax_net_worth = singer.groupby('citizenship')['net_worth_millions'].max()\n\n# Sort the data by citizenship in ascending order\nmax_net_worth = max_net_worth.sort_index()\n\n# Create a bar plot\nplt.bar(max_net_worth.index, max_net_worth.values)\n\n# Set the labels and title\nplt.xlabel('Citizenship')\nplt.ylabel('Max Net Worth (Millions)')\nplt.title('Max Net Worth by Citizenship')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Give me a bar chart , that just lists the participant ids as Y and their details as X-axis , and display bars from low to high order .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nParticipants = pd.read_sql(\"SELECT * FROM Participants\", conn)\nParticipants.columns = Participants.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called Participants\n\n# Sort the DataFrame by participant_details column in ascending order\nsorted_participants = Participants.sort_values(by='participant_details')\n\n# Extract the required columns\nparticipant_details = sorted_participants['participant_details']\nparticipant_id = sorted_participants['participant_id']\n\n# Create the bar plot\nplt.bar(participant_details, participant_id)\n\n# Add labels and title\nplt.xlabel('Participant Details')\nplt.ylabel('Participant ID')\nplt.title('Bar Plot of Participant Details')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "tvshow",
    "question": "List top 3 highest Rating TV series . List the TV series's Episode and Rating . Show bar chart .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nTV_series = pd.read_sql(\"SELECT * FROM TV_series\", conn)\nTV_series.columns = TV_series.columns.str.lower()\n\n# Assuming TV_series is a DataFrame containing the table data\n\n# Sort the DataFrame by rating in descending order and select the top 3 rows\ntop_episodes = TV_series.sort_values(by='rating', ascending=False).head(3)\n\n# Extract the episode and rating columns\nepisodes = top_episodes['episode']\nratings = top_episodes['rating']\n\n# Create a bar plot\nplt.bar(episodes, ratings)\n\n# Set the x-axis label\nplt.xlabel('Episode')\n\n# Set the y-axis label\nplt.ylabel('Rating')\n\n# Set the title of the plot\nplt.title('Top 3 Episodes by Rating')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "What is the role name and role description for employee called Ebba, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nROLES = pd.read_sql(\"SELECT * FROM ROLES\", conn)\nEmployees.columns = Employees.columns.str.lower()\nROLES.columns = ROLES.columns.str.lower()\n\n# Joining the tables\ndf = pd.merge(Employees, ROLES, left_on='role_code', right_on='role_code')\n\n# Filtering the data for employee_name = 'Ebba'\ndf_filtered = df[df['employee_name'] == 'Ebba']\n\n# Creating the bar plot\nplt.bar(df_filtered['role_name'], df_filtered['role_description'])\nplt.xlabel('Role Name')\nplt.ylabel('Role Description')\nplt.title('Roles for Employee: Ebba')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "Who is the patient with the highest number of appointments, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npatient = pd.read_sql(\"SELECT * FROM patient\", conn)\nappointment = pd.read_sql(\"SELECT * FROM appointment\", conn)\npatient.columns = patient.columns.str.lower()\nappointment.columns = appointment.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(patient, appointment, left_on='ssn', right_on='patient')\n\n# Perform the group by and count operation\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['name'], sorted_df['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Number of Appointments per Patient')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "products_for_hire",
    "question": "How many bookings did each customer make? Show the customer id as the Y-axis and the first name as the X-axis in a bar chart, and rank by the customer_id in asc.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Customers table\ncustomers = pd.read_sql(\"SELECT * FROM Customers\", conn)\n\n# Read the bookings table\nbookings = pd.read_sql(\"SELECT * FROM bookings\", conn)\n\n# Convert column names to lowercase\ncustomers.columns = customers.columns.str.lower()\nbookings.columns = bookings.columns.str.lower()\n\n# merge the two tables on customer_id\nmerged_data = pd.merge(customers, bookings, on=\"customer_id\")\n\n# sort the merged data by customer_id\nsorted_data = merged_data.sort_values(\"customer_id\")\n\n# plot the bar chart\nplt.bar(sorted_data[\"first_name\"], sorted_data[\"customer_id\"])\nplt.xlabel(\"First Name\")\nplt.ylabel(\"Customer ID\")\nplt.title(\"Customer ID by First Name\")\nplt.show()\n"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show all distinct product categories along with the number of mailshots in each category . Visualize by bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmailshot_campaigns = pd.read_sql(\"SELECT * FROM mailshot_campaigns\", conn)\nmailshot_campaigns.columns = mailshot_campaigns.columns.str.lower()\n\n# Group the data by product_category and count the number of occurrences\ngrouped_data = mailshot_campaigns.groupby('product_category').size().reset_index(name='count')\n\n# Create a bar plot\nplt.bar(grouped_data['product_category'], grouped_data['count'])\nplt.xlabel('Product Category')\nplt.ylabel('Count')\nplt.title('Number of Campaigns by Product Category')\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "What are the names of the technicians that are assigned to repair machines with more point values than 70, and count them by a bar chart",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the repair_assignment table\nrepair_assignment = pd.read_sql(\"SELECT * FROM repair_assignment\", conn)\n\n# Read the machine table\nmachine = pd.read_sql(\"SELECT * FROM machine\", conn)\n\n# Read the technician table\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\n\n# Convert column names to lowercase\nrepair_assignment.columns = repair_assignment.columns.str.lower()\nmachine.columns = machine.columns.str.lower()\ntechnician.columns = technician.columns.str.lower()\n\n# merge the tables\nmerged_data = pd.merge(repair_assignment, machine, on=\"machine_id\")\nmerged_data = pd.merge(merged_data, technician, on=\"technician_id\")\n\n# filter the data\nfiltered_data = merged_data[merged_data[\"value_points\"] > 70]\n\n# group by name and count occurrences\ngrouped_data = filtered_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# plot the bar chart\nplt.bar(grouped_data[\"name\"], grouped_data[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Repairs by Name\")\nplt.show()\n"
  },
  {
    "db_id": "machine_repair",
    "question": "Show different teams of technicians and the number of technicians in each team with a bar chart, and order Y in ascending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the technician table\ntechnician_df = pd.read_sql(\"SELECT * FROM technician\", conn)\n\n# Convert column names to lowercase\ntechnician_df.columns = technician_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = technician_df.groupby('team').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result_df['team'], result_df['count'])\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Technician Count by Team')\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "Return a bar chart showing how many shops in each location.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the 'shop' table\nshop_data = pd.read_sql(\"SELECT * FROM shop\", conn)\n\n# Convert column names to lowercase\nshop_data.columns = shop_data.columns.str.lower()\n\n# Perform the SQL query\nlocation_count = shop_data.groupby('location').size().reset_index(name='count')\n\n# Generate the bar chart\nplt.bar(location_count['location'], location_count['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Shops by Location')\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Visualize a pie chart with what are the ids and details of events that have more than one participants?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the EVENTS table\nevents = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\n\n# Read the Participants_in_Events table\nparticipants = pd.read_sql(\"SELECT * FROM Participants_in_Events\", conn)\n\n# Convert column names to lowercase\nevents.columns = events.columns.str.lower()\nparticipants.columns = participants.columns.str.lower()\n\n# merge the two tables on event_id\nmerged_data = pd.merge(events, participants, on='event_id')\n\n# group by event_details and count the number of occurrences\nevent_counts = merged_data.groupby('event_details').size()\n\n# plot the pie chart\nplt.pie(event_counts, labels=event_counts.index, autopct='%1.1f%%')\nplt.title('Event Distribution')\nplt.show()\n"
  },
  {
    "db_id": "bike_1",
    "question": "Create a pie chart displaying the distribution of trips that ended in cities other than San Francisco.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\ntrip.columns = trip.columns.str.lower()\nstation.columns = station.columns.str.lower()\n\n# Joining trip and station tables\nmerged_df = pd.merge(trip, station, left_on='end_station_id', right_on='id')\n\n# Filtering out rows where city is not \"san francisco\"\nfiltered_df = merged_df[merged_df['city'] != 'san francisco']\n\n# Grouping by city and counting the number of occurrences\ngrouped_df = filtered_df.groupby('city').size().reset_index(name='count')\n\n# Creating a pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['city'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "Create a bar chart showing how many location across location , and I want to order by the y-axis in ascending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nshop = pd.read_sql(\"SELECT * FROM shop\", conn)\nshop.columns = shop.columns.str.lower()\n\n# Group by location and count the occurrences\nlocation_counts = shop.groupby('location').size().reset_index(name='count')\n\n# Sort the counts in ascending order\nlocation_counts = location_counts.sort_values('count')\n\n# Create the bar plot\nplt.bar(location_counts['location'], location_counts['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Shops by Location')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "What are the number of the descriptions of the service types with product price above 100?, and I want to list from low to high by the y-axis.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Ref_Service_Types table\nref_service_types = pd.read_sql(\"SELECT * FROM Ref_Service_Types\", conn)\nref_service_types.columns = map(str.lower, ref_service_types.columns)\n\n# Read the Services table\nservices = pd.read_sql(\"SELECT * FROM Services\", conn)\nservices.columns = map(str.lower, services.columns)\n\n# Merge the two tables on Service_Type_Code\nmerged_data = pd.merge(ref_service_types, services, on=\"service_type_code\")\n\n# Filter the merged data based on Product_Price > 100\nfiltered_data = merged_data[merged_data[\"product_price\"] > 100]\n\n# Group by Service_Type_Description and count the occurrences\ngrouped_data = filtered_data.groupby(\"service_type_description\").size().reset_index(name=\"count\")\n\n# Sort the data by count in ascending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=True)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"service_type_description\"], sorted_data[\"count\"])\nplt.xlabel(\"Service Type Description\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of Service Types with Product Price > 100\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tvshow",
    "question": "Show me the proportion on what are 3 most highly rated episodes in the TV series table and what were those ratings ?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nTV_series = pd.read_sql(\"SELECT * FROM TV_series\", conn)\nTV_series.columns = TV_series.columns.str.lower()\n\n# Assuming TV_series is a DataFrame containing the table data\n\n# Selecting the top 3 episodes with highest ratings\ntop_episodes = TV_series.sort_values('rating', ascending=False).head(3)\n\n# Creating a pie chart to visualize the ratings of the top episodes\nplt.pie(top_episodes['rating'], labels=top_episodes['episode'], autopct='%1.1f%%')\nplt.title('Top 3 Episodes by Rating')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Can you create a pie chart displaying the distribution of mailshots received by each customer?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmailshot_customers = pd.read_sql(\"SELECT * FROM mailshot_customers\", conn)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\nmailshot_customers.columns = mailshot_customers.columns.str.lower()\ncustomers.columns = customers.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(mailshot_customers, customers, on='customer_id')\n\n# Group by customer_name and count the number of occurrences\ngrouped_df = merged_df.groupby('customer_name').size().reset_index(name='count')\n\n# Create a pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['customer_name'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "battle_death",
    "question": "Visualize a scatter chart on what are the death and injury situations caused by the ship with tonnage 't'?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the death and ship tables\ndeath = pd.read_sql(\"SELECT * FROM death\", conn)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Convert column names to lowercase\ndeath.columns = death.columns.str.lower()\nship.columns = ship.columns.str.lower()\n\n# Merge death and ship tables on the common column 'caused_by_ship_id'\nmerged_data = pd.merge(death, ship, left_on='caused_by_ship_id', right_on='id')\n\n# Filter the merged data based on tonnage = 't'\nfiltered_data = merged_data[merged_data['tonnage'] == 't']\n\n# Create a scatter plot\nplt.scatter(filtered_data['killed'], filtered_data['injured'])\nplt.xlabel('Killed')\nplt.ylabel('Injured')\nplt.title('Scatter Plot of Killed vs Injured')\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show different citizenship of singers and the number of singers of each citizenship in a bar chart , and I want to list by the Y-axis from low to high .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Group by citizenship and count the number of singers\nsinger_count = singer.groupby('citizenship').size().reset_index(name='count')\n\n# Sort the dataframe by count in ascending order\nsinger_count = singer_count.sort_values('count')\n\n# Create a bar plot\nplt.bar(singer_count['citizenship'], singer_count['count'])\nplt.xlabel('Citizenship')\nplt.ylabel('Count')\nplt.title('Number of Singers by Citizenship')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "icfp_1",
    "question": "Show me a bar chart displaying the count of distinct authors for each institution in the database.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nauthors = pd.read_sql(\"SELECT * FROM authors\", conn)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\ninst = pd.read_sql(\"SELECT * FROM inst\", conn)\nauthors.columns = authors.columns.str.lower()\nauthorship.columns = authorship.columns.str.lower()\ninst.columns = inst.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(authors, authorship, on='authid')\nmerged_df = pd.merge(merged_df, inst, on='instid')\n\n# Group by institution name and count distinct authors\ngrouped_df = merged_df.groupby('name')['authid'].nunique().reset_index()\n\n# Plot bar chart\nplt.bar(grouped_df['name'], grouped_df['authid'])\nplt.xlabel('Institution')\nplt.ylabel('Number of Authors')\nplt.title('Number of Authors per Institution')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "List all the log entry descriptions and count them using a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nproblem_log = pd.read_sql(\"SELECT * FROM problem_log\", conn)\nproblem_log.columns = problem_log.columns.str.lower()\n\n# Grouping the data by log_entry_description and counting the occurrences\ngrouped_data = problem_log.groupby('log_entry_description').size().reset_index(name='count')\n\n# Creating the bar plot\nplt.bar(grouped_data['log_entry_description'], grouped_data['count'])\nplt.xlabel('Log Entry Description')\nplt.ylabel('Count')\nplt.title('Occurrences of Log Entry Description')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "For each city, return the highest latitude among its stations. Show bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the 'station' table\nstation_df = pd.read_sql(\"SELECT * FROM station\", conn)\n\n# Convert column names to lowercase\nstation_df.columns = station_df.columns.str.lower()\n\n# Group by city and find the maximum latitude\nmax_lat_df = station_df.groupby('city')['lat'].max().reset_index()\n\n# Plot the bar chart\nplt.bar(max_lat_df['city'], max_lat_df['lat'])\nplt.xlabel('City')\nplt.ylabel('Maximum Latitude')\nplt.title('Maximum Latitude by City')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Can you create a scatter plot to display the attendance and ticket price for exhibitions with attendance greater than 100 or a ticket price below 10?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nexhibition_record = pd.read_sql(\"SELECT * FROM exhibition_record\", conn)\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nexhibition_record.columns = exhibition_record.columns.str.lower()\nexhibition.columns = exhibition.columns.str.lower()\n\n# Merge exhibition_record and exhibition tables\nmerged_df = pd.merge(exhibition_record, exhibition, on='exhibition_id')\n\n# Filter the data\nfiltered_df = merged_df[(merged_df['attendance'] > 100) | (merged_df['ticket_price'] < 10)]\n\n# Create scatter plot\nplt.scatter(filtered_df['attendance'], filtered_df['ticket_price'])\nplt.xlabel('Attendance')\nplt.ylabel('Ticket Price')\nplt.title('Scatter Plot of Attendance vs Ticket Price')\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "Which problems are reported by the staff with last name \"Bosco\"? Show the ids of the problems and the count of occurrences for each problem in a bar chart, sorted in descending order by the count.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nproblems = pd.read_sql(\"SELECT * FROM problems\", conn)\nstaff = pd.read_sql(\"SELECT * FROM staff\", conn)\nproblems.columns = problems.columns.str.lower()\nstaff.columns = staff.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(problems, staff, left_on='reported_by_staff_id', right_on='staff_id')\n\n# Filter by staff last name\nfiltered_df = merged_df[merged_df['staff_last_name'] == 'Bosco']\n\n# Group by problem_id and count occurrences\ngrouped_df = filtered_df.groupby('problem_id').size().reset_index(name='count')\n\n# Sort by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot bar chart\nplt.bar(sorted_df['problem_id'], sorted_df['count'])\nplt.xlabel('Problem ID')\nplt.ylabel('Count')\nplt.title('Number of Problems Reported by Staff \"Bosco\"')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Bar graph to show how many nationality from different nationality",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Grouping the ship dataframe by nationality and counting the occurrences\nnationality_count = ship.groupby('nationality').size().reset_index(name='count')\n\n# Creating a bar plot\nplt.bar(nationality_count['nationality'], nationality_count['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Ships by Nationality')\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "Please compare the frequency of the position of the pilots using a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot.columns = pilot.columns.str.lower()\n\n# Group by position and count the number of occurrences\nposition_counts = pilot.groupby('position').size().reset_index(name='count')\n\n# Create a bar plot\nplt.bar(position_counts['position'], position_counts['count'])\nplt.xlabel('Position')\nplt.ylabel('Count')\nplt.title('Number of Pilots by Position')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Show the number of services for each service type description with a bar chart, and I want to display y-axis in desc order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Ref_Service_Types table\nref_service_types = pd.read_sql(\"SELECT * FROM Ref_Service_Types\", conn)\n\n# Read the Services table\nservices = pd.read_sql(\"SELECT * FROM Services\", conn)\n\n# Convert column names to lowercase\nref_service_types.columns = ref_service_types.columns.str.lower()\nservices.columns = services.columns.str.lower()\n\n# merge the two tables on service_type_code\nmerged_data = pd.merge(ref_service_types, services, on='service_type_code')\n\n# group by service_type_code and count the number of occurrences\ngrouped_data = merged_data.groupby('service_type_code').size().reset_index(name='count')\n\n# sort the data by count in descending order\nsorted_data = grouped_data.sort_values(by='count', ascending=False)\n\n# get the service type descriptions\nservice_type_descriptions = sorted_data['service_type_code'].map(ref_service_types.set_index('service_type_code')['service_type_description'])\n\n# plot the bar chart\nplt.bar(service_type_descriptions, sorted_data['count'])\nplt.xlabel('Service Type Description')\nplt.ylabel('Count')\nplt.title('Number of Services by Service Type')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "What is the total order quantity of the product \"photo\" shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nORDER_ITEMS = pd.read_sql(\"SELECT * FROM ORDER_ITEMS\", conn)\nProducts = pd.read_sql(\"SELECT * FROM Products\", conn)\nORDER_ITEMS.columns = ORDER_ITEMS.columns.str.lower()\nProducts.columns = Products.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(ORDER_ITEMS, Products, on='product_id')\n\n# Filter the data for product_name = 'photo'\nfiltered_df = merged_df[merged_df['product_name'] == 'photo']\n\n# Group by product_name and calculate the sum of order_quantity\ngrouped_df = filtered_df.groupby('product_name').agg({'order_quantity': 'sum'}).reset_index()\n\n# Plot the bar chart\nplt.bar(grouped_df['product_name'], grouped_df['order_quantity'])\nplt.xlabel('Product Name')\nplt.ylabel('Order Quantity')\nplt.title('Order Quantity for Product \"photo\"')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show how many customer addresses in each address type code with a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read data from customer_addresses table\ncustomer_addresses = pd.read_sql(\"SELECT * FROM customer_addresses\", conn)\n\n# Read data from premises table\npremises = pd.read_sql(\"SELECT * FROM premises\", conn)\n\n# Convert column names to lowercase\ncustomer_addresses.columns = customer_addresses.columns.str.lower()\npremises.columns = premises.columns.str.lower()\n\n# merge the two tables on premise_id\nmerged_data = pd.merge(customer_addresses, premises, on=\"premise_id\")\n\n# group by address_type_code and count the occurrences\ngrouped_data = merged_data.groupby(\"address_type_code\").size().reset_index(name=\"count\")\n\n# plot the bar chart\nplt.bar(grouped_data[\"address_type_code\"], grouped_data[\"count\"])\nplt.xlabel(\"Address Type Code\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Addresses by Type\")\nplt.show()\n"
  },
  {
    "db_id": "singer",
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship in a bar chart, and order in descending by the X-axis.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"singer\" table\nsinger_data = pd.read_sql(\"SELECT * FROM singer\", conn)\n\n# Convert column names to lowercase\nsinger_data.columns = singer_data.columns.str.lower()\n\n# Perform the SQL query\nresult = singer_data.groupby(\"citizenship\")[\"net_worth_millions\"].max().reset_index().sort_values(\"citizenship\", ascending=False)\n\n# Create the bar plot\nplt.bar(result[\"citizenship\"], result[\"net_worth_millions\"])\nplt.xlabel(\"Citizenship\")\nplt.ylabel(\"Net Worth (Millions)\")\nplt.title(\"Maximum Net Worth by Citizenship\")\nplt.show()"
  },
  {
    "db_id": "products_for_hire",
    "question": "How many bookings did each customer make? List the first name as the X-axis, and the count as the Y-axis in the bar chart, could you order by the total number in descending please?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Customers and bookings tables\ncustomers = pd.read_sql(\"SELECT * FROM Customers\", conn)\nbookings = pd.read_sql(\"SELECT * FROM bookings\", conn)\n\n# Convert column names to lowercase\ncustomers.columns = customers.columns.str.lower()\nbookings.columns = bookings.columns.str.lower()\n\n# Merge the Customers and bookings tables on customer_id\nmerged_data = pd.merge(customers, bookings, on=\"customer_id\")\n\n# Group by first_name and count the number of bookings for each customer\ngrouped_data = merged_data.groupby(\"first_name\").size().reset_index(name=\"count\")\n\n# Sort the data by count in descending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"first_name\"], sorted_data[\"count\"])\nplt.xlabel(\"First Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Bookings per Customer\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "college_3",
    "question": "Show me a bar chart displaying the count of each distinct student's first name who has achieved a grade point of at least 3.8 in one course.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nENROLLED_IN = pd.read_sql(\"SELECT * FROM ENROLLED_IN\", conn)\nGRADECONVERSION = pd.read_sql(\"SELECT * FROM GRADECONVERSION\", conn)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nENROLLED_IN.columns = ENROLLED_IN.columns.str.lower()\nGRADECONVERSION.columns = GRADECONVERSION.columns.str.lower()\nSTUDENT.columns = STUDENT.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(ENROLLED_IN, GRADECONVERSION, left_on='grade', right_on='lettergrade')\nmerged_df = pd.merge(merged_df, STUDENT, left_on='stuid', right_on='stuid')\n\n# Filtering the data\nfiltered_df = merged_df[merged_df['gradepoint'] >= 3.8]\n\n# Grouping and counting by fname\ngrouped_df = filtered_df.groupby('fname').size().reset_index(name='count')\n\n# Sorting by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plotting the bar chart\nplt.bar(sorted_df['fname'], sorted_df['count'])\nplt.xlabel('First Name')\nplt.ylabel('Count')\nplt.title('Number of Students with Grade Point >= 3.8 by First Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "gymnast",
    "question": "Show me a bar chart of the names and heights of gymnasts, ordered by their heights in ascending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngymnast = pd.read_sql(\"SELECT * FROM gymnast\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\ngymnast.columns = gymnast.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(gymnast, people, left_on='gymnast_id', right_on='people_id')\n\n# Group by name and height, and sort by height in ascending order\ngrouped_df = merged_df.groupby(['name', 'height']).size().reset_index(name='count')\nsorted_df = grouped_df.sort_values('height')\n\n# Plot the bar chart\nplt.bar(sorted_df['name'], sorted_df['height'])\nplt.xlabel('Name')\nplt.ylabel('Height')\nplt.title('Height of Gymnasts')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "soccer_1",
    "question": ", list X-axis in ascending order .",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nPlayer_Attributes = pd.read_sql(\"SELECT * FROM Player_Attributes\", conn)\nPlayer_Attributes.columns = Player_Attributes.columns.str.lower()\n\n# Filter the dataframe based on the condition\nfiltered_df = Player_Attributes[Player_Attributes['overall_rating'] > 80]\n\n# Group the data by preferred_foot and count the number of occurrences\ngrouped_df = filtered_df.groupby('preferred_foot').size().reset_index(name='count')\n\n# Sort the data by preferred_foot in ascending order\nsorted_df = grouped_df.sort_values('preferred_foot')\n\n# Create a bar plot\nplt.bar(sorted_df['preferred_foot'], sorted_df['count'])\nplt.xlabel('Preferred Foot')\nplt.ylabel('Count')\nplt.title('Number of Players with Overall Rating > 80 by Preferred Foot')\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "What are the number of the names of the technicians that are assigned to repair machines with more point values than 70?, sort by the x-axis from low to high.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the repair_assignment table\nrepair_assignment = pd.read_sql(\"SELECT * FROM repair_assignment\", conn)\n\n# Read the machine table\nmachine = pd.read_sql(\"SELECT * FROM machine\", conn)\n\n# Read the technician table\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\n\n# Convert column names to lowercase\nrepair_assignment.columns = repair_assignment.columns.str.lower()\nmachine.columns = machine.columns.str.lower()\ntechnician.columns = technician.columns.str.lower()\n\n# merge the tables\nmerged_data = pd.merge(repair_assignment, machine, on=\"machine_id\")\nmerged_data = pd.merge(merged_data, technician, on=\"technician_id\")\n\n# filter the data\nfiltered_data = merged_data[merged_data[\"value_points\"] > 70]\n\n# group by name and count occurrences\ngrouped_data = filtered_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# sort by name\nsorted_data = grouped_data.sort_values(\"name\")\n\n# plot the bar chart\nplt.bar(sorted_data[\"name\"], sorted_data[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Repairs by Name\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "driving_school",
    "question": "List all customer status codes and the number of customers having each status code in a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Customers table\ncustomers = pd.read_sql(\"SELECT * FROM Customers\", conn)\n\n# Convert column names to lowercase\ncustomers.columns = customers.columns.str.lower()\n\n# Group by customer_status_code and count the number of occurrences\ncustomer_status_counts = customers.groupby('customer_status_code').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(customer_status_counts['customer_status_code'], customer_status_counts['count'])\nplt.xlabel('Customer Status Code')\nplt.ylabel('Count')\nplt.title('Number of Customers by Status Code')\n\n# Show the bar chart\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "For each distinct product name , show its average product price . Plot them as pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nPRODUCTS = pd.read_sql(\"SELECT * FROM PRODUCTS\", conn)\nPRODUCTS.columns = PRODUCTS.columns.str.lower()\n\n# Assuming you have already read the table data into a DataFrame called PRODUCTS\n\n# Calculate the average product price for each product name\navg_price = PRODUCTS.groupby('product_name')['product_price'].mean()\n\n# Create a pie chart\nplt.pie(avg_price, labels=avg_price.index, autopct='%1.1f%%')\nplt.title('Average Product Price by Product Name')\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "Show me a bar chart of the top 10 storm names with the highest number of affected regions.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\naffected_region = pd.read_sql(\"SELECT * FROM affected_region\", conn)\nstorm.columns = storm.columns.str.lower()\naffected_region.columns = affected_region.columns.str.lower()\n\n# Perform the join operation\nmerged_data = pd.merge(storm, affected_region, on='storm_id')\n\n# Group by storm name and count the number of occurrences\ngrouped_data = merged_data.groupby('name').size().reset_index(name='region_count')\n\n# Sort the data by region count in descending order and select the top 10\ntop_10_storms = grouped_data.sort_values('region_count', ascending=False).head(10)\n\n# Create the bar plot\nplt.bar(top_10_storms['name'], top_10_storms['region_count'])\nplt.xlabel('Storm Name')\nplt.ylabel('Region Count')\nplt.title('Top 10 Storms by Region Count')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death, show me the name and the total number of deaths with a bar chart, show Y-axis from high to low order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the storm table\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\n\n# Convert column names to lowercase\nstorm.columns = storm.columns.str.lower()\n\n# Filter the data for number_deaths >= 1\nfiltered_storm = storm[storm['number_deaths'] >= 1]\n\n# Sort the data by number_deaths in descending order\nsorted_storm = filtered_storm.sort_values('number_deaths', ascending=False)\n\n# Select the columns for visualization\ndata = sorted_storm[['name', 'number_deaths']]\n\n# Plot the bar chart\nplt.bar(data['name'], data['number_deaths'])\nplt.xlabel('Name')\nplt.ylabel('Number of Deaths')\nplt.title('Storms with Number of Deaths >= 1')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "What are the different role codes for users , and how many users have each Show bar chart , and rank by the total number in ascending please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nusers = pd.read_sql(\"SELECT * FROM users\", conn)\nusers.columns = users.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\nrole_counts = users.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nrole_counts = role_counts.sort_values('count')\n\n# Creating a bar plot\nplt.bar(role_counts['role_code'], role_counts['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Users by Role Code')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Visualize a bar chart for what are the ids and names of all start stations that were the beginning of at least 200 trips ? , and could you rank in ascending by the total number ?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\ntrip.columns = trip.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called 'trip'\n\n# Perform the SQL query\nresult = trip[['start_station_name', 'start_station_id']].sort_values('start_station_id')\n\n# Create the bar plot\nplt.bar(result['start_station_name'], result['start_station_id'])\nplt.xlabel('Start Station Name')\nplt.ylabel('Start Station ID')\nplt.title('Start Station ID by Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Bar chart x axis country y axis the average of age , and display by the names in desc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Calculate average age by country\navg_age_by_country = artist.groupby('country')['age'].mean().reset_index()\n\n# Sort by country in descending order\navg_age_by_country = avg_age_by_country.sort_values('country', ascending=False)\n\n# Plot the bar chart\nplt.bar(avg_age_by_country['country'], avg_age_by_country['age'])\nplt.xlabel('Country')\nplt.ylabel('Average Age')\nplt.title('Average Age of Artists by Country')\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "List the number of the names of patients who have made appointments, and order from low to high by the y axis.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the appointment table\nappointment = pd.read_sql(\"SELECT * FROM appointment\", conn)\n\n# Read the patient table\npatient = pd.read_sql(\"SELECT * FROM patient\", conn)\n\n# Convert column names to lowercase\nappointment.columns = appointment.columns.str.lower()\npatient.columns = patient.columns.str.lower()\n\n# merge the appointment and patient tables on the patient column\nmerged_data = pd.merge(appointment, patient, left_on='patient', right_on='ssn')\n\n# group by name and count the occurrences\ngrouped_data = merged_data.groupby('name').size().reset_index(name='count')\n\n# sort the data by count in ascending order\nsorted_data = grouped_data.sort_values('count', ascending=True)\n\n# plot the bar chart\nplt.bar(sorted_data['name'], sorted_data['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Number of Appointments by Name')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "For each distinct product name, show its average product price, and show by the the average of product price from low to high.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the PRODUCTS table\nproducts = pd.read_sql(\"SELECT * FROM PRODUCTS\", conn)\n\n# Convert column names to lowercase\nproducts.columns = map(str.lower, products.columns)\n\n# Perform the SQL query\nresult = products.groupby('product_name')['product_price'].mean().sort_values()\n\n# Create the bar plot\nplt.bar(result.index, result.values)\nplt.xlabel('Product Name')\nplt.ylabel('Average Product Price')\nplt.title('Average Product Price by Product Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "customer_deliveries",
    "question": "What is the name of the route with the highest number of deliveries, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDelivery_Routes = pd.read_sql(\"SELECT * FROM Delivery_Routes\", conn)\nDelivery_Route_Locations = pd.read_sql(\"SELECT * FROM Delivery_Route_Locations\", conn)\nDelivery_Routes.columns = Delivery_Routes.columns.str.lower()\nDelivery_Route_Locations.columns = Delivery_Route_Locations.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Delivery_Routes, Delivery_Route_Locations, on='route_id')\n\n# Perform the group by and count operation\ngrouped_df = merged_df.groupby('route_name').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['route_name'], sorted_df['count'])\nplt.xlabel('Route Name')\nplt.ylabel('Count')\nplt.title('Number of Locations per Route')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "List the name of physicians who took some appointment, and count them by a bar chart, and I want to list from high to low by the bars.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the appointment table\nappointment_df = pd.read_sql(\"SELECT * FROM appointment\", conn)\n# Convert column names to lowercase\nappointment_df.columns = appointment_df.columns.str.lower()\n\n# Read the physician table\nphysician_df = pd.read_sql(\"SELECT * FROM physician\", conn)\n# Convert column names to lowercase\nphysician_df.columns = physician_df.columns.str.lower()\n\n# Merge the appointment and physician tables on the Physician column\nmerged_df = pd.merge(appointment_df, physician_df, left_on=\"physician\", right_on=\"employeeid\")\n\n# Group by Name and count the occurrences\ngrouped_df = merged_df.groupby(\"name\").size().reset_index(name=\"count\")\n# Sort by Name in descending order\nsorted_df = grouped_df.sort_values(\"name\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df[\"name\"], sorted_df[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Appointments by Physician\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show different types of ships and the number of ships of each type in a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the \"ship\" table into a pandas DataFrame\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\n\n# Perform the SQL query\nresult = ship_df.groupby('type').size()\n\n# Create a bar plot\nplt.bar(result.index, result.values)\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Number of Ships by Type')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "Bar chart x axis away team y axis the number of away team , and show by the X-axis in desc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\ngame.columns = game.columns.str.lower()\n\n# Grouping the data by away_team and counting the occurrences\naway_team_counts = game.groupby('away_team').size().reset_index(name='count')\n\n# Sorting the data by away_team in descending order\naway_team_counts = away_team_counts.sort_values('away_team', ascending=False)\n\n# Creating the bar plot\nplt.bar(away_team_counts['away_team'], away_team_counts['count'])\nplt.xlabel('Away Team')\nplt.ylabel('Count')\nplt.title('Number of Games by Away Team')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "products_for_hire",
    "question": "Take the first name of all the good customers as the X-axis and gender of all the good customers as Y-axis in a bar chart, could you sort from high to low by the first_name please?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the customers table\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\n\n# Convert column names to lowercase\ncustomers.columns = customers.columns.str.lower()\n\n# Filter the customers table for good customers\ngood_customers = customers[customers['good_or_bad_customer'] == 'good']\n\n# Sort the good customers by first name in descending order\ngood_customers_sorted = good_customers.sort_values('first_name', ascending=False)\n\n# Select the first_name and gender_mf columns\ndata = good_customers_sorted[['first_name', 'gender_mf']]\n\n# Plot the bar chart\nplt.bar(data['first_name'], data['gender_mf'])\n\n# Add labels and title\nplt.xlabel('First Name')\nplt.ylabel('Gender')\nplt.title('Good Customers by First Name')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "perpetrator",
    "question": "What are the countries of perpetrators ? Show each country and the corresponding number of perpetrators there . Plot them as bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperpetrator = pd.read_sql(\"SELECT * FROM perpetrator\", conn)\nperpetrator.columns = perpetrator.columns.str.lower()\n\n# Group by country and count the number of occurrences\nperpetrator_count = perpetrator.groupby('country').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(perpetrator_count['country'], perpetrator_count['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Perpetrators by Country')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Find the ids and names of stations from which at least 200 trips started , and list y-axis in descending order please .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\ntrip.columns = trip.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called 'trip'\n\n# Sort the DataFrame by start_station_id in descending order\nsorted_trip = trip.sort_values(by='start_station_id', ascending=False)\n\n# Extract the start_station_name and start_station_id columns\nstart_station_name = sorted_trip['start_station_name']\nstart_station_id = sorted_trip['start_station_id']\n\n# Create a bar plot\nplt.bar(start_station_name, start_station_id)\n\n# Set the x-axis labels to be rotated for better readability\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "For each customer who has at least two orders, find the customer name and number of orders made. Show a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the 'orders' table\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\n\n# Read the 'customers' table\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\n\n# Convert column names to lowercase\norders.columns = orders.columns.str.lower()\ncustomers.columns = customers.columns.str.lower()\n\n# merge the 'orders' and 'customers' tables on 'customer_id'\nmerged_data = pd.merge(orders, customers, on='customer_id')\n\n# group by 'customer_name' and count the number of occurrences\ngrouped_data = merged_data.groupby('customer_name').size().reset_index(name='count')\n\n# plot the pie chart\nplt.pie(grouped_data['count'], labels=grouped_data['customer_name'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()\n"
  },
  {
    "db_id": "icfp_1",
    "question": "What is the title of each paper and the count of authors for each paper in the database, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\npapers = pd.read_sql(\"SELECT * FROM papers\", conn)\nauthorship.columns = authorship.columns.str.lower()\npapers.columns = papers.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(authorship, papers, on='paperid')\n\n# Group by title and count the number of authorder\ngrouped_df = merged_df.groupby('title').agg({'authorder': 'count'}).reset_index()\n\n# Plot the bar chart\nplt.bar(grouped_df['title'], grouped_df['authorder'])\nplt.xlabel('Title')\nplt.ylabel('Count of authorder')\nplt.title('Number of authorder per title')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Give me a bar chart to show the number of event details of events that have more than one participant, I want to order Y-axis from low to high order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the EVENTS table\nevents = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\n\n# Read the Participants_in_Events table\nparticipants = pd.read_sql(\"SELECT * FROM Participants_in_Events\", conn)\n\n# Convert column names to lowercase\nevents.columns = events.columns.str.lower()\nparticipants.columns = participants.columns.str.lower()\n\n# merge the two tables on event_id\nmerged_data = pd.merge(events, participants, on='event_id')\n\n# group by event_details and count the occurrences\nevent_counts = merged_data.groupby('event_details').size().reset_index(name='count')\n\n# sort the data by count in ascending order\nevent_counts = event_counts.sort_values('count', ascending=True)\n\n# plot the bar chart\nplt.bar(event_counts['event_details'], event_counts['count'])\nplt.xlabel('Event Details')\nplt.ylabel('Count')\nplt.title('Event Details vs Count')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Create a bar chart showing the total number across premises type , could you sort by the x axis from low to high ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npremises = pd.read_sql(\"SELECT * FROM premises\", conn)\npremises.columns = premises.columns.str.lower()\n\n# Group by premises_type and count the number of occurrences\npremises_count = premises.groupby('premises_type').size().reset_index(name='count')\n\n# Sort by premises_type in ascending order\npremises_count = premises_count.sort_values('premises_type')\n\n# Create a bar plot\nplt.bar(premises_count['premises_type'], premises_count['count'])\nplt.xlabel('Premises Type')\nplt.ylabel('Count')\nplt.title('Number of Premises by Type')\nplt.show()"
  },
  {
    "db_id": "products_for_hire",
    "question": "How many bookings did each customer make? Show the customer id as the Y-axis and the first name as the X-axis in a bar chart, rank from high to low by the X-axis.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Customers table\ncustomers = pd.read_sql(\"SELECT * FROM Customers\", conn)\n\n# Read the bookings table\nbookings = pd.read_sql(\"SELECT * FROM bookings\", conn)\n\n# Convert column names to lowercase\ncustomers.columns = customers.columns.str.lower()\nbookings.columns = bookings.columns.str.lower()\n\n# merge the two tables on customer_id\nmerged_data = pd.merge(customers, bookings, on=\"customer_id\")\n\n# sort the merged data by first_name in descending order\nsorted_data = merged_data.sort_values(by=\"first_name\", ascending=False)\n\n# extract the required columns\nfirst_names = sorted_data[\"first_name\"]\ncustomer_ids = sorted_data[\"customer_id\"]\n\n# plot the bar chart\nplt.bar(first_names, customer_ids)\nplt.xlabel(\"First Name\")\nplt.ylabel(\"Customer ID\")\nplt.title(\"Customer IDs by First Name\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Show me a bar chart displaying the count of orders with quantity 1 for each actual delivery date.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nCustomer_Orders = pd.read_sql(\"SELECT * FROM Customer_Orders\", conn)\nORDER_ITEMS = pd.read_sql(\"SELECT * FROM ORDER_ITEMS\", conn)\nCustomer_Orders.columns = Customer_Orders.columns.str.lower()\nORDER_ITEMS.columns = ORDER_ITEMS.columns.str.lower()\n\n# Merge the two tables\nmerged_df = pd.merge(Customer_Orders, ORDER_ITEMS, on='order_id')\n\n# Filter the data where order_quantity is 1\nfiltered_df = merged_df[merged_df['order_quantity'] == 1]\n\n# Group by actual_delivery_date and count the number of rows\ngrouped_df = filtered_df.groupby('actual_delivery_date').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['actual_delivery_date'], grouped_df['count'])\nplt.xlabel('Actual Delivery Date')\nplt.ylabel('Count')\nplt.title('Number of Orders with Order Quantity 1 by Delivery Date')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "Scatter plot to show reign on x axis and days_held on y axis .",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nwrestler = pd.read_sql(\"SELECT * FROM wrestler\", conn)\nwrestler.columns = wrestler.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called wrestler\n\n# Selecting the required columns\nscatter_data = wrestler[['reign', 'days_held']]\n\n# Creating the scatter plot\nplt.scatter(scatter_data['reign'], scatter_data['days_held'])\n\n# Adding labels and title\nplt.xlabel('Reign')\nplt.ylabel('Days Held')\nplt.title('Scatter Plot of Reign vs Days Held')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "Find the number of medications prescribed for each brand. Plot them as bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the medication and prescribes tables\nmedication = pd.read_sql(\"SELECT * FROM medication\", conn)\nprescribes = pd.read_sql(\"SELECT * FROM prescribes\", conn)\n\n# Convert column names to lowercase\nmedication.columns = medication.columns.str.lower()\nprescribes.columns = prescribes.columns.str.lower()\n\n# merge the medication and prescribes tables on the code column\nmerged_data = pd.merge(medication, prescribes, left_on='code', right_on='medication')\n\n# group by brand and count the number of occurrences\nbrand_counts = merged_data.groupby('brand').size()\n\n# plot the bar chart\nplt.bar(brand_counts.index, brand_counts.values)\nplt.xlabel('Brand')\nplt.ylabel('Count')\nplt.title('Number of Prescriptions by Medication Brand')\n\n# Show the plot\nplt.show()\n"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death , compare the number of deaths by name , and I want to order by the names from high to low .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm.columns = storm.columns.str.lower()\n\n# Filter the storm dataframe\nfiltered_storm = storm[storm['number_deaths'] >= 1]\n\n# Sort the filtered dataframe by name in descending order\nsorted_storm = filtered_storm.sort_values('name', ascending=False)\n\n# Create a bar plot\nplt.bar(sorted_storm['name'], sorted_storm['number_deaths'])\n\n# Set the x-axis label\nplt.xlabel('Name')\n\n# Set the y-axis label\nplt.ylabel('Number of Deaths')\n\n# Set the title of the plot\nplt.title('Number of Deaths by Storm Name')\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "Draw a bar chart for what are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot.columns = pilot.columns.str.lower()\n\n# Grouping the data by nationality and counting the occurrences\nnationality_counts = pilot.groupby('nationality').size()\n\n# Creating a bar plot\nplt.bar(nationality_counts.index, nationality_counts.values)\n\n# Adding labels and title\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Pilots by Nationality')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Bar chart x axis role code y axis the total number, I want to display in descending by the Role_Code.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Employees table\nemployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\n\n# Convert column names to lowercase\nemployees.columns = employees.columns.str.lower()\n\n# Perform the SQL query\nresult = employees.groupby('role_code').size().reset_index(name='count').sort_values('role_code', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['role_code'], result['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Employees by Role Code')\nplt.show()"
  },
  {
    "db_id": "sakila_1",
    "question": "In a bar chart, please display the name of the category to which the film 'HUNGER ROOF' belongs.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncategory = pd.read_sql(\"SELECT * FROM category\", conn)\nfilm_category = pd.read_sql(\"SELECT * FROM film_category\", conn)\nfilm = pd.read_sql(\"SELECT * FROM film\", conn)\ncategory.columns = category.columns.str.lower()\nfilm_category.columns = film_category.columns.str.lower()\nfilm.columns = film.columns.str.lower()\n\n# Merge tables\nmerged_df = pd.merge(category, film_category, on='category_id')\nmerged_df = pd.merge(merged_df, film, on='film_id')\n\n# Group by category name and count\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Sort by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot bar chart\nplt.bar(sorted_df['name'], sorted_df['count'])\nplt.xlabel('Category')\nplt.ylabel('Count')\nplt.title('Number of Films in Each Category')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Tell me how many songs each singer has, could you display names in ascending order?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the singer and song tables\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsong = pd.read_sql(\"SELECT * FROM song\", conn)\n\n# Convert column names to lowercase\nsinger.columns = singer.columns.str.lower()\nsong.columns = song.columns.str.lower()\n\n# Merge the singer and song tables on Singer_ID\nmerged_data = pd.merge(singer, song, on=\"singer_id\")\n\n# Perform the group by and count operation\ngrouped_data = merged_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# Sort the data by name in ascending order\nsorted_data = grouped_data.sort_values(\"name\")\n\n# Generate the bar plot\nplt.bar(sorted_data[\"name\"], sorted_data[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Songs by Singer\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "perpetrator",
    "question": "Who is the person with the lightest name in the \"people\" table, and can you represent the weights using a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\nperpetrator = pd.read_sql(\"SELECT * FROM perpetrator\", conn)\npeople.columns = people.columns.str.lower()\nperpetrator.columns = perpetrator.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(people, perpetrator, on='people_id')\n\n# Sort the merged dataframe by name in ascending order\nsorted_df = merged_df.sort_values('name', ascending=True)\n\n# Select the first row after sorting\nresult = sorted_df.head(1)\n\n# Create a bar plot\nplt.bar(result['name'], result['weight'])\n\n# Add labels and title\nplt.xlabel('Name')\nplt.ylabel('Weight')\nplt.title('Weight of the First Person in Alphabetical Order')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "What does the pie chart of the age distribution of the members in the club \"Hopkins Student Enterprises\" look like?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nstudent = pd.read_sql(\"SELECT * FROM student\", conn)\nclub.columns = club.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\nstudent.columns = student.columns.str.lower()\n\n# Perform the SQL query\nresult = pd.merge(club, member_of_club, on='clubid')\nresult = pd.merge(result, student, left_on='stuid', right_on='stuid')\nresult = result[result['clubname'] == 'hopkins student enterprises']\n\n# Create a new column 'x' based on age ranges\nresult['x'] = pd.cut(result['age'], bins=[0, 19, 29, 39, float('inf')], labels=['0-19', '20-29', '30-39', '40+'])\n\n# Group by 'x' and count the occurrences\nresult = result.groupby('x').size().reset_index(name='y')\n\n# Plot the pie chart\nplt.pie(result['y'], labels=result['x'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "Create a bar chart showing the total number across team , and show bars in asc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\ntechnician.columns = technician.columns.str.lower()\n\n# Group by team and count the number of technicians in each team\nteam_counts = technician.groupby('team').size().reset_index(name='count')\n\n# Sort the teams in ascending order\nteam_counts = team_counts.sort_values('team')\n\n# Create a bar plot\nplt.bar(team_counts['team'], team_counts['count'])\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Number of Technicians in Each Team')\nplt.show()"
  },
  {
    "db_id": "soccer_1",
    "question": "What is the trend of the average crossing score for players who have a crossing score higher than 90 and prefer their right foot, shown in a line chart?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nPlayer = pd.read_sql(\"SELECT * FROM Player\", conn)\nPlayer_Attributes = pd.read_sql(\"SELECT * FROM Player_Attributes\", conn)\nPlayer.columns = Player.columns.str.lower()\nPlayer_Attributes.columns = Player_Attributes.columns.str.lower()\n\n# Merge the Player and Player_Attributes dataframes\nmerged_df = pd.merge(Player, Player_Attributes, on='player_api_id')\n\n# Filter the merged dataframe based on the conditions\nfiltered_df = merged_df[(merged_df['crossing'] > 90) & (merged_df['preferred_foot'] == 'right')]\n\n# Group by player_name and calculate the average crossing\ngrouped_df = filtered_df.groupby('player_name')['crossing'].mean().reset_index()\n\n# Sort the dataframe by average crossing in descending order\nsorted_df = grouped_df.sort_values('crossing', ascending=False)\n\n# Plot the line chart\nplt.plot(sorted_df['player_name'], sorted_df['crossing'])\nplt.xlabel('Player Name')\nplt.ylabel('Average Crossing')\nplt.title('Average Crossing for Players with Crossing > 90 and Preferred Foot = Right')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "For all artist names who are not from the United States, show the total number of each year with a bar chart, I want to display Y-axis from low to high order please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the artist table\nartist_df = pd.read_sql(\"SELECT * FROM artist\", conn)\n\n# Convert column names to lowercase\nartist_df.columns = artist_df.columns.str.lower()\n\n# Filter out artists from the United States\nfiltered_df = artist_df[artist_df['country'] != 'United States']\n\n# Group by Year_Join and count the number of artists\ngrouped_df = filtered_df.groupby('year_join').size().reset_index(name='count')\n\n# Sort the dataframe by count in ascending order\nsorted_df = grouped_df.sort_values('count', ascending=True)\n\n# Create a bar plot\nplt.bar(sorted_df['year_join'], sorted_df['count'])\nplt.xlabel('Year Joined')\nplt.ylabel('Count')\nplt.title('Number of Artists Joined by Year (excluding United States)')\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "Bar graph to show the total number from different role code , and sort from high to low by the bar .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nusers = pd.read_sql(\"SELECT * FROM users\", conn)\nusers.columns = users.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\ngrouped_data = users.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by role_code in descending order\nsorted_data = grouped_data.sort_values('role_code', ascending=False)\n\n# Creating the bar plot\nplt.bar(sorted_data['role_code'], sorted_data['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Users by Role Code')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Show me a bar chart displaying the number of documents for each document type that are named \"How to read a book\".",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nAll_documents = pd.read_sql(\"SELECT * FROM All_documents\", conn)\nRef_document_types = pd.read_sql(\"SELECT * FROM Ref_document_types\", conn)\nAll_documents.columns = All_documents.columns.str.lower()\nRef_document_types.columns = Ref_document_types.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(All_documents, Ref_document_types, on='document_type_code')\n\n# Filtering the data\nfiltered_df = merged_df[merged_df['document_name'] == 'How to read a book']\n\n# Grouping and counting the documents by document type name\ngrouped_df = filtered_df.groupby('document_type_name').size().reset_index(name='count')\n\n# Creating the bar plot\nplt.bar(grouped_df['document_type_name'], grouped_df['count'])\nplt.xlabel('Document Type')\nplt.ylabel('Count')\nplt.title('Number of Documents by Document Type')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Show all countries with a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the artist table\nartist_df = pd.read_sql(\"SELECT * FROM artist\", conn)\n\n# Convert column names to lowercase\nartist_df.columns = artist_df.columns.str.lower()\n\n# Perform the group by operation\ngrouped_df = artist_df.groupby('country').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['country'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "Who is the pilot with the most records, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npilot_record = pd.read_sql(\"SELECT * FROM pilot_record\", conn)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot_record.columns = pilot_record.columns.str.lower()\npilot.columns = pilot.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(pilot_record, pilot, on='pilot_id')\n\n# Grouping by pilot_name and counting the number of records\ngrouped_df = merged_df.groupby('pilot_name').size().reset_index(name='num_records')\n\n# Sorting by num_records in descending order and selecting the top 1\ntop_pilot = grouped_df.sort_values('num_records', ascending=False).head(1)\n\n# Plotting the bar chart\nplt.bar(top_pilot['pilot_name'], top_pilot['num_records'])\nplt.xlabel('Pilot Name')\nplt.ylabel('Number of Records')\nplt.title('Top Pilot with Most Records')\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "Return a bar on what are the different role codes for users , and how many users have each ? , could you rank by the role_code in desc ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nusers = pd.read_sql(\"SELECT * FROM users\", conn)\nusers.columns = users.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\ngrouped_data = users.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by role_code in descending order\nsorted_data = grouped_data.sort_values('role_code', ascending=False)\n\n# Creating the bar plot\nplt.bar(sorted_data['role_code'], sorted_data['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Users by Role Code')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Show the number of stations installed change over the installation date of in station table using a line chart.",
    "chart": "Line",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the station table\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\n\n# Convert column names to lowercase\nstation.columns = station.columns.str.lower()\n\n# Perform the SQL query\nresult = station.groupby('installation_date').size().reset_index(name='count')\n\n# Plot the line chart\nplt.plot(result['installation_date'], result['count'])\nplt.xlabel('Installation Date')\nplt.ylabel('Count')\nplt.title('Number of Installations by Date')\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "Can you create a pie chart to display the distribution of documents with images versus documents without images?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ndocuments = pd.read_sql(\"SELECT * FROM documents\", conn)\ndocument_sections = pd.read_sql(\"SELECT * FROM document_sections\", conn)\ndocument_sections_images = pd.read_sql(\"SELECT * FROM document_sections_images\", conn)\ndocuments.columns = documents.columns.str.lower()\ndocument_sections.columns = document_sections.columns.str.lower()\ndocument_sections_images.columns = document_sections_images.columns.str.lower()\n\n# Perform the SQL query\nresult = pd.merge(documents, document_sections, on='document_code', how='left')\nresult = pd.merge(result, document_sections_images, on='section_id', how='left')\n\n# Group by image status and count distinct document names\ngrouped = result.groupby(result['section_id'].isnull().map({True: 'without images', False: 'with images'}))\ncount = grouped['document_name'].nunique()\n\n# Create a pie chart\nplt.pie(count, labels=count.index, autopct='%1.1f%%')\nplt.title('Document Image Status')\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "Pie chart about how many eliminations did each team have ?",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nelimination = pd.read_sql(\"SELECT * FROM elimination\", conn)\nelimination.columns = elimination.columns.str.lower()\n\n# Grouping the data by team and counting the occurrences\nteam_counts = elimination.groupby('team').size()\n\n# Creating a pie chart\nplt.pie(team_counts, labels=team_counts.index, autopct='%1.1f%%')\nplt.title('Team Distribution')\nplt.show()"
  },
  {
    "db_id": "small_bank_1",
    "question": "Show me a bar chart displaying the account name and total saving balance for each account, ranked in descending order by the total saving balance.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nsavings = pd.read_sql(\"SELECT * FROM savings\", conn)\naccounts.columns = accounts.columns.str.lower()\nsavings.columns = savings.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(accounts, savings, on='custid')\n\n# Group by name and calculate the sum of balance\ngrouped_df = merged_df.groupby('name')['balance'].sum().reset_index()\n\n# Sort the dataframe by sum of balance in descending order\nsorted_df = grouped_df.sort_values('balance', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['name'], sorted_df['balance'])\nplt.xlabel('Name')\nplt.ylabel('Sum of Balance')\nplt.title('Sum of Balance by Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "What are the average ages of artists by countries ? Visualize the result with a bar , sort in descending by the Y .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Calculate average age by country\navg_age_by_country = artist.groupby('country')['age'].mean().reset_index()\n\n# Sort by average age in descending order\navg_age_by_country = avg_age_by_country.sort_values('age', ascending=False)\n\n# Plot bar chart\nplt.bar(avg_age_by_country['country'], avg_age_by_country['age'])\nplt.xlabel('Country')\nplt.ylabel('Average Age')\nplt.title('Average Age of Artists by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "How many artists of each age did not have an exhibition in 2004, visualized in a scatter chart?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nartist.columns = artist.columns.str.lower()\nexhibition.columns = exhibition.columns.str.lower()\n\n# Perform the left join\nmerged_df = pd.merge(artist, exhibition, on='artist_id', how='left')\n\n# Filter the data\nfiltered_df = merged_df[(merged_df['year'].isnull()) | (merged_df['year'] != 2004)]\n\n# Group by age and count\ngrouped_df = filtered_df.groupby('age').size().reset_index(name='count')\n\n# Scatter plot\nplt.scatter(grouped_df['age'], grouped_df['count'])\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.title('Count of Artists by Age')\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "For each citizenship , what is the maximum net worth Visualize by bar chart , and sort Y in asc order .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Group by citizenship and calculate the maximum net worth\nmax_net_worth = singer.groupby('citizenship')['net_worth_millions'].max()\n\n# Sort the values in ascending order\nmax_net_worth_sorted = max_net_worth.sort_values()\n\n# Create a bar plot\nplt.bar(max_net_worth_sorted.index, max_net_worth_sorted.values)\n\n# Set the x-axis label\nplt.xlabel('Citizenship')\n\n# Set the y-axis label\nplt.ylabel('Max Net Worth (Millions)')\n\n# Set the title of the plot\nplt.title('Max Net Worth by Citizenship')\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "Show me a bar chart displaying the count of female members in the club \"Bootup Baltimore\" for each last name.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nstudent = pd.read_sql(\"SELECT * FROM student\", conn)\nclub.columns = club.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\nstudent.columns = student.columns.str.lower()\n\n# Perform the join operation\ndf = pd.merge(club, member_of_club, on='clubid')\ndf = pd.merge(df, student, on='stuid')\n\n# Filter the data\ndf = df[(df['clubname'] == 'Bootup Baltimore') & (df['sex'] == 'F')]\n\n# Group by lname and count the number of occurrences\ndf = df.groupby('lname').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(df['lname'], df['count'])\nplt.xlabel('Last Name')\nplt.ylabel('Count')\nplt.title('Number of Female Students in Bootup Baltimore Club by Last Name')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "What is the total number of each ship type? Give me a bar chart, sort by the y axis in desc.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ship table\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\n\n# Perform the SQL query\nresult = ship_df.groupby('type').size().reset_index(name='count').sort_values('count', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['type'], result['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Number of Ships by Type')\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "Find the name and access counts of all documents, in alphabetic order of the document name. Show bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the \"documents\" table into a DataFrame\ndocuments_df = pd.read_sql(\"SELECT * FROM documents\", conn)\n\n# Convert column names to lowercase\ndocuments_df.columns = documents_df.columns.str.lower()\n\n# Sort the DataFrame by document_name\ndocuments_df = documents_df.sort_values(by='document_name')\n\n# Create a bar plot\nplt.bar(documents_df['document_name'], documents_df['access_count'])\nplt.xlabel('Document Name')\nplt.ylabel('Access Count')\nplt.title('Access Count by Document')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "icfp_1",
    "question": "What is the bar chart displaying the titles of papers written by \"Aaron Turon\"?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nauthors = pd.read_sql(\"SELECT * FROM authors\", conn)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\npapers = pd.read_sql(\"SELECT * FROM papers\", conn)\nauthors.columns = authors.columns.str.lower()\nauthorship.columns = authorship.columns.str.lower()\npapers.columns = papers.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(authors, authorship, on='authid')\nmerged_df = pd.merge(merged_df, papers, on='paperid')\n\n# Filter data\nfiltered_df = merged_df[(merged_df['fname'] == 'Aaron') & (merged_df['lname'] == 'Turon')]\n\n# Group by title and count\ngrouped_df = filtered_df.groupby('title').size().reset_index(name='count')\n\n# Plot bar chart\nplt.bar(grouped_df['title'], grouped_df['count'])\nplt.xlabel('Title')\nplt.ylabel('Count')\nplt.title('Number of Papers by Title')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "For each customer who has at least two orders, find the customer name and number of orders made. Visualize by bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the 'orders' table\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\n\n# Read the 'customers' table\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\n\n# Convert column names to lowercase\norders.columns = orders.columns.str.lower()\ncustomers.columns = customers.columns.str.lower()\n\n# merge the 'orders' and 'customers' tables on 'customer_id'\nmerged_data = pd.merge(orders, customers, on='customer_id')\n\n# group by 'customer_name' and count the number of records\ngrouped_data = merged_data.groupby('customer_name').size().reset_index(name='count')\n\n# plot the bar chart\nplt.bar(grouped_data['customer_name'], grouped_data['count'])\nplt.xlabel('Customer Name')\nplt.ylabel('Count')\nplt.title('Number of Orders per Customer')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "browser_web",
    "question": "Draw a bar chart of operating system versus the total number , list from low to high by the X-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nweb_client_accelerator = pd.read_sql(\"SELECT * FROM web_client_accelerator\", conn)\nweb_client_accelerator.columns = web_client_accelerator.columns.str.lower()\n\n# Group by operating_system and count the occurrences\noperating_system_counts = web_client_accelerator.groupby('operating_system').size().reset_index(name='count')\n\n# Sort the counts by operating_system in ascending order\noperating_system_counts = operating_system_counts.sort_values('operating_system')\n\n# Create a bar plot\nplt.bar(operating_system_counts['operating_system'], operating_system_counts['count'])\nplt.xlabel('Operating System')\nplt.ylabel('Count')\nplt.title('Number of Clients by Operating System')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "How many events have each participants attended? List the participant id and the number with a scatter chart.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Participants and Participants_in_Events tables\nparticipants = pd.read_sql(\"SELECT * FROM Participants\", conn)\nparticipants_in_events = pd.read_sql(\"SELECT * FROM Participants_in_Events\", conn)\n\n# Convert column names to lowercase\nparticipants.columns = participants.columns.str.lower()\nparticipants_in_events.columns = participants_in_events.columns.str.lower()\n\n# Perform the join operation\nmerged_data = pd.merge(participants, participants_in_events, on=\"participant_id\")\n\n# Perform the group by operation\ngrouped_data = merged_data.groupby(\"participant_id\").size().reset_index(name=\"count\")\n\n# Scatter plot\nplt.scatter(grouped_data[\"participant_id\"], grouped_data[\"count\"])\nplt.xlabel(\"Participant ID\")\nplt.ylabel(\"Count\")\nplt.title(\"Scatter Plot of Participant Count\")\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Show all role codes and the number of employees in each role Show bar chart , and show by the X-axis in ascending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nEmployees.columns = Employees.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\nrole_counts = Employees.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by role_code in ascending order\nrole_counts = role_counts.sort_values('role_code')\n\n# Creating a bar plot\nplt.bar(role_counts['role_code'], role_counts['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Employees by Role Code')\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "Show me a bar chart displaying the name and count of each product in all orders.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\norder_items = pd.read_sql(\"SELECT * FROM order_items\", conn)\nproducts = pd.read_sql(\"SELECT * FROM products\", conn)\norders.columns = orders.columns.str.lower()\norder_items.columns = order_items.columns.str.lower()\nproducts.columns = products.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(pd.merge(orders, order_items, on='order_id'), products, on='product_id')\n\n# Group by product_name and count\ngrouped_df = merged_df.groupby('product_name').size().reset_index(name='count')\n\n# Sort by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot bar chart\nplt.bar(sorted_df['product_name'], sorted_df['count'])\nplt.xticks(rotation=90)\nplt.xlabel('Product Name')\nplt.ylabel('Count')\nplt.title('Number of Orders per Product')\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "Show me a bar chart of the top 10 documents with the highest number of images.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ndocuments = pd.read_sql(\"SELECT * FROM documents\", conn)\ndocument_sections = pd.read_sql(\"SELECT * FROM document_sections\", conn)\ndocument_sections_images = pd.read_sql(\"SELECT * FROM document_sections_images\", conn)\ndocuments.columns = documents.columns.str.lower()\ndocument_sections.columns = document_sections.columns.str.lower()\ndocument_sections_images.columns = document_sections_images.columns.str.lower()\n\n# Merge tables\nmerged_df = pd.merge(documents, document_sections, on='document_code')\nmerged_df = pd.merge(merged_df, document_sections_images, on='section_id')\n\n# Group by document_name and count image_count\ngrouped_df = merged_df.groupby('document_name').agg({'section_id': 'count'}).reset_index()\ngrouped_df = grouped_df.rename(columns={'section_id': 'image_count'})\n\n# Sort by image_count in descending order and select top 10\ntop_10_df = grouped_df.sort_values('image_count', ascending=False).head(10)\n\n# Plot bar chart\nplt.bar(top_10_df['document_name'], top_10_df['image_count'])\nplt.xlabel('Document Name')\nplt.ylabel('Image Count')\nplt.title('Top 10 Documents with Highest Image Count')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Compare all countries with a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Assuming the data is already loaded into the 'artist' dataframe\n\n# Grouping the data by country and counting the occurrences\ncountry_counts = artist.groupby('country').size().reset_index(name='count')\n\n# Creating the bar plot\nplt.bar(country_counts['country'], country_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Artists by Country')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Count the section_description, and group by section_description with a bar chart, and rank by the x-axis in ascending.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Sections table\nsections = pd.read_sql(\"SELECT * FROM Sections\", conn)\n\n# Convert column names to lowercase\nsections.columns = sections.columns.str.lower()\n\n# Perform the SQL query\nresult = sections.groupby('section_description').size().reset_index(name='count').sort_values('section_description')\n\n# Generate the bar plot\nplt.bar(result['section_description'], result['count'])\nplt.xlabel('Section Description')\nplt.ylabel('Count')\nplt.title('Number of Sections by Description')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "question": "How does the involvement of each employee in the circulation history of document id 1 change over time? Show me a line chart.",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nCirculation_History = pd.read_sql(\"SELECT * FROM Circulation_History\", conn)\nEmployees.columns = Employees.columns.str.lower()\nCirculation_History.columns = Circulation_History.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Employees, Circulation_History, on='employee_id')\n\n# Filter the data for document_id = 1\nfiltered_df = merged_df[merged_df['document_id'] == 1]\n\n# Group by employee_name and count the occurrences\ngrouped_df = filtered_df.groupby('employee_name').size().reset_index(name='count')\n\n# Plot the line chart\nplt.plot(grouped_df['employee_name'], grouped_df['count'])\nplt.xlabel('Employee Name')\nplt.ylabel('Count')\nplt.title('Number of Circulations for Document ID 1 by Employee')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "perpetrator",
    "question": "What is the scatter plot of the total number of kills for perpetrators with a height greater than 1.84?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\nperpetrator = pd.read_sql(\"SELECT * FROM perpetrator\", conn)\npeople.columns = people.columns.str.lower()\nperpetrator.columns = perpetrator.columns.str.lower()\n\n# Merge the two dataframes\nmerged_df = pd.merge(people, perpetrator, on='people_id')\n\n# Filter the merged dataframe based on height condition\nfiltered_df = merged_df[merged_df['height'] > 1.84]\n\n# Group by height and calculate total kills\ngrouped_df = filtered_df.groupby('height').agg({'killed': 'sum'}).reset_index()\n\n# Scatter plot\nplt.scatter(grouped_df['height'], grouped_df['killed'])\nplt.xlabel('Height')\nplt.ylabel('Total Kills')\nplt.title('Scatter Plot of Height vs Total Kills')\nplt.show()"
  },
  {
    "db_id": "small_bank_1",
    "question": "How many checking accounts does each person with a savings balance greater than the average savings balance have, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nsavings = pd.read_sql(\"SELECT * FROM savings\", conn)\nsavings = pd.read_sql(\"SELECT * FROM savings\", conn)\naccounts.columns = accounts.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\naccounts.columns = accounts.columns.str.lower()\nsavings.columns = savings.columns.str.lower()\nsavings.columns = savings.columns.str.lower()\n\n# Joining tables\nmerged_df = pd.merge(accounts, checking, on='custid')\n\n# Filtering data\nfiltered_df = merged_df[merged_df['name'].isin(accounts.merge(savings, on='custid').loc[savings['balance'] > savings['balance'].mean(), 'name'])]\n\n# Grouping and counting\ngrouped_df = filtered_df.groupby('name').size().reset_index(name='count')\n\n# Plotting bar chart\nplt.bar(grouped_df['name'], grouped_df['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Number of Accounts with Balance > Average Savings Balance')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "Give a bar chart showing how many shops in each carrier, display in asc by the y axis.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the stock, device, and shop tables\nstock = pd.read_sql(\"SELECT * FROM stock\", conn)\ndevice = pd.read_sql(\"SELECT * FROM device\", conn)\nshop = pd.read_sql(\"SELECT * FROM shop\", conn)\n\n# Convert column names to lowercase\nstock.columns = stock.columns.str.lower()\ndevice.columns = device.columns.str.lower()\nshop.columns = shop.columns.str.lower()\n\n# merge the tables using the specified join conditions\nmerged_data = pd.merge(stock, device, on=\"device_id\")\nmerged_data = pd.merge(merged_data, shop, on=\"shop_id\")\n\n# perform the group by and count operation\ngrouped_data = merged_data.groupby(\"carrier\").size().reset_index(name=\"count\")\ngrouped_data = grouped_data.sort_values(\"count\", ascending=True)\n\n# generate the bar plot\nplt.bar(grouped_data[\"carrier\"], grouped_data[\"count\"])\nplt.xlabel(\"Carrier\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Devices by Carrier\")\nplt.show()\n"
  },
  {
    "db_id": "bike_1",
    "question": "Find the ids and names of stations from which at least 200 trips started , list by the bar in desc .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\ntrip.columns = trip.columns.str.lower()\n\n# Sort the trip dataframe by start_station_name in descending order\nsorted_trip = trip.sort_values('start_station_name', ascending=False)\n\n# Extract the start_station_name and start_station_id columns\nstart_station_name = sorted_trip['start_station_name']\nstart_station_id = sorted_trip['start_station_id']\n\n# Create a bar plot\nplt.bar(start_station_name, start_station_id)\n\n# Set the x-axis label\nplt.xlabel('Start Station Name')\n\n# Set the y-axis label\nplt.ylabel('Start Station ID')\n\n# Rotate the x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Show the number of documents for each location code in a bar chart , and could you list from low to high by the Y ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDocument_locations = pd.read_sql(\"SELECT * FROM Document_locations\", conn)\nDocument_locations.columns = Document_locations.columns.str.lower()\n\n# Group by location_code and count the occurrences\nlocation_counts = Document_locations.groupby('location_code').size().reset_index(name='count')\n\n# Sort the counts in ascending order\nlocation_counts = location_counts.sort_values('count')\n\n# Plot the bar chart\nplt.bar(location_counts['location_code'], location_counts['count'])\nplt.xlabel('Location Code')\nplt.ylabel('Count')\nplt.title('Document Locations')\nplt.show()"
  },
  {
    "db_id": "battle_death",
    "question": "Show a bar chart about the number of results of the battles when the bulgarian commander is not 'Boril'.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the 'battle' table into a DataFrame\nbattle_df = pd.read_sql(\"SELECT * FROM battle\", conn)\n\n# Convert column names to lowercase\nbattle_df.columns = battle_df.columns.str.lower()\n\n# Filter the DataFrame to exclude rows where bulgarian_commander is 'Boril'\nfiltered_df = battle_df[battle_df['bulgarian_commander'] != 'Boril']\n\n# Group the data by 'result' and count the occurrences\ngrouped_df = filtered_df.groupby('result').size().reset_index(name='count')\n\n# Create a bar plot\nplt.bar(grouped_df['result'], grouped_df['count'])\nplt.xlabel('Result')\nplt.ylabel('Count')\nplt.title('Battle Results (excluding Boril)')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "What is the breakdown and frequency of the most frequently performed service type, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRef_Service_Types = pd.read_sql(\"SELECT * FROM Ref_Service_Types\", conn)\nServices = pd.read_sql(\"SELECT * FROM Services\", conn)\nRef_Service_Types.columns = Ref_Service_Types.columns.str.lower()\nServices.columns = Services.columns.str.lower()\n\n# Joining the tables\ndf = pd.merge(Ref_Service_Types, Services, on='service_type_code')\n\n# Grouping by service type description and counting the occurrences\ndf_grouped = df.groupby('service_type_description').size().reset_index(name='count')\n\n# Sorting by count in descending order\ndf_sorted = df_grouped.sort_values(by='count', ascending=False)\n\n# Plotting the bar chart\nplt.bar(df_sorted['service_type_description'], df_sorted['count'])\nplt.xlabel('Service Type Description')\nplt.ylabel('Count')\nplt.title('Count of Services by Service Type')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "For each singer name, what is the total sales for their songs Plot them as bar chart, and I want to display in desc by the names.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the singer table\nsinger_df = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger_df.columns = map(str.lower, singer_df.columns)\n\n# Read the song table\nsong_df = pd.read_sql(\"SELECT * FROM song\", conn)\nsong_df.columns = map(str.lower, song_df.columns)\n\n# Merge the singer and song tables on Singer_ID\nmerged_df = pd.merge(singer_df, song_df, on=\"singer_id\")\n\n# Group by singer name and calculate the sum of sales\ngrouped_df = merged_df.groupby(\"name\").sum(\"sales\")\n\n# Sort the dataframe by name in descending order\nsorted_df = grouped_df.sort_values(\"name\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df.index, sorted_df[\"sales\"])\nplt.xlabel(\"Singer Name\")\nplt.ylabel(\"Total Sales\")\nplt.title(\"Total Sales by Singer\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Give me a bar chart for mean tonnage of each type , and show from low to high by the bar .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Group by type and calculate average tonnage\nship_avg_tonnage = ship.groupby('type')['tonnage'].mean()\n\n# Sort the data by type in ascending order\nship_avg_tonnage = ship_avg_tonnage.sort_index()\n\n# Create a bar plot\nplt.bar(ship_avg_tonnage.index, ship_avg_tonnage.values)\n\n# Set the labels and title\nplt.xlabel('Type')\nplt.ylabel('Average Tonnage')\nplt.title('Average Tonnage by Ship Type')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Bar chart x axis type y axis the total number , and show names from high to low order please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Grouping the ship dataframe by type and counting the occurrences\nship_grouped = ship.groupby('type').size().reset_index(name='count')\n\n# Sorting the ship_grouped dataframe by type in descending order\nship_grouped_sorted = ship_grouped.sort_values('type', ascending=False)\n\n# Creating the bar plot\nplt.bar(ship_grouped_sorted['type'], ship_grouped_sorted['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Count of Ships by Type')\nplt.show()"
  },
  {
    "db_id": "twitter_1",
    "question": "Show me a bar chart displaying the count of tweets for each user in the user_profiles table.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nuser_profiles = pd.read_sql(\"SELECT * FROM user_profiles\", conn)\ntweets = pd.read_sql(\"SELECT * FROM tweets\", conn)\nuser_profiles.columns = user_profiles.columns.str.lower()\ntweets.columns = tweets.columns.str.lower()\n\n# Join user_profiles and tweets tables\nmerged_df = pd.merge(user_profiles, tweets, on='uid')\n\n# Group by name and count the number of tweets\ntweet_count = merged_df.groupby('name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(tweet_count['name'], tweet_count['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Number of Tweets by User')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "For each type , how many ships are there Plot them as bar chart , rank by the X-axis in ascending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Grouping the ship dataframe by type and counting the occurrences\nship_grouped = ship.groupby('type').size().reset_index(name='count')\n\n# Sorting the ship_grouped dataframe by type in ascending order\nship_grouped = ship_grouped.sort_values('type')\n\n# Creating the bar plot\nplt.bar(ship_grouped['type'], ship_grouped['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Count of Ships by Type')\nplt.show()"
  },
  {
    "db_id": "college_3",
    "question": "Which department has the least number of members, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDEPARTMENT = pd.read_sql(\"SELECT * FROM DEPARTMENT\", conn)\nMEMBER_OF = pd.read_sql(\"SELECT * FROM MEMBER_OF\", conn)\nDEPARTMENT.columns = DEPARTMENT.columns.str.lower()\nMEMBER_OF.columns = MEMBER_OF.columns.str.lower()\n\n# Perform the join operation\ndf = pd.merge(DEPARTMENT, MEMBER_OF, on='dno')\n\n# Group by department and count the number of members\ndf_grouped = df.groupby('dname').size().reset_index(name='nummembers')\n\n# Sort by the number of members in ascending order\ndf_sorted = df_grouped.sort_values('nummembers')\n\n# Select the department with the least number of members\ndf_least_members = df_sorted.head(1)\n\n# Plot the bar chart\nplt.bar(df_least_members['dname'], df_least_members['nummembers'])\nplt.xlabel('Department')\nplt.ylabel('Number of Members')\nplt.title('Department with the Least Number of Members')\nplt.show()"
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Return a histogram on what is the date and id of the transcript with at least 2 courses listed?, show Y-axis in desc order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the tables\ntranscript_contents = pd.read_sql(\"SELECT * FROM Transcript_Contents\", conn)\ntranscripts = pd.read_sql(\"SELECT * FROM Transcripts\", conn)\n\n# Convert column names to lowercase\ntranscript_contents.columns = map(str.lower, transcript_contents.columns)\ntranscripts.columns = map(str.lower, transcripts.columns)\n\n# Merge the tables on the transcript_id column\nmerged_data = pd.merge(transcript_contents, transcripts, on=\"transcript_id\")\n\n# Sort the merged data by transcript_id in descending order\nsorted_data = merged_data.sort_values(by=\"transcript_id\", ascending=False)\n\n# Extract the required columns for visualization\ndata_to_visualize = sorted_data[[\"transcript_date\", \"transcript_id\"]]\n\n# Plot the bar chart\nplt.bar(data_to_visualize[\"transcript_date\"], data_to_visualize[\"transcript_id\"])\nplt.xlabel(\"Transcript Date\")\nplt.ylabel(\"Transcript ID\")\nplt.title(\"Transcript ID vs Transcript Date\")\nplt.show()"
  },
  {
    "db_id": "aircraft",
    "question": "What does the scatter plot visualize for the retrieved information in the SQL statement?",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naircraft = pd.read_sql(\"SELECT * FROM aircraft\", conn)\nMATCH = pd.read_sql(\"SELECT * FROM MATCH\", conn)\naircraft.columns = aircraft.columns.str.lower()\nMATCH.columns = MATCH.columns.str.lower()\n\n# Merge the aircraft and match tables\nmerged_df = pd.merge(aircraft, MATCH, left_on='aircraft_id', right_on='winning_aircraft')\n\n# Create a scatter plot\nplt.scatter(merged_df['location'], merged_df['aircraft'])\nplt.xlabel('Location')\nplt.ylabel('Aircraft')\nplt.title('Scatter Plot of Aircraft by Location')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "What is the count of missions for each fate, visualized in a line chart, and ordered by the count in descending order?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmission = pd.read_sql(\"SELECT * FROM mission\", conn)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nmission.columns = mission.columns.str.lower()\nship.columns = ship.columns.str.lower()\n\n# Joining the mission and ship tables\nmerged_df = pd.merge(mission, ship, on='ship_id')\n\n# Grouping by fate and counting the occurrences\ngrouped_df = merged_df.groupby('fate').size().reset_index(name='count')\n\n# Sorting by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plotting the line chart\nplt.plot(sorted_df['fate'], sorted_df['count'])\nplt.xlabel('Fate')\nplt.ylabel('Count')\nplt.title('Count of Missions by Fate')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show different types of ships and the average tonnage of ships of each type in a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ship table\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\n\n# Group by type and calculate average tonnage\navg_tonnage_df = ship_df.groupby('type')['tonnage'].mean().reset_index()\n\n# Plot the bar chart\nplt.bar(avg_tonnage_df['type'], avg_tonnage_df['tonnage'])\nplt.xlabel('Type')\nplt.ylabel('Average Tonnage')\nplt.title('Average Tonnage by Ship Type')\nplt.show()"
  },
  {
    "db_id": "insurance_and_eClaims",
    "question": "Which customer, along with their policy count, dominates the insurance market? Display the information using a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npolicies = pd.read_sql(\"SELECT * FROM policies\", conn)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\npolicies.columns = policies.columns.str.lower()\ncustomers.columns = customers.columns.str.lower()\n\n# Joining policies and customers tables\nmerged_df = pd.merge(policies, customers, on='customer_id')\n\n# Grouping by customer_details and counting the number of occurrences\ngrouped_df = merged_df.groupby('customer_details').size().reset_index(name='count')\n\n# Creating a pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['customer_details'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Compute the total the average of product price across product name as a pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nPRODUCTS = pd.read_sql(\"SELECT * FROM PRODUCTS\", conn)\nPRODUCTS.columns = PRODUCTS.columns.str.lower()\n\n# Assuming you have already read the table data into a DataFrame called PRODUCTS\n\n# Calculate the average product price for each product\navg_price = PRODUCTS.groupby('product_name')['product_price'].mean()\n\n# Create a pie chart\nplt.pie(avg_price, labels=avg_price.index, autopct='%1.1f%%')\nplt.title('Average Product Price by Product')\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Create a bar chart showing the number of author across author , and order total number from low to high order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nsubmission = pd.read_sql(\"SELECT * FROM submission\", conn)\nsubmission.columns = submission.columns.str.lower()\n\n# Group by author and count the number of submissions\nauthor_counts = submission.groupby('author').size().reset_index(name='count')\n\n# Sort the author counts in ascending order\nauthor_counts = author_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(author_counts['author'], author_counts['count'])\nplt.xlabel('Author')\nplt.ylabel('Count')\nplt.title('Number of Submissions by Author')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "List all customer status codes and the number of customers having each status code, could you rank bar in descending order?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Customers table\ncustomers = pd.read_sql(\"SELECT * FROM Customers\", conn)\n\n# Convert column names to lowercase\ncustomers.columns = customers.columns.str.lower()\n\n# Group by customer_status_code and count the number of occurrences\ngrouped_customers = customers.groupby('customer_status_code').size().reset_index(name='count')\n\n# Sort the grouped data by customer_status_code in descending order\nsorted_customers = grouped_customers.sort_values('customer_status_code', ascending=False)\n\n# Create a bar plot\nplt.bar(sorted_customers['customer_status_code'], sorted_customers['count'])\nplt.xlabel('Customer Status Code')\nplt.ylabel('Count')\nplt.title('Number of Customers by Status Code')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show me how many type by type in a bar",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Group by 'type' and count the occurrences\nship_count = ship.groupby('type').size().reset_index(name='count')\n\n# Create bar plot\nplt.bar(ship_count['type'], ship_count['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Ship Type Count')\nplt.show()"
  },
  {
    "db_id": "customer_deliveries",
    "question": "What is the average price of the products and how many times have they been ordered, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nproducts = pd.read_sql(\"SELECT * FROM products\", conn)\nregular_order_products = pd.read_sql(\"SELECT * FROM regular_order_products\", conn)\nproducts.columns = products.columns.str.lower()\nregular_order_products.columns = regular_order_products.columns.str.lower()\n\n# Merge the two dataframes\nmerged_df = pd.merge(products, regular_order_products, on='product_id')\n\n# Calculate the average product price and count\nresult_df = merged_df.groupby('product_id').agg({'product_price': 'mean'}).reset_index()\nresult_df['count'] = merged_df.groupby('product_id').size().reset_index(name='count')['count']\n\n# Plot the bar chart\nplt.bar(result_df['product_id'], result_df['product_price'])\nplt.xlabel('Product ID')\nplt.ylabel('Average Product Price')\nplt.title('Average Product Price by Product ID')\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "Draw a scatter chart for what are the reigns and days held of all wrestlers ?",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nwrestler = pd.read_sql(\"SELECT * FROM wrestler\", conn)\nwrestler.columns = wrestler.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called wrestler\n\n# Selecting the required columns\nscatter_data = wrestler[['reign', 'days_held']]\n\n# Creating the scatter plot\nplt.scatter(scatter_data['reign'], scatter_data['days_held'])\n\n# Adding labels and title\nplt.xlabel('Reign')\nplt.ylabel('Days Held')\nplt.title('Scatter Plot of Reign vs Days Held')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "List all the student details in reversed lexicographical order , and count them by a bar chart",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nStudents = pd.read_sql(\"SELECT * FROM Students\", conn)\nStudents.columns = Students.columns.str.lower()\n\n# Grouping and counting the other_student_details\ngrouped_data = Students.groupby('other_student_details').size().reset_index(name='count')\n\n# Sorting the data by other_student_details in descending order\nsorted_data = grouped_data.sort_values('other_student_details', ascending=False)\n\n# Creating the bar plot\nplt.bar(sorted_data['other_student_details'], sorted_data['count'])\nplt.xlabel('Other Student Details')\nplt.ylabel('Count')\nplt.title('Count of Other Student Details')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "How many services for each service type description? Use a bar chart to show it, I want to display y-axis in desc order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Ref_Service_Types table\nref_service_types = pd.read_sql(\"SELECT * FROM Ref_Service_Types\", conn)\n\n# Read the Services table\nservices = pd.read_sql(\"SELECT * FROM Services\", conn)\n\n# Convert column names to lowercase\nref_service_types.columns = ref_service_types.columns.str.lower()\nservices.columns = services.columns.str.lower()\n\n# merge the two tables on service_type_code\nmerged_data = pd.merge(ref_service_types, services, on='service_type_code')\n\n# group by service_type_code and count the number of occurrences\ngrouped_data = merged_data.groupby('service_type_code').size().reset_index(name='count')\n\n# sort the data by count in descending order\nsorted_data = grouped_data.sort_values(by='count', ascending=False)\n\n# get the service type descriptions\nservice_type_descriptions = sorted_data['service_type_code'].map(ref_service_types.set_index('service_type_code')['service_type_description'])\n\n# plot the bar chart\nplt.bar(service_type_descriptions, sorted_data['count'])\nplt.xlabel('Service Type Description')\nplt.ylabel('Count')\nplt.title('Number of Services by Service Type')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "A bar chart about what is the date and id of the transcript with at least 2 courses listed?, show by the transcript_date in asc.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the tables\ntranscript_contents = pd.read_sql(\"SELECT * FROM Transcript_Contents\", conn)\ntranscripts = pd.read_sql(\"SELECT * FROM Transcripts\", conn)\n\n# Convert column names to lowercase\ntranscript_contents.columns = map(str.lower, transcript_contents.columns)\ntranscripts.columns = map(str.lower, transcripts.columns)\n\n# Merge the tables on the transcript_id column\nmerged_data = pd.merge(transcript_contents, transcripts, on=\"transcript_id\")\n\n# Sort the merged data by transcript_date in ascending order\nsorted_data = merged_data.sort_values(by=\"transcript_date\")\n\n# Extract the required columns\ntranscript_date = sorted_data[\"transcript_date\"]\ntranscript_id = sorted_data[\"transcript_id\"]\n\n# Plot the bar chart\nplt.bar(transcript_date, transcript_id)\nplt.xlabel(\"Transcript Date\")\nplt.ylabel(\"Transcript ID\")\nplt.title(\"Transcript ID vs Transcript Date\")\nplt.show()"
  },
  {
    "db_id": "customer_deliveries",
    "question": "What is the name and count of the product that has been ordered the greatest number of times, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nproducts = pd.read_sql(\"SELECT * FROM products\", conn)\nregular_order_products = pd.read_sql(\"SELECT * FROM regular_order_products\", conn)\nproducts.columns = products.columns.str.lower()\nregular_order_products.columns = regular_order_products.columns.str.lower()\n\n# Merge the two dataframes\nmerged_df = pd.merge(products, regular_order_products, on='product_id')\n\n# Group by product_id and count the number of occurrences\ngrouped_df = merged_df.groupby('product_id').size().reset_index(name='count')\n\n# Merge with products dataframe to get product_name\ngrouped_df = pd.merge(grouped_df, products[['product_id', 'product_name']], on='product_id')\n\n# Sort by count in descending order and select the top 1\ntop_product = grouped_df.sort_values('count', ascending=False).head(1)\n\n# Plot the bar chart\nplt.bar(top_product['product_name'], top_product['count'])\nplt.xlabel('Product Name')\nplt.ylabel('Count')\nplt.title('Top Product by Count')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "icfp_1",
    "question": "What is the name of the institution the author \"Katsuhiro Ueno\" belongs to and how many papers has he published in each institution, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nauthors = pd.read_sql(\"SELECT * FROM authors\", conn)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\ninst = pd.read_sql(\"SELECT * FROM inst\", conn)\nauthors.columns = authors.columns.str.lower()\nauthorship.columns = authorship.columns.str.lower()\ninst.columns = inst.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(pd.merge(authors, authorship, on='authid'), inst, on='instid')\n\n# Filter data\nfiltered_df = merged_df[(merged_df['fname'] == 'Katsuhiro') & (merged_df['lname'] == 'Ueno')]\n\n# Group by institution name and count number of papers\ngrouped_df = filtered_df.groupby('name').size().reset_index(name='num_papers')\n\n# Sort by number of papers in ascending order\nsorted_df = grouped_df.sort_values('num_papers', ascending=True)\n\n# Plot bar chart\nplt.bar(sorted_df['name'], sorted_df['num_papers'])\nplt.xlabel('Institution')\nplt.ylabel('Number of Papers')\nplt.title('Number of Papers by Institution')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "question": "Can you create a pie chart displaying the shipping agent names and the count of documents for each shipping agent, sorted in ascending order by the count of documents?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRef_Shipping_Agents = pd.read_sql(\"SELECT * FROM Ref_Shipping_Agents\", conn)\nDocuments = pd.read_sql(\"SELECT * FROM Documents\", conn)\nRef_Shipping_Agents.columns = Ref_Shipping_Agents.columns.str.lower()\nDocuments.columns = Documents.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Ref_Shipping_Agents, Documents, left_on='shipping_agent_code', right_on='shipping_agent_code')\n\n# Group by shipping_agent_name and count the number of occurrences\ngrouped_df = merged_df.groupby('shipping_agent_name').size().reset_index(name='count')\n\n# Sort the dataframe by count in ascending order\nsorted_df = grouped_df.sort_values('count')\n\n# Plot the pie chart\nplt.pie(sorted_df['count'], labels=sorted_df['shipping_agent_name'], autopct='%1.1f%%')\nplt.title('Distribution of Documents by Shipping Agent')\nplt.show()"
  },
  {
    "db_id": "college_3",
    "question": "How many students, by their distinct first names, have a grade point of at least 3.8 in one course? Show the count for each student's first name using a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nENROLLED_IN = pd.read_sql(\"SELECT * FROM ENROLLED_IN\", conn)\nGRADECONVERSION = pd.read_sql(\"SELECT * FROM GRADECONVERSION\", conn)\nSTUDENT = pd.read_sql(\"SELECT * FROM STUDENT\", conn)\nENROLLED_IN.columns = ENROLLED_IN.columns.str.lower()\nGRADECONVERSION.columns = GRADECONVERSION.columns.str.lower()\nSTUDENT.columns = STUDENT.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(pd.merge(ENROLLED_IN, GRADECONVERSION, left_on='grade', right_on='lettergrade'), STUDENT, on='stuid')\n\n# Filtering the data\nfiltered_df = merged_df[merged_df['gradepoint'] >= 3.8]\n\n# Grouping and counting by fname\ngrouped_df = filtered_df.groupby('fname').size().reset_index(name='count')\n\n# Plotting the bar chart\nplt.bar(grouped_df['fname'], grouped_df['count'])\nplt.xlabel('First Name')\nplt.ylabel('Count')\nplt.title('Number of Students with Grade Point >= 3.8 by First Name')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "How many orders have been placed by each customer with shipping method FedEx and order status Paid, visualized in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\ncustomer_orders = pd.read_sql(\"SELECT * FROM customer_orders\", conn)\ncustomers.columns = customers.columns.str.lower()\ncustomer_orders.columns = customer_orders.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(customers, customer_orders, on='customer_id')\n\n# Filter the data based on the conditions\nfiltered_df = merged_df[(merged_df['shipping_method_code'] == 'FedEx') & (merged_df['order_status_code'] == 'Paid')]\n\n# Group the data by customer_name and count the number of occurrences\ngrouped_df = filtered_df.groupby('customer_name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['customer_name'], grouped_df['count'])\nplt.xlabel('Customer Name')\nplt.ylabel('Count')\nplt.title('Number of Orders by Customer')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "aircraft",
    "question": "Who is the youngest winning pilot and what is their age, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\nMATCH = pd.read_sql(\"SELECT * FROM MATCH\", conn)\npilot.columns = pilot.columns.str.lower()\nMATCH.columns = MATCH.columns.str.lower()\n\n# Joining the tables\nresult = pd.merge(pilot, MATCH, left_on='pilot_id', right_on='winning_pilot')\n\n# Sorting by age and selecting the first row\nresult = result.sort_values('age').head(1)\n\n# Creating the bar plot\nplt.bar(result['name'], result['age'])\nplt.xlabel('Name')\nplt.ylabel('Age')\nplt.title('Youngest Winning Pilot')\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "Find the number of users in each role Plot them as bar chart , and could you list in desc by the the total number ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nusers = pd.read_sql(\"SELECT * FROM users\", conn)\nusers.columns = users.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\nrole_counts = users.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by count in descending order\nrole_counts = role_counts.sort_values(by='count', ascending=False)\n\n# Creating the bar plot\nplt.bar(role_counts['role_code'], role_counts['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Users by Role Code')\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "What is the distribution of elimination times in the database shown as a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nelimination = pd.read_sql(\"SELECT * FROM elimination\", conn)\nelimination = pd.read_sql(\"SELECT * FROM elimination\", conn)\nwrestler = pd.read_sql(\"SELECT * FROM wrestler\", conn)\nelimination.columns = elimination.columns.str.lower()\nelimination.columns = elimination.columns.str.lower()\nwrestler.columns = wrestler.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(elimination, wrestler, on='wrestler_id')\n\n# Calculate the percentage for each time\npercentage_df = merged_df.groupby('time').size() / len(elimination) * 100\n\n# Plot the pie chart\nplt.pie(percentage_df, labels=percentage_df.index, autopct='%1.1f%%')\nplt.title('Percentage of Eliminations by Time')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "List the name and the number of stations for all the cities that have at least 15 stations Show bar chart , could you order in ascending by the X ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstation.columns = station.columns.str.lower()\n\n# Group by city and count the number of rows\ncity_counts = station.groupby('city').size().reset_index(name='count')\n\n# Sort the cities in ascending order\ncity_counts = city_counts.sort_values('city')\n\n# Create a bar plot\nplt.bar(city_counts['city'], city_counts['count'])\nplt.xlabel('City')\nplt.ylabel('Count')\nplt.title('Number of Stations in Each City')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "List the name of physicians who took some appointment, and count them by a bar chart",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the appointment table\nappointment = pd.read_sql(\"SELECT * FROM appointment\", conn)\n\n# Read the physician table\nphysician = pd.read_sql(\"SELECT * FROM physician\", conn)\n\n# Convert column names to lowercase\nappointment.columns = appointment.columns.str.lower()\nphysician.columns = physician.columns.str.lower()\n\n# merge the appointment and physician tables on the physician column\nmerged_data = pd.merge(appointment, physician, left_on='physician', right_on='employeeid')\n\n# group by name and count the occurrences\ngrouped_data = merged_data.groupby('name').size().reset_index(name='count')\n\n# plot the bar chart\nplt.bar(grouped_data['name'], grouped_data['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Number of Appointments by Physician')\nplt.show()\n"
  },
  {
    "db_id": "storm_record",
    "question": "How many storms occured in each region Visualize by bar chart, and show bars from low to high order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the region table\nregion_df = pd.read_sql(\"SELECT * FROM region\", conn)\nregion_df.columns = map(str.lower, region_df.columns)\n\n# Read the affected_region table\naffected_region_df = pd.read_sql(\"SELECT * FROM affected_region\", conn)\naffected_region_df.columns = map(str.lower, affected_region_df.columns)\n\n# Merge the region and affected_region tables\nmerged_df = pd.merge(region_df, affected_region_df, on=\"region_id\")\n\n# Group by region_name and count the number of occurrences\ngrouped_df = merged_df.groupby(\"region_name\").size().reset_index(name=\"count\")\n\n# Sort the dataframe by region_name in ascending order\nsorted_df = grouped_df.sort_values(\"region_name\", ascending=True)\n\n# Plot the bar chart\nplt.bar(sorted_df[\"region_name\"], sorted_df[\"count\"])\nplt.xlabel(\"Region Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Occurrences by Region\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Show all calendar dates and day Numbers in a line chart , sort in desc by the x axis .",
    "chart": "Line",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nRef_calendar = pd.read_sql(\"SELECT * FROM Ref_calendar\", conn)\nRef_calendar.columns = Ref_calendar.columns.str.lower()\n\n# Assuming the table data is already loaded into a DataFrame called Ref_calendar\n\n# Sort the DataFrame by calendar_date in descending order\nRef_calendar_sorted = Ref_calendar.sort_values(by='calendar_date', ascending=False)\n\n# Extract the calendar_date and day_number columns\ncalendar_date = Ref_calendar_sorted['calendar_date']\nday_number = Ref_calendar_sorted['day_number']\n\n# Plot the line chart\nplt.plot(calendar_date, day_number)\nplt.xlabel('Calendar Date')\nplt.ylabel('Day Number')\nplt.title('Line Chart of Day Number by Calendar Date')\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "What are the different software platforms for devices , and how many devices have each .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ndevice = pd.read_sql(\"SELECT * FROM device\", conn)\ndevice.columns = device.columns.str.lower()\n\n# Grouping the data by software_platform and counting the occurrences\ngrouped_data = device.groupby('software_platform').size().reset_index(name='count')\n\n# Creating the bar plot\nplt.bar(grouped_data['software_platform'], grouped_data['count'])\nplt.xlabel('Software Platform')\nplt.ylabel('Count')\nplt.title('Device Count by Software Platform')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show all distinct product categories along with the number of mailshots in each category in a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the mailshot_campaigns table\nmailshot_campaigns = pd.read_sql(\"SELECT * FROM mailshot_campaigns\", conn)\n\n# Convert column names to lowercase\nmailshot_campaigns.columns = map(str.lower, mailshot_campaigns.columns)\n\n# Perform the SQL query\nresult = mailshot_campaigns.groupby('product_category').size().reset_index(name='count')\n\n# Generate the bar chart\nplt.bar(result['product_category'], result['count'])\nplt.xlabel('Product Category')\nplt.ylabel('Count')\nplt.title('Count of Mailshot Campaigns by Product Category')\n\n# Show the chart\nplt.show()"
  },
  {
    "db_id": "tvshow",
    "question": "Give me a bar chart showing the comparison of the pixel aspect ratio and the nation of the tv channels that do not use English, show by the total number in asc.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the tv_channel table\ntv_channel = pd.read_sql(\"SELECT * FROM tv_channel\", conn)\n\n# Convert column names to lowercase\ntv_channel.columns = tv_channel.columns.str.lower()\n\n# Filter rows where language is not English\nfiltered_tv_channel = tv_channel[tv_channel['language'] != 'English']\n\n# Group by Pixel_aspect_ratio_PAR and count occurrences\ngrouped_tv_channel = filtered_tv_channel.groupby('pixel_aspect_ratio_par').size().reset_index(name='count')\n\n# Sort by count in ascending order\nsorted_tv_channel = grouped_tv_channel.sort_values('count')\n\n# Plot the bar chart\nplt.bar(sorted_tv_channel['pixel_aspect_ratio_par'], sorted_tv_channel['count'])\nplt.xlabel('Pixel Aspect Ratio')\nplt.ylabel('Count')\nplt.title('Pixel Aspect Ratio Distribution for Non-English TV Channels')\nplt.show()"
  },
  {
    "db_id": "icfp_1",
    "question": "What is the name of the institution that \"Matthias Blume\" belongs to, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nauthors = pd.read_sql(\"SELECT * FROM authors\", conn)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\ninst = pd.read_sql(\"SELECT * FROM inst\", conn)\nauthors.columns = authors.columns.str.lower()\nauthorship.columns = authorship.columns.str.lower()\ninst.columns = inst.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(authors, authorship, on='authid')\nmerged_df = pd.merge(merged_df, inst, on='instid')\n\n# Group by institution name and count\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Plot bar chart\nplt.bar(grouped_df['name'], grouped_df['count'])\nplt.xlabel('Institution')\nplt.ylabel('Count')\nplt.title('Number of Authors by Institution')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "college_3",
    "question": "What is the name of the department with the highest number of students minored in, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDEPARTMENT = pd.read_sql(\"SELECT * FROM DEPARTMENT\", conn)\nMINOR_IN = pd.read_sql(\"SELECT * FROM MINOR_IN\", conn)\nDEPARTMENT.columns = DEPARTMENT.columns.str.lower()\nMINOR_IN.columns = MINOR_IN.columns.str.lower()\n\n# Perform the join operation\ndf = pd.merge(DEPARTMENT, MINOR_IN, on='dno')\n\n# Group by department name and count the number of occurrences\ndf_grouped = df.groupby('dname').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\ndf_sorted = df_grouped.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(df_sorted['dname'], df_sorted['count'])\nplt.xlabel('Department')\nplt.ylabel('Count')\nplt.title('Number of Students in Each Department')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "A bar chart shows the venue for each workshop , and show by the x-axis from high to low .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nworkshop = pd.read_sql(\"SELECT * FROM workshop\", conn)\nworkshop.columns = workshop.columns.str.lower()\n\n# Grouping the data by venue and counting the occurrences\nvenue_counts = workshop.groupby('venue').size().reset_index(name='count')\n\n# Sorting the data by venue in descending order\nvenue_counts = venue_counts.sort_values('venue', ascending=False)\n\n# Creating the bar plot\nplt.bar(venue_counts['venue'], venue_counts['count'])\nplt.xlabel('Venue')\nplt.ylabel('Count')\nplt.title('Workshop Venues')\nplt.show()"
  },
  {
    "db_id": "aircraft",
    "question": "How many aircraft are associated with each location in the matches, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naircraft = pd.read_sql(\"SELECT * FROM aircraft\", conn)\nMATCH = pd.read_sql(\"SELECT * FROM MATCH\", conn)\naircraft.columns = aircraft.columns.str.lower()\nMATCH.columns = MATCH.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(aircraft, MATCH, left_on='aircraft_id', right_on='winning_aircraft')\n\n# Group by location and count the number of aircrafts\ngrouped_df = merged_df.groupby('location').count()\n\n# Plot the bar chart\nplt.bar(grouped_df.index, grouped_df['aircraft'])\nplt.xlabel('Location')\nplt.ylabel('Number of Aircrafts')\nplt.title('Number of Aircrafts by Location')\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Group and count details for the events using a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEVENTS = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\nEVENTS.columns = EVENTS.columns.str.lower()\n\n# Group by event_details and count the occurrences\nevent_counts = EVENTS.groupby('event_details').size().reset_index(name='count')\n\n# Create a bar plot\nplt.bar(event_counts['event_details'], event_counts['count'])\nplt.xlabel('Event Details')\nplt.ylabel('Count')\nplt.title('Event Details Count')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show different types of ships and the number of ships of each type in a bar chart , and show Type in desc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Grouping the ship dataframe by type and counting the occurrences\nship_grouped = ship.groupby('type').size().reset_index(name='count')\n\n# Sorting the ship_grouped dataframe by type in descending order\nship_grouped_sorted = ship_grouped.sort_values('type', ascending=False)\n\n# Creating the bar plot\nplt.bar(ship_grouped_sorted['type'], ship_grouped_sorted['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Count of Ships by Type')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Create a bar chart showing the total number across city , and I want to order by the bar in ascending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstation.columns = station.columns.str.lower()\n\n# Group by city and count the number of rows\ncity_counts = station.groupby('city').size().reset_index(name='count')\n\n# Sort the cities in ascending order\ncity_counts = city_counts.sort_values('city')\n\n# Create a bar plot\nplt.bar(city_counts['city'], city_counts['count'])\nplt.xlabel('City')\nplt.ylabel('Count')\nplt.title('Number of Stations in Each City')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "Return a bar chart on how many eliminations did each team have?, sort y-axis in descending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"elimination\" table\nelimination_data = pd.read_sql(\"SELECT * FROM elimination\", conn)\n\n# Convert column names to lowercase\nelimination_data.columns = elimination_data.columns.str.lower()\n\n# Perform the SQL query\nteam_counts = elimination_data.groupby('team').size().reset_index(name='count')\nteam_counts = team_counts.sort_values(by='count', ascending=False)\n\n# Generate the bar plot\nplt.bar(team_counts['team'], team_counts['count'])\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Number of Eliminations by Team')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "small_bank_1",
    "question": "How many accounts have a checking balance below the maximum checking balance, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\naccounts.columns = accounts.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\n\n# Joining accounts and checking tables\nmerged_df = pd.merge(accounts, checking, on='custid')\n\n# Filtering rows where balance is less than the maximum balance in checking table\nfiltered_df = merged_df[merged_df['balance'] < checking['balance'].max()]\n\n# Grouping by name and counting the number of occurrences\nresult = filtered_df.groupby('name').size().reset_index(name='count')\n\n# Plotting the bar chart\nplt.bar(result['name'], result['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Number of occurrences by name')\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "what are the different role codes for users , and how many users have each ? , show from low to high by the X-axis please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nusers = pd.read_sql(\"SELECT * FROM users\", conn)\nusers.columns = users.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\nrole_counts = users.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by role_code in ascending order\nrole_counts = role_counts.sort_values('role_code')\n\n# Creating the bar plot\nplt.bar(role_counts['role_code'], role_counts['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Users by Role Code')\nplt.show()"
  },
  {
    "db_id": "entertainment_awards",
    "question": ", and order in asc by the y axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartwork = pd.read_sql(\"SELECT * FROM artwork\", conn)\nartwork.columns = artwork.columns.str.lower()\n\n# Grouping the artwork dataframe by type and counting the number of occurrences\nartwork_count = artwork.groupby('type').size().reset_index(name='count')\n\n# Sorting the dataframe by count in ascending order\nartwork_count = artwork_count.sort_values('count')\n\n# Creating a bar plot\nplt.bar(artwork_count['type'], artwork_count['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Artwork Count by Type')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "Show me a bar chart of the count of distinct names of patients who are undergoing treatment and staying in each room, sorted in descending order of the count.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nundergoes = pd.read_sql(\"SELECT * FROM undergoes\", conn)\npatient = pd.read_sql(\"SELECT * FROM patient\", conn)\nstay = pd.read_sql(\"SELECT * FROM stay\", conn)\nundergoes.columns = undergoes.columns.str.lower()\npatient.columns = patient.columns.str.lower()\nstay.columns = stay.columns.str.lower()\n\n# Perform the join operation\nmerged_data = pd.merge(pd.merge(undergoes, patient, left_on='patient', right_on='ssn'), stay, left_on='stay', right_on='stayid')\n\n# Group by room and count distinct names\nroom_counts = merged_data.groupby('room')['name'].nunique().reset_index()\n\n# Sort by count in descending order\nroom_counts = room_counts.sort_values('name', ascending=False)\n\n# Plot the bar chart\nplt.bar(room_counts['room'], room_counts['name'])\nplt.xlabel('Room')\nplt.ylabel('Number of Patients')\nplt.title('Number of Patients in Each Room')\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "Who is the nurse with the highest number of appointments, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nnurse = pd.read_sql(\"SELECT * FROM nurse\", conn)\nappointment = pd.read_sql(\"SELECT * FROM appointment\", conn)\nnurse.columns = nurse.columns.str.lower()\nappointment.columns = appointment.columns.str.lower()\n\n# Merge nurse and appointment tables\nmerged_df = pd.merge(nurse, appointment, left_on='employeeid', right_on='prepnurse')\n\n# Group by nurse name and count the number of appointments\nappointment_count = merged_df.groupby('name').size().reset_index(name='count')\n\n# Sort by appointment count in descending order\nappointment_count = appointment_count.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(appointment_count['name'], appointment_count['count'])\nplt.xlabel('Nurse Name')\nplt.ylabel('Appointment Count')\nplt.title('Number of Appointments per Nurse')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "What are the reigns and days held of all wrestlers . Visualize by scatter chart .",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nwrestler = pd.read_sql(\"SELECT * FROM wrestler\", conn)\nwrestler.columns = wrestler.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called wrestler\n\n# Selecting the required columns\nscatter_data = wrestler[['reign', 'days_held']]\n\n# Creating the scatter plot\nplt.scatter(scatter_data['reign'], scatter_data['days_held'])\n\n# Adding labels and title\nplt.xlabel('Reign')\nplt.ylabel('Days Held')\nplt.title('Scatter Plot of Reign vs Days Held')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "What is the number of countries in the artist table ? , I want to order by the bars in asc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Group by country and count the number of artists in each country\ncountry_counts = artist.groupby('country').size().reset_index(name='count')\n\n# Sort the dataframe by country in ascending order\ncountry_counts = country_counts.sort_values('country')\n\n# Create a bar plot\nplt.bar(country_counts['country'], country_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Artists by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "battle_death",
    "question": "A bar chart listing the number of battle date , show bar in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nbattle = pd.read_sql(\"SELECT * FROM battle\", conn)\nbattle.columns = battle.columns.str.lower()\n\n# Grouping the data by date and counting the occurrences\ngrouped_data = battle.groupby('date').size().reset_index(name='count')\n\n# Sorting the data by date in ascending order\nsorted_data = grouped_data.sort_values('date')\n\n# Creating the bar plot\nplt.bar(sorted_data['date'], sorted_data['count'])\nplt.xlabel('Date')\nplt.ylabel('Count')\nplt.title('Occurrences by Date')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "What is the pie chart representation of the percentage of employees with role name \"Human Resource\" or \"Manager\" out of the total number of employees?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nROLES = pd.read_sql(\"SELECT * FROM ROLES\", conn)\nEmployees.columns = Employees.columns.str.lower()\nEmployees.columns = Employees.columns.str.lower()\nROLES.columns = ROLES.columns.str.lower()\n\n# Joining tables\nmerged_df = pd.merge(Employees, ROLES, left_on='role_code', right_on='role_code')\n\n# Filtering and grouping data\nfiltered_df = merged_df[(merged_df['role_name'] == 'Human Resource') | (merged_df['role_name'] == 'Manager')]\ngrouped_df = filtered_df.groupby('role_name').size().reset_index(name='count')\n\n# Calculating percentage\ntotal_count = len(Employees)\ngrouped_df['percentage'] = (grouped_df['count'] / total_count) * 100\n\n# Plotting pie chart\nplt.pie(grouped_df['percentage'], labels=grouped_df['role_name'], autopct='%1.1f%%')\nplt.title('Percentage of Employees in Human Resource and Manager Roles')\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "Bar chart x axis software platform y axis the total number, and sort by the Y-axis from high to low.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the device table\ndevice_df = pd.read_sql(\"SELECT * FROM device\", conn)\n\n# Convert column names to lowercase\ndevice_df.columns = device_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = device_df.groupby('software_platform').size().reset_index(name='count').sort_values('count', ascending=False)\n\n# Generate the bar plot\nplt.bar(result_df['software_platform'], result_df['count'])\nplt.xlabel('Software Platform')\nplt.ylabel('Count')\nplt.title('Number of Devices by Software Platform')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "e_government",
    "question": "What is the last name of the contact individual from the Labour party organization who has the highest number of contacts, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\norganizations = pd.read_sql(\"SELECT * FROM organizations\", conn)\norganization_contact_individuals = pd.read_sql(\"SELECT * FROM organization_contact_individuals\", conn)\nindividuals = pd.read_sql(\"SELECT * FROM individuals\", conn)\norganizations.columns = organizations.columns.str.lower()\norganization_contact_individuals.columns = organization_contact_individuals.columns.str.lower()\nindividuals.columns = individuals.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(organizations, organization_contact_individuals, on='organization_id')\nmerged_df = pd.merge(merged_df, individuals, on='individual_id')\n\n# Filter the data based on organization name\nfiltered_df = merged_df[merged_df['organization_name'] == 'Labour Party']\n\n# Group by individual last name and count the occurrences\ngrouped_df = filtered_df.groupby('individual_last_name').size().reset_index(name='count')\n\n# Sort the data by count\nsorted_df = grouped_df.sort_values('count')\n\n# Plot the bar chart\nplt.bar(sorted_df['individual_last_name'], sorted_df['count'])\nplt.xlabel('Individual Last Name')\nplt.ylabel('Count')\nplt.title('Number of Individuals by Last Name in Labour Party')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "company_office",
    "question": "Return a bar chart on what are the name and assets of each company , sorted in ascending order of company name ?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nCompanies = pd.read_sql(\"SELECT * FROM Companies\", conn)\nCompanies.columns = Companies.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called Companies\n\n# Sort the data by name in ascending order\nsorted_data = Companies.sort_values(by='name')\n\n# Extract the name and assets_billion columns\nname = sorted_data['name']\nassets_billion = sorted_data['assets_billion']\n\n# Create a bar plot\nplt.bar(name, assets_billion)\n\n# Set the x-axis label\nplt.xlabel('Company Name')\n\n# Set the y-axis label\nplt.ylabel('Assets (in billions)')\n\n# Set the title\nplt.title('Company Assets')\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "What are the names of the top 10 stations with the highest average duration of trips that started from the station, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\nstation.columns = station.columns.str.lower()\ntrip.columns = trip.columns.str.lower()\n\n# Joining the station and trip tables\nmerged_df = pd.merge(station, trip, left_on='id', right_on='start_station_id')\n\n# Grouping by start_station_id and calculating the average duration\ngrouped_df = merged_df.groupby('start_station_id').agg({'name': 'first', 'duration': 'mean'}).reset_index()\n\n# Sorting by average duration in descending order and selecting top 10 rows\ntop_10_stations = grouped_df.sort_values('duration', ascending=False).head(10)\n\n# Creating the bar plot\nplt.bar(top_10_stations['name'], top_10_stations['duration'])\nplt.xlabel('Station Name')\nplt.ylabel('Average Duration')\nplt.title('Top 10 Stations with Highest Average Duration')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "products_for_hire",
    "question": "Take the first name of all the good customers as the X-axis and gender of all the good customers as Y-axis in a bar chart , and order by their last name .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\ncustomers.columns = customers.columns.str.lower()\n\n# Filter the customers dataframe for good customers\ngood_customers = customers[customers['good_or_bad_customer'] == 'good']\n\n# Sort the filtered dataframe by last name\nsorted_customers = good_customers.sort_values('last_name')\n\n# Extract the last name and gender columns\nlast_name = sorted_customers['last_name']\ngender = sorted_customers['gender_mf']\n\n# Create a bar plot\nplt.bar(last_name, gender)\n\n# Set the x-axis label\nplt.xlabel('Last Name')\n\n# Set the y-axis label\nplt.ylabel('Gender')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Can you create a scatter chart displaying the author and acceptance result for each submission?",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nacceptance = pd.read_sql(\"SELECT * FROM acceptance\", conn)\nsubmission = pd.read_sql(\"SELECT * FROM submission\", conn)\nacceptance.columns = acceptance.columns.str.lower()\nsubmission.columns = submission.columns.str.lower()\n\n# Merge acceptance and submission tables on submission_id\nmerged_df = pd.merge(acceptance, submission, on='submission_id')\n\n# Create scatter plot\nplt.scatter(merged_df['author'], merged_df['result'])\n\n# Set labels and title\nplt.xlabel('Author')\nplt.ylabel('Result')\nplt.title('Scatter Plot of Author vs Result')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "sakila_1",
    "question": "Can you create a line chart displaying the count of customers for each email address?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomer = pd.read_sql(\"SELECT * FROM customer\", conn)\naddress = pd.read_sql(\"SELECT * FROM address\", conn)\ncustomer.columns = customer.columns.str.lower()\naddress.columns = address.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(customer, address, on='address_id')\n\n# Group by email and count the number of occurrences\ngrouped_df = merged_df.groupby('email').size().reset_index(name='count')\n\n# Plot the line chart\nplt.plot(grouped_df['email'], grouped_df['count'])\nplt.xlabel('Email')\nplt.ylabel('Count')\nplt.title('Number of occurrences by email')\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Show each author and the number of workshops they submitted to with a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the acceptance and submission tables\nacceptance = pd.read_sql(\"SELECT * FROM acceptance\", conn)\nsubmission = pd.read_sql(\"SELECT * FROM submission\", conn)\n\n# Convert column names to lowercase\nacceptance.columns = acceptance.columns.str.lower()\nsubmission.columns = submission.columns.str.lower()\n\n# Merge the acceptance and submission tables on submission_id\nmerged_data = pd.merge(acceptance, submission, on='submission_id')\n\n# Group by author and count the distinct workshop_id\nauthor_workshop_count = merged_data.groupby('author')['workshop_id'].nunique().reset_index()\n\n# Plot the bar chart\nplt.bar(author_workshop_count['author'], author_workshop_count['workshop_id'])\nplt.xlabel('Author')\nplt.ylabel('Workshop Count')\nplt.title('Number of Workshops Attended by Authors')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show me the comparison of the total number of all ships' nationalities with a bar graph, and I want to sort in desc by the x axis.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ship table\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = ship_df.groupby('nationality').size().reset_index(name='count').sort_values('nationality', ascending=False)\n\n# Create the bar plot\nplt.bar(result_df['nationality'], result_df['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Ships by Nationality')\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "Show the name for regions and the number of storms for each region, and I want to rank by the y axis in desc please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the region table\nregion = pd.read_sql(\"SELECT * FROM region\", conn)\nregion.columns = map(str.lower, region.columns)\n\n# Read the affected_region table\naffected_region = pd.read_sql(\"SELECT * FROM affected_region\", conn)\naffected_region.columns = map(str.lower, affected_region.columns)\n\n# Merge the region and affected_region tables\nmerged_data = pd.merge(region, affected_region, on=\"region_id\")\n\n# Perform the SQL query\nresult = merged_data.groupby(\"region_name\").size().reset_index(name=\"count\").sort_values(\"count\", ascending=False)\n\n# Generate the bar plot\nplt.bar(result[\"region_name\"], result[\"count\"])\nplt.xlabel(\"Region\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Affected Regions\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "soccer_1",
    "question": ", show preferred_foot in descending order .",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nPlayer_Attributes = pd.read_sql(\"SELECT * FROM Player_Attributes\", conn)\nPlayer_Attributes.columns = Player_Attributes.columns.str.lower()\n\n# Filter the dataframe based on the condition\nfiltered_df = Player_Attributes[Player_Attributes['overall_rating'] > 80]\n\n# Group the data by preferred_foot and count the number of rows\ngrouped_df = filtered_df.groupby('preferred_foot').size().reset_index(name='count')\n\n# Sort the data by preferred_foot in descending order\nsorted_df = grouped_df.sort_values('preferred_foot', ascending=False)\n\n# Create the bar plot\nplt.bar(sorted_df['preferred_foot'], sorted_df['count'])\nplt.xlabel('Preferred Foot')\nplt.ylabel('Count')\nplt.title('Number of Players with Overall Rating > 80 by Preferred Foot')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Show all cities along with the number of drama workshop groups in each city with a bar chart, and I want to display by the X from high to low.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Addresses table\naddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\naddresses.columns = map(str.lower, addresses.columns)\n\n# Read the Drama_Workshop_Groups table\ndrama_workshop_groups = pd.read_sql(\"SELECT * FROM Drama_Workshop_Groups\", conn)\ndrama_workshop_groups.columns = map(str.lower, drama_workshop_groups.columns)\n\n# Merge the two tables on Address_ID\nmerged_data = pd.merge(addresses, drama_workshop_groups, on='address_id')\n\n# Perform the group by and count\ngrouped_data = merged_data.groupby('city_town').size().reset_index(name='count')\n\n# Sort the data by City_Town in descending order\nsorted_data = grouped_data.sort_values('city_town', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data['city_town'], sorted_data['count'])\nplt.xlabel('City_Town')\nplt.ylabel('Count')\nplt.title('Number of Drama Workshop Groups in Each City_Town')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "Please compare the frequency of the position of the pilots using a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the pilot table\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\n\n# Convert column names to lowercase\npilot.columns = pilot.columns.str.lower()\n\n# Perform the SQL query\nresult = pilot.groupby('position').size().reset_index(name='count')\n\n# Generate the bar chart\nplt.bar(result['position'], result['count'])\nplt.xlabel('Position')\nplt.ylabel('Count')\nplt.title('Number of Pilots by Position')\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "How does the number of members in each position in the club \"Bootup Baltimore\" vary? Visualize it using a scatter chart.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nclub.columns = club.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(club, member_of_club, on='clubid')\n\n# Filter the data for clubname = 'Bootup Baltimore'\nfiltered_df = merged_df[merged_df['clubname'] == 'Bootup Baltimore']\n\n# Group by position and count the number of members\ngrouped_df = filtered_df.groupby('position').size().reset_index(name='num_members')\n\n# Create scatter plot\nplt.scatter(grouped_df['position'], grouped_df['num_members'])\nplt.xlabel('Position')\nplt.ylabel('Number of Members')\nplt.title('Number of Members by Position in Bootup Baltimore Club')\nplt.show()"
  },
  {
    "db_id": "aircraft",
    "question": "What is the count of each aircraft associated with an airport that has more total passengers than 10000000, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naircraft = pd.read_sql(\"SELECT * FROM aircraft\", conn)\nairport_aircraft = pd.read_sql(\"SELECT * FROM airport_aircraft\", conn)\nairport = pd.read_sql(\"SELECT * FROM airport\", conn)\naircraft.columns = aircraft.columns.str.lower()\nairport_aircraft.columns = airport_aircraft.columns.str.lower()\nairport.columns = airport.columns.str.lower()\n\n# Merge tables\nmerged_df = pd.merge(aircraft, airport_aircraft, on='aircraft_id')\nmerged_df = pd.merge(merged_df, airport, on='airport_id')\n\n# Filter data\nfiltered_df = merged_df[merged_df['total_passengers'] > 10000000]\n\n# Group by aircraft and count\ngrouped_df = filtered_df.groupby('aircraft').size().reset_index(name='count')\n\n# Plot bar chart\nplt.bar(grouped_df['aircraft'], grouped_df['count'])\nplt.xlabel('Aircraft')\nplt.ylabel('Count')\nplt.title('Number of Aircrafts with Total Passengers > 10,000,000')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "How many storms had a death count of at least 10, and how many regions were affected by each of these storms? Visualize the data using a scatter plot.",
    "chart": "Scatter",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naffected_region = pd.read_sql(\"SELECT * FROM affected_region\", conn)\nregion = pd.read_sql(\"SELECT * FROM region\", conn)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\naffected_region.columns = affected_region.columns.str.lower()\nregion.columns = region.columns.str.lower()\nstorm.columns = storm.columns.str.lower()\n\n# Merge the tables\nmerged_data = pd.merge(pd.merge(affected_region, region, on='region_id'), storm, on='storm_id')\n\n# Filter the data\nfiltered_data = merged_data[merged_data['number_deaths'] >= 10]\n\n# Group by number_deaths and count the occurrences\ngrouped_data = filtered_data.groupby('number_deaths').size().reset_index(name='count')\n\n# Sort the data by number_deaths in ascending order\nsorted_data = grouped_data.sort_values('number_deaths')\n\n# Create scatter plot\nplt.scatter(sorted_data['number_deaths'], sorted_data['count'])\n\n# Set labels and title\nplt.xlabel('Number of Deaths')\nplt.ylabel('Count')\nplt.title('Scatter Plot of Number of Deaths')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "entertainment_awards",
    "question": ", I want to list by the bars from low to high please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartwork = pd.read_sql(\"SELECT * FROM artwork\", conn)\nartwork.columns = artwork.columns.str.lower()\n\n# Grouping the data by type and counting the number of occurrences\nartwork_counts = artwork.groupby('type').size().reset_index(name='count')\n\n# Sorting the data by type in ascending order\nartwork_counts = artwork_counts.sort_values('type')\n\n# Creating a bar plot\nplt.bar(artwork_counts['type'], artwork_counts['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Artwork Count by Type')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Group and count details for the events using a bar chart , order bar from low to high order please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEVENTS = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\nEVENTS.columns = EVENTS.columns.str.lower()\n\n# Group by event_details and count the occurrences\nevent_counts = EVENTS.groupby('event_details').size().reset_index(name='count')\n\n# Sort the event_details in ascending order\nevent_counts = event_counts.sort_values('event_details')\n\n# Create a bar plot\nplt.bar(event_counts['event_details'], event_counts['count'])\nplt.xlabel('Event Details')\nplt.ylabel('Count')\nplt.title('Event Details Count')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "For events that have more than one participant, count the event details for a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the EVENTS table\nevents = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\n\n# Read the Participants_in_Events table\nparticipants = pd.read_sql(\"SELECT * FROM Participants_in_Events\", conn)\n\n# Convert column names to lowercase\nevents.columns = events.columns.str.lower()\nparticipants.columns = participants.columns.str.lower()\n\n# merge the two tables on event_id\nmerged_data = pd.merge(events, participants, on=\"event_id\")\n\n# group by event_details and count the occurrences\nevent_counts = merged_data.groupby(\"event_details\").size().reset_index(name=\"count\")\n\n# plot the bar chart\nplt.bar(event_counts[\"event_details\"], event_counts[\"count\"])\nplt.xlabel(\"Event Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Event Details Count\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "company_office",
    "question": "What are the name and assets of each company , sorted in ascending order of company name .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nCompanies = pd.read_sql(\"SELECT * FROM Companies\", conn)\nCompanies.columns = Companies.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called Companies\n\n# Sort the data by name in ascending order\nsorted_data = Companies.sort_values(by='name')\n\n# Extract the name and assets_billion columns\nname = sorted_data['name']\nassets_billion = sorted_data['assets_billion']\n\n# Create a bar plot\nplt.bar(name, assets_billion)\n\n# Set the x-axis label\nplt.xlabel('Company Name')\n\n# Set the y-axis label\nplt.ylabel('Assets (in billions)')\n\n# Set the title\nplt.title('Company Assets')\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "twitter_1",
    "question": "Show me a bar chart displaying the user names and the corresponding number of tweets they have tweeted, sorted in descending order by the count of tweets.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nuser_profiles = pd.read_sql(\"SELECT * FROM user_profiles\", conn)\ntweets = pd.read_sql(\"SELECT * FROM tweets\", conn)\nuser_profiles.columns = user_profiles.columns.str.lower()\ntweets.columns = tweets.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(user_profiles, tweets, on='uid')\n\n# Group by name and count the number of tweets\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['name'], sorted_df['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Number of Tweets by User')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "How many members are there in the club named \"Hopkins Student Enterprises\"? Show the last name of each member in a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nstudent = pd.read_sql(\"SELECT * FROM student\", conn)\nclub.columns = club.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\nstudent.columns = student.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(club, member_of_club, on='clubid')\nmerged_df = pd.merge(merged_df, student, left_on='stuid', right_on='stuid')\n\n# Filter the data based on clubname\nfiltered_df = merged_df[merged_df['clubname'] == 'Hopkins Student Enterprises']\n\n# Group by lname and count the number of occurrences\ngrouped_df = filtered_df.groupby('lname').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['lname'], grouped_df['count'])\nplt.xlabel('Last Name')\nplt.ylabel('Count')\nplt.title('Number of Students in \"Hopkins Student Enterprises\" by Last Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Compare all countries with a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the artist table\nartist_df = pd.read_sql(\"SELECT * FROM artist\", conn)\n\n# Convert column names to lowercase\nartist_df.columns = artist_df.columns.str.lower()\n\n# Group by country and count the number of artists in each country\ncountry_count = artist_df.groupby('country').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(country_count['country'], country_count['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Artists by Country')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "icfp_1",
    "question": "What are the top 5 institutions with the highest number of authors? Show the distribution of authors across institutions using a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nauthors = pd.read_sql(\"SELECT * FROM authors\", conn)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\ninst = pd.read_sql(\"SELECT * FROM inst\", conn)\nauthors.columns = authors.columns.str.lower()\nauthorship.columns = authorship.columns.str.lower()\ninst.columns = inst.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(authors, authorship, on='authid')\nmerged_df = pd.merge(merged_df, inst, on='instid')\n\n# Group by institution name and count number of authors\ngrouped_df = merged_df.groupby('name').size().reset_index(name='num_authors')\n\n# Sort by number of authors in descending order and select top 5\ntop_5_df = grouped_df.sort_values('num_authors', ascending=False).head(5)\n\n# Plot pie chart\nplt.pie(top_5_df['num_authors'], labels=top_5_df['name'], autopct='%1.1f%%')\nplt.title('Top 5 Institutions by Number of Authors')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "question": "What is the name of the shipping agent of the document with id 2 and how many documents are associated with that shipping agent, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRef_Shipping_Agents = pd.read_sql(\"SELECT * FROM Ref_Shipping_Agents\", conn)\nDocuments = pd.read_sql(\"SELECT * FROM Documents\", conn)\nRef_Shipping_Agents.columns = Ref_Shipping_Agents.columns.str.lower()\nDocuments.columns = Documents.columns.str.lower()\n\n# Merge the two dataframes\nmerged_df = pd.merge(Ref_Shipping_Agents, Documents, on='shipping_agent_code')\n\n# Filter the merged dataframe for document_id = 2\nfiltered_df = merged_df[merged_df['document_id'] == 2]\n\n# Group by shipping_agent_name and count the occurrences\ngrouped_df = filtered_df.groupby('shipping_agent_name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['shipping_agent_name'], grouped_df['count'])\nplt.xlabel('Shipping Agent')\nplt.ylabel('Count')\nplt.title('Number of Documents by Shipping Agent')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Draw a bar chart for what is the name of every city that has at least 15 stations and how many stations does it have?, and rank by the city from low to high.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"station\" table\nstation_data = pd.read_sql(\"SELECT * FROM station\", conn)\n\n# Convert column names to lowercase\nstation_data.columns = station_data.columns.str.lower()\n\n# Perform the SQL query\nresult = station_data.groupby('city').size().reset_index(name='count').sort_values('city')\n\n# Generate the bar plot\nplt.bar(result['city'], result['count'])\nplt.xlabel('City')\nplt.ylabel('Count')\nplt.title('Number of Stations in Each City')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "e_government",
    "question": "Show me a bar chart displaying the frequency of last names among the contact individuals of an organization.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nindividuals = pd.read_sql(\"SELECT * FROM individuals\", conn)\norganization_contact_individuals = pd.read_sql(\"SELECT * FROM organization_contact_individuals\", conn)\nindividuals.columns = individuals.columns.str.lower()\norganization_contact_individuals.columns = organization_contact_individuals.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(individuals, organization_contact_individuals, on='individual_id')\n\n# Group by individual_last_name and count the occurrences\ngrouped_df = merged_df.groupby('individual_last_name').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['individual_last_name'], sorted_df['count'])\nplt.xlabel('Last Name')\nplt.ylabel('Count')\nplt.title('Number of Individuals by Last Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "For each citizenship , how many singers are from that country , and rank by the x axis in descending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Group by citizenship and count the number of singers\nsinger_count = singer.groupby('citizenship').size().reset_index(name='count')\n\n# Sort by citizenship in descending order\nsinger_count = singer_count.sort_values('citizenship', ascending=False)\n\n# Plot the bar chart\nplt.bar(singer_count['citizenship'], singer_count['count'])\nplt.xlabel('Citizenship')\nplt.ylabel('Count')\nplt.title('Number of Singers by Citizenship')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "What are the number of the actual delivery dates of orders with quantity 1?",
    "chart": "Line",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Customer_Orders table\ncustomer_orders = pd.read_sql(\"SELECT * FROM Customer_Orders\", conn)\ncustomer_orders.columns = map(str.lower, customer_orders.columns)\n\n# Read the Order_Items table\norder_items = pd.read_sql(\"SELECT * FROM Order_Items\", conn)\norder_items.columns = map(str.lower, order_items.columns)\n\n# Merge the two tables on Order_ID\nmerged_data = pd.merge(customer_orders, order_items, on=\"order_id\")\n\n# Filter the merged data for Order_Quantity = 1\nfiltered_data = merged_data[merged_data[\"order_quantity\"] == 1]\n\n# Group the data by Actual_Delivery_Date and count the occurrences\ngrouped_data = filtered_data.groupby(\"actual_delivery_date\").size().reset_index(name=\"count\")\n\n# Plot the line chart\nplt.plot(grouped_data[\"actual_delivery_date\"], grouped_data[\"count\"])\nplt.xlabel(\"Actual Delivery Date\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of Orders with Order Quantity = 1 by Actual Delivery Date\")\nplt.show()"
  },
  {
    "db_id": "insurance_and_eClaims",
    "question": "Which customer had the highest claim amount in a single claim? Show the customer details and the claimed amount using a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclaim_headers = pd.read_sql(\"SELECT * FROM claim_headers\", conn)\npolicies = pd.read_sql(\"SELECT * FROM policies\", conn)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\nclaim_headers = pd.read_sql(\"SELECT * FROM claim_headers\", conn)\nclaim_headers.columns = claim_headers.columns.str.lower()\npolicies.columns = policies.columns.str.lower()\ncustomers.columns = customers.columns.str.lower()\nclaim_headers.columns = claim_headers.columns.str.lower()\n\n# Merge claim_headers, policies, and customers tables\nmerged_data = pd.merge(pd.merge(claim_headers, policies, on='policy_id'), customers, on='customer_id')\n\n# Filter data for the maximum amount_claimed\nmax_amount_claimed = merged_data['amount_claimed'].max()\nfiltered_data = merged_data[merged_data['amount_claimed'] == max_amount_claimed]\n\n# Create bar plot\nplt.bar(filtered_data['customer_details'], filtered_data['amount_claimed'])\nplt.xlabel('Customer Details')\nplt.ylabel('Amount Claimed')\nplt.title('Customers with Maximum Amount Claimed')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Give me a bar chart about the number of customer addresses in each premises type, display x-axis in descending order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read data from customer_addresses table\ncustomer_addresses = pd.read_sql(\"SELECT * FROM customer_addresses\", conn)\n\n# Read data from premises table\npremises = pd.read_sql(\"SELECT * FROM premises\", conn)\n\n# Convert column names to lowercase\ncustomer_addresses.columns = customer_addresses.columns.str.lower()\npremises.columns = premises.columns.str.lower()\n\n# merge customer_addresses and premises tables on premise_id\nmerged_data = pd.merge(customer_addresses, premises, on=\"premise_id\")\n\n# group by premises_type and count the occurrences\ngrouped_data = merged_data.groupby(\"premises_type\").size().reset_index(name=\"count\")\n\n# sort by premises_type in descending order\nsorted_data = grouped_data.sort_values(\"premises_type\", ascending=False)\n\n# plot the bar chart\nplt.bar(sorted_data[\"premises_type\"], sorted_data[\"count\"])\nplt.xlabel(\"Premises Type\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of Premises Types\")\nplt.show()\n"
  },
  {
    "db_id": "browser_web",
    "question": "Which browser has the highest compatibility with web accelerators, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nbrowser = pd.read_sql(\"SELECT * FROM browser\", conn)\naccelerator_compatible_browser = pd.read_sql(\"SELECT * FROM accelerator_compatible_browser\", conn)\nbrowser.columns = browser.columns.str.lower()\naccelerator_compatible_browser.columns = accelerator_compatible_browser.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(browser, accelerator_compatible_browser, left_on='id', right_on='browser_id')\n\n# Perform the group by and count operation\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['name'], sorted_df['count'])\nplt.xlabel('Browser Name')\nplt.ylabel('Count')\nplt.title('Number of Accelerator Compatible Browsers')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Give me a bar chart about the number of customer addresses in each premises type, and display Y in asc order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read data from customer_addresses table\ncustomer_addresses = pd.read_sql(\"SELECT * FROM customer_addresses\", conn)\n\n# Read data from premises table\npremises = pd.read_sql(\"SELECT * FROM premises\", conn)\n\n# Convert column names to lowercase\ncustomer_addresses.columns = customer_addresses.columns.str.lower()\npremises.columns = premises.columns.str.lower()\n\n# merge customer_addresses and premises tables on premise_id\nmerged_data = pd.merge(customer_addresses, premises, on=\"premise_id\")\n\n# group by premises_type and count the occurrences\ngrouped_data = merged_data.groupby(\"premises_type\").size().reset_index(name=\"count\")\n\n# sort the data by count in ascending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=True)\n\n# plot the bar chart\nplt.bar(sorted_data[\"premises_type\"], sorted_data[\"count\"])\nplt.xlabel(\"Premises Type\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of Premises Types\")\nplt.show()\n"
  },
  {
    "db_id": "hospital_1",
    "question": "How many appointments did each physician take, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nappointment = pd.read_sql(\"SELECT * FROM appointment\", conn)\nphysician = pd.read_sql(\"SELECT * FROM physician\", conn)\nappointment.columns = appointment.columns.str.lower()\nphysician.columns = physician.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(appointment, physician, left_on='physician', right_on='employeeid')\n\n# Group by physician name and count the number of appointments\nappointment_count = merged_df.groupby('name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(appointment_count['name'], appointment_count['count'])\nplt.xlabel('Physician Name')\nplt.ylabel('Appointment Count')\nplt.title('Number of Appointments per Physician')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "what are the ids and names of all start stations that were the beginning of at least 200 trips ? , and list Y from low to high order .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\ntrip.columns = trip.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called 'trip'\n\n# Perform the SQL query\nresult = trip[['start_station_name', 'start_station_id']].sort_values('start_station_id')\n\n# Create the bar plot\nplt.bar(result['start_station_name'], result['start_station_id'])\nplt.xlabel('Start Station Name')\nplt.ylabel('Start Station ID')\nplt.title('Start Station ID by Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Show all payment method codes and the number of orders for each code Show bar chart , display in ascending by the names .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nINVOICES = pd.read_sql(\"SELECT * FROM INVOICES\", conn)\nINVOICES.columns = INVOICES.columns.str.lower()\n\n# Grouping the data by payment_method_code and counting the number of occurrences\npayment_counts = INVOICES.groupby('payment_method_code').size().reset_index(name='count')\n\n# Sorting the data by payment_method_code in ascending order\npayment_counts = payment_counts.sort_values('payment_method_code')\n\n# Creating the bar plot\nplt.bar(payment_counts['payment_method_code'], payment_counts['count'])\nplt.xlabel('Payment Method Code')\nplt.ylabel('Count')\nplt.title('Number of Invoices by Payment Method Code')\nplt.show()"
  },
  {
    "db_id": "tvshow",
    "question": "what are 3 most highly rated episodes in the TV series table and what were those ratings ?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nTV_series = pd.read_sql(\"SELECT * FROM TV_series\", conn)\nTV_series.columns = TV_series.columns.str.lower()\n\n# Assuming TV_series is a DataFrame containing the table data\n\n# Selecting the top 3 episodes with highest ratings\ntop_episodes = TV_series.sort_values('rating', ascending=False).head(3)\n\n# Creating a pie chart to visualize the ratings of the top episodes\nplt.pie(top_episodes['rating'], labels=top_episodes['episode'], autopct='%1.1f%%')\nplt.title('Top 3 Episodes by Rating')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "List the distinct payment method codes with the number of orders mad in a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nINVOICES = pd.read_sql(\"SELECT * FROM INVOICES\", conn)\nINVOICES.columns = INVOICES.columns.str.lower()\n\n# Grouping the invoices by payment method code and counting the occurrences\npayment_counts = INVOICES.groupby('payment_method_code').size()\n\n# Creating a bar plot\nplt.bar(payment_counts.index, payment_counts.values)\n\n# Adding labels and title\nplt.xlabel('Payment Method Code')\nplt.ylabel('Count')\nplt.title('Number of Invoices by Payment Method Code')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "Show me a bar chart of the customer_id and count of payments for each customer, ordered by the count of payments in descending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomer_payments = pd.read_sql(\"SELECT * FROM customer_payments\", conn)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\ncustomer_payments.columns = customer_payments.columns.str.lower()\ncustomers.columns = customers.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(customer_payments, customers, on='customer_id')\n\n# Group by customer_id and count the number of rows\ngrouped_df = merged_df.groupby('customer_id').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['customer_id'], sorted_df['count'])\nplt.xlabel('Customer ID')\nplt.ylabel('Count')\nplt.title('Number of Payments per Customer')\nplt.show()"
  },
  {
    "db_id": "battle_death",
    "question": "Bar chart of the number of date from each date, and could you show in ascending by the x axis?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the battle table\nbattle_df = pd.read_sql(\"SELECT * FROM battle\", conn)\n\n# Convert column names to lowercase\nbattle_df.columns = battle_df.columns.str.lower()\n\n# Perform the SQL query\nresult = battle_df.groupby('date').size().reset_index(name='count').sort_values('date')\n\n# Generate the bar plot\nplt.bar(result['date'], result['count'])\nplt.xlabel('Date')\nplt.ylabel('Count')\nplt.title('Number of Battles by Date')\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "What are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality Show bar chart , display in asc by the total number .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot.columns = pilot.columns.str.lower()\n\n# Group by nationality and count the number of pilots\nnationality_count = pilot.groupby('nationality').size().reset_index(name='count')\n\n# Sort the dataframe by count in ascending order\nnationality_count = nationality_count.sort_values('count')\n\n# Create a bar plot\nplt.bar(nationality_count['nationality'], nationality_count['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Pilots by Nationality')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "icfp_1",
    "question": "Show me a bar chart displaying the number of authors for each paper, and identify the paper with the fewest authors by its title.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\npapers = pd.read_sql(\"SELECT * FROM papers\", conn)\nauthorship.columns = authorship.columns.str.lower()\npapers.columns = papers.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(authorship, papers, on='paperid')\n\n# Group by title and count the number of authors\ngrouped_df = merged_df.groupby('title').size().reset_index(name='num_authors')\n\n# Sort the dataframe by num_authors in ascending order\nsorted_df = grouped_df.sort_values('num_authors')\n\n# Plot the bar chart\nplt.bar(sorted_df['title'], sorted_df['num_authors'])\nplt.xlabel('Title')\nplt.ylabel('Number of Authors')\nplt.title('Number of Authors per Paper')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Group and count details for the events using a bar chart , and I want to list by the names in desc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEVENTS = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\nEVENTS.columns = EVENTS.columns.str.lower()\n\n# Group by event_details and count the occurrences\nevent_counts = EVENTS.groupby('event_details').size().reset_index(name='count')\n\n# Sort the event_details in descending order\nevent_counts = event_counts.sort_values('event_details', ascending=False)\n\n# Create a bar plot\nplt.bar(event_counts['event_details'], event_counts['count'])\nplt.xlabel('Event Details')\nplt.ylabel('Count')\nplt.title('Event Details Count')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "Show me a line chart representing the count of orders placed on each date between 2009-01-01 and 2010-01-01.",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\ncustomers.columns = customers.columns.str.lower()\norders.columns = orders.columns.str.lower()\n\n# Merge customers and orders tables\nmerged_df = pd.merge(customers, orders, on='customer_id')\n\n# Filter data for the specified date range\nfiltered_df = merged_df[(merged_df['date_order_placed'] >= '2009-01-01') & (merged_df['date_order_placed'] <= '2010-01-01')]\n\n# Group by date_order_placed and count the number of orders\ngrouped_df = filtered_df.groupby('date_order_placed').size().reset_index(name='order_count')\n\n# Plot the line chart\nplt.plot(grouped_df['date_order_placed'], grouped_df['order_count'])\nplt.xlabel('Date')\nplt.ylabel('Order Count')\nplt.title('Number of Orders by Date')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Show all calendar dates and day Numbers Plot them as line chart , rank by the Calendar_Date from high to low please .",
    "chart": "Line",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nRef_calendar = pd.read_sql(\"SELECT * FROM Ref_calendar\", conn)\nRef_calendar.columns = Ref_calendar.columns.str.lower()\n\n# Assuming the table data is already loaded into a DataFrame called Ref_calendar\n\n# Sort the DataFrame by calendar_date in descending order\nRef_calendar_sorted = Ref_calendar.sort_values(by='calendar_date', ascending=False)\n\n# Extract the calendar_date and day_number columns\ncalendar_date = Ref_calendar_sorted['calendar_date']\nday_number = Ref_calendar_sorted['day_number']\n\n# Plot the line chart\nplt.plot(calendar_date, day_number)\nplt.xlabel('Calendar Date')\nplt.ylabel('Day Number')\nplt.title('Line Chart of Day Number by Calendar Date')\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "what are the different software platforms for devices , and how many devices have each ? , order in ascending by the the total number please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ndevice = pd.read_sql(\"SELECT * FROM device\", conn)\ndevice.columns = device.columns.str.lower()\n\n# Grouping the data by software_platform and counting the occurrences\ngrouped_data = device.groupby('software_platform').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nsorted_data = grouped_data.sort_values('count')\n\n# Creating the bar plot\nplt.bar(sorted_data['software_platform'], sorted_data['count'])\nplt.xlabel('Software Platform')\nplt.ylabel('Count')\nplt.title('Number of Devices by Software Platform')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Show all artist names and the number of exhibitions for each artist in a bar chart, I want to order in descending by the total number.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the exhibition and artist tables\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\n\n# Convert column names to lowercase\nexhibition.columns = exhibition.columns.str.lower()\nartist.columns = artist.columns.str.lower()\n\n# Merge the exhibition and artist tables on artist_id\nmerged_data = pd.merge(exhibition, artist, on=\"artist_id\")\n\n# Perform the group by and count\ngrouped_data = merged_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# Sort the data by count in descending order\nsorted_data = grouped_data.sort_values(by=\"count\", ascending=False)\n\n# Generate the bar plot\nplt.bar(sorted_data[\"name\"], sorted_data[\"count\"])\nplt.xlabel(\"Artist Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Exhibitions by Artist\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Show me a bar chart displaying the id and name of stations with more than 12 bikes available.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstatus = pd.read_sql(\"SELECT * FROM status\", conn)\nstation.columns = station.columns.str.lower()\nstatus.columns = status.columns.str.lower()\n\n# Merge station and status tables\nmerged_df = pd.merge(station, status, left_on='id', right_on='station_id')\n\n# Filter rows where bikes_available > 12\nfiltered_df = merged_df[merged_df['bikes_available'] > 12]\n\n# Group by id and name columns\ngrouped_df = filtered_df.groupby(['id', 'name']).size().reset_index(name='count')\n\n# Plot bar chart\nplt.bar(grouped_df['name'], grouped_df['count'])\nplt.xlabel('Station Name')\nplt.ylabel('Count')\nplt.title('Number of Stations with Bikes Available > 12')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "What are the names and ages of artists ? Show the result in a bar graph , and sort by the total number in ascending .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Assuming the data is already loaded into the 'artist' dataframe\n\n# Sort the dataframe by age in ascending order\nsorted_artist = artist.sort_values(by='age')\n\n# Extract the name and age columns\nname = sorted_artist['name']\nage = sorted_artist['age']\n\n# Create a bar plot\nplt.bar(name, age)\n\n# Add labels and title\nplt.xlabel('Name')\nplt.ylabel('Age')\nplt.title('Artist Age')\n\n# Rotate x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death, compare the number of deaths by name, and rank in asc by the y-axis.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the storm table into a DataFrame\nstorm_df = pd.read_sql(\"SELECT * FROM storm\", conn)\n\n# Convert column names to lowercase\nstorm_df.columns = storm_df.columns.str.lower()\n\n# Filter the DataFrame for rows where number_deaths >= 1\nfiltered_df = storm_df[storm_df['number_deaths'] >= 1]\n\n# Sort the filtered DataFrame by number_deaths in ascending order\nsorted_df = filtered_df.sort_values('number_deaths')\n\n# Create a bar plot\nplt.bar(sorted_df['name'], sorted_df['number_deaths'])\nplt.xlabel('Name')\nplt.ylabel('Number of Deaths')\nplt.title('Storms with Number of Deaths >= 1')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "small_bank_1",
    "question": "What are the names and savings balances of the top 3 accounts with the highest savings balance, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nsavings = pd.read_sql(\"SELECT * FROM savings\", conn)\naccounts.columns = accounts.columns.str.lower()\nsavings.columns = savings.columns.str.lower()\n\n# Perform the join operation\nresult = pd.merge(accounts, savings, on='custid')\n\n# Sort the result by balance in descending order and select the top 3 rows\ntop_3 = result.sort_values('balance', ascending=False).head(3)\n\n# Create a bar plot\nplt.bar(top_3['name'], top_3['balance'])\nplt.xlabel('Name')\nplt.ylabel('Balance')\nplt.title('Top 3 Customers with Highest Balance')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "What is the scatter plot of the count of exhibitions for each artist based on their age?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nexhibition.columns = exhibition.columns.str.lower()\nartist.columns = artist.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(exhibition, artist, on='artist_id')\n\n# Group by age and count the number of occurrences\ngrouped_df = merged_df.groupby('age').size().reset_index(name='count')\n\n# Create scatter plot\nplt.scatter(grouped_df['age'], grouped_df['count'])\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.title('Number of Exhibitions by Age')\nplt.show()"
  },
  {
    "db_id": "company_1",
    "question": "Find the number of employees of each gender whose salary is lower than 50000 Visualize by bar chart, I want to rank by the Y in descending.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the employee table\nemployee_df = pd.read_sql(\"SELECT * FROM employee\", conn)\n\n# Convert column names to lowercase\nemployee_df.columns = employee_df.columns.str.lower()\n\n# Filter the data where salary is less than 50000\nfiltered_df = employee_df[employee_df['salary'] < 50000]\n\n# Group the data by sex and count the number of occurrences\ngrouped_df = filtered_df.groupby('sex').size().reset_index(name='count')\n\n# Sort the data by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Generate the bar plot\nplt.bar(sorted_df['sex'], sorted_df['count'])\nplt.xlabel('Sex')\nplt.ylabel('Count')\nplt.title('Number of Employees with Salary < 50000 by Sex')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Show me start_station_id by start station name in a bar , and sort start_station_id in desc order .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\ntrip.columns = trip.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called 'trip'\n\n# Sort the DataFrame by start_station_id in descending order\nsorted_trip = trip.sort_values(by='start_station_id', ascending=False)\n\n# Extract the start_station_name and start_station_id columns\nstart_station_name = sorted_trip['start_station_name']\nstart_station_id = sorted_trip['start_station_id']\n\n# Create a bar plot\nplt.bar(start_station_name, start_station_id)\n\n# Set the x-axis labels to be rotated for better readability\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "aircraft",
    "question": "A bar chart for listing the number of the description of all aircrafts.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the aircraft table\naircraft = pd.read_sql(\"SELECT * FROM aircraft\", conn)\n\n# Convert column names to lowercase\naircraft.columns = aircraft.columns.str.lower()\n\n# Group by Description and count occurrences\ndescription_counts = aircraft.groupby('description').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(description_counts['description'], description_counts['count'])\nplt.xlabel('Description')\nplt.ylabel('Count')\nplt.title('Aircraft Description Counts')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "what are the event details of the services that have the type code 'Marriage', and count them by a pie chart",
    "chart": "Pie",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the EVENTS table\nevents = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\n\n# Read the Services table\nservices = pd.read_sql(\"SELECT * FROM Services\", conn)\n\n# Convert column names to lowercase\nevents.columns = events.columns.str.lower()\nservices.columns = services.columns.str.lower()\n\n# Merge the EVENTS and Services tables on Service_ID\nmerged_data = pd.merge(events, services, on=\"service_id\")\n\n# Filter the merged data for Service_Type_Code = 'Marriage'\nfiltered_data = merged_data[merged_data[\"service_type_code\"] == \"Marriage\"]\n\n# Group by Event_Details and count the occurrences\ngrouped_data = filtered_data.groupby(\"event_details\").size().reset_index(name=\"count\")\n\n# Plot the pie chart\nplt.pie(grouped_data[\"count\"], labels=grouped_data[\"event_details\"], autopct=\"%1.1f%%\")\nplt.axis(\"equal\")\nplt.title(\"Event Details for Marriage Services\")\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Bar chart x axis participant details y axis participant_id , and rank in asc by the bars .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nParticipants = pd.read_sql(\"SELECT * FROM Participants\", conn)\nParticipants.columns = Participants.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called Participants\n\n# Sort the DataFrame by participant_details column in ascending order\nsorted_participants = Participants.sort_values(by='participant_details')\n\n# Extract the required columns\nparticipant_details = sorted_participants['participant_details']\nparticipant_id = sorted_participants['participant_id']\n\n# Create the bar plot\nplt.bar(participant_details, participant_id)\n\n# Add labels and title\nplt.xlabel('Participant Details')\nplt.ylabel('Participant ID')\nplt.title('Bar Plot of Participant Details')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Return a bar chart showing the total number of ships' nationalities.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the \"ship\" table\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\n\n# Perform the SQL query\nresult = ship_df.groupby('nationality').size().reset_index(name='count')\n\n# Generate the bar chart\nplt.bar(result['nationality'], result['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Ships by Nationality')\n\n# Show the chart\nplt.show()"
  },
  {
    "db_id": "small_bank_1",
    "question": "How many accounts have the same total balance, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\nsavings = pd.read_sql(\"SELECT * FROM savings\", conn)\naccounts.columns = accounts.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\nsavings.columns = savings.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(accounts, checking, on='custid')\nmerged_df = pd.merge(merged_df, savings, on='custid')\n\n# Calculate the total balance and count\nmerged_df['total_balance'] = merged_df['balance_x'] + merged_df['balance_y']\ngrouped_df = merged_df.groupby('total_balance').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['total_balance'], autopct='%1.1f%%')\nplt.title('Distribution of Total Balance')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Visualize a bar chart for what are the ids and names of all start stations that were the beginning of at least 200 trips ? , list by the x-axis from low to high .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\ntrip.columns = trip.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called 'trip'\n\n# Perform the SQL query\nresult = trip[['start_station_name', 'start_station_id']].sort_values('start_station_name')\n\n# Create the bar plot\nplt.bar(result['start_station_name'], result['start_station_id'])\nplt.xlabel('Start Station Name')\nplt.ylabel('Start Station ID')\nplt.title('Start Station ID by Start Station Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Show all role codes and the number of employees in each role . Show bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nEmployees.columns = Employees.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\nrole_counts = Employees.groupby('role_code').size()\n\n# Creating a bar plot\nplt.bar(role_counts.index, role_counts.values)\n\n# Adding labels and title\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Employees by Role Code')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "What is the total number of each ship type ? Give me a bar chart , sort by the y axis in desc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Group by 'type' and count the occurrences\nship_count = ship.groupby('type').size().reset_index(name='count')\n\n# Sort by count in descending order\nship_count = ship_count.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(ship_count['type'], ship_count['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Ship Type Count')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Show me a bar chart displaying the sum of bikes available for each station that has had more than 12 bikes available.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstatus = pd.read_sql(\"SELECT * FROM status\", conn)\nstation.columns = station.columns.str.lower()\nstatus.columns = status.columns.str.lower()\n\n# Merge station and status tables\nmerged_df = pd.merge(station, status, left_on='id', right_on='station_id')\n\n# Filter rows where bikes_available > 12\nfiltered_df = merged_df[merged_df['bikes_available'] > 12]\n\n# Group by id and calculate sum of bikes_available\ngrouped_df = filtered_df.groupby('id')['bikes_available'].sum().reset_index()\n\n# Create bar plot\nplt.bar(grouped_df['id'], grouped_df['bikes_available'])\nplt.xlabel('Station ID')\nplt.ylabel('Total Bikes Available')\nplt.title('Total Bikes Available per Station')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Show me a bar chart of the top 5 start station names and their corresponding counts of trips started there.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\nstation.columns = station.columns.str.lower()\ntrip.columns = trip.columns.str.lower()\n\n# Joining station and trip tables\nmerged_df = pd.merge(station, trip, left_on='id', right_on='start_station_id')\n\n# Grouping by start_station_id and counting the number of occurrences\ngrouped_df = merged_df.groupby('start_station_id').size().reset_index(name='count')\n\n# Sorting by count in descending order and selecting top 5 rows\ntop_5_stations = grouped_df.sort_values('count', ascending=False).head(5)\n\n# Getting the names of the top 5 stations\ntop_5_stations_names = pd.merge(top_5_stations, station, left_on='start_station_id', right_on='id')['name']\n\n# Creating the bar plot\nplt.bar(top_5_stations_names, top_5_stations['count'])\nplt.xlabel('Station Name')\nplt.ylabel('Count')\nplt.title('Top 5 Stations by Trip Count')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "How many female members of club \"Bootup Baltimore\" are there in each age group, represented by a scatter chart?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nstudent = pd.read_sql(\"SELECT * FROM student\", conn)\n\nclub.columns = club.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\nstudent.columns = student.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(club, member_of_club, on='clubid')\nmerged_df = pd.merge(merged_df, student, on='stuid')\n\n# Filter data\nfiltered_df = merged_df[(merged_df['clubname'] == 'Bootup Baltimore') & (merged_df['sex'] == 'F')]\n\n# Group by age and count\ngrouped_df = filtered_df.groupby('age').size().reset_index(name='count')\n\n# Scatter plot\nplt.scatter(grouped_df['age'], grouped_df['count'])\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.title('Count of Female Students by Age')\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "What are the ids and details of events that have more than one participants, and order by the total number in desc.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the EVENTS table\nevents = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\nevents.columns = map(str.lower, events.columns)\n\n# Read the Participants_in_Events table\nparticipants = pd.read_sql(\"SELECT * FROM Participants_in_Events\", conn)\nparticipants.columns = map(str.lower, participants.columns)\n\n# Merge the EVENTS and Participants_in_Events tables\nmerged_data = pd.merge(events, participants, on=\"event_id\")\n\n# Group by Event_Details and count the number of Event_IDs\ngrouped_data = merged_data.groupby(\"event_details\").count()[\"event_id\"]\n\n# Sort the data by Event_ID in descending order\nsorted_data = grouped_data.sort_values(ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data.index, sorted_data.values)\nplt.xlabel(\"Event Details\")\nplt.ylabel(\"Number of Event IDs\")\nplt.title(\"Bar Chart of Event Details vs Number of Event IDs\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Create a bar chart showing the total number across premises type , could you rank X-axis in desc order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npremises = pd.read_sql(\"SELECT * FROM premises\", conn)\npremises.columns = premises.columns.str.lower()\n\n# Group by premises_type and count the number of occurrences\npremises_count = premises.groupby('premises_type').size().reset_index(name='count')\n\n# Sort by premises_type in descending order\npremises_count = premises_count.sort_values('premises_type', ascending=False)\n\n# Create bar plot\nplt.bar(premises_count['premises_type'], premises_count['count'])\nplt.xlabel('Premises Type')\nplt.ylabel('Count')\nplt.title('Number of Premises by Type')\nplt.show()"
  },
  {
    "db_id": "restaurant_1",
    "question": "For those female students with age is older than 18 who are not majoring in 600, visualize the proportion of students' first names with a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the Student table\nstudent_data = pd.read_sql(\"SELECT * FROM Student\", conn)\n\n# Convert column names to lowercase\nstudent_data.columns = student_data.columns.str.lower()\n\n# Filter the data based on the conditions\nfiltered_data = student_data[(student_data['age'] > 18) & (student_data['major'] != 600) & (student_data['sex'] == 'F')]\n\n# Group the data by Fname and count the occurrences\ngrouped_data = filtered_data.groupby('fname').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_data['count'], labels=grouped_data['fname'], autopct='%1.1f%%')\nplt.title('Distribution of Female Students by First Name')\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "Who is the customer with the smallest slice in the pie chart representing the number of orders per customer?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\norders.columns = orders.columns.str.lower()\ncustomers.columns = customers.columns.str.lower()\n\n# Joining the orders and customers tables\nmerged_df = pd.merge(orders, customers, on='customer_id')\n\n# Grouping by customer_name and counting the number of orders\ngrouped_df = merged_df.groupby('customer_name').size().reset_index(name='order_count')\n\n# Sorting the dataframe by order_count in ascending order\nsorted_df = grouped_df.sort_values('order_count')\n\n# Plotting the pie chart\nplt.pie(sorted_df['order_count'], labels=sorted_df['customer_name'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Show all artist names and ages in a bar , list from low to high by the bars .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Assuming the data is already loaded into the 'artist' dataframe\n\n# Sort the dataframe by name in ascending order\nsorted_artist = artist.sort_values(by='name')\n\n# Extract the name and age columns\nname = sorted_artist['name']\nage = sorted_artist['age']\n\n# Create a bar plot\nplt.bar(name, age)\n\n# Set the x-axis label\nplt.xlabel('Name')\n\n# Set the y-axis label\nplt.ylabel('Age')\n\n# Set the title of the plot\nplt.title('Artist Age by Name')\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "what are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot.columns = pilot.columns.str.lower()\n\n# Group by nationality and count the number of pilots\nnationality_count = pilot.groupby('nationality').size().reset_index(name='count')\n\n# Plot pie chart\nplt.pie(nationality_count['count'], labels=nationality_count['nationality'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "small_bank_1",
    "question": "Can you create a bar chart displaying the names and total checking and savings balances of accounts where the savings balance exceeds the average savings balance?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\nsavings = pd.read_sql(\"SELECT * FROM savings\", conn)\nsavings = pd.read_sql(\"SELECT * FROM savings\", conn)\naccounts.columns = accounts.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\nsavings.columns = savings.columns.str.lower()\nsavings.columns = savings.columns.str.lower()\n\n# Joining tables\nmerged_df = pd.merge(accounts, checking, on='custid')\nmerged_df = pd.merge(merged_df, savings, on='custid')\n\n# Filtering data\navg_balance = savings['balance'].mean()\nfiltered_df = merged_df[merged_df['balance_y'] > avg_balance]\n\n# Calculating total balance\nfiltered_df['total_balance'] = filtered_df['balance_x'] + filtered_df['balance_y']\n\n# Creating bar plot\nplt.bar(filtered_df['name'], filtered_df['total_balance'])\nplt.xlabel('Name')\nplt.ylabel('Total Balance')\nplt.title('Total Balance for Customers with Savings Balance > Average')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "How many orders were placed by each customer between 2009-01-01 and 2010-01-01, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\ncustomers.columns = customers.columns.str.lower()\norders.columns = orders.columns.str.lower()\n\n# Merge customers and orders dataframes\nmerged_df = pd.merge(customers, orders, on='customer_id')\n\n# Filter data for orders placed between '2009-01-01' and '2010-01-01'\nfiltered_df = merged_df[(merged_df['date_order_placed'] >= '2009-01-01') & (merged_df['date_order_placed'] <= '2010-01-01')]\n\n# Group by customer_name and count the number of orders\ngrouped_df = filtered_df.groupby('customer_name').size().reset_index(name='order_count')\n\n# Plot the bar chart\nplt.bar(grouped_df['customer_name'], grouped_df['order_count'])\nplt.xlabel('Customer Name')\nplt.ylabel('Order Count')\nplt.title('Number of Orders per Customer')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "insurance_and_eClaims",
    "question": "For each policy type , return its type code and its count in the record Visualize by bar chart , could you rank bar in ascending order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npolicies = pd.read_sql(\"SELECT * FROM policies\", conn)\npolicies.columns = policies.columns.str.lower()\n\n# Group by policy_type_code and count the number of occurrences\npolicy_counts = policies.groupby('policy_type_code').size().reset_index(name='count')\n\n# Sort the dataframe by policy_type_code in ascending order\npolicy_counts = policy_counts.sort_values('policy_type_code')\n\n# Create a bar plot\nplt.bar(policy_counts['policy_type_code'], policy_counts['count'])\nplt.xlabel('Policy Type Code')\nplt.ylabel('Count')\nplt.title('Number of Policies by Policy Type Code')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "I want to see trend of day_number by calendar date , and list in asc by the x-axis .",
    "chart": "Line",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nRef_calendar = pd.read_sql(\"SELECT * FROM Ref_calendar\", conn)\nRef_calendar.columns = Ref_calendar.columns.str.lower()\n\n# Assuming you have already read the table data into Ref_calendar dataframe\n\n# Sort the dataframe by calendar_date\nRef_calendar = Ref_calendar.sort_values(by='calendar_date')\n\n# Plotting the line chart\nplt.plot(Ref_calendar['calendar_date'], Ref_calendar['day_number'])\nplt.xlabel('Calendar Date')\nplt.ylabel('Day Number')\nplt.title('Line Chart of Day Number')\nplt.show()"
  },
  {
    "db_id": "icfp_1",
    "question": "What is the count of papers with \"Japan\" as the first author's affiliation and \"Ohori\" as the last name, visualized in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nauthors = pd.read_sql(\"SELECT * FROM authors\", conn)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\npapers = pd.read_sql(\"SELECT * FROM papers\", conn)\ninst = pd.read_sql(\"SELECT * FROM inst\", conn)\nauthors.columns = authors.columns.str.lower()\nauthorship.columns = authorship.columns.str.lower()\npapers.columns = papers.columns.str.lower()\ninst.columns = inst.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(authors, authorship, on='authid')\nmerged_df = pd.merge(merged_df, papers, on='paperid')\nmerged_df = pd.merge(merged_df, inst, on='instid')\n\n# Filter data\nfiltered_df = merged_df[(merged_df['country'] == 'Japan') & (merged_df['authorder'] == 1) & (merged_df['lname'] == 'Ohori')]\n\n# Group by country and count\ngrouped_df = filtered_df.groupby('country').size().reset_index(name='count')\n\n# Sort by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot bar chart\nplt.bar(sorted_df['country'], sorted_df['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Papers by Country (Author: Ohori, Order: 1)')\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "Show the name for regions and the number of storms for each region in a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the region and affected_region tables\nregion = pd.read_sql(\"SELECT * FROM region\", conn)\naffected_region = pd.read_sql(\"SELECT * FROM affected_region\", conn)\n\n# Convert column names to lowercase\nregion.columns = region.columns.str.lower()\naffected_region.columns = affected_region.columns.str.lower()\n\n# Merge the region and affected_region tables on region_id\nmerged_data = pd.merge(region, affected_region, on=\"region_id\")\n\n# Group by region_name and count the number of occurrences\ngrouped_data = merged_data.groupby(\"region_name\").size().reset_index(name=\"count\")\n\n# Plot the pie chart\nplt.pie(grouped_data[\"count\"], labels=grouped_data[\"region_name\"], autopct=\"%1.1f%%\")\nplt.axis(\"equal\")\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "Give a bar chart showing how many shops in each carrier.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the stock table\nstock = pd.read_sql(\"SELECT * FROM stock\", conn)\n\n# Read the device table\ndevice = pd.read_sql(\"SELECT * FROM device\", conn)\n\n# Read the shop table\nshop = pd.read_sql(\"SELECT * FROM shop\", conn)\n\n# Convert column names to lowercase\nstock.columns = stock.columns.str.lower()\ndevice.columns = device.columns.str.lower()\nshop.columns = shop.columns.str.lower()\n\n# merge the tables\nmerged_data = pd.merge(stock, device, on=\"device_id\")\nmerged_data = pd.merge(merged_data, shop, on=\"shop_id\")\n\n# group by carrier and count the occurrences\ncarrier_counts = merged_data.groupby(\"carrier\").size()\n\n# plot the bar chart\nplt.bar(carrier_counts.index, carrier_counts.values)\nplt.xlabel(\"Carrier\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Devices by Carrier\")\nplt.show()\n"
  },
  {
    "db_id": "storm_record",
    "question": "What storm name had the greatest impact across regions, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\naffected_region = pd.read_sql(\"SELECT * FROM affected_region\", conn)\nstorm.columns = storm.columns.str.lower()\naffected_region.columns = affected_region.columns.str.lower()\n\n# Perform the join operation\nmerged_data = pd.merge(storm, affected_region, on='storm_id')\n\n# Group by storm name and count the number of occurrences\ngrouped_data = merged_data.groupby('name').size().reset_index(name='count')\n\n# Sort the data by count in descending order\nsorted_data = grouped_data.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data['name'], sorted_data['count'])\nplt.xlabel('Storm Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences of Each Storm')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "What is the name of the shop with the greatest variety of devices in stock, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstock = pd.read_sql(\"SELECT * FROM stock\", conn)\nshop = pd.read_sql(\"SELECT * FROM shop\", conn)\nstock.columns = stock.columns.str.lower()\nshop.columns = shop.columns.str.lower()\n\n# Joining the stock and shop tables\nmerged_df = pd.merge(stock, shop, on='shop_id')\n\n# Grouping by shop_name and counting the number of rows\ngrouped_df = merged_df.groupby('shop_name').size().reset_index(name='count')\n\n# Sorting by count in descending order and selecting the top 1\ntop_shop = grouped_df.sort_values('count', ascending=False).head(1)\n\n# Plotting the bar chart\nplt.bar(top_shop['shop_name'], top_shop['count'])\nplt.xlabel('Shop Name')\nplt.ylabel('Count')\nplt.title('Top Shop by Count')\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "How many eliminations did each team have Visualize by bar chart , and rank by the y-axis in ascending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nelimination = pd.read_sql(\"SELECT * FROM elimination\", conn)\nelimination.columns = elimination.columns.str.lower()\n\n# Group by team and count the number of occurrences\nteam_counts = elimination.groupby('team').size().reset_index(name='count')\n\n# Sort the counts in ascending order\nteam_counts = team_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(team_counts['team'], team_counts['count'])\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Team')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show different types of ships and the number of ships of each type in a bar chart, I want to list from low to high by the names.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ship table\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\n\n# Perform the SQL query\nresult = ship_df.groupby('type').size().reset_index(name='count').sort_values('type')\n\n# Generate the bar chart\nplt.bar(result['type'], result['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Number of Ships by Type')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show different types of ships and the number of ships of each type Show bar chart , and order from high to low by the Type .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Grouping the ship dataframe by type and counting the occurrences\nship_grouped = ship.groupby('type').size().reset_index(name='count')\n\n# Sorting the ship_grouped dataframe by type in descending order\nship_grouped_sorted = ship_grouped.sort_values('type', ascending=False)\n\n# Creating the bar plot\nplt.bar(ship_grouped_sorted['type'], ship_grouped_sorted['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Count of Ships by Type')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Show me a bar chart displaying the latitude and average duration of trips started at each start station id.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\nstation.columns = station.columns.str.lower()\ntrip.columns = trip.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(station, trip, left_on='id', right_on='start_station_id')\n\n# Calculate the average duration for each start station\navg_duration = merged_df.groupby('start_station_id')['duration'].mean()\n\n# Create a scatter plot\nplt.bar(station['lat'], avg_duration)\nplt.xlabel('Latitude')\nplt.ylabel('Average Duration')\nplt.title('Scatter Plot of Latitude vs Average Duration')\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "Show me a bar chart displaying the count of each distinct kind of injury that occurred after the season 2010, sorted in descending order of count.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ninjury_accident = pd.read_sql(\"SELECT * FROM injury_accident\", conn)\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\ninjury_accident.columns = injury_accident.columns.str.lower()\ngame.columns = game.columns.str.lower()\n\n# Merge the injury_accident and game dataframes\nmerged_df = pd.merge(injury_accident, game, left_on='game_id', right_on='id')\n\n# Filter the merged dataframe for seasons after 2010\nfiltered_df = merged_df[merged_df['season'] > 2010]\n\n# Group by injury and count the occurrences\ngrouped_df = filtered_df.groupby('injury').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['injury'], sorted_df['count'])\nplt.xlabel('Injury')\nplt.ylabel('Count')\nplt.title('Injury Count after 2010')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "Show me a bar chart of the customer_id and total amount paid by each customer, sorted in descending order of the total amount paid.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomer_payments = pd.read_sql(\"SELECT * FROM customer_payments\", conn)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\ncustomer_payments.columns = customer_payments.columns.str.lower()\ncustomers.columns = customers.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(customer_payments, customers, on='customer_id')\n\n# Group by customer_id and calculate the sum of amount_payment\ngrouped_df = merged_df.groupby('customer_id')['amount_payment'].sum().reset_index()\n\n# Sort the dataframe by the sum of amount_payment in descending order\nsorted_df = grouped_df.sort_values('amount_payment', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['customer_id'], sorted_df['amount_payment'])\nplt.xlabel('Customer ID')\nplt.ylabel('Total Amount Payment')\nplt.title('Total Amount Payment by Customer')\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Visualize by pie chart about different citizenships and the maximum net worth of singers of each citizenship .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Group by citizenship and find the maximum net worth\nmax_net_worth = singer.groupby('citizenship')['net_worth_millions'].max()\n\n# Create a pie chart\nplt.pie(max_net_worth, labels=max_net_worth.index, autopct='%1.1f%%')\nplt.title('Maximum Net Worth by Citizenship')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Show the number of documents for each location code in a pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDocument_locations = pd.read_sql(\"SELECT * FROM Document_locations\", conn)\nDocument_locations.columns = Document_locations.columns.str.lower()\n\n# Group by location_code and count the occurrences\nlocation_counts = Document_locations.groupby('location_code').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(location_counts['count'], labels=location_counts['location_code'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "perpetrator",
    "question": "Who are the perpetrators involved in the incidents, and can you display their names in a bar chart, ordered from highest to lowest based on the maximum year?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\nperpetrator = pd.read_sql(\"SELECT * FROM perpetrator\", conn)\npeople.columns = people.columns.str.lower()\nperpetrator.columns = perpetrator.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(people, perpetrator, on='people_id')\n\n# Group by name and find the maximum year\ngrouped_df = merged_df.groupby('name')['year'].max().reset_index()\n\n# Sort by maximum year in descending order\nsorted_df = grouped_df.sort_values('year', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['name'], sorted_df['year'])\nplt.xlabel('Name')\nplt.ylabel('Maximum Year')\nplt.title('Maximum Year by Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "List the distinct payment method codes with the number of orders mad . Show bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nINVOICES = pd.read_sql(\"SELECT * FROM INVOICES\", conn)\nINVOICES.columns = INVOICES.columns.str.lower()\n\n# Grouping the invoices by payment method code and counting the occurrences\npayment_counts = INVOICES.groupby('payment_method_code').size()\n\n# Creating a bar plot\nplt.bar(payment_counts.index, payment_counts.values)\n\n# Adding labels and title\nplt.xlabel('Payment Method Code')\nplt.ylabel('Count')\nplt.title('Number of Invoices by Payment Method Code')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "What are the descriptions of the service types that have a total product price greater than 100, shown in a line chart?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRef_Service_Types = pd.read_sql(\"SELECT * FROM Ref_Service_Types\", conn)\nServices = pd.read_sql(\"SELECT * FROM Services\", conn)\nRef_Service_Types.columns = Ref_Service_Types.columns.str.lower()\nServices.columns = Services.columns.str.lower()\n\n# Merge the two dataframes\nmerged_df = pd.merge(Ref_Service_Types, Services, on='service_type_code')\n\n# Filter the merged dataframe for product_price > 100\nfiltered_df = merged_df[merged_df['product_price'] > 100]\n\n# Group by service_type_description and calculate the sum of product_price\ngrouped_df = filtered_df.groupby('service_type_description')['product_price'].sum().reset_index()\n\n# Plot the line chart\nplt.plot(grouped_df['service_type_description'], grouped_df['product_price'])\nplt.xlabel('Service Type Description')\nplt.ylabel('Sum of Product Price')\nplt.title('Sum of Product Price by Service Type Description')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "What is the distribution of customers with a mailshot outcome code 'No Response' for each customer phone number, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\nmailshot_customers = pd.read_sql(\"SELECT * FROM mailshot_customers\", conn)\ncustomers.columns = customers.columns.str.lower()\nmailshot_customers.columns = mailshot_customers.columns.str.lower()\n\n# Merge the customers and mailshot_customers tables\nmerged_df = pd.merge(customers, mailshot_customers, on='customer_id')\n\n# Filter the merged dataframe for outcome_code = 'No Response'\nfiltered_df = merged_df[merged_df['outcome_code'] == 'No Response']\n\n# Group by customer_phone and count the occurrences\ngrouped_df = filtered_df.groupby('customer_phone').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['customer_phone'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "customer_deliveries",
    "question": "List the state names and the number of customers living in each state with a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read data from the customer_addresses table\ncustomer_addresses = pd.read_sql(\"SELECT * FROM customer_addresses\", conn)\n\n# Read data from the addresses table\naddresses = pd.read_sql(\"SELECT * FROM addresses\", conn)\n\n# Convert column names to lowercase\ncustomer_addresses.columns = customer_addresses.columns.str.lower()\naddresses.columns = addresses.columns.str.lower()\n\n# merge the two tables on the address_id column\nmerged_data = pd.merge(customer_addresses, addresses, on=\"address_id\")\n\n# group the data by state_province_county and count the number of occurrences\ngrouped_data = merged_data.groupby(\"state_province_county\").size().reset_index(name=\"count\")\n\n# plot the bar chart\nplt.bar(grouped_data[\"state_province_county\"], grouped_data[\"count\"])\nplt.xlabel(\"State/Province/County\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Customers by State/Province/County\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show each premise type and the number of premises in that type with a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"premises\" table\npremises_data = pd.read_sql(\"SELECT * FROM premises\", conn)\n\n# Convert column names to lowercase\npremises_data.columns = premises_data.columns.str.lower()\n\n# Perform the SQL query and group by premises_type\ngrouped_data = premises_data.groupby('premises_type').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_data['count'], labels=grouped_data['premises_type'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Bar chart x axis location code y axis how many location code, and show by the Y-axis in ascending.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the Document_locations table\ndf = pd.read_sql(\"SELECT * FROM Document_locations\", conn)\n\n# Convert column names to lowercase\ndf.columns = df.columns.str.lower()\n\n# Perform the SQL query\nresult = df.groupby('location_code').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result['location_code'], result['count'])\nplt.xlabel('Location Code')\nplt.ylabel('Count')\nplt.title('Number of Documents by Location Code')\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "List all customer status codes and the number of customers having each status code by a pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nCustomers = pd.read_sql(\"SELECT * FROM Customers\", conn)\nCustomers.columns = Customers.columns.str.lower()\n\n# Assuming Customers is a DataFrame containing the table data\n\n# Grouping the data by customer_status_code and counting the occurrences\ngrouped_data = Customers.groupby('customer_status_code').size()\n\n# Creating a pie chart\nplt.pie(grouped_data, labels=grouped_data.index, autopct='%1.1f%%')\nplt.title('Customer Status')\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Return a bar chart on what are the ids and details of events that have more than one participants?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the EVENTS table\nevents = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\n\n# Read the Participants_in_Events table\nparticipants = pd.read_sql(\"SELECT * FROM Participants_in_Events\", conn)\n\n# Convert column names to lowercase\nevents.columns = events.columns.str.lower()\nparticipants.columns = participants.columns.str.lower()\n\n# merge the two tables on event_id\nmerged_data = pd.merge(events, participants, on='event_id')\n\n# group by event_details and count the number of event_ids\nevent_counts = merged_data.groupby('event_details')['event_id'].count()\n\n# plot the bar chart\nplt.bar(event_counts.index, event_counts.values)\nplt.xlabel('Event Details')\nplt.ylabel('Number of Events')\nplt.title('Event Details vs Number of Events')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "What is the count of services for each service type, represented in a scatter chart?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRef_Service_Types = pd.read_sql(\"SELECT * FROM Ref_Service_Types\", conn)\nServices = pd.read_sql(\"SELECT * FROM Services\", conn)\nRef_Service_Types.columns = Ref_Service_Types.columns.str.lower()\nServices.columns = Services.columns.str.lower()\n\n# Joining the two dataframes\ndf = pd.merge(Ref_Service_Types, Services, on='service_type_code')\n\n# Grouping by service_type_code and counting the occurrences\ndf_count = df.groupby('service_type_code').size().reset_index(name='count')\n\n# Creating scatter plot\nplt.scatter(df_count['service_type_code'], df_count['count'])\nplt.xlabel('Service Type Code')\nplt.ylabel('Count')\nplt.title('Count of Services by Service Type')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Visualize a scatter chart on what are the ids and durations of the trips with the top 3 durations ?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\ntrip.columns = trip.columns.str.lower()\n\n# Assuming the table data is already loaded into a DataFrame called 'trip'\n# Selecting the required columns and sorting by duration in descending order\ntop_3_trips = trip[['id', 'duration']].sort_values('duration', ascending=False).head(3)\n\n# Creating a scatter plot\nplt.scatter(top_3_trips['id'], top_3_trips['duration'])\n\n# Adding labels and title\nplt.xlabel('ID')\nplt.ylabel('Duration')\nplt.title('Top 3 Trips by Duration')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "For each type , how many ships are there Plot them as bar chart , and show names from high to low order please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Grouping the ship dataframe by type and counting the occurrences\nship_grouped = ship.groupby('type').size().reset_index(name='count')\n\n# Sorting the ship_grouped dataframe by type in descending order\nship_grouped_sorted = ship_grouped.sort_values('type', ascending=False)\n\n# Creating the bar plot\nplt.bar(ship_grouped_sorted['type'], ship_grouped_sorted['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Count of Ships by Type')\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "Can you draw a bar chart to show the number of positions of the pilots ? , and I want to rank by the Y from low to high .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot.columns = pilot.columns.str.lower()\n\n# Group by position and count the occurrences\nposition_counts = pilot.groupby('position').size().reset_index(name='count')\n\n# Sort the counts in ascending order\nposition_counts = position_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(position_counts['position'], position_counts['count'])\nplt.xlabel('Position')\nplt.ylabel('Count')\nplt.title('Count of Pilots by Position')\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "What is the last name of the staff member who reported the problems and can you show the number of problems reported by each staff member with a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nproblems = pd.read_sql(\"SELECT * FROM problems\", conn)\nstaff = pd.read_sql(\"SELECT * FROM staff\", conn)\nproblems.columns = problems.columns.str.lower()\nstaff.columns = staff.columns.str.lower()\n\n# Merge tables problems and staff\nmerged_df = pd.merge(problems, staff, left_on='reported_by_staff_id', right_on='staff_id')\n\n# Filter rows where staff_last_name is 'Bosco'\nfiltered_df = merged_df[merged_df['staff_last_name'] == 'Bosco']\n\n# Group by staff_last_name and count problem_id\ngrouped_df = filtered_df.groupby('staff_last_name').agg({'problem_id': 'count'}).reset_index()\n\n# Plot bar chart\nplt.bar(grouped_df['staff_last_name'], grouped_df['problem_id'])\nplt.xlabel('Staff Last Name')\nplt.ylabel('Number of Problems')\nplt.title('Number of Problems Reported by Staff with Last Name \"Bosco\"')\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "What is the average access count of documents with the functional area \"Acknowledgement\" displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ndocuments = pd.read_sql(\"SELECT * FROM documents\", conn)\ndocument_functional_areas = pd.read_sql(\"SELECT * FROM document_functional_areas\", conn)\nfunctional_areas = pd.read_sql(\"SELECT * FROM functional_areas\", conn)\ndocuments.columns = documents.columns.str.lower()\ndocument_functional_areas.columns = document_functional_areas.columns.str.lower()\nfunctional_areas.columns = functional_areas.columns.str.lower()\n\n# Merge tables\nmerged_df = pd.merge(documents, document_functional_areas, on='document_code')\nmerged_df = pd.merge(merged_df, functional_areas, on='functional_area_code')\n\n# Filter data\nfiltered_df = merged_df[merged_df['functional_area_description'] == 'Acknowledgement']\n\n# Group by functional_area_description and calculate average access_count\ngrouped_df = filtered_df.groupby('functional_area_description').agg({'access_count': 'mean'}).reset_index()\n\n# Plot bar chart\nplt.bar(grouped_df['functional_area_description'], grouped_df['access_count'])\nplt.xlabel('Functional Area Description')\nplt.ylabel('Average Access Count')\nplt.title('Average Access Count by Functional Area Description')\nplt.show()"
  },
  {
    "db_id": "soccer_1",
    "question": ", could you order by the total number in asc ?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nPlayer_Attributes = pd.read_sql(\"SELECT * FROM Player_Attributes\", conn)\nPlayer_Attributes.columns = Player_Attributes.columns.str.lower()\n\n# Filter the dataframe based on the condition\nfiltered_df = Player_Attributes[Player_Attributes['overall_rating'] > 80]\n\n# Group the data by preferred_foot and count the number of occurrences\ngrouped_df = filtered_df.groupby('preferred_foot').size().reset_index(name='count')\n\n# Sort the data by count in ascending order\nsorted_df = grouped_df.sort_values('count')\n\n# Create a bar plot\nplt.bar(sorted_df['preferred_foot'], sorted_df['count'])\nplt.xlabel('Preferred Foot')\nplt.ylabel('Count')\nplt.title('Number of Players with Overall Rating > 80 by Preferred Foot')\nplt.show()"
  },
  {
    "db_id": "products_for_hire",
    "question": "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check, and count them by a line chart, and show X from high to low order.",
    "chart": "Line",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the payments table\npayments = pd.read_sql(\"SELECT * FROM payments\", conn)\n\n# Convert column names to lowercase\npayments.columns = payments.columns.str.lower()\n\n# Filter the payments table\nfiltered_payments = payments[(payments['amount_paid'] > 300) | (payments['payment_type_code'] == 'Check')]\n\n# Group by payment_date and count the occurrences\ngrouped_payments = filtered_payments.groupby('payment_date').size().reset_index(name='count')\n\n# Sort by payment_date in descending order\nsorted_payments = grouped_payments.sort_values('payment_date', ascending=False)\n\n# Plot the line chart\nplt.plot(sorted_payments['payment_date'], sorted_payments['count'])\nplt.xlabel('Payment Date')\nplt.ylabel('Count')\nplt.title('Number of Payments')\nplt.show()"
  },
  {
    "db_id": "restaurant_1",
    "question": "How much money did students spend at each restaurant, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nVisits_Restaurant = pd.read_sql(\"SELECT * FROM Visits_Restaurant\", conn)\nRestaurant = pd.read_sql(\"SELECT * FROM Restaurant\", conn)\nVisits_Restaurant.columns = Visits_Restaurant.columns.str.lower()\nRestaurant.columns = Restaurant.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Visits_Restaurant, Restaurant, on='resid')\n\n# Group by restaurant and calculate the sum of spent\ngrouped_df = merged_df.groupby('resname')['spent'].sum().reset_index()\n\n# Create a pie chart\nplt.pie(grouped_df['spent'], labels=grouped_df['resname'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Display the chart\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Compare how many events by different event details using a bar chart , and rank x-axis from low to high order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEVENTS = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\nEVENTS.columns = EVENTS.columns.str.lower()\n\n# Group by event_details and count the occurrences\nevent_counts = EVENTS.groupby('event_details').size().reset_index(name='count')\n\n# Sort the event_details in ascending order\nevent_counts = event_counts.sort_values('event_details')\n\n# Create a bar plot\nplt.bar(event_counts['event_details'], event_counts['count'])\nplt.xlabel('Event Details')\nplt.ylabel('Count')\nplt.title('Event Details Count')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "entertainment_awards",
    "question": "Show the total number from each type , and order names in asc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartwork = pd.read_sql(\"SELECT * FROM artwork\", conn)\nartwork.columns = artwork.columns.str.lower()\n\n# Grouping the artwork dataframe by type and counting the number of occurrences\nartwork_grouped = artwork.groupby('type').size().reset_index(name='count')\n\n# Sorting the dataframe by type in ascending order\nartwork_grouped = artwork_grouped.sort_values('type')\n\n# Creating a bar plot\nplt.bar(artwork_grouped['type'], artwork_grouped['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Artwork Count by Type')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "What is the distribution of shop IDs and carriers for each device in stock, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstock = pd.read_sql(\"SELECT * FROM stock\", conn)\ndevice = pd.read_sql(\"SELECT * FROM device\", conn)\nshop = pd.read_sql(\"SELECT * FROM shop\", conn)\nstock.columns = stock.columns.str.lower()\ndevice.columns = device.columns.str.lower()\nshop.columns = shop.columns.str.lower()\n\n# Merge tables\nmerged_df = pd.merge(stock, device, on='device_id')\nmerged_df = pd.merge(merged_df, shop, on='shop_id')\n\n# Count the number of occurrences for each carrier\ncarrier_counts = merged_df['carrier'].value_counts()\n\n# Plot pie chart\nplt.pie(carrier_counts, labels=carrier_counts.index, autopct='%1.1f%%')\nplt.title('Carrier Distribution')\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "What is the count of problems reported after the date of any problems reported by Rylan Homenick, grouped by the date of problem reported, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nproblems = pd.read_sql(\"SELECT * FROM problems\", conn)\nstaff = pd.read_sql(\"SELECT * FROM staff\", conn)\nproblems = pd.read_sql(\"SELECT * FROM problems\", conn)\nstaff = pd.read_sql(\"SELECT * FROM staff\", conn)\nproblems.columns = problems.columns.str.lower()\nstaff.columns = staff.columns.str.lower()\nproblems.columns = problems.columns.str.lower()\nstaff.columns = staff.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(problems, staff, left_on='reported_by_staff_id', right_on='staff_id')\n\n# Filter data\nmax_date = merged_df.loc[(merged_df['staff_first_name'] == 'Rylan') & (merged_df['staff_last_name'] == 'Homenick'), 'date_problem_reported'].max()\nfiltered_df = merged_df.loc[merged_df['date_problem_reported'] > max_date]\n\n# Group by date_problem_reported and count\ngrouped_df = filtered_df.groupby('date_problem_reported').size().reset_index(name='count')\n\n# Plot bar chart\nplt.bar(grouped_df['date_problem_reported'], grouped_df['count'])\nplt.xlabel('Date Problem Reported')\nplt.ylabel('Count')\nplt.title('Number of Problems Reported by Date')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "Compute the total the total number across nationality as a pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot.columns = pilot.columns.str.lower()\n\n# Group by nationality and count the number of pilots\nnationality_count = pilot.groupby('nationality').size().reset_index(name='count')\n\n# Plot pie chart\nplt.pie(nationality_count['count'], labels=nationality_count['nationality'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "Show me a bar chart displaying the count of injury accidents for each game season, sorted in descending order of the count.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\ninjury_accident = pd.read_sql(\"SELECT * FROM injury_accident\", conn)\ngame.columns = game.columns.str.lower()\ninjury_accident.columns = injury_accident.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(game, injury_accident, left_on='id', right_on='game_id')\n\n# Group by season and count the number of occurrences\ngrouped_df = merged_df.groupby('season').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['season'], sorted_df['count'])\nplt.xlabel('Season')\nplt.ylabel('Count')\nplt.title('Number of Injury Accidents by Season')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Show me the correlation about what are the ids of the trips that lasted the longest and how long did they last ?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\ntrip.columns = trip.columns.str.lower()\n\n# Assuming the table data is already loaded into a DataFrame called 'trip'\n# Selecting the required columns and sorting by duration in descending order\ntop_3_trips = trip[['id', 'duration']].sort_values('duration', ascending=False).head(3)\n\n# Creating a scatter plot\nplt.scatter(top_3_trips['id'], top_3_trips['duration'])\n\n# Adding labels and title\nplt.xlabel('ID')\nplt.ylabel('Duration')\nplt.title('Top 3 Trips by Duration')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show me the comparison of the total number of all ships' nationalities with a bar graph , and display from low to high by the how many nationality .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Group by nationality and count the occurrences\nnationality_count = ship.groupby('nationality').size().reset_index(name='count')\n\n# Sort by count in ascending order\nnationality_count = nationality_count.sort_values('count')\n\n# Plot the bar chart\nplt.bar(nationality_count['nationality'], nationality_count['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Ships by Nationality')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "What is the count of occurrences for each nurse's name in the on-call table, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nnurse = pd.read_sql(\"SELECT * FROM nurse\", conn)\non_call = pd.read_sql(\"SELECT * FROM on_call\", conn)\nnurse.columns = nurse.columns.str.lower()\non_call.columns = on_call.columns.str.lower()\n\n# Merge nurse and on_call tables\nmerged_df = pd.merge(nurse, on_call, left_on='employeeid', right_on='nurse')\n\n# Group by name and count\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Plot bar chart\nplt.bar(grouped_df['name'], grouped_df['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Number of On Call Assignments by Nurse')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "What is the average age of members in the club \"Hopkins Student Enterprises\" displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nstudent = pd.read_sql(\"SELECT * FROM student\", conn)\nclub.columns = club.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\nstudent.columns = student.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(club, member_of_club, on='clubid')\nmerged_df = pd.merge(merged_df, student, left_on='stuid', right_on='stuid')\n\n# Filter by clubname\nfiltered_df = merged_df[merged_df['clubname'] == 'Hopkins Student Enterprises']\n\n# Group by clubname and calculate average age\ngrouped_df = filtered_df.groupby('clubname').agg({'age': 'mean'}).reset_index()\n\n# Plot bar chart\nplt.bar(grouped_df['clubname'], grouped_df['age'])\nplt.xlabel('Club Name')\nplt.ylabel('Average Age')\nplt.title('Average Age of Members in Hopkins Student Enterprises')\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "Show the number of games for each away team in a bar chart , and I want to sort by the the number of away team from low to high .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\ngame.columns = game.columns.str.lower()\n\n# Group by away_team and count the occurrences\naway_team_counts = game.groupby('away_team').size().reset_index(name='count')\n\n# Sort the counts in ascending order\naway_team_counts = away_team_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(away_team_counts['away_team'], away_team_counts['count'])\nplt.xlabel('Away Team')\nplt.ylabel('Count')\nplt.title('Number of Games by Away Team')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "company_1",
    "question": "Find the number of employees of each gender whose salary is lower than 50000. Show a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the employee table\nemployee_df = pd.read_sql(\"SELECT * FROM employee\", conn)\n\n# Convert column names to lowercase\nemployee_df.columns = employee_df.columns.str.lower()\n\n# Filter the data based on salary condition\nfiltered_df = employee_df[employee_df['salary'] < 50000]\n\n# Group the data by sex and count the number of occurrences\ngrouped_df = filtered_df.groupby('sex').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['sex'], autopct='%1.1f%%')\nplt.title('Distribution of Employees by Sex (Salary < 50000)')\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "How many items in each participant type code ? Show me a pie chart !",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nParticipants = pd.read_sql(\"SELECT * FROM Participants\", conn)\nParticipants.columns = Participants.columns.str.lower()\n\n# Grouping the data by participant_type_code and counting the occurrences\ngrouped_data = Participants.groupby('participant_type_code').size()\n\n# Creating a pie chart\nplt.pie(grouped_data, labels=grouped_data.index, autopct='%1.1f%%')\nplt.axis('equal')\n\n# Displaying the chart\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "What are the ids and durations of the trips with the top 3 durations . Visualize by scatter chart .",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\ntrip.columns = trip.columns.str.lower()\n\n# Assuming the table data is already loaded into a DataFrame called 'trip'\n# Selecting the required columns and sorting by duration in descending order\ntop_3_trips = trip[['id', 'duration']].sort_values('duration', ascending=False).head(3)\n\n# Creating a scatter plot\nplt.scatter(top_3_trips['id'], top_3_trips['duration'])\n\n# Adding labels and title\nplt.xlabel('ID')\nplt.ylabel('Duration')\nplt.title('Top 3 Trips by Duration')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Compare the total number of each fate with a bar chart, and display Y-axis from low to high order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the mission table\nmission_df = pd.read_sql(\"SELECT * FROM mission\", conn)\n\n# Convert column names to lowercase\nmission_df.columns = mission_df.columns.str.lower()\n\n# Perform the SQL query\nresult = mission_df.groupby('fate').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result['fate'], result['count'])\nplt.xlabel('Fate')\nplt.ylabel('Count')\nplt.title('Count of Fate in Mission Table')\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "What is the count of physicians in each position who prescribe a medication of brand X over time?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nphysician = pd.read_sql(\"SELECT * FROM physician\", conn)\nprescribes = pd.read_sql(\"SELECT * FROM prescribes\", conn)\nmedication = pd.read_sql(\"SELECT * FROM medication\", conn)\n\nphysician.columns = physician.columns.str.lower()\nprescribes.columns = prescribes.columns.str.lower()\nmedication.columns = medication.columns.str.lower()\n\n# Join tables\ndf = pd.merge(physician, prescribes, left_on='employeeid', right_on='physician')\ndf = pd.merge(df, medication, left_on='medication', right_on='code')\n\n# Filter by brand\ndf = df[df['brand'] == 'X']\n\n# Group by position and count\ndf_grouped = df.groupby('position').size().reset_index(name='count')\n\n# Plot line chart\nplt.plot(df_grouped['position'], df_grouped['count'])\nplt.xlabel('Position')\nplt.ylabel('Count')\nplt.title('Count of Prescriptions by Position')\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "Can you create a bar chart displaying the count and id of each product in all the orders?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\norder_items = pd.read_sql(\"SELECT * FROM order_items\", conn)\nproducts = pd.read_sql(\"SELECT * FROM products\", conn)\norders.columns = orders.columns.str.lower()\norder_items.columns = order_items.columns.str.lower()\nproducts.columns = products.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(orders, order_items, on='order_id')\nmerged_df = pd.merge(merged_df, products, on='product_id')\n\n# Group by product_id and count\ngrouped_df = merged_df.groupby('product_id').size().reset_index(name='count')\n\n# Sort by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plot bar chart\nplt.bar(sorted_df['product_id'], sorted_df['count'])\nplt.xlabel('Product ID')\nplt.ylabel('Count')\nplt.title('Number of Orders per Product')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "A bar chart about what is the name of every city that has at least 15 stations and how many stations does it have ? , and display by the names from high to low .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstation.columns = station.columns.str.lower()\n\n# Group by city and count the number of rows\ncity_counts = station.groupby('city').size().reset_index(name='count')\n\n# Sort the cities in descending order\ncity_counts = city_counts.sort_values('city', ascending=False)\n\n# Create a bar plot\nplt.bar(city_counts['city'], city_counts['count'])\nplt.xlabel('City')\nplt.ylabel('Count')\nplt.title('Number of Stations by City')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sakila_1",
    "question": "What is the address and email of the customer with the first name Linda? Show the details in a scatter plot.",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomer = pd.read_sql(\"SELECT * FROM customer\", conn)\naddress = pd.read_sql(\"SELECT * FROM address\", conn)\ncustomer.columns = customer.columns.str.lower()\naddress.columns = address.columns.str.lower()\n\n# Merge customer and address tables\nmerged_df = pd.merge(customer, address, on='address_id')\n\n# Create scatter plot\nplt.scatter(merged_df['address'], merged_df['email'])\nplt.xlabel('Address')\nplt.ylabel('Email')\nplt.title('Scatter Plot of Address and Email')\nplt.show()"
  },
  {
    "db_id": "small_bank_1",
    "question": "What are the checking balance and saving balance for accounts where the checking balance exceeds the saving balance? Visualize the data using a scatter plot.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\nsavings = pd.read_sql(\"SELECT * FROM savings\", conn)\naccounts.columns = accounts.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\nsavings.columns = savings.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(accounts, checking, on='custid')\nmerged_df = pd.merge(merged_df, savings, on='custid')\n\n# Filter the data\nfiltered_df = merged_df[merged_df['balance_x'] > merged_df['balance_y']]\n\n# Create scatter plot\nplt.scatter(filtered_df['balance_x'], filtered_df['balance_y'])\nplt.xlabel('Checking Balance')\nplt.ylabel('Savings Balance')\nplt.title('Scatter Plot of Checking and Savings Balances')\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "Show the reign and days held of wrestlers . Visualize by scatter chart .",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nwrestler = pd.read_sql(\"SELECT * FROM wrestler\", conn)\nwrestler.columns = wrestler.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called wrestler\n\n# Selecting the required columns\nscatter_data = wrestler[['reign', 'days_held']]\n\n# Creating the scatter plot\nplt.scatter(scatter_data['reign'], scatter_data['days_held'])\n\n# Adding labels and title\nplt.xlabel('Reign')\nplt.ylabel('Days Held')\nplt.title('Scatter Plot of Reign vs Days Held')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Bar chart x axis name y axis age , and I want to order from high to low by the bars .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Assuming the data is already loaded into the 'artist' dataframe\n\n# Sort the dataframe by name in descending order\nsorted_artist = artist.sort_values(by='name', ascending=False)\n\n# Extract the name and age columns\nname = sorted_artist['name']\nage = sorted_artist['age']\n\n# Create a bar plot\nplt.bar(name, age)\n\n# Add labels and title\nplt.xlabel('Name')\nplt.ylabel('Age')\nplt.title('Artist Age by Name')\n\n# Rotate x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Show all payment method codes and the number of orders for each code Show bar chart , display X from high to low order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nINVOICES = pd.read_sql(\"SELECT * FROM INVOICES\", conn)\nINVOICES.columns = INVOICES.columns.str.lower()\n\n# Grouping the data by payment_method_code and counting the number of occurrences\npayment_counts = INVOICES.groupby('payment_method_code').size().reset_index(name='count')\n\n# Sorting the data by payment_method_code in descending order\npayment_counts = payment_counts.sort_values('payment_method_code', ascending=False)\n\n# Creating the bar plot\nplt.bar(payment_counts['payment_method_code'], payment_counts['count'])\nplt.xlabel('Payment Method Code')\nplt.ylabel('Count')\nplt.title('Number of Invoices by Payment Method Code')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "A bar chart for what are the number of the descriptions of the service types with product price above 100?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Ref_Service_Types table\nref_service_types = pd.read_sql(\"SELECT * FROM Ref_Service_Types\", conn)\nref_service_types.columns = map(str.lower, ref_service_types.columns)\n\n# Read the Services table\nservices = pd.read_sql(\"SELECT * FROM Services\", conn)\nservices.columns = map(str.lower, services.columns)\n\n# Merge the two tables on Service_Type_Code\nmerged_data = pd.merge(ref_service_types, services, on=\"service_type_code\")\n\n# Filter the merged data based on Product_Price > 100\nfiltered_data = merged_data[merged_data[\"product_price\"] > 100]\n\n# Group by Service_Type_Description and count the occurrences\ngrouped_data = filtered_data.groupby(\"service_type_description\").size().reset_index(name=\"count\")\n\n# Plot the bar chart\nplt.bar(grouped_data[\"service_type_description\"], grouped_data[\"count\"])\nplt.xlabel(\"Service Type Description\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of Service Types with Product Price > 100\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show me the total number by citizenship in a bar",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Grouping the singer dataframe by citizenship and counting the number of occurrences\ncitizenship_count = singer.groupby('citizenship').size().reset_index(name='count')\n\n# Creating a bar plot\nplt.bar(citizenship_count['citizenship'], citizenship_count['count'])\nplt.xlabel('Citizenship')\nplt.ylabel('Count')\nplt.title('Number of Singers by Citizenship')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show each premise type and the number of premises in that type with a bar chart , display from low to high by the total number .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\npremises = pd.read_sql(\"SELECT * FROM premises\", conn)\npremises.columns = premises.columns.str.lower()\n\n# Group by premises_type and count the number of occurrences\npremises_count = premises.groupby('premises_type').size().reset_index(name='count')\n\n# Sort the dataframe by count in ascending order\npremises_count = premises_count.sort_values('count')\n\n# Create a bar plot\nplt.bar(premises_count['premises_type'], premises_count['count'])\nplt.xlabel('Premises Type')\nplt.ylabel('Count')\nplt.title('Number of Premises by Type')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "Which technicians are assigned to machines and what are their quality ranks, displayed in a bar chart sorted in ascending order of quality rank?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nrepair_assignment = pd.read_sql(\"SELECT * FROM repair_assignment\", conn)\nmachine = pd.read_sql(\"SELECT * FROM machine\", conn)\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\nrepair_assignment.columns = repair_assignment.columns.str.lower()\nmachine.columns = machine.columns.str.lower()\ntechnician.columns = technician.columns.str.lower()\n\n# Perform the join operation\nresult = pd.merge(pd.merge(repair_assignment, machine, on='machine_id'), technician, on='technician_id')\n\n# Sort the result by quality_rank\nresult = result.sort_values('quality_rank')\n\n# Create the bar plot\nplt.bar(result['name'], result['quality_rank'])\nplt.xlabel('Technician')\nplt.ylabel('Quality Rank')\nplt.title('Technician Quality Rank')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "company_1",
    "question": "Find the number of employees of each gender whose salary is lower than 50000 . Visualize by bar chart .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nemployee = pd.read_sql(\"SELECT * FROM employee\", conn)\nemployee.columns = employee.columns.str.lower()\n\n# Filter the dataframe based on the condition\nfiltered_df = employee[employee['salary'] < 50000]\n\n# Group the filtered dataframe by 'sex' and count the occurrences\ngrouped_df = filtered_df.groupby('sex').size().reset_index(name='count')\n\n# Create a bar plot\nplt.bar(grouped_df['sex'], grouped_df['count'])\nplt.xlabel('Sex')\nplt.ylabel('Count')\nplt.title('Number of Employees with Salary < 50000 by Sex')\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "A bar chart for listing the number of the names of patients who have made appointments, I want to sort by the y axis from high to low.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the appointment table\nappointment = pd.read_sql(\"SELECT * FROM appointment\", conn)\n\n# Read the patient table\npatient = pd.read_sql(\"SELECT * FROM patient\", conn)\n\n# Convert column names to lowercase\nappointment.columns = appointment.columns.str.lower()\npatient.columns = patient.columns.str.lower()\n\n# merge the appointment and patient tables on the patient column\nmerged_data = pd.merge(appointment, patient, left_on='patient', right_on='ssn')\n\n# group by name and count the occurrences\ngrouped_data = merged_data.groupby('name').size().reset_index(name='count')\n\n# sort the data by count in descending order\nsorted_data = grouped_data.sort_values(by='count', ascending=False)\n\n# plot the bar chart\nplt.bar(sorted_data['name'], sorted_data['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Number of Appointments by Name')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "hospital_1",
    "question": "What are the number of names of patients who made an appointment?, could you display bars in ascending order please?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the appointment table\nappointment = pd.read_sql(\"SELECT * FROM appointment\", conn)\n\n# Read the patient table\npatient = pd.read_sql(\"SELECT * FROM patient\", conn)\n\n# Convert column names to lowercase\nappointment.columns = appointment.columns.str.lower()\npatient.columns = patient.columns.str.lower()\n\n# merge the appointment and patient tables on the 'patient' column\nmerged_data = pd.merge(appointment, patient, left_on='patient', right_on='ssn')\n\n# group by 'name' and count the occurrences\ngrouped_data = merged_data.groupby('name').size().reset_index(name='count')\n\n# sort the data by 'name' in ascending order\nsorted_data = grouped_data.sort_values('name')\n\n# plot the bar chart\nplt.bar(sorted_data['name'], sorted_data['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Number of Appointments by Name')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "bike_1",
    "question": "Which station holds the record for the longest minimum trip duration that ended at the station, represented by a line chart?",
    "chart": "Line",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\nstation.columns = station.columns.str.lower()\ntrip.columns = trip.columns.str.lower()\n\n# Joining the station and trip tables\nmerged_df = pd.merge(station, trip, left_on='id', right_on='end_station_id')\n\n# Grouping by end_station_id and finding the minimum duration\ngrouped_df = merged_df.groupby('end_station_id').agg({'name': 'first', 'duration': 'min'}).reset_index()\n\n# Sorting by minimum duration in descending order\nsorted_df = grouped_df.sort_values('duration', ascending=False)\n\n# Plotting the line chart\nplt.plot(sorted_df['name'], sorted_df['duration'])\nplt.xlabel('End Station')\nplt.ylabel('Minimum Duration')\nplt.title('Minimum Duration by End Station')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show me the total number by citizenship in a bar , could you list by the Y-axis in ascending please ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Group by citizenship and count the number of singers\nsinger_count = singer.groupby('citizenship').size().reset_index(name='count')\n\n# Sort the dataframe by count in ascending order\nsinger_count = singer_count.sort_values('count')\n\n# Create a bar plot\nplt.bar(singer_count['citizenship'], singer_count['count'])\nplt.xlabel('Citizenship')\nplt.ylabel('Count')\nplt.title('Number of Singers by Citizenship')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Return a bar chart showing the total number of each ship type .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Group by 'type' and count the occurrences\nship_count = ship.groupby('type').size().reset_index(name='count')\n\n# Create bar plot\nplt.bar(ship_count['type'], ship_count['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Ship Type Count')\nplt.show()"
  },
  {
    "db_id": "aircraft",
    "question": "Which aircraft have achieved multiple victories? Show the results in a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naircraft = pd.read_sql(\"SELECT * FROM aircraft\", conn)\nMATCH = pd.read_sql(\"SELECT * FROM MATCH\", conn)\naircraft.columns = aircraft.columns.str.lower()\nMATCH.columns = MATCH.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(aircraft, MATCH, left_on='aircraft_id', right_on='winning_aircraft')\n\n# Grouping and counting\ngrouped_df = merged_df.groupby('aircraft').size().reset_index(name='count')\n\n# Filtering for count >= 2\nfiltered_df = grouped_df[grouped_df['count'] >= 2]\n\n# Plotting the bar chart\nplt.bar(filtered_df['aircraft'], filtered_df['count'])\nplt.xlabel('Aircraft')\nplt.ylabel('Count')\nplt.title('Number of Wins per Aircraft (Count >= 2)')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "perpetrator",
    "question": "Bar chart x axis country y axis the total number, and list by the total number from low to high.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the perpetrator table\nperpetrator_df = pd.read_sql(\"SELECT * FROM perpetrator\", conn)\n\n# Convert column names to lowercase\nperpetrator_df.columns = perpetrator_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = perpetrator_df.groupby('country').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result_df['country'], result_df['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Perpetrators by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "question": "How many employees does each role have? Plot a bar chart listing role id and number of employees, rank by the x-axis in asc.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the ROLES table\nroles_df = pd.read_sql(\"SELECT * FROM ROLES\", conn)\nroles_df.columns = map(str.lower, roles_df.columns)\n\n# Read the Employees table\nemployees_df = pd.read_sql(\"SELECT * FROM Employees\", conn)\nemployees_df.columns = map(str.lower, employees_df.columns)\n\n# Merge the ROLES and Employees tables on role_code\nmerged_df = pd.merge(roles_df, employees_df, on='role_code')\n\n# Group by role_code and count the number of occurrences\ngrouped_df = merged_df.groupby('role_code').size().reset_index(name='count')\n\n# Sort the dataframe by role_code in ascending order\nsorted_df = grouped_df.sort_values('role_code')\n\n# Plot the bar chart\nplt.bar(sorted_df['role_code'], sorted_df['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Employees by Role Code')\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "What is the scatter plot of the count of injuries for 'Foot injury' and 'Knee problem' in the game?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\nstadium = pd.read_sql(\"SELECT * FROM stadium\", conn)\ninjury_accident = pd.read_sql(\"SELECT * FROM injury_accident\", conn)\ngame.columns = game.columns.str.lower()\nstadium.columns = stadium.columns.str.lower()\ninjury_accident.columns = injury_accident.columns.str.lower()\n\n# Merge tables\nmerged_df = pd.merge(game, stadium, left_on='stadium_id', right_on='id')\nmerged_df = pd.merge(merged_df, injury_accident, left_on='id_x', right_on='game_id')\n\n# Filter data\nfiltered_df = merged_df[(merged_df['injury'] == 'Foot injury') | (merged_df['injury'] == 'Knee problem')]\n\n# Group by injury and count\ngrouped_df = filtered_df.groupby('injury').size().reset_index(name='count')\n\n# Scatter plot\nplt.scatter(grouped_df['injury'], grouped_df['count'])\nplt.xlabel('Injury')\nplt.ylabel('Count')\nplt.title('Injury Count')\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Create a bar chart showing the number of author across author , and show from high to low by the x axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsubmission = pd.read_sql(\"SELECT * FROM submission\", conn)\nsubmission.columns = submission.columns.str.lower()\n\n# Group by author and count the number of submissions\nauthor_counts = submission.groupby('author').size().reset_index(name='count')\n\n# Sort the author counts in descending order\nauthor_counts = author_counts.sort_values('author', ascending=False)\n\n# Create a bar plot\nplt.bar(author_counts['author'], author_counts['count'])\nplt.xlabel('Author')\nplt.ylabel('Count')\nplt.title('Number of Submissions by Author')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "What are all the calendar dates and day Numbers Show the trend , and rank in descending by the x axis .",
    "chart": "Line",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nRef_calendar = pd.read_sql(\"SELECT * FROM Ref_calendar\", conn)\nRef_calendar.columns = Ref_calendar.columns.str.lower()\n\n# Assuming the table data is already loaded into a DataFrame called Ref_calendar\n\n# Sort the DataFrame by calendar_date in descending order\nRef_calendar_sorted = Ref_calendar.sort_values(by='calendar_date', ascending=False)\n\n# Extract the calendar_date and day_number columns\ncalendar_date = Ref_calendar_sorted['calendar_date']\nday_number = Ref_calendar_sorted['day_number']\n\n# Plot the line chart\nplt.plot(calendar_date, day_number)\nplt.xlabel('Calendar Date')\nplt.ylabel('Day Number')\nplt.title('Line Chart of Day Number by Calendar Date')\nplt.show()"
  },
  {
    "db_id": "twitter_1",
    "question": "Find the name and partition id for users who tweeted less than twice. Show a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the user_profiles table\nuser_profiles = pd.read_sql(\"SELECT * FROM user_profiles\", conn)\nuser_profiles.columns = map(str.lower, user_profiles.columns)\n\n# Read the tweets table\ntweets = pd.read_sql(\"SELECT * FROM tweets\", conn)\ntweets.columns = map(str.lower, tweets.columns)\n\n# Merge the user_profiles and tweets tables on uid column\nmerged_data = pd.merge(user_profiles, tweets, on='uid')\n\n# Group by name and partitionid columns and count the occurrences\ngrouped_data = merged_data.groupby(['name', 'partitionid']).size().reset_index(name='count')\n\n# Create a pie chart\nplt.pie(grouped_data['count'], labels=grouped_data['name'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Show the pie chart\nplt.show()"
  },
  {
    "db_id": "sakila_1",
    "question": "What is the distribution of genre names for the film HUNGER ROOF, and how many films belong to each genre? Show me a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncategory = pd.read_sql(\"SELECT * FROM category\", conn)\nfilm_category = pd.read_sql(\"SELECT * FROM film_category\", conn)\nfilm = pd.read_sql(\"SELECT * FROM film\", conn)\ncategory.columns = category.columns.str.lower()\nfilm_category.columns = film_category.columns.str.lower()\nfilm.columns = film.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(category, film_category, on='category_id')\nmerged_df = pd.merge(merged_df, film, on='film_id')\n\n# Filter data\nfiltered_df = merged_df[merged_df['title'] == 'Hunger Roof']\n\n# Group by category name and count\ngrouped_df = filtered_df.groupby('name').size().reset_index(name='count')\n\n# Plot bar chart\nplt.bar(grouped_df['name'], grouped_df['count'])\nplt.xlabel('Category')\nplt.ylabel('Count')\nplt.title('Number of Films in Each Category for \"Hunger Roof\"')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "Show different teams of technicians and the number of technicians in each team with a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the technician table\ntechnician_df = pd.read_sql(\"SELECT * FROM technician\", conn)\n\n# Convert column names to lowercase\ntechnician_df.columns = technician_df.columns.str.lower()\n\n# Perform the SQL query\nteam_counts = technician_df.groupby('team').size().reset_index(name='count')\n\n# Generate the bar chart\nplt.bar(team_counts['team'], team_counts['count'])\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Technician Count by Team')\nplt.show()"
  },
  {
    "db_id": "e_government",
    "question": "How many parties are there for each party form, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nparties = pd.read_sql(\"SELECT * FROM parties\", conn)\nparty_forms = pd.read_sql(\"SELECT * FROM party_forms\", conn)\nparties.columns = parties.columns.str.lower()\nparty_forms.columns = party_forms.columns.str.lower()\n\n# Merge parties and party_forms dataframes\nmerged_df = pd.merge(parties, party_forms, on='party_id')\n\n# Group by form_id and count the number of parties\ngrouped_df = merged_df.groupby('form_id').size().reset_index(name='num_parties')\n\n# Plot pie chart\nplt.pie(grouped_df['num_parties'], labels=grouped_df['form_id'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "what are the names and id of courses having at most 2 sections?, and I want to rank in desc by the course_name.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Courses table\ncourses = pd.read_sql(\"SELECT * FROM Courses\", conn)\ncourses.columns = courses.columns.str.lower()\n\n# Read the Sections table\nsections = pd.read_sql(\"SELECT * FROM Sections\", conn)\nsections.columns = sections.columns.str.lower()\n\n# Merge the Courses and Sections tables on course_id\nmerged_data = pd.merge(courses, sections, on=\"course_id\")\n\n# Sort the merged data by course_name in descending order\nsorted_data = merged_data.sort_values(by=\"course_name\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"course_name\"], sorted_data[\"course_id\"])\nplt.xlabel(\"Course Name\")\nplt.ylabel(\"Course ID\")\nplt.title(\"Courses and their IDs\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show how many customer addresses in each address type code with a bar chart, show by the x axis in descending please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the customer_addresses table\ncustomer_addresses = pd.read_sql(\"SELECT * FROM customer_addresses\", conn)\n\n# Read the premises table\npremises = pd.read_sql(\"SELECT * FROM premises\", conn)\n\n# Convert column names to lowercase\ncustomer_addresses.columns = customer_addresses.columns.str.lower()\npremises.columns = premises.columns.str.lower()\n\n# merge the customer_addresses and premises tables on premise_id\nmerged_data = pd.merge(customer_addresses, premises, on=\"premise_id\")\n\n# group by address_type_code and count the occurrences\ngrouped_data = merged_data.groupby(\"address_type_code\").size().reset_index(name=\"count\")\n\n# sort the data by address_type_code in descending order\nsorted_data = grouped_data.sort_values(\"address_type_code\", ascending=False)\n\n# plot the bar chart\nplt.bar(sorted_data[\"address_type_code\"], sorted_data[\"count\"])\nplt.xlabel(\"Address Type Code\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of Address Types\")\nplt.show()\n"
  },
  {
    "db_id": "soccer_1",
    "question": ", list X-axis in ascending order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read data from the Player_Attributes table\nplayer_attributes = pd.read_sql(\"SELECT * FROM Player_Attributes\", conn)\n\n# Convert column names to lowercase\nplayer_attributes.columns = player_attributes.columns.str.lower()\n\n# Filter data where overall_rating > 80\nfiltered_data = player_attributes[player_attributes['overall_rating'] > 80]\n\n# Group data by preferred_foot and count the number of records\ngrouped_data = filtered_data.groupby('preferred_foot').size().reset_index(name='count')\n\n# Sort data by preferred_foot in ascending order\nsorted_data = grouped_data.sort_values('preferred_foot')\n\n# Generate bar plot\nplt.bar(sorted_data['preferred_foot'], sorted_data['count'])\nplt.xlabel('Preferred Foot')\nplt.ylabel('Count')\nplt.title('Number of Players with Overall Rating > 80 by Preferred Foot')\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "A bar chart for listing the number of the names of patients who have made appointments.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the appointment table\nappointment = pd.read_sql(\"SELECT * FROM appointment\", conn)\n\n# Read the patient table\npatient = pd.read_sql(\"SELECT * FROM patient\", conn)\n\n# Convert column names to lowercase\nappointment.columns = appointment.columns.str.lower()\npatient.columns = patient.columns.str.lower()\n\n# merge the appointment and patient tables on the patient column\nmerged_data = pd.merge(appointment, patient, left_on='patient', right_on='ssn')\n\n# group by name and count the occurrences\ngrouped_data = merged_data.groupby('name').size().reset_index(name='count')\n\n# plot the bar chart\nplt.bar(grouped_data['name'], grouped_data['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Number of Appointments by Name')\nplt.show()\n"
  },
  {
    "db_id": "driving_school",
    "question": "Create a pie chart illustrating the distribution of customers in each city.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nCustomers = pd.read_sql(\"SELECT * FROM Customers\", conn)\nAddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\nCustomers.columns = Customers.columns.str.lower()\nAddresses.columns = Addresses.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Customers, Addresses, left_on='customer_address_id', right_on='address_id')\n\n# Group by city and count the number of customers in each city\ncity_counts = merged_df.groupby('city').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(city_counts['count'], labels=city_counts['city'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Show the number of venue from each venue , rank by the X in asc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nworkshop = pd.read_sql(\"SELECT * FROM workshop\", conn)\nworkshop.columns = workshop.columns.str.lower()\n\n# Grouping the data by venue and counting the occurrences\nvenue_counts = workshop.groupby('venue').size().reset_index(name='count')\n\n# Sorting the data by venue in ascending order\nvenue_counts = venue_counts.sort_values('venue')\n\n# Creating the bar plot\nplt.bar(venue_counts['venue'], venue_counts['count'])\nplt.xlabel('Venue')\nplt.ylabel('Count')\nplt.title('Workshop Venues')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Can you create a bar chart displaying the count of drama workshop groups for each state or county?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nAddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\nDrama_Workshop_Groups = pd.read_sql(\"SELECT * FROM Drama_Workshop_Groups\", conn)\nAddresses.columns = Addresses.columns.str.lower()\nDrama_Workshop_Groups.columns = Drama_Workshop_Groups.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Addresses, Drama_Workshop_Groups, on='address_id')\n\n# Group by state_county and count the number of occurrences\ngrouped_df = merged_df.groupby('state_county').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['state_county'], grouped_df['count'])\nplt.xlabel('State County')\nplt.ylabel('Count')\nplt.title('Number of Drama Workshop Groups by State County')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "What is the count of problems reported after 1986-11-13 for each product? Show a bar chart with the product id on the x-axis, ordered in descending order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nproblems = pd.read_sql(\"SELECT * FROM problems\", conn)\nproduct = pd.read_sql(\"SELECT * FROM product\", conn)\nproblems.columns = problems.columns.str.lower()\nproduct.columns = product.columns.str.lower()\n\n# Merge problems and product tables\nmerged_df = pd.merge(problems, product, on='product_id')\n\n# Filter data based on date_problem_reported\nfiltered_df = merged_df[merged_df['date_problem_reported'] > '1986-11-13']\n\n# Group by product_id and count the number of occurrences\ngrouped_df = filtered_df.groupby('product_id').size().reset_index(name='count')\n\n# Sort by product_id in descending order\nsorted_df = grouped_df.sort_values('product_id', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['product_id'], sorted_df['count'])\nplt.xlabel('Product ID')\nplt.ylabel('Count')\nplt.title('Number of Problems Reported by Product')\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "For each team , how many technicians are there , could you sort X in asc order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\ntechnician.columns = technician.columns.str.lower()\n\n# Grouping the data by team and counting the number of technicians in each team\nteam_counts = technician.groupby('team').size().reset_index(name='count')\n\n# Sorting the data by team in ascending order\nteam_counts = team_counts.sort_values('team')\n\n# Creating a bar plot\nplt.bar(team_counts['team'], team_counts['count'])\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Number of Technicians in Each Team')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show me the comparison of the total number of all ships' nationalities with a bar graph , and order Nationality in asc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Grouping the data by nationality and counting the occurrences\nnationality_count = ship.groupby('nationality').size().reset_index(name='count')\n\n# Sorting the data by nationality in ascending order\nnationality_count = nationality_count.sort_values('nationality')\n\n# Creating the bar plot\nplt.bar(nationality_count['nationality'], nationality_count['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Ships by Nationality')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "gymnast",
    "question": "What are the hometowns of gymnasts and the corresponding number of gymnasts, and rank y-axis in ascending order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the gymnast and people tables\ngymnast = pd.read_sql(\"SELECT * FROM gymnast\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\n\n# Convert column names to lowercase\ngymnast.columns = map(str.lower, gymnast.columns)\npeople.columns = map(str.lower, people.columns)\n\n# Merge the tables on Gymnast_ID and People_ID\nmerged_data = pd.merge(gymnast, people, left_on=\"gymnast_id\", right_on=\"people_id\")\n\n# Perform the SQL query\nresult = merged_data.groupby(\"hometown\").size().reset_index(name=\"count\").sort_values(\"count\")\n\n# Generate the bar chart\nplt.bar(result[\"hometown\"], result[\"count\"])\nplt.xlabel(\"Hometown\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Gymnasts by Hometown\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "Return a bar on what are the different role codes for users, and how many users have each?, and show y-axis from high to low order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the users table\nusers = pd.read_sql(\"SELECT * FROM users\", conn)\n\n# Convert column names to lowercase\nusers.columns = users.columns.str.lower()\n\n# Perform the SQL query\nresult = users.groupby('role_code').size().reset_index(name='count').sort_values(by='count', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['role_code'], result['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Users by Role Code')\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "How many clubs is each age group of students a member of, represented by a scatter chart?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstudent = pd.read_sql(\"SELECT * FROM student\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nstudent.columns = student.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(student, member_of_club, on='stuid')\n\n# Group by age and count the number of clubs\ngrouped_df = merged_df.groupby('age').size().reset_index(name='num_of_clubs')\n\n# Create scatter plot\nplt.scatter(grouped_df['age'], grouped_df['num_of_clubs'])\nplt.xlabel('Age')\nplt.ylabel('Number of Clubs')\nplt.title('Number of Clubs by Age')\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Tell me how many songs each singer has, display how many name from low to high order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the singer and song tables\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsong = pd.read_sql(\"SELECT * FROM song\", conn)\n\n# Convert column names to lowercase\nsinger.columns = singer.columns.str.lower()\nsong.columns = song.columns.str.lower()\n\n# Merge the singer and song tables on Singer_ID\nmerged = pd.merge(singer, song, on=\"singer_id\")\n\n# Group by Name and count the occurrences\ngrouped = merged.groupby(\"name\").size().reset_index(name=\"count\")\n\n# Sort by count in ascending order\nsorted_grouped = grouped.sort_values(\"count\", ascending=True)\n\n# Plot the bar chart\nplt.bar(sorted_grouped[\"name\"], sorted_grouped[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Songs by Singer\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "Show different teams of technicians and the number of technicians in each team with a bar chart , and order Y in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\ntechnician.columns = technician.columns.str.lower()\n\n# Group by 'team' and count the number of occurrences\nteam_counts = technician.groupby('team').size()\n\n# Sort the counts in ascending order\nteam_counts = team_counts.sort_values()\n\n# Create a bar plot\nplt.bar(team_counts.index, team_counts.values)\n\n# Set the labels and title\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Number of Technicians per Team')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "Show me a line chart of the document names and their corresponding counts, sorted in ascending order, for documents that have images in the database.",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ndocuments = pd.read_sql(\"SELECT * FROM documents\", conn)\ndocument_sections = pd.read_sql(\"SELECT * FROM document_sections\", conn)\ndocument_sections_images = pd.read_sql(\"SELECT * FROM document_sections_images\", conn)\ndocuments.columns = documents.columns.str.lower()\ndocument_sections.columns = document_sections.columns.str.lower()\ndocument_sections_images.columns = document_sections_images.columns.str.lower()\n\n# Merge tables\nmerged_df = pd.merge(documents, document_sections, on='document_code')\nmerged_df = pd.merge(merged_df, document_sections_images, on='section_id')\n\n# Group by document_name and count\ngrouped_df = merged_df.groupby('document_name').size().reset_index(name='count')\n\n# Sort by document_name\nsorted_df = grouped_df.sort_values('document_name')\n\n# Plot line chart\nplt.plot(sorted_df['document_name'], sorted_df['count'])\nplt.xlabel('Document Name')\nplt.ylabel('Count')\nplt.title('Count of Sections Images per Document')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "What are the scores and results of the accepted submissions, visualized in a scatter plot?",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nacceptance = pd.read_sql(\"SELECT * FROM acceptance\", conn)\nsubmission = pd.read_sql(\"SELECT * FROM submission\", conn)\nacceptance.columns = acceptance.columns.str.lower()\nsubmission.columns = submission.columns.str.lower()\n\n# Merge acceptance and submission dataframes on submission_id\nmerged_df = pd.merge(acceptance, submission, on='submission_id')\n\n# Create scatter plot\nplt.scatter(merged_df['scores'], merged_df['result'])\n\n# Set labels and title\nplt.xlabel('Scores')\nplt.ylabel('Result')\nplt.title('Scatter Plot of Scores vs Result')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "What is the scatter plot of the total price of orders and their corresponding order dates for orders with a product price above 1000?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nCustomer_Orders = pd.read_sql(\"SELECT * FROM Customer_Orders\", conn)\nORDER_ITEMS = pd.read_sql(\"SELECT * FROM ORDER_ITEMS\", conn)\nProducts = pd.read_sql(\"SELECT * FROM Products\", conn)\nCustomer_Orders.columns = Customer_Orders.columns.str.lower()\nORDER_ITEMS.columns = ORDER_ITEMS.columns.str.lower()\nProducts.columns = Products.columns.str.lower()\n\n# Merge tables\nmerged_df = pd.merge(Customer_Orders, ORDER_ITEMS, on='order_id')\nmerged_df = pd.merge(merged_df, Products, on='product_id')\n\n# Filter data\nfiltered_df = merged_df[merged_df['product_price'] > 1000]\n\n# Group by order_date and sum product_price\ngrouped_df = filtered_df.groupby('order_date')['product_price'].sum().reset_index()\n\n# Scatter plot\nplt.scatter(grouped_df['order_date'], grouped_df['product_price'])\nplt.xlabel('Order Date')\nplt.ylabel('Total Product Price')\nplt.title('Scatter Plot of Total Product Price by Order Date')\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "How many injured players not suffering from injury of 'Knee problem' in each match? Show me a bar chart grouping by number of matches, I want to display from low to high by the bars.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the injury_accident table\ninjury_accident = pd.read_sql(\"SELECT * FROM injury_accident\", conn)\n\n# Convert column names to lowercase\ninjury_accident.columns = injury_accident.columns.str.lower()\n\n# Filter out rows where injury is not 'Knee problem'\nfiltered_data = injury_accident[injury_accident['injury'] != 'Knee problem']\n\n# Group by Number_of_matches and count the occurrences\ngrouped_data = filtered_data.groupby('number_of_matches').size().reset_index(name='count')\n\n# Sort the data by Number_of_matches in ascending order\nsorted_data = grouped_data.sort_values('number_of_matches')\n\n# Generate the bar plot\nplt.bar(sorted_data['number_of_matches'], sorted_data['count'])\nplt.xlabel('Number of Matches')\nplt.ylabel('Count')\nplt.title('Number of Matches vs Count of Injuries (excluding Knee problem)')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show me the total number by product category in a bar , and I want to sort in asc by the x-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmailshot_campaigns = pd.read_sql(\"SELECT * FROM mailshot_campaigns\", conn)\nmailshot_campaigns.columns = mailshot_campaigns.columns.str.lower()\n\n# Grouping the data by product_category and counting the occurrences\ngrouped_data = mailshot_campaigns.groupby('product_category').size().reset_index(name='count')\n\n# Sorting the data by product_category in ascending order\nsorted_data = grouped_data.sort_values('product_category')\n\n# Creating the bar plot\nplt.bar(sorted_data['product_category'], sorted_data['count'])\nplt.xlabel('Product Category')\nplt.ylabel('Count')\nplt.title('Number of Campaigns by Product Category')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Compare the average of artists' age by country in a bar graph , I want to sort by the X from high to low .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Calculate average age by country\navg_age_by_country = artist.groupby('country')['age'].mean().reset_index()\n\n# Sort by country in descending order\navg_age_by_country = avg_age_by_country.sort_values('country', ascending=False)\n\n# Plot the bar chart\nplt.bar(avg_age_by_country['country'], avg_age_by_country['age'])\nplt.xlabel('Country')\nplt.ylabel('Average Age')\nplt.title('Average Age of Artists by Country')\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "Bar chart x axis log entry description y axis the number of log entry description , and I want to order y-axis in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nproblem_log = pd.read_sql(\"SELECT * FROM problem_log\", conn)\nproblem_log.columns = problem_log.columns.str.lower()\n\n# Grouping the data by log_entry_description and counting the occurrences\ngrouped_data = problem_log.groupby('log_entry_description').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nsorted_data = grouped_data.sort_values('count')\n\n# Creating the bar plot\nplt.bar(sorted_data['log_entry_description'], sorted_data['count'])\nplt.xlabel('Log Entry Description')\nplt.ylabel('Count')\nplt.title('Occurrences of Log Entry Descriptions')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "battle_death",
    "question": "plot scatter on what are the death and injury situations caused by the ship with tonnage 't'?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the death and ship tables\ndeath = pd.read_sql(\"SELECT * FROM death\", conn)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Convert column names to lowercase\ndeath.columns = death.columns.str.lower()\nship.columns = ship.columns.str.lower()\n\n# Merge death and ship tables on the common column 'caused_by_ship_id'\nmerged_data = pd.merge(death, ship, left_on='caused_by_ship_id', right_on='id')\n\n# Filter the merged data based on tonnage = 't'\nfiltered_data = merged_data[merged_data['tonnage'] == 't']\n\n# Create a scatter plot\nplt.scatter(filtered_data['killed'], filtered_data['injured'])\nplt.xlabel('Killed')\nplt.ylabel('Injured')\nplt.title('Scatter Plot of Killed vs Injured')\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "Bar chart x axis log entry description y axis the number of log entry description, and I want to order y-axis in ascending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the problem_log table\nproblem_log = pd.read_sql(\"SELECT * FROM problem_log\", conn)\n\n# Convert column names to lowercase\nproblem_log.columns = problem_log.columns.str.lower()\n\n# Perform the SQL query\nresult = problem_log.groupby('log_entry_description').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result['log_entry_description'], result['count'])\nplt.xlabel('Log Entry Description')\nplt.ylabel('Count')\nplt.title('Count of Log Entry Description')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "Show different teams of technicians and the number of technicians in each team , list by the bar in desc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\ntechnician.columns = technician.columns.str.lower()\n\n# Grouping the data by 'team' and counting the number of occurrences\nteam_counts = technician.groupby('team').size()\n\n# Sorting the data by 'team' in descending order\nteam_counts = team_counts.sort_index(ascending=False)\n\n# Creating a bar plot\nplt.bar(team_counts.index, team_counts.values)\n\n# Adding labels and title\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Technician Count by Team')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show me the comparison of the total number of all ships' nationalities with a bar graph .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Grouping the ship dataframe by nationality and counting the occurrences\nnationality_count = ship.groupby('nationality').size().reset_index(name='count')\n\n# Creating a bar plot\nplt.bar(nationality_count['nationality'], nationality_count['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Ships by Nationality')\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "what are the different role codes for users, and how many users have each?, and I want to sort in descending by the role_code.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the data from the \"users\" table\nusers_df = pd.read_sql(\"SELECT * FROM users\", conn)\n\n# Convert column names to lowercase\nusers_df.columns = users_df.columns.str.lower()\n\n# Perform the SQL query\nresult = users_df.groupby('role_code').size().reset_index(name='count').sort_values('role_code', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['role_code'], result['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Users by Role Code')\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "Show the number of teams in elimination in a bar chart, I want to show in asc by the X-axis.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"elimination\" table\nelimination_data = pd.read_sql(\"SELECT * FROM elimination\", conn)\n\n# Convert column names to lowercase\nelimination_data.columns = elimination_data.columns.str.lower()\n\n# Perform the SQL query\nteam_counts = elimination_data.groupby('team').size().reset_index(name='count')\nteam_counts = team_counts.sort_values('team')\n\n# Generate the bar plot\nplt.bar(team_counts['team'], team_counts['count'])\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Number of Eliminations by Team')\nplt.show()"
  },
  {
    "db_id": "e_government",
    "question": "Show me a bar chart displaying the organization ID and the count of individual IDs for each organization, ranked in descending order by the count of individual IDs.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\norganizations = pd.read_sql(\"SELECT * FROM organizations\", conn)\norganization_contact_individuals = pd.read_sql(\"SELECT * FROM organization_contact_individuals\", conn)\nindividuals = pd.read_sql(\"SELECT * FROM individuals\", conn)\norganizations.columns = organizations.columns.str.lower()\norganization_contact_individuals.columns = organization_contact_individuals.columns.str.lower()\nindividuals.columns = individuals.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(organizations, organization_contact_individuals, on='organization_id')\nmerged_df = pd.merge(merged_df, individuals, on='individual_id')\n\n# Group by organization_id and count the number of individuals\ngrouped_df = merged_df.groupby('organization_id').agg({'individual_id': 'count'}).reset_index()\ngrouped_df = grouped_df.rename(columns={'individual_id': 'count'})\n\n# Sort by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['organization_id'], sorted_df['count'])\nplt.xlabel('Organization ID')\nplt.ylabel('Count')\nplt.title('Number of Individuals per Organization')\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "What are the names and damage in millions for storms , ordered by their max speeds descending . Visualize by bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm.columns = storm.columns.str.lower()\n\n# Assuming the storm data is stored in a dataframe called 'storm'\n\n# Sort the storm data by max_speed in descending order\nsorted_storm = storm.sort_values(by='max_speed', ascending=False)\n\n# Select the name and damage_millions_usd columns\nselected_storm = sorted_storm[['name', 'damage_millions_usd']]\n\n# Plot the bar chart\nplt.bar(selected_storm['name'], selected_storm['damage_millions_usd'])\nplt.xlabel('Storm Name')\nplt.ylabel('Damage (Millions USD)')\nplt.title('Damage by Storm')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "Which technicians are responsible for repairing machines with a point value exceeding 70, and what is the distribution of the number of machines repaired by each technician? Represent this information using a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nrepair_assignment = pd.read_sql(\"SELECT * FROM repair_assignment\", conn)\nmachine = pd.read_sql(\"SELECT * FROM machine\", conn)\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\nrepair_assignment.columns = repair_assignment.columns.str.lower()\nmachine.columns = machine.columns.str.lower()\ntechnician.columns = technician.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(repair_assignment, machine, on='machine_id')\nmerged_df = pd.merge(merged_df, technician, on='technician_id')\n\n# Filter data\nfiltered_df = merged_df[merged_df['value_points'] > 70]\n\n# Group by technician name and count\ngrouped_df = filtered_df.groupby('name').size().reset_index(name='count')\n\n# Plot pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['name'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Which stations had a count of 7 available bikes at any point in time, and how many occurrences did they have? Represent this information using a bar chart.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstatus = pd.read_sql(\"SELECT * FROM status\", conn)\nstation.columns = station.columns.str.lower()\nstatus.columns = status.columns.str.lower()\n\n# Merge station and status tables\nmerged_df = pd.merge(station, status, left_on='id', right_on='station_id')\n\n# Filter rows where bikes_available = 7\nfiltered_df = merged_df[merged_df['bikes_available'] == 7]\n\n# Group by station name and count the occurrences\ngrouped_df = filtered_df.groupby('name').size().reset_index(name='count')\n\n# Sort by station name in ascending order\nsorted_df = grouped_df.sort_values('name')\n\n# Plot the bar chart\nplt.bar(sorted_df['name'], sorted_df['count'])\nplt.xlabel('Station Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences where Bikes Available = 7')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sakila_1",
    "question": "What are the names of the different categories, and how many films are in each? Show me the bar graph.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read data from the film_category table\nfilm_category = pd.read_sql(\"SELECT * FROM film_category\", conn)\n\n# Read data from the category table\ncategory = pd.read_sql(\"SELECT * FROM category\", conn)\n\n# Convert column names to lowercase\nfilm_category.columns = film_category.columns.str.lower()\ncategory.columns = category.columns.str.lower()\n\n# merge the film_category and category tables on category_id\nmerged_data = pd.merge(film_category, category, on=\"category_id\")\n\n# group the data by category_id and count the number of occurrences\ngrouped_data = merged_data.groupby(\"category_id\").size().reset_index(name=\"count\")\n\n# get the category names\ncategory_names = merged_data.groupby(\"category_id\")[\"name\"].first().values\n\n# create a bar plot\nplt.bar(category_names, grouped_data[\"count\"])\nplt.xlabel(\"Category\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Films per Category\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "hospital_1",
    "question": "How many physicians have never taken any appointment and how many physicians have taken appointments, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nphysician = pd.read_sql(\"SELECT * FROM physician\", conn)\nappointment = pd.read_sql(\"SELECT * FROM appointment\", conn)\nphysician = pd.read_sql(\"SELECT * FROM physician\", conn)\nphysician.columns = physician.columns.str.lower()\nappointment.columns = appointment.columns.str.lower()\nphysician.columns = physician.columns.str.lower()\n\n# Count the number of physicians with no appointment\nphysicians_no_appointment = physician.shape[0] - pd.merge(appointment, physician, left_on='physician', right_on='employeeid', how='inner').shape[0]\n\n# Create a dataframe with the counts\ndf = pd.DataFrame({'num_physicians': [physicians_no_appointment, physician.shape[0]], 'status': ['no appointment', 'appointment']})\n\n# Plot the bar chart\nplt.bar(df['status'], df['num_physicians'])\nplt.xlabel('Status')\nplt.ylabel('Number of Physicians')\nplt.title('Number of Physicians with and without Appointments')\nplt.show()"
  },
  {
    "db_id": "icfp_1",
    "question": "Can you create a bar chart displaying the last names of authors who have written a paper with the word \"Monadic\" in the title?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nauthors = pd.read_sql(\"SELECT * FROM authors\", conn)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\npapers = pd.read_sql(\"SELECT * FROM papers\", conn)\nauthors.columns = authors.columns.str.lower()\nauthorship.columns = authorship.columns.str.lower()\npapers.columns = papers.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(authors, authorship, on='authid')\nmerged_df = pd.merge(merged_df, papers, on='paperid')\n\n# Filter rows with title containing 'Monadic'\nfiltered_df = merged_df[merged_df['title'].str.contains('Monadic')]\n\n# Group by lname and count number of papers\ngrouped_df = filtered_df.groupby('lname').size().reset_index(name='num_papers')\n\n# Sort by num_papers in descending order\nsorted_df = grouped_df.sort_values('num_papers', ascending=False)\n\n# Plot bar chart\nplt.bar(sorted_df['lname'], sorted_df['num_papers'])\nplt.xlabel('Last Name')\nplt.ylabel('Number of Papers')\nplt.title('Number of Papers by Last Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "company_1",
    "question": "Find the number of employees of each gender whose salary is lower than 50000 Visualize by bar chart , I want to rank by the Y in descending .",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nemployee = pd.read_sql(\"SELECT * FROM employee\", conn)\nemployee.columns = employee.columns.str.lower()\n\n# Filter the dataframe based on the condition\nfiltered_df = employee[employee['salary'] < 50000]\n\n# Group the filtered dataframe by 'sex' and count the number of occurrences\ngrouped_df = filtered_df.groupby('sex').size().reset_index(name='count')\n\n# Sort the grouped dataframe by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Create a bar plot\nplt.bar(sorted_df['sex'], sorted_df['count'])\nplt.xlabel('Sex')\nplt.ylabel('Count')\nplt.title('Number of Employees with Salary < 50000 by Sex')\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "Which physicians have prescribed the highest dose? Show the results in a bar chart.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nphysician = pd.read_sql(\"SELECT * FROM physician\", conn)\nprescribes = pd.read_sql(\"SELECT * FROM prescribes\", conn)\nphysician.columns = physician.columns.str.lower()\nprescribes.columns = prescribes.columns.str.lower()\n\n# Joining the physician and prescribes tables\nmerged_df = pd.merge(physician, prescribes, left_on='employeeid', right_on='physician')\n\n# Grouping by physician name and finding the maximum dose\ngrouped_df = merged_df.groupby('name')['dose'].max().reset_index()\n\n# Sorting by maximum dose in descending order\nsorted_df = grouped_df.sort_values('dose', ascending=False)\n\n# Plotting the bar chart\nplt.bar(sorted_df['name'], sorted_df['dose'])\nplt.xlabel('Physician Name')\nplt.ylabel('Maximum Dose')\nplt.title('Maximum Dose Prescribed by Physicians')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "restaurant_1",
    "question": "How many times did Linda Smith visit Subway at each time, represented by a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nStudent = pd.read_sql(\"SELECT * FROM Student\", conn)\nVisits_Restaurant = pd.read_sql(\"SELECT * FROM Visits_Restaurant\", conn)\nRestaurant = pd.read_sql(\"SELECT * FROM Restaurant\", conn)\nStudent.columns = Student.columns.str.lower()\nVisits_Restaurant.columns = Visits_Restaurant.columns.str.lower()\nRestaurant.columns = Restaurant.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Student, Visits_Restaurant, on='stuid')\nmerged_df = pd.merge(merged_df, Restaurant, on='resid')\n\n# Filter the data\nfiltered_df = merged_df[(merged_df['fname'] == 'Linda') & (merged_df['lname'] == 'Smith') & (merged_df['resname'] == 'subway')]\n\n# Group by time and count the number of records\ngrouped_df = filtered_df.groupby('time').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['time'], grouped_df['count'])\nplt.xlabel('Time')\nplt.ylabel('Count')\nplt.title('Number of Visits to Subway by Linda Smith')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "question": "Show a bar chart about how many employees does each role have?, I want to order by the the total number in descending.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ROLES table\nroles_df = pd.read_sql(\"SELECT * FROM ROLES\", conn)\nroles_df.columns = map(str.lower, roles_df.columns)\n\n# Read the Employees table\nemployees_df = pd.read_sql(\"SELECT * FROM Employees\", conn)\nemployees_df.columns = map(str.lower, employees_df.columns)\n\n# Merge the ROLES and Employees tables on role_code\nmerged_df = pd.merge(roles_df, employees_df, on=\"role_code\")\n\n# Group by role_description and count the number of occurrences\ngrouped_df = merged_df.groupby(\"role_description\").size().reset_index(name=\"count\")\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values(by=\"count\", ascending=False)\n\n# Generate the bar plot\nplt.bar(sorted_df[\"role_description\"], sorted_df[\"count\"])\nplt.xlabel(\"Role Description\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Employees by Role Description\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sakila_1",
    "question": "Which actor_id and count of actors who starred in the greatest number of films can be represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nfilm_actor = pd.read_sql(\"SELECT * FROM film_actor\", conn)\nactor = pd.read_sql(\"SELECT * FROM actor\", conn)\nfilm_actor.columns = film_actor.columns.str.lower()\nactor.columns = actor.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(film_actor, actor, on='actor_id')\n\n# Group by actor_id and count the number of occurrences\ngrouped_df = merged_df.groupby('actor_id').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Select the top 10 rows\ntop_10_actors = sorted_df.head(10)\n\n# Plot the bar chart\nplt.bar(top_10_actors['actor_id'], top_10_actors['count'])\nplt.xlabel('Actor ID')\nplt.ylabel('Count')\nplt.title('Top 10 Actors by Film Count')\nplt.show()"
  },
  {
    "db_id": "insurance_and_eClaims",
    "question": "Bar chart x axis policy type code y axis the total number",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npolicies = pd.read_sql(\"SELECT * FROM policies\", conn)\npolicies.columns = policies.columns.str.lower()\n\n# Grouping the data by policy_type_code and counting the occurrences\npolicy_counts = policies.groupby('policy_type_code').size()\n\n# Creating a bar plot\nplt.bar(policy_counts.index, policy_counts.values)\n\n# Adding labels and title\nplt.xlabel('Policy Type Code')\nplt.ylabel('Count')\nplt.title('Number of Policies by Policy Type Code')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "For each singer name, what is the total sales for their songs Plot them as bar chart, and show total number in descending order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the singer table\nsinger_df = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger_df.columns = map(str.lower, singer_df.columns)\n\n# Read the song table\nsong_df = pd.read_sql(\"SELECT * FROM song\", conn)\nsong_df.columns = map(str.lower, song_df.columns)\n\n# Merge the singer and song tables on Singer_ID\nmerged_df = pd.merge(singer_df, song_df, on=\"singer_id\")\n\n# Group by singer name and calculate the sum of sales\ngrouped_df = merged_df.groupby(\"name\").sum(\"sales\").reset_index()\n\n# Sort by sum of sales in descending order\nsorted_df = grouped_df.sort_values(\"sales\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df[\"name\"], sorted_df[\"sales\"])\nplt.xlabel(\"Singer Name\")\nplt.ylabel(\"Total Sales\")\nplt.title(\"Total Sales by Singer\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "What is the count of each problem description reported by the staff whose first name is Christop, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nproblems = pd.read_sql(\"SELECT * FROM problems\", conn)\nstaff = pd.read_sql(\"SELECT * FROM staff\", conn)\nproblems.columns = problems.columns.str.lower()\nstaff.columns = staff.columns.str.lower()\n\n# Merge problems and staff dataframes\nmerged_df = pd.merge(problems, staff, left_on='reported_by_staff_id', right_on='staff_id')\n\n# Filter staff with first name 'Christop'\nfiltered_df = merged_df[merged_df['staff_first_name'] == 'Christop']\n\n# Group by problem_description and count the occurrences\ngrouped_df = filtered_df.groupby('problem_description').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['problem_description'], grouped_df['count'])\nplt.xlabel('Problem Description')\nplt.ylabel('Count')\nplt.title('Problem Description Count for Staff \"christop\"')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "perpetrator",
    "question": "Bar chart x axis country y axis the total number , and list by the total number from low to high .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperpetrator = pd.read_sql(\"SELECT * FROM perpetrator\", conn)\nperpetrator.columns = perpetrator.columns.str.lower()\n\n# Group by country and count the occurrences\nperpetrator_counts = perpetrator.groupby('country').size().reset_index(name='count')\n\n# Sort by count in ascending order\nperpetrator_counts = perpetrator_counts.sort_values('count')\n\n# Create bar plot\nplt.bar(perpetrator_counts['country'], perpetrator_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Perpetrators by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show each premise type and the number of premises in that type Visualize by bar chart , and could you show premises_type in ascending order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npremises = pd.read_sql(\"SELECT * FROM premises\", conn)\npremises.columns = premises.columns.str.lower()\n\n# Group by premises_type and count the number of occurrences\npremises_count = premises.groupby('premises_type').size().reset_index(name='count')\n\n# Sort by premises_type in ascending order\npremises_count = premises_count.sort_values('premises_type')\n\n# Create a bar plot\nplt.bar(premises_count['premises_type'], premises_count['count'])\nplt.xlabel('Premises Type')\nplt.ylabel('Count')\nplt.title('Number of Premises by Type')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "how many exhibitions has each artist had?, and rank in descending by the Y.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the exhibition and artist tables\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\n\n# Convert column names to lowercase\nexhibition.columns = exhibition.columns.str.lower()\nartist.columns = artist.columns.str.lower()\n\n# Merge the exhibition and artist tables on artist_id\nmerged_data = pd.merge(exhibition, artist, on=\"artist_id\")\n\n# Perform the group by and count\ngrouped_data = merged_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# Sort the data by count in descending order\nsorted_data = grouped_data.sort_values(by=\"count\", ascending=False)\n\n# Generate the bar plot\nplt.bar(sorted_data[\"name\"], sorted_data[\"count\"])\nplt.xlabel(\"Artist Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Exhibitions by Artist\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Show me a bar chart for what are the ids and details of events that have more than one participants?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the EVENTS table\nevents = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\n\n# Read the Participants_in_Events table\nparticipants = pd.read_sql(\"SELECT * FROM Participants_in_Events\", conn)\n\n# Convert column names to lowercase\nevents.columns = events.columns.str.lower()\nparticipants.columns = participants.columns.str.lower()\n\n# merge the two tables on event_id\nmerged_data = pd.merge(events, participants, on='event_id')\n\n# group by event_details and count the number of event_ids\nevent_counts = merged_data.groupby('event_details')['event_id'].count()\n\n# plot the bar chart\nplt.bar(event_counts.index, event_counts.values)\nplt.xlabel('Event Details')\nplt.ylabel('Number of Events')\nplt.title('Event Details vs Number of Events')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "entertainment_awards",
    "question": "Show the ids and names of festivals that have at least two nominations for artworks by a bar chart, rank in descending by the y axis.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the tables from the database\nnomination = pd.read_sql(\"SELECT * FROM nomination\", conn)\nartwork = pd.read_sql(\"SELECT * FROM artwork\", conn)\nfestival_detail = pd.read_sql(\"SELECT * FROM festival_detail\", conn)\n\n# Convert column names to lowercase\nnomination.columns = nomination.columns.str.lower()\nartwork.columns = artwork.columns.str.lower()\nfestival_detail.columns = festival_detail.columns.str.lower()\n\n# Merge the tables\nmerged_data = pd.merge(nomination, artwork, on=\"artwork_id\")\nmerged_data = pd.merge(merged_data, festival_detail, on=\"festival_id\")\n\n# Sort the data by festival_id in descending order\nmerged_data = merged_data.sort_values(by=\"festival_id\", ascending=False)\n\n# Create a bar plot\nplt.bar(merged_data[\"festival_name\"], merged_data[\"festival_id\"])\nplt.xlabel(\"Festival Name\")\nplt.ylabel(\"Festival ID\")\nplt.title(\"Festival ID by Festival Name\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "Show me a bar chart displaying the last names of the members in the \"Bootup Baltimore\" club.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nstudent = pd.read_sql(\"SELECT * FROM student\", conn)\nclub.columns = club.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\nstudent.columns = student.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(club, member_of_club, on='clubid')\nmerged_df = pd.merge(merged_df, student, on='stuid')\n\n# Group by clubname and concatenate last names\ngrouped_df = merged_df.groupby('clubname')['lname'].apply(lambda x: ', '.join(x)).reset_index()\n\n# Plot the bar chart\nplt.bar(grouped_df['clubname'], grouped_df['lname'])\nplt.xlabel('Club Name')\nplt.ylabel('Last Names')\nplt.title('Last Names in Each Club')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "small_bank_1",
    "question": "What is the distribution of total savings balance across accounts, excluding the account named 'Brown', represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nsavings = pd.read_sql(\"SELECT * FROM savings\", conn)\naccounts.columns = accounts.columns.str.lower()\nsavings.columns = savings.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(accounts, savings, on='custid')\n\n# Filter out the rows where name is not 'brown'\nfiltered_df = merged_df[merged_df['name'] != 'brown']\n\n# Group by name and calculate the sum of balance\ngrouped_df = filtered_df.groupby('name')['balance'].sum().reset_index()\n\n# Create a pie chart\nplt.pie(grouped_df['balance'], labels=grouped_df['name'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "question": "What is the distribution of roles among employees, including the role of Koby, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nROLES = pd.read_sql(\"SELECT * FROM ROLES\", conn)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nROLES.columns = ROLES.columns.str.lower()\nEmployees.columns = Employees.columns.str.lower()\n\n# Joining tables\nmerged_df = pd.merge(ROLES, Employees, on='role_code')\n\n# Filtering data for employee_name = 'Koby'\nfiltered_df = merged_df[merged_df['employee_name'] == 'Koby']\n\n# Grouping by role_description and counting\ngrouped_df = filtered_df.groupby('role_description').size().reset_index(name='count')\n\n# Plotting bar chart\nplt.bar(grouped_df['role_description'], grouped_df['count'])\nplt.xlabel('Role Description')\nplt.ylabel('Count')\nplt.title('Number of Employees in Each Role for Koby')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "How many injuries of 'Foot injury' or 'Knee problem' occurred in each stadium, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\nstadium = pd.read_sql(\"SELECT * FROM stadium\", conn)\ninjury_accident = pd.read_sql(\"SELECT * FROM injury_accident\", conn)\ngame.columns = game.columns.str.lower()\nstadium.columns = stadium.columns.str.lower()\ninjury_accident.columns = injury_accident.columns.str.lower()\n\n# Merge tables\nmerged_df = pd.merge(game, stadium, left_on='stadium_id', right_on='id')\nmerged_df = pd.merge(merged_df, injury_accident, left_on='id_x', right_on='game_id')\n\n# Filter data\nfiltered_df = merged_df[(merged_df['injury'] == 'Foot injury') | (merged_df['injury'] == 'Knee problem')]\n\n# Group by stadium name and count occurrences\ngrouped_df = filtered_df.groupby('name').size().reset_index(name='count')\n\n# Plot pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['name'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.title('Distribution of Foot and Knee Injuries by Stadium')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "What is the number of countries in the artist table ? , I want to order from high to low by the x-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Group by country and count the number of artists in each country\ncountry_counts = artist.groupby('country').size().reset_index(name='count')\n\n# Sort the dataframe by country in descending order\ncountry_counts = country_counts.sort_values('country', ascending=False)\n\n# Plot the bar chart\nplt.bar(country_counts['country'], country_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Artists by Country')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Return a pie chart about the number of customer addresses in each address type code.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the customer_addresses table\ncustomer_addresses = pd.read_sql(\"SELECT * FROM customer_addresses\", conn)\n\n# Read the premises table\npremises = pd.read_sql(\"SELECT * FROM premises\", conn)\n\n# Convert column names to lowercase\ncustomer_addresses.columns = customer_addresses.columns.str.lower()\npremises.columns = premises.columns.str.lower()\n\n# merge the customer_addresses and premises tables on premise_id\nmerged_data = pd.merge(customer_addresses, premises, on=\"premise_id\")\n\n# group by address_type_code and count the occurrences\ngrouped_data = merged_data.groupby(\"address_type_code\").size().reset_index(name=\"count\")\n\n# plot the pie chart\nplt.pie(grouped_data[\"count\"], labels=grouped_data[\"address_type_code\"], autopct=\"%1.1f%%\")\nplt.title(\"Address Type Distribution\")\nplt.show()\n"
  },
  {
    "db_id": "document_management",
    "question": "Return a bar on what are the different role codes for users , and how many users have each ? , and show y-axis from high to low order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nusers = pd.read_sql(\"SELECT * FROM users\", conn)\nusers.columns = users.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\nrole_counts = users.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by count in descending order\nrole_counts = role_counts.sort_values(by='count', ascending=False)\n\n# Creating the bar plot\nplt.bar(role_counts['role_code'], role_counts['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Users by Role Code')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "For each distinct product name, show its average product price, and sort in desc by the y-axis.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the PRODUCTS table\nproducts = pd.read_sql(\"SELECT * FROM PRODUCTS\", conn)\n\n# Convert column names to lowercase\nproducts.columns = map(str.lower, products.columns)\n\n# Perform the SQL query\nresult = products.groupby('product_name')['product_price'].mean().sort_values(ascending=False)\n\n# Create the bar plot\nplt.bar(result.index, result.values)\nplt.xlabel('Product Name')\nplt.ylabel('Average Product Price')\nplt.title('Average Product Price by Product Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "Show me a scatter chart for how many games has each stadium held?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the stadium and game tables\nstadium = pd.read_sql(\"SELECT * FROM stadium\", conn)\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\n\n# Convert column names to lowercase\nstadium.columns = stadium.columns.str.lower()\ngame.columns = game.columns.str.lower()\n\n# Merge the stadium and game tables on the stadium_id column\nmerged_data = pd.merge(stadium, game, left_on='id', right_on='stadium_id')\n\n# Group by stadium_id and count the number of rows\ngrouped_data = merged_data.groupby('stadium_id').size().reset_index(name='count')\n\n# Scatter plot\nplt.scatter(grouped_data['stadium_id'], grouped_data['count'])\nplt.xlabel('Stadium ID')\nplt.ylabel('Count')\nplt.title('Number of Games per Stadium')\nplt.show()\n"
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Show the date and id of the transcript with at least 2 course results Visualize by bar chart, and order by the bars from low to high.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the tables\ntranscript_contents = pd.read_sql(\"SELECT * FROM Transcript_Contents\", conn)\ntranscripts = pd.read_sql(\"SELECT * FROM Transcripts\", conn)\n\n# Convert column names to lowercase\ntranscript_contents.columns = map(str.lower, transcript_contents.columns)\ntranscripts.columns = map(str.lower, transcripts.columns)\n\n# Merge the tables on the transcript_id column\nmerged_data = pd.merge(transcript_contents, transcripts, on=\"transcript_id\")\n\n# Sort the merged data by transcript_date in ascending order\nsorted_data = merged_data.sort_values(by=\"transcript_date\")\n\n# Extract the required columns\ntranscript_date = sorted_data[\"transcript_date\"]\ntranscript_id = sorted_data[\"transcript_id\"]\n\n# Plot the bar chart\nplt.bar(transcript_date, transcript_id)\nplt.xlabel(\"Transcript Date\")\nplt.ylabel(\"Transcript ID\")\nplt.title(\"Transcript ID vs Transcript Date\")\nplt.show()"
  },
  {
    "db_id": "college_3",
    "question": "What is the distribution of students minoring in different departments, represented by a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDEPARTMENT = pd.read_sql(\"SELECT * FROM DEPARTMENT\", conn)\nMINOR_IN = pd.read_sql(\"SELECT * FROM MINOR_IN\", conn)\nDEPARTMENT.columns = DEPARTMENT.columns.str.lower()\nMINOR_IN.columns = MINOR_IN.columns.str.lower()\n\n# Perform the join operation\ndf = pd.merge(DEPARTMENT, MINOR_IN, on='dno')\n\n# Group by department name and count the number of occurrences\ndf_grouped = df.groupby('dname').size().reset_index(name='count')\n\n# Create a pie chart\nplt.pie(df_grouped['count'], labels=df_grouped['dname'], autopct='%1.1f%%')\nplt.axis('equal')\n\n# Display the chart\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "How many customers lived in the city Lockmanfurt for each first name, visualized in a bar chart, with the bars ordered in descending order of count?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nCustomers = pd.read_sql(\"SELECT * FROM Customers\", conn)\nAddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\nCustomers.columns = Customers.columns.str.lower()\nAddresses.columns = Addresses.columns.str.lower()\n\n# Joining the Customers and Addresses tables\nmerged_df = pd.merge(Customers, Addresses, left_on='customer_address_id', right_on='address_id')\n\n# Filtering the data for city 'Lockmanfurt'\nfiltered_df = merged_df[merged_df['city'] == 'Lockmanfurt']\n\n# Grouping by first_name and counting the occurrences\ngrouped_df = filtered_df.groupby('first_name').size().reset_index(name='count')\n\n# Sorting the data by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plotting the bar chart\nplt.bar(sorted_df['first_name'], sorted_df['count'])\nplt.xlabel('First Name')\nplt.ylabel('Count')\nplt.title('Number of Customers in lockmanfurt by First Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Give me a bar chart about the number of countries in the artist table , and list by the Country in asc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Group by country and count the number of artists in each country\ncountry_counts = artist.groupby('country').size().reset_index(name='count')\n\n# Sort the data by country in ascending order\ncountry_counts = country_counts.sort_values('country')\n\n# Create a bar plot\nplt.bar(country_counts['country'], country_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Artists by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "Which club has the highest number of members, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nstudent = pd.read_sql(\"SELECT * FROM student\", conn)\nclub.columns = club.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\nstudent.columns = student.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(club, member_of_club, on='clubid')\nmerged_df = pd.merge(merged_df, student, left_on='stuid', right_on='stuid')\n\n# Perform the group by and count operation\ngrouped_df = merged_df.groupby('clubname').size().reset_index(name='count')\ngrouped_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(grouped_df['clubname'], grouped_df['count'])\nplt.xlabel('Club Name')\nplt.ylabel('Count')\nplt.title('Number of Students in Each Club')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "Draw a bar chart for what is the number of entry descriptions of each problem ? , and list total number in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nproblem_log = pd.read_sql(\"SELECT * FROM problem_log\", conn)\nproblem_log.columns = problem_log.columns.str.lower()\n\n# Grouping the data by log_entry_description and counting the occurrences\ngrouped_data = problem_log.groupby('log_entry_description').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nsorted_data = grouped_data.sort_values('count')\n\n# Creating the bar plot\nplt.bar(sorted_data['log_entry_description'], sorted_data['count'])\nplt.xlabel('Log Entry Description')\nplt.ylabel('Count')\nplt.title('Occurrences of Log Entry Descriptions')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show me maximal net worth millions by citizenship in a bar , sort Y in asc order .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Group by citizenship and calculate the maximum net worth\nmax_net_worth = singer.groupby('citizenship')['net_worth_millions'].max()\n\n# Sort the values in ascending order\nmax_net_worth_sorted = max_net_worth.sort_values()\n\n# Create a bar plot\nplt.bar(max_net_worth_sorted.index, max_net_worth_sorted.values)\n\n# Set the x-axis label\nplt.xlabel('Citizenship')\n\n# Set the y-axis label\nplt.ylabel('Max Net Worth (Millions)')\n\n# Set the title of the plot\nplt.title('Max Net Worth by Citizenship')\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "insurance_and_eClaims",
    "question": "Can you create a line chart to display the customer details and start date associated with the policies?",
    "chart": "Line",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npolicies = pd.read_sql(\"SELECT * FROM policies\", conn)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\npolicies.columns = policies.columns.str.lower()\ncustomers.columns = customers.columns.str.lower()\n\n# Merge policies and customers dataframes\nmerged_df = pd.merge(policies, customers, on='customer_id')\n\n# Plot line chart\nplt.plot(merged_df['customer_details'], merged_df['start_date'])\nplt.xlabel('Customer Details')\nplt.ylabel('Start Date')\nplt.title('Start Date vs Customer Details')\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "Draw a bar chart for what are the different nationalities of pilots? Show each nationality and the number of pilots of each nationality, and I want to list by the names in ascending.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the pilot table\npilot_df = pd.read_sql(\"SELECT * FROM pilot\", conn)\n\n# Convert column names to lowercase\npilot_df.columns = pilot_df.columns.str.lower()\n\n# Perform the SQL query\nresult = pilot_df.groupby('nationality').size().reset_index(name='count').sort_values('nationality')\n\n# Generate the bar chart\nplt.bar(result['nationality'], result['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Pilots by Nationality')\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "How many lessons were taught by staff with the nickname containing the letter 's', whose first name is Janessa and last name is Sawayn? Show the results in a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nLessons = pd.read_sql(\"SELECT * FROM Lessons\", conn)\nStaff = pd.read_sql(\"SELECT * FROM Staff\", conn)\nLessons.columns = Lessons.columns.str.lower()\nStaff.columns = Staff.columns.str.lower()\n\n# Perform the SQL query\nresult = pd.merge(Lessons, Staff, left_on='staff_id', right_on='staff_id')\nresult = result[(result['first_name'] == 'Janessa') & (result['last_name'] == 'Sawayn') & (result['nickname'].str.contains('s'))]\nresult = result.groupby('nickname').size().reset_index(name='count')\n\n# Visualize the result\nplt.bar(result['nickname'], result['count'])\nplt.xlabel('Nickname')\nplt.ylabel('Count')\nplt.title('Lesson Count by Nickname')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "What are the names of technicians with the machine series that they repair? Show me how many machines for each technician's name, show Y-axis from high to low order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the repair_assignment table\nrepair_assignment = pd.read_sql(\"SELECT * FROM repair_assignment\", conn)\n\n# Read the machine table\nmachine = pd.read_sql(\"SELECT * FROM machine\", conn)\n\n# Read the technician table\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\n\n# Convert column names to lowercase\nrepair_assignment.columns = repair_assignment.columns.str.lower()\nmachine.columns = machine.columns.str.lower()\ntechnician.columns = technician.columns.str.lower()\n\n# merge the tables\nmerged_data = pd.merge(repair_assignment, machine, on=\"machine_id\")\nmerged_data = pd.merge(merged_data, technician, on=\"technician_id\")\n\n# perform the sql query\nresult = merged_data.groupby(\"name\").size().reset_index(name=\"count\").sort_values(by=\"count\", ascending=False)\n\n# plot the bar chart\nplt.bar(result[\"name\"], result[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Repairs by Name\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "gymnast",
    "question": "Show me a line chart of the gymnasts' ages and total points, ordered in descending order by their total points.",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngymnast = pd.read_sql(\"SELECT * FROM gymnast\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\ngymnast.columns = gymnast.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Merge the two dataframes\nmerged_df = pd.merge(gymnast, people, left_on='gymnast_id', right_on='people_id')\n\n# Sort the merged dataframe by total_points in descending order\nsorted_df = merged_df.sort_values('total_points', ascending=False)\n\n# Plot the line chart\nplt.plot(sorted_df['age'], sorted_df['total_points'])\nplt.xlabel('Age')\nplt.ylabel('Total Points')\nplt.title('Total Points by Age')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Bar graph to show how many nationality from different nationality , display from low to high by the how many nationality .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Group by nationality and count the occurrences\nnationality_count = ship.groupby('nationality').size().reset_index(name='count')\n\n# Sort by count in ascending order\nnationality_count = nationality_count.sort_values('count')\n\n# Plot the bar chart\nplt.bar(nationality_count['nationality'], nationality_count['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Ships by Nationality')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "Bar chart x axis software platform y axis the total number , could you list total number in ascending order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ndevice = pd.read_sql(\"SELECT * FROM device\", conn)\ndevice.columns = device.columns.str.lower()\n\n# Grouping the data by software_platform and counting the occurrences\ngrouped_data = device.groupby('software_platform').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nsorted_data = grouped_data.sort_values('count')\n\n# Creating the bar plot\nplt.bar(sorted_data['software_platform'], sorted_data['count'])\nplt.xlabel('Software Platform')\nplt.ylabel('Count')\nplt.title('Number of Devices by Software Platform')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Show how many section description from each section description , and sort from low to high by the x axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nSections = pd.read_sql(\"SELECT * FROM Sections\", conn)\nSections.columns = Sections.columns.str.lower()\n\n# Group by section_description and count the occurrences\nsection_counts = Sections.groupby('section_description').size().reset_index(name='count')\n\n# Sort the dataframe by section_description in ascending order\nsection_counts = section_counts.sort_values('section_description')\n\n# Create a bar plot\nplt.bar(section_counts['section_description'], section_counts['count'])\nplt.xlabel('Section Description')\nplt.ylabel('Count')\nplt.title('Section Description Counts')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show different types of ships and the average tonnage of ships of each type Show bar chart , and could you show x axis from high to low order please ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Group by type and calculate average tonnage\nship_avg_tonnage = ship.groupby('type')['tonnage'].mean()\n\n# Sort the data by type in descending order\nship_avg_tonnage = ship_avg_tonnage.sort_index(ascending=False)\n\n# Create a bar plot\nplt.bar(ship_avg_tonnage.index, ship_avg_tonnage.values)\n\n# Set the labels and title\nplt.xlabel('Type')\nplt.ylabel('Average Tonnage')\nplt.title('Average Tonnage by Ship Type')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show all distinct product categories along with the number of mailshots in each category in a bar chart, and show from high to low by the total number please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the mailshot_campaigns table\nmailshot_campaigns = pd.read_sql(\"SELECT * FROM mailshot_campaigns\", conn)\n\n# Convert column names to lowercase\nmailshot_campaigns.columns = map(str.lower, mailshot_campaigns.columns)\n\n# Perform the SQL query\nresult = mailshot_campaigns.groupby('product_category').size().reset_index(name='count').sort_values(by='count', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['product_category'], result['count'])\nplt.xlabel('Product Category')\nplt.ylabel('Count')\nplt.title('Count of Mailshot Campaigns by Product Category')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Count the section_description , and group by section_description with a bar chart , and rank by the x-axis in ascending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nSections = pd.read_sql(\"SELECT * FROM Sections\", conn)\nSections.columns = Sections.columns.str.lower()\n\n# Group by section_description and count the occurrences\nsection_counts = Sections.groupby('section_description').size().reset_index(name='count')\n\n# Sort the dataframe by section_description in ascending order\nsection_counts = section_counts.sort_values('section_description')\n\n# Create a bar plot\nplt.bar(section_counts['section_description'], section_counts['count'])\nplt.xlabel('Section Description')\nplt.ylabel('Count')\nplt.title('Section Description Counts')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Please draw a bar to show the total number of participants in each type code , and order in desc by the Participant_Type_Code .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nParticipants = pd.read_sql(\"SELECT * FROM Participants\", conn)\nParticipants.columns = Participants.columns.str.lower()\n\n# Group by participant_type_code and count the occurrences\ngrouped = Participants.groupby('participant_type_code').size().reset_index(name='count')\n\n# Sort by participant_type_code in descending order\ngrouped = grouped.sort_values('participant_type_code', ascending=False)\n\n# Create bar plot\nplt.bar(grouped['participant_type_code'], grouped['count'])\nplt.xlabel('Participant Type Code')\nplt.ylabel('Count')\nplt.title('Count of Participants by Participant Type Code')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Show all artist names and the number of exhibitions for each artist Show bar chart, list total number from low to high order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the exhibition and artist tables\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\n\n# Convert column names to lowercase\nexhibition.columns = exhibition.columns.str.lower()\nartist.columns = artist.columns.str.lower()\n\n# Merge the exhibition and artist tables on artist_id\nmerged_data = pd.merge(exhibition, artist, on=\"artist_id\")\n\n# Perform the SQL query and group by artist_id, count the number of exhibitions for each artist\nquery_result = merged_data.groupby(\"artist_id\").size().reset_index(name=\"exhibition_count\")\n\n# Sort the result by exhibition count in ascending order\nsorted_result = query_result.sort_values(\"exhibition_count\", ascending=True)\n\n# Plot the bar chart\nplt.bar(sorted_result[\"artist_id\"], sorted_result[\"exhibition_count\"])\nplt.xlabel(\"Artist ID\")\nplt.ylabel(\"Exhibition Count\")\nplt.title(\"Number of Exhibitions by Artist\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "singer",
    "question": "Compare the number of songs each singer has.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the singer and song tables\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsong = pd.read_sql(\"SELECT * FROM song\", conn)\n\n# Convert column names to lowercase\nsinger.columns = singer.columns.str.lower()\nsong.columns = song.columns.str.lower()\n\n# Merge the singer and song tables on Singer_ID\nmerged_data = pd.merge(singer, song, on=\"singer_id\")\n\n# Group by Name and count the occurrences\ngrouped_data = merged_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# Plot the bar chart\nplt.bar(grouped_data[\"name\"], grouped_data[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Songs by Singer\")\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show me the total number by outcome code in a bar, and order y-axis in desc order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the mailshot_customers table\nmailshot_customers = pd.read_sql(\"SELECT * FROM mailshot_customers\", conn)\n\n# Convert column names to lowercase\nmailshot_customers.columns = map(str.lower, mailshot_customers.columns)\n\n# Perform the SQL query\noutcome_counts = mailshot_customers.groupby('outcome_code').size().reset_index(name='count')\noutcome_counts = outcome_counts.sort_values(by='count', ascending=False)\n\n# Generate the bar plot\nplt.bar(outcome_counts['outcome_code'], outcome_counts['count'])\nplt.xlabel('Outcome Code')\nplt.ylabel('Count')\nplt.title('Count of Customers by Outcome Code')\nplt.show()\n\n# Close the database connection\nconn.close()"
  },
  {
    "db_id": "theme_gallery",
    "question": "A bar chart compares the ages of all artists , and rank in desc by the names .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Assuming the data is already loaded into the 'artist' dataframe\n\n# Sort the dataframe by name in descending order\nsorted_artist = artist.sort_values(by='name', ascending=False)\n\n# Extract the name and age columns\nname = sorted_artist['name']\nage = sorted_artist['age']\n\n# Create a bar plot\nplt.bar(name, age)\n\n# Add labels and title\nplt.xlabel('Name')\nplt.ylabel('Age')\nplt.title('Artist Age by Name')\n\n# Rotate x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "What is the name of the technician whose team is not 'NYY', and count them by a bar chart",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the technician table\ntechnician_df = pd.read_sql(\"SELECT * FROM technician\", conn)\n\n# Convert column names to lowercase\ntechnician_df.columns = technician_df.columns.str.lower()\n\n# Filter the technician table where Team is not \"NYY\"\nfiltered_technician_df = technician_df[technician_df[\"team\"] != \"NYY\"]\n\n# Group by Name and count the occurrences\ngrouped_technician_df = filtered_technician_df.groupby(\"name\").size().reset_index(name=\"count\")\n\n# Plot the bar chart\nplt.bar(grouped_technician_df[\"name\"], grouped_technician_df[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Technician Count by Name (excluding NYY team)\")\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "Draw a bar chart for how many storms occured in each region?, I want to rank the total number from low to high order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the region and affected_region tables\nregion = pd.read_sql(\"SELECT * FROM region\", conn)\naffected_region = pd.read_sql(\"SELECT * FROM affected_region\", conn)\n\n# Convert column names to lowercase\nregion.columns = region.columns.str.lower()\naffected_region.columns = affected_region.columns.str.lower()\n\n# Merge the region and affected_region tables on region_id\nmerged_data = pd.merge(region, affected_region, on=\"region_id\")\n\n# Group by region_name and count the number of occurrences\ngrouped_data = merged_data.groupby(\"region_name\").size().reset_index(name=\"count\")\n\n# Sort the data by count in ascending order\nsorted_data = grouped_data.sort_values(\"count\")\n\n# Plot the bar chart\nplt.bar(sorted_data[\"region_name\"], sorted_data[\"count\"])\nplt.xlabel(\"Region Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Occurrences by Region\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "List the number of the name of technicians whose team is not \"NYY\", could you show bar in asc order?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the technician table\ntechnician_df = pd.read_sql(\"SELECT * FROM technician\", conn)\n\n# Convert column names to lowercase\ntechnician_df.columns = technician_df.columns.str.lower()\n\n# Filter the technician table where Team is not \"NYY\"\nfiltered_technician_df = technician_df[technician_df[\"team\"] != \"NYY\"]\n\n# Group by Name and count the occurrences\ngrouped_technician_df = filtered_technician_df.groupby(\"name\").size().reset_index(name=\"count\")\n\n# Sort by Name in ascending order\nsorted_technician_df = grouped_technician_df.sort_values(\"name\", ascending=True)\n\n# Generate the bar plot\nplt.bar(sorted_technician_df[\"name\"], sorted_technician_df[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Technician Count by Name (excluding Team NYY)\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship in a bar chart , I want to display y axis from low to high order .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Group by citizenship and calculate the maximum net worth\nmax_net_worth = singer.groupby('citizenship')['net_worth_millions'].max()\n\n# Sort the values in ascending order\nmax_net_worth_sorted = max_net_worth.sort_values()\n\n# Create a bar plot\nplt.bar(max_net_worth_sorted.index, max_net_worth_sorted.values)\n\n# Set the x-axis label\nplt.xlabel('Citizenship')\n\n# Set the y-axis label\nplt.ylabel('Max Net Worth (Millions)')\n\n# Set the title of the plot\nplt.title('Max Net Worth by Citizenship')\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "What is the name of the document with the greatest number of sections, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ndocuments = pd.read_sql(\"SELECT * FROM documents\", conn)\ndocument_sections = pd.read_sql(\"SELECT * FROM document_sections\", conn)\ndocuments.columns = documents.columns.str.lower()\ndocument_sections.columns = document_sections.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(documents, document_sections, on='document_code')\n\n# Group by document_name and count the number of sections\ngrouped_df = merged_df.groupby('document_name').size().reset_index(name='num_sections')\n\n# Sort the dataframe by num_sections in descending order\nsorted_df = grouped_df.sort_values('num_sections', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['document_name'], sorted_df['num_sections'])\nplt.xlabel('Document Name')\nplt.ylabel('Number of Sections')\nplt.title('Number of Sections per Document')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show me the comparison of the total number of every ship type with a bar graph , sort X in asc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Group by 'type' and count the occurrences\nship_count = ship.groupby('type').size().reset_index(name='count')\n\n# Sort the dataframe by 'type' in ascending order\nship_count = ship_count.sort_values('type')\n\n# Create a bar plot\nplt.bar(ship_count['type'], ship_count['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Count of Ship Types')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show different types of ships and the average tonnage of ships of each type in a bar chart , could you list y axis in asc order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Group by type and calculate average tonnage\nship_avg_tonnage = ship.groupby('type')['tonnage'].mean()\n\n# Sort the average tonnage in ascending order\nship_avg_tonnage = ship_avg_tonnage.sort_values()\n\n# Create a bar plot\nplt.bar(ship_avg_tonnage.index, ship_avg_tonnage.values)\n\n# Set the x-axis label\nplt.xlabel('Type')\n\n# Set the y-axis label\nplt.ylabel('Average Tonnage')\n\n# Set the title of the plot\nplt.title('Average Tonnage by Ship Type')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "What are all the calendar dates and day Numbers Show the trend , sort X-axis from low to high order .",
    "chart": "Line",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nRef_calendar = pd.read_sql(\"SELECT * FROM Ref_calendar\", conn)\nRef_calendar.columns = Ref_calendar.columns.str.lower()\n\n# Assuming you have already read the table data into Ref_calendar dataframe\n\n# Sort the dataframe by calendar_date\nRef_calendar = Ref_calendar.sort_values(by='calendar_date')\n\n# Plotting the line chart\nplt.plot(Ref_calendar['calendar_date'], Ref_calendar['day_number'])\nplt.xlabel('Calendar Date')\nplt.ylabel('Day Number')\nplt.title('Line Chart of Day Number')\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "Find the status of orders which belong to the customer named \"Jeramie\", group by order status, and count them. Show the result with a pie chart.",
    "chart": "Pie",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the customers table\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\ncustomers.columns = map(str.lower, customers.columns)\n\n# Read the orders table\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\norders.columns = map(str.lower, orders.columns)\n\n# Merge the customers and orders tables on customer_id\nmerged_data = pd.merge(customers, orders, on=\"customer_id\")\n\n# Filter the merged data for customer_name = \"Jeramie\"\nfiltered_data = merged_data[merged_data[\"customer_name\"] == \"Jeramie\"]\n\n# Group the filtered data by order_status and count the occurrences\ngrouped_data = filtered_data.groupby(\"order_status\").size()\n\n# Plot the pie chart\nplt.pie(grouped_data, labels=grouped_data.index, autopct=\"%1.1f%%\")\nplt.title(\"Order Status Distribution for Jeramie\")\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "What are the descriptions and prices of the service types with product price above 100, visualized in a scatter chart?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRef_Service_Types = pd.read_sql(\"SELECT * FROM Ref_Service_Types\", conn)\nServices = pd.read_sql(\"SELECT * FROM Services\", conn)\nRef_Service_Types.columns = Ref_Service_Types.columns.str.lower()\nServices.columns = Services.columns.str.lower()\n\n# Merge the two dataframes based on service_type_code\nmerged_df = pd.merge(Ref_Service_Types, Services, on='service_type_code')\n\n# Filter the merged dataframe for product_price > 100\nfiltered_df = merged_df[merged_df['product_price'] > 100]\n\n# Create a scatter plot\nplt.scatter(filtered_df['service_type_description'], filtered_df['product_price'])\nplt.xlabel('Service Type Description')\nplt.ylabel('Product Price')\nplt.title('Scatter Plot of Service Type Description vs Product Price')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Bar chart x axis name y axis age , and rank Y in asc order .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Assuming the data is already loaded into the 'artist' dataframe\n\n# Sort the dataframe by age in ascending order\nsorted_artist = artist.sort_values(by='age')\n\n# Extract the name and age columns\nname = sorted_artist['name']\nage = sorted_artist['age']\n\n# Create a bar plot\nplt.bar(name, age)\n\n# Add labels and title\nplt.xlabel('Name')\nplt.ylabel('Age')\nplt.title('Artist Age')\n\n# Rotate x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Find the ids and names of stations from which at least 200 trips started , and show total number in ascending order .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\ntrip.columns = trip.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called 'trip'\n\n# Perform the SQL query\nresult = trip[['start_station_name', 'start_station_id']].sort_values('start_station_id')\n\n# Create the bar plot\nplt.bar(result['start_station_name'], result['start_station_id'])\nplt.xlabel('Start Station Name')\nplt.ylabel('Start Station ID')\nplt.title('Start Station ID by Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show all distinct product categories along with the number of mailshots in each category Visualize by bar chart , order from low to high by the y-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmailshot_campaigns = pd.read_sql(\"SELECT * FROM mailshot_campaigns\", conn)\nmailshot_campaigns.columns = mailshot_campaigns.columns.str.lower()\n\n# Group by product_category and count the number of occurrences\ncategory_counts = mailshot_campaigns.groupby('product_category').size()\n\n# Sort the categories by count in ascending order\ncategory_counts = category_counts.sort_values()\n\n# Create a bar plot\nplt.bar(category_counts.index, category_counts.values)\n\n# Set the x-axis label\nplt.xlabel('Product Category')\n\n# Set the y-axis label\nplt.ylabel('Count')\n\n# Set the plot title\nplt.title('Number of Campaigns by Product Category')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "sakila_1",
    "question": "Show me a bar chart of the top 10 most frequently rented films, displaying the count of rentals for each film.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nfilm = pd.read_sql(\"SELECT * FROM film\", conn)\ninventory = pd.read_sql(\"SELECT * FROM inventory\", conn)\nrental = pd.read_sql(\"SELECT * FROM rental\", conn)\nfilm.columns = film.columns.str.lower()\ninventory.columns = inventory.columns.str.lower()\nrental.columns = rental.columns.str.lower()\n\n# Join tables\ndf = pd.merge(film, inventory, on='film_id')\ndf = pd.merge(df, rental, on='inventory_id')\n\n# Group by title and count\ndf_grouped = df.groupby('title').size().reset_index(name='count')\n\n# Sort by count in descending order and select top 10\ndf_top_10 = df_grouped.sort_values('count', ascending=False).head(10)\n\n# Plot bar chart\nplt.bar(df_top_10['title'], df_top_10['count'])\nplt.xlabel('Film Title')\nplt.ylabel('Count')\nplt.title('Top 10 Films by Rental Count')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "question": "Show a bar chart about how many employees does each role have?, and I want to display Y in ascending order please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ROLES table\nroles_df = pd.read_sql(\"SELECT * FROM ROLES\", conn)\nroles_df.columns = map(str.lower, roles_df.columns)\n\n# Read the Employees table\nemployees_df = pd.read_sql(\"SELECT * FROM Employees\", conn)\nemployees_df.columns = map(str.lower, employees_df.columns)\n\n# Merge the ROLES and Employees tables on role_code\nmerged_df = pd.merge(roles_df, employees_df, on=\"role_code\")\n\n# Group by role_description and count the number of occurrences\ngrouped_df = merged_df.groupby(\"role_description\").size().reset_index(name=\"count\")\n\n# Sort the dataframe by count in ascending order\nsorted_df = grouped_df.sort_values(\"count\")\n\n# Plot the bar chart\nplt.bar(sorted_df[\"role_description\"], sorted_df[\"count\"])\nplt.xlabel(\"Role Description\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Employees per Role Description\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "Return a bar chart on what are the names of all the documents , as well as the access counts of each , ordered alphabetically ?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ndocuments = pd.read_sql(\"SELECT * FROM documents\", conn)\ndocuments.columns = documents.columns.str.lower()\n\n# Assuming 'documents' is the dataframe containing the table data\n\n# Sort the dataframe by document_name\nsorted_documents = documents.sort_values('document_name')\n\n# Extract the document_name and access_count columns\ndocument_names = sorted_documents['document_name']\naccess_counts = sorted_documents['access_count']\n\n# Create the bar plot\nplt.bar(document_names, access_counts)\n\n# Add labels and title\nplt.xlabel('Document Name')\nplt.ylabel('Access Count')\nplt.title('Access Count by Document Name')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show me a line chart representing the number of missions for each code.",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmission = pd.read_sql(\"SELECT * FROM mission\", conn)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nmission.columns = mission.columns.str.lower()\nship.columns = ship.columns.str.lower()\n\n# Perform the join operation\nmerged_data = pd.merge(mission, ship, on='ship_id')\n\n# Group by code and count the number of occurrences\ngrouped_data = merged_data.groupby('code').size().reset_index(name='count')\n\n# Plot the line chart\nplt.plot(grouped_data['code'], grouped_data['count'])\nplt.xlabel('Code')\nplt.ylabel('Count')\nplt.title('Number of Missions by Code')\nplt.show()"
  },
  {
    "db_id": "college_3",
    "question": "Which instructor is associated with the course \"COMPUTER LITERACY\" in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nCOURSE = pd.read_sql(\"SELECT * FROM COURSE\", conn)\nFACULTY = pd.read_sql(\"SELECT * FROM FACULTY\", conn)\nCOURSE.columns = COURSE.columns.str.lower()\nFACULTY.columns = FACULTY.columns.str.lower()\n\n# Joining the tables\ndf = pd.merge(COURSE, FACULTY, left_on='instructor', right_on='facid')\n\n# Filtering the data\ndf_filtered = df[df['cname'] == 'Computer Literacy']\n\n# Grouping by faculty name and counting the occurrences\nfaculty_counts = df_filtered.groupby(['fname', 'lname']).size().reset_index(name='count')\n\n# Creating the bar plot\nplt.bar(faculty_counts['lname'], faculty_counts['count'])\nplt.xlabel('Last Name')\nplt.ylabel('Count')\nplt.title('Faculty teaching computer literacy')\nplt.show()"
  },
  {
    "db_id": "small_bank_1",
    "question": "What is the total savings balance for each customer, excluding the customer with the name 'Brown', shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nsavings = pd.read_sql(\"SELECT * FROM savings\", conn)\naccounts.columns = accounts.columns.str.lower()\nsavings.columns = savings.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(accounts, savings, on='custid')\n\n# Filter the data based on the condition\nfiltered_df = merged_df[merged_df['name'] != 'brown']\n\n# Group the data by custid and calculate the sum of balance\ngrouped_df = filtered_df.groupby('custid').sum('balance')\n\n# Create the bar plot\nplt.bar(grouped_df.index, grouped_df['balance'])\n\n# Set the labels and title\nplt.xlabel('Customer ID')\nplt.ylabel('Total Balance')\nplt.title('Total Balance by Customer ID')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show each premise type and the number of premises in that type with a bar chart , could you show by the names in descending ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npremises = pd.read_sql(\"SELECT * FROM premises\", conn)\npremises.columns = premises.columns.str.lower()\n\n# Group by premises_type and count the number of occurrences\npremises_count = premises.groupby('premises_type').size().reset_index(name='count')\n\n# Sort by premises_type in descending order\npremises_count = premises_count.sort_values('premises_type', ascending=False)\n\n# Create bar plot\nplt.bar(premises_count['premises_type'], premises_count['count'])\nplt.xlabel('Premises Type')\nplt.ylabel('Count')\nplt.title('Number of Premises by Type')\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "Show the number of games for each home team in a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the game table\ngame_df = pd.read_sql(\"SELECT * FROM game\", conn)\n\n# Convert column names to lowercase\ngame_df.columns = game_df.columns.str.lower()\n\n# Perform the SQL query\nresult = game_df.groupby('home_team').size()\n\n# Plot the pie chart\nplt.pie(result, labels=result.index, autopct='%1.1f%%')\nplt.title('Distribution of Home Teams')\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "What is the distribution of fleet series for aircrafts flown by pilots younger than 34, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npilot_record = pd.read_sql(\"SELECT * FROM pilot_record\", conn)\naircraft = pd.read_sql(\"SELECT * FROM aircraft\", conn)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot_record.columns = pilot_record.columns.str.lower()\naircraft.columns = aircraft.columns.str.lower()\npilot.columns = pilot.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(pilot_record, aircraft, on='aircraft_id')\nmerged_df = pd.merge(merged_df, pilot, on='pilot_id')\n\n# Filtering the data\nfiltered_df = merged_df[merged_df['age'] < 34]\n\n# Grouping and counting\ngrouped_df = filtered_df.groupby('fleet_series').size().reset_index(name='count')\n\n# Plotting the bar chart\nplt.bar(grouped_df['fleet_series'], grouped_df['count'])\nplt.xlabel('Fleet Series')\nplt.ylabel('Count')\nplt.title('Number of Pilots by Fleet Series (Age < 34)')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "How many documents for different location code ? Plot a pie chart to show the proportion .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDocument_locations = pd.read_sql(\"SELECT * FROM Document_locations\", conn)\nDocument_locations.columns = Document_locations.columns.str.lower()\n\n# Group by location_code and count the occurrences\nlocation_counts = Document_locations.groupby('location_code').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(location_counts['count'], labels=location_counts['location_code'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "Draw a bar chart for what are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality , and I want to list by the names in ascending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot.columns = pilot.columns.str.lower()\n\n# Grouping the data by nationality and counting the occurrences\nnationality_counts = pilot.groupby('nationality').size().reset_index(name='count')\n\n# Sorting the data by nationality in ascending order\nnationality_counts = nationality_counts.sort_values('nationality')\n\n# Creating the bar plot\nplt.bar(nationality_counts['nationality'], nationality_counts['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Pilots by Nationality')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "Show the number of games for each home team in a bar chart, and could you show X in desc order?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the game table\ngame_df = pd.read_sql(\"SELECT * FROM game\", conn)\n\n# Convert column names to lowercase\ngame_df.columns = game_df.columns.str.lower()\n\n# Perform the SQL query\nresult = game_df.groupby('home_team').size().reset_index(name='count').sort_values('home_team', ascending=False)\n\n# Create the bar plot\nplt.bar(result['home_team'], result['count'])\nplt.xlabel('Home Team')\nplt.ylabel('Count')\nplt.title('Number of Games by Home Team')\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "Show me a pie chart for what are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot.columns = pilot.columns.str.lower()\n\n# Group by nationality and count the number of pilots\nnationality_count = pilot.groupby('nationality').size().reset_index(name='count')\n\n# Plot pie chart\nplt.pie(nationality_count['count'], labels=nationality_count['nationality'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Can you create a scatter chart displaying the participant type code and the count of participants for each type?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nParticipants = pd.read_sql(\"SELECT * FROM Participants\", conn)\nParticipants_in_Events = pd.read_sql(\"SELECT * FROM Participants_in_Events\", conn)\nParticipants.columns = Participants.columns.str.lower()\nParticipants_in_Events.columns = Participants_in_Events.columns.str.lower()\n\n# Merge the two dataframes\nmerged_df = pd.merge(Participants, Participants_in_Events, on='participant_id')\n\n# Group by participant_type_code and count the occurrences\ngrouped_df = merged_df.groupby('participant_type_code').size().reset_index(name='count')\n\n# Scatter plot\nplt.scatter(grouped_df['participant_type_code'], grouped_df['count'])\nplt.xlabel('Participant Type Code')\nplt.ylabel('Count')\nplt.title('Count of Participants by Type')\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Show me a bar chart displaying the count of events for each service type code, ordered in descending order of service type code.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEvents = pd.read_sql(\"SELECT * FROM Events\", conn)\nServices = pd.read_sql(\"SELECT * FROM Services\", conn)\nEvents.columns = Events.columns.str.lower()\nServices.columns = Services.columns.str.lower()\n\n# Joining the Events and Services dataframes\nmerged_df = pd.merge(Events, Services, on='service_id')\n\n# Grouping by service_type_code and counting the occurrences\ngrouped_df = merged_df.groupby('service_type_code').size().reset_index(name='count')\n\n# Sorting the dataframe by service_type_code in descending order\nsorted_df = grouped_df.sort_values('service_type_code', ascending=False)\n\n# Creating the bar plot\nplt.bar(sorted_df['service_type_code'], sorted_df['count'])\nplt.xlabel('Service Type Code')\nplt.ylabel('Count')\nplt.title('Count of Events by Service Type Code')\nplt.show()"
  },
  {
    "db_id": "restaurant_1",
    "question": "For those female students with age is older than 18 who are not majoring in 600, tell me how many students of different first names using a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the Student table\nstudent_data = pd.read_sql(\"SELECT * FROM Student\", conn)\n\n# Convert column names to lowercase\nstudent_data.columns = student_data.columns.str.lower()\n\n# Filter the data based on the conditions\nfiltered_data = student_data[(student_data['age'] > 18) & (student_data['major'] != 600) & (student_data['sex'] == 'F')]\n\n# Group the data by Fname and count the occurrences\ngrouped_data = filtered_data.groupby('fname').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_data['fname'], grouped_data['count'])\nplt.xlabel('Fname')\nplt.ylabel('Count')\nplt.title('Number of Students by Fname')\nplt.show()"
  },
  {
    "db_id": "perpetrator",
    "question": "What are the countries of perpetrators ? Show each country and the corresponding number of perpetrators there Plot them as bar chart , and could you sort total number in ascending order please ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperpetrator = pd.read_sql(\"SELECT * FROM perpetrator\", conn)\nperpetrator.columns = perpetrator.columns.str.lower()\n\n# Group by country and count the occurrences\nperpetrator_counts = perpetrator.groupby('country').size().reset_index(name='count')\n\n# Sort by count in ascending order\nperpetrator_counts = perpetrator_counts.sort_values('count')\n\n# Create bar plot\nplt.bar(perpetrator_counts['country'], perpetrator_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Perpetrators by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Visualize a bar chart for what are the ids and names of all start stations that were the beginning of at least 200 trips ? , and I want to list from high to low by the start_station_id please .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\ntrip.columns = trip.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called 'trip'\n\n# Sort the DataFrame by start_station_id in descending order\nsorted_trip = trip.sort_values(by='start_station_id', ascending=False)\n\n# Extract the start_station_name and start_station_id columns\nstart_station_name = sorted_trip['start_station_name']\nstart_station_id = sorted_trip['start_station_id']\n\n# Create a bar plot\nplt.bar(start_station_name, start_station_id)\n\n# Set the x-axis labels to be rotated for better readability\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "A scatter chart about what are the id of each employee and the number of document destroyed by that employee ?",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nDocuments_to_be_destroyed = pd.read_sql(\"SELECT * FROM Documents_to_be_destroyed\", conn)\nDocuments_to_be_destroyed.columns = Documents_to_be_destroyed.columns.str.lower()\n\n# Assuming the table data is stored in a DataFrame called \"Documents_to_be_destroyed\"\n\n# Grouping the data by \"destroyed_by_employee_id\" and counting the occurrences\ndestroyed_counts = Documents_to_be_destroyed.groupby('destroyed_by_employee_id').size().reset_index(name='count')\n\n# Creating a scatter plot\nplt.scatter(destroyed_counts['destroyed_by_employee_id'], destroyed_counts['count'])\n\n# Adding labels and title\nplt.xlabel('Destroyed by Employee ID')\nplt.ylabel('Count')\nplt.title('Number of Documents Destroyed by Employee')\n\n# Displaying the scatter plot\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Tell me how many songs each singer has.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the singer and song tables\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsong = pd.read_sql(\"SELECT * FROM song\", conn)\n\n# Convert column names to lowercase\nsinger.columns = singer.columns.str.lower()\nsong.columns = song.columns.str.lower()\n\n# Merge the singer and song tables on Singer_ID\nmerged_data = pd.merge(singer, song, on=\"singer_id\")\n\n# Group by Name and count the occurrences\ngrouped_data = merged_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# Plot the bar chart\nplt.bar(grouped_data[\"name\"], grouped_data[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Songs by Singer\")\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Show me the trend about what are all the calendar dates and day Numbers ? , list by the X-axis in asc please .",
    "chart": "Line",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nRef_calendar = pd.read_sql(\"SELECT * FROM Ref_calendar\", conn)\nRef_calendar.columns = Ref_calendar.columns.str.lower()\n\n# Assuming you have already read the table data into Ref_calendar dataframe\n\n# Sort the dataframe by calendar_date\nRef_calendar = Ref_calendar.sort_values(by='calendar_date')\n\n# Plotting the line chart\nplt.plot(Ref_calendar['calendar_date'], Ref_calendar['day_number'])\nplt.xlabel('Calendar Date')\nplt.ylabel('Day Number')\nplt.title('Line Chart of Day Number')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Show all payment method codes and the number of orders for each code in a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nINVOICES = pd.read_sql(\"SELECT * FROM INVOICES\", conn)\nINVOICES.columns = INVOICES.columns.str.lower()\n\n# Grouping the invoices by payment method code and counting the occurrences\npayment_counts = INVOICES.groupby('payment_method_code').size()\n\n# Creating a bar plot\nplt.bar(payment_counts.index, payment_counts.values)\n\n# Adding labels and title\nplt.xlabel('Payment Method Code')\nplt.ylabel('Count')\nplt.title('Number of Invoices by Payment Method Code')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Return a bar on what is the code of each role and the number of employees in each role ? , sort x axis in desc order please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nEmployees.columns = Employees.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\nrole_counts = Employees.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by role_code in descending order\nrole_counts = role_counts.sort_values('role_code', ascending=False)\n\n# Creating a bar plot\nplt.bar(role_counts['role_code'], role_counts['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Employees by Role Code')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "How many employees are there in the \"Human Resource\" and \"Manager\" roles, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nROLES = pd.read_sql(\"SELECT * FROM ROLES\", conn)\nEmployees.columns = Employees.columns.str.lower()\nROLES.columns = ROLES.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Employees, ROLES, left_on='role_code', right_on='role_code')\n\n# Filter the data based on role names\nfiltered_df = merged_df[merged_df['role_name'].isin(['Human Resource', 'Manager'])]\n\n# Group by role name and count the number of occurrences\ngrouped_df = filtered_df.groupby('role_name').size().reset_index(name='count')\n\n# Sort the data by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['role_name'], sorted_df['count'])\nplt.xlabel('Role Name')\nplt.ylabel('Count')\nplt.title('Number of Employees by Role')\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "Show different teams of technicians and the number of technicians in each team with a bar chart , and display from high to low by the X-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\ntechnician.columns = technician.columns.str.lower()\n\n# Grouping the data by 'team' and counting the number of occurrences\nteam_counts = technician.groupby('team').size()\n\n# Sorting the data by 'team' in descending order\nteam_counts = team_counts.sort_index(ascending=False)\n\n# Creating a bar plot\nplt.bar(team_counts.index, team_counts.values)\n\n# Adding labels and title\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Technician Count by Team')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show all distinct product categories along with the number of mailshots in each category Visualize by bar chart, and could you sort in ascending by the x-axis please?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the mailshot_campaigns table\nmailshot_campaigns = pd.read_sql(\"SELECT * FROM mailshot_campaigns\", conn)\n\n# Convert column names to lowercase\nmailshot_campaigns.columns = map(str.lower, mailshot_campaigns.columns)\n\n# Perform the SQL query\nresult = mailshot_campaigns.groupby('product_category').size().reset_index(name='count').sort_values('product_category')\n\n# Generate the bar chart\nplt.bar(result['product_category'], result['count'])\nplt.xlabel('Product Category')\nplt.ylabel('Count')\nplt.title('Count of Mailshot Campaigns by Product Category')\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "I want to see trend of the number of season by season , and order in descending by the X .",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\ngame.columns = game.columns.str.lower()\n\n# Grouping the data by season and counting the number of games in each season\nseason_count = game.groupby('season').size().reset_index(name='count')\n\n# Sorting the data by season in descending order\nseason_count = season_count.sort_values('season', ascending=False)\n\n# Plotting the line chart\nplt.plot(season_count['season'], season_count['count'])\nplt.xlabel('Season')\nplt.ylabel('Count')\nplt.title('Number of Games by Season')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Show all payment method codes and the number of orders for each code . Show bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nINVOICES = pd.read_sql(\"SELECT * FROM INVOICES\", conn)\nINVOICES.columns = INVOICES.columns.str.lower()\n\n# Grouping the invoices by payment method code and counting the occurrences\npayment_counts = INVOICES.groupby('payment_method_code').size()\n\n# Creating a bar plot\nplt.bar(payment_counts.index, payment_counts.values)\n\n# Adding labels and title\nplt.xlabel('Payment Method Code')\nplt.ylabel('Count')\nplt.title('Number of Invoices by Payment Method Code')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "In a bar chart, please display the city with the highest number of staff members.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nAddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\nStaff = pd.read_sql(\"SELECT * FROM Staff\", conn)\nAddresses.columns = Addresses.columns.str.lower()\nStaff.columns = Staff.columns.str.lower()\n\n# Joining the addresses and staff tables\nmerged_df = pd.merge(Addresses, Staff, left_on='address_id', right_on='staff_address_id')\n\n# Grouping by city and counting the number of occurrences\ngrouped_df = merged_df.groupby('city').size().reset_index(name='count')\n\n# Sorting by count in descending order and selecting the top 1\ntop_city = grouped_df.sort_values('count', ascending=False).head(1)\n\n# Plotting the bar chart\nplt.bar(top_city['city'], top_city['count'])\nplt.xlabel('City')\nplt.ylabel('Count')\nplt.title('Top City with Highest Count')\nplt.show()"
  },
  {
    "db_id": "sakila_1",
    "question": "What is the result of the SQL query represented by a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nfilm_actor = pd.read_sql(\"SELECT * FROM film_actor\", conn)\nactor = pd.read_sql(\"SELECT * FROM actor\", conn)\nfilm_actor.columns = film_actor.columns.str.lower()\nactor.columns = actor.columns.str.lower()\n\n# Perform the join operation\nresult = pd.merge(film_actor, actor, on='actor_id')\n\n# Group by actor_id and count the number of occurrences\ncount_by_actor = result.groupby('actor_id').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(count_by_actor['actor_id'], count_by_actor['count'])\nplt.xlabel('Actor ID')\nplt.ylabel('Count')\nplt.title('Number of Films per Actor')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "For each type, how many ships are there Plot them as bar chart, list y-axis in asc order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ship table\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\n\n# Perform the SQL query\nresult = ship_df.groupby('type').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result['type'], result['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Number of Ships by Type')\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "How many male and female members are there in the club \"Bootup Baltimore\" represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nstudent = pd.read_sql(\"SELECT * FROM student\", conn)\n\nclub.columns = club.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\nstudent.columns = student.columns.str.lower()\n\n# Perform the SQL query\nresult = pd.merge(pd.merge(club, member_of_club, on='clubid'), student, on='stuid')\nresult = result[result['clubname'] == 'Bootup Baltimore']\nresult = result.groupby('sex').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(result['count'], labels=result['sex'], autopct='%1.1f%%')\nplt.title('Distribution of Sex in Bootup Baltimore Club')\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Give me a pie to show the number of author from different author .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nsubmission = pd.read_sql(\"SELECT * FROM submission\", conn)\nsubmission.columns = submission.columns.str.lower()\n\n# Group by author and count the number of submissions\nauthor_counts = submission.groupby('author').size().reset_index(name='count')\n\n# Plot pie chart\nplt.pie(author_counts['count'], labels=author_counts['author'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Tell me the trend using a line chart to show the total number of the station over the installation date, show by the x axis from high to low.",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the station table\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\n\n# Convert column names to lowercase\nstation.columns = station.columns.str.lower()\n\n# Perform the SQL query\nresult = station.groupby('installation_date').size().reset_index(name='count')\nresult = result.sort_values('installation_date', ascending=False)\n\n# Plot the line chart\nplt.plot(result['installation_date'], result['count'])\nplt.xlabel('Installation Date')\nplt.ylabel('Count')\nplt.title('Number of Installations by Date')\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "Show me a bar chart of the count of eliminations for each time, ordered by time in ascending order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nelimination = pd.read_sql(\"SELECT * FROM elimination\", conn)\nwrestler = pd.read_sql(\"SELECT * FROM wrestler\", conn)\nelimination.columns = elimination.columns.str.lower()\nwrestler.columns = wrestler.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(elimination, wrestler, on='wrestler_id')\n\n# Group by time and count the number of occurrences\ngrouped_df = merged_df.groupby('time').size().reset_index(name='count')\n\n# Sort the dataframe by time in ascending order\nsorted_df = grouped_df.sort_values('time')\n\n# Plot the bar chart\nplt.bar(sorted_df['time'], sorted_df['count'])\nplt.xlabel('Time')\nplt.ylabel('Count')\nplt.title('Number of Eliminations by Time')\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "How many players are injured in each day? Show a bar chart, I want to list from high to low by the Y.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the game and injury_accident tables\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\ninjury_accident = pd.read_sql(\"SELECT * FROM injury_accident\", conn)\n\n# Convert column names to lowercase\ngame.columns = game.columns.str.lower()\ninjury_accident.columns = injury_accident.columns.str.lower()\n# Merge the game and injury_accident tables on the id column\nmerged_data = pd.merge(game, injury_accident, left_on=\"id\", right_on=\"game_id\")\n\n# Group by Date and count the occurrences\ngrouped_data = merged_data.groupby(\"date\").size().reset_index(name=\"count\")\n\n# Sort the data by count in descending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"date\"], sorted_data[\"count\"])\nplt.xlabel(\"Date\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Injury Accidents per Date\")\nplt.xticks(rotation=45)\nplt.show()\n"
  },
  {
    "db_id": "small_bank_1",
    "question": "What are the checking and savings balances for accounts with savings balances higher than the average savings balance, visualized in a scatter chart?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\nsavings = pd.read_sql(\"SELECT * FROM savings\", conn)\nsavings = pd.read_sql(\"SELECT * FROM savings\", conn)\naccounts.columns = accounts.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\nsavings.columns = savings.columns.str.lower()\nsavings.columns = savings.columns.str.lower()\n\n# Joining tables\nmerged_df = pd.merge(accounts, checking, on='custid')\nmerged_df = pd.merge(merged_df, savings, on='custid')\n\n# Filtering data\nfiltered_df = merged_df[merged_df['balance_y'] > merged_df['balance_y'].mean()]\n\n# Scatter plot\nplt.scatter(filtered_df['balance_x'], filtered_df['balance_y'])\nplt.xlabel('Checking Balance')\nplt.ylabel('Savings Balance')\nplt.title('Scatter plot of Checking and Savings Balances')\nplt.show()"
  },
  {
    "db_id": "aircraft",
    "question": "What are the descriptions for the aircrafts, and count them by a bar chart, and I want to rank by the how many description in ascending.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the aircraft table\naircraft = pd.read_sql(\"SELECT * FROM aircraft\", conn)\n\n# Convert column names to lowercase\naircraft.columns = aircraft.columns.str.lower()\n\n# Perform the SQL query\nresult = aircraft.groupby('description').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result['description'], result['count'])\nplt.xlabel('Description')\nplt.ylabel('Count')\nplt.title('Number of Aircraft by Description')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "e_government",
    "question": "What are the party emails associated with parties that used the party form that is the most common, and how many times was each email used? Show the results in a bar chart.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nparties = pd.read_sql(\"SELECT * FROM parties\", conn)\nparty_forms = pd.read_sql(\"SELECT * FROM party_forms\", conn)\nparty_forms = pd.read_sql(\"SELECT * FROM party_forms\", conn)\nparties.columns = parties.columns.str.lower()\nparty_forms.columns = party_forms.columns.str.lower()\nparty_forms.columns = party_forms.columns.str.lower()\n\n# Joining tables\nmerged_df = pd.merge(parties, party_forms, on='party_id')\n\n# Subquery to get the form_id with the highest count\nsubquery = party_forms.groupby('form_id').size().reset_index(name='count').nlargest(1, 'count')['form_id'].values[0]\n\n# Filtering data based on the form_id with the highest count\nfiltered_df = merged_df[merged_df['form_id'] == subquery]\n\n# Grouping by party_email and counting the occurrences\ngrouped_df = filtered_df.groupby('party_email').size().reset_index(name='count')\n\n# Sorting by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plotting the bar chart\nplt.bar(sorted_df['party_email'], sorted_df['count'])\nplt.xlabel('Party Email')\nplt.ylabel('Count')\nplt.title('Number of Forms Submitted by Party Email')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "What were the themes and dates of the exhibitions that took place in 2004, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nexhibition_record = pd.read_sql(\"SELECT * FROM exhibition_record\", conn)\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nexhibition_record.columns = exhibition_record.columns.str.lower()\nexhibition.columns = exhibition.columns.str.lower()\n\n# Merge exhibition_record and exhibition tables\nmerged_df = pd.merge(exhibition_record, exhibition, on='exhibition_id')\n\n# Filter data for year 2004\nfiltered_df = merged_df[merged_df['year'] == 2004]\n\n# Group by theme and count the number of records for each theme\ngrouped_df = filtered_df.groupby('theme').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['theme'], grouped_df['count'])\nplt.xlabel('Theme')\nplt.ylabel('Count')\nplt.title('Exhibition Themes in 2004')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "For each type , what is the average tonnage , and rank by the Y in desc please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Group by type and calculate average tonnage\nship_avg_tonnage = ship.groupby('type')['tonnage'].mean()\n\n# Sort the average tonnage in descending order\nship_avg_tonnage = ship_avg_tonnage.sort_values(ascending=False)\n\n# Create a bar plot\nplt.bar(ship_avg_tonnage.index, ship_avg_tonnage.values)\n\n# Set the x-axis label\nplt.xlabel('Type')\n\n# Set the y-axis label\nplt.ylabel('Average Tonnage')\n\n# Set the title of the plot\nplt.title('Average Tonnage by Ship Type')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Give me a bar for what is the code of each role and the number of employees in each role ? , and could you sort y axis in ascending order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nEmployees.columns = Employees.columns.str.lower()\n\n# Grouping the data by role_code and counting the occurrences\nrole_counts = Employees.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nrole_counts = role_counts.sort_values('count')\n\n# Creating the bar plot\nplt.bar(role_counts['role_code'], role_counts['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Employees by Role Code')\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "Show different teams in eliminations and the number of eliminations from each team by a bar chart , order by the total number from low to high .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nelimination = pd.read_sql(\"SELECT * FROM elimination\", conn)\nelimination.columns = elimination.columns.str.lower()\n\n# Group by team and count the number of occurrences\nteam_counts = elimination.groupby('team').size().reset_index(name='count')\n\n# Sort the counts in ascending order\nteam_counts = team_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(team_counts['team'], team_counts['count'])\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Team')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Show all payment method codes and the number of orders for each code in a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the INVOICES table\ninvoices = pd.read_sql(\"SELECT * FROM INVOICES\", conn)\n\n# Convert column names to lowercase\ninvoices.columns = invoices.columns.str.lower()\n\n# Group by payment_method_code and count the number of occurrences\npayment_counts = invoices.groupby('payment_method_code').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(payment_counts['payment_method_code'], payment_counts['count'])\nplt.xlabel('Payment Method Code')\nplt.ylabel('Count')\nplt.title('Number of Invoices by Payment Method Code')\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "Show the number of games for each away team in a bar chart , could you show bars in desc order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\ngame.columns = game.columns.str.lower()\n\n# Grouping the data by away_team and counting the occurrences\naway_team_counts = game.groupby('away_team').size().reset_index(name='count')\n\n# Sorting the data by away_team in descending order\naway_team_counts = away_team_counts.sort_values('away_team', ascending=False)\n\n# Creating the bar plot\nplt.bar(away_team_counts['away_team'], away_team_counts['count'])\nplt.xlabel('Away Team')\nplt.ylabel('Count')\nplt.title('Number of Games by Away Team')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "icfp_1",
    "question": "Show me a bar chart of the top 10 papers with the highest number of authors.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\npapers = pd.read_sql(\"SELECT * FROM papers\", conn)\nauthorship.columns = authorship.columns.str.lower()\npapers.columns = papers.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(authorship, papers, on='paperid')\n\n# Group by title and count the number of authorder\ngrouped_df = merged_df.groupby('title').agg({'authorder': 'count'}).reset_index()\n\n# Sort by count in descending order and select top 10\ntop_10_df = grouped_df.sort_values('authorder', ascending=False).head(10)\n\n# Create the bar plot\nplt.bar(top_10_df['title'], top_10_df['authorder'])\nplt.xlabel('Title')\nplt.ylabel('Count of authorder')\nplt.title('Top 10 Papers by Count of authorder')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Create a bar chart showing the total number across city , and show by the y-axis from low to high please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstation.columns = station.columns.str.lower()\n\n# Group by city and count the number of rows\ncity_counts = station.groupby('city').size().reset_index(name='count')\n\n# Sort the counts in ascending order\ncity_counts = city_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(city_counts['city'], city_counts['count'])\nplt.xlabel('City')\nplt.ylabel('Count')\nplt.title('Number of Stations by City')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sakila_1",
    "question": "What are the top 10 countries with the highest number of cities, where each country has 3 or more cities, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncity.columns = city.columns.str.lower()\ncountry.columns = country.columns.str.lower()\n\n# Join city and country tables\nmerged_df = pd.merge(city, country, on='country_id')\n\n# Group by country and count the number of cities\ngrouped_df = merged_df.groupby('country').size().reset_index(name='count')\n\n# Filter countries with count >= 3\nfiltered_df = grouped_df[grouped_df['count'] >= 3]\n\n# Sort by count in descending order and select top 10\ntop_10_countries = filtered_df.sort_values('count', ascending=False).head(10)\n\n# Plot the bar chart\nplt.bar(top_10_countries['country'], top_10_countries['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Top 10 Countries with at least 3 Cities')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "Display a bar chart for what are the names of the technicians and how many machines are they assigned to repair?, and display by the the total number in desc.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the repair_assignment table\nrepair_assignment = pd.read_sql(\"SELECT * FROM repair_assignment\", conn)\n\n# Read the technician table\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\n\n# Convert column names to lowercase\nrepair_assignment.columns = repair_assignment.columns.str.lower()\ntechnician.columns = technician.columns.str.lower()\n\n# merge the repair_assignment and technician tables on technician_id\nmerged_data = pd.merge(repair_assignment, technician, on=\"technician_id\")\n\n# group by technician name and count the number of assignments\ngrouped_data = merged_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# sort the data by count in descending order\nsorted_data = grouped_data.sort_values(by=\"count\", ascending=False)\n\n# plot the bar chart\nplt.bar(sorted_data[\"name\"], sorted_data[\"count\"])\nplt.xlabel(\"Technician Name\")\nplt.ylabel(\"Number of Assignments\")\nplt.title(\"Number of Assignments per Technician\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "small_bank_1",
    "question": "What is the scatter plot of the balance of each savings account and the total balance of checking and savings accounts for accounts whose savings balance is higher than the average savings balance?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\nsavings = pd.read_sql(\"SELECT * FROM savings\", conn)\nsavings = pd.read_sql(\"SELECT * FROM savings\", conn)\naccounts.columns = accounts.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\nsavings.columns = savings.columns.str.lower()\nsavings.columns = savings.columns.str.lower()\n\n# Joining tables\nmerged_df = pd.merge(accounts, checking, on='custid')\nmerged_df = pd.merge(merged_df, savings, on='custid')\n\n# Filtering data\nfiltered_df = merged_df[merged_df['balance_y'] > merged_df['balance_y'].mean()]\n\n# Creating scatter plot\nplt.scatter(filtered_df['balance_y'], filtered_df['balance_x'])\nplt.xlabel('Savings Balance')\nplt.ylabel('Total Balance')\nplt.title('Scatter Plot of Savings Balance vs Total Balance')\nplt.show()"
  },
  {
    "db_id": "perpetrator",
    "question": "Show me a bar chart of the heights of people, ranked in descending order based on the total number of people they injured.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\nperpetrator = pd.read_sql(\"SELECT * FROM perpetrator\", conn)\npeople.columns = people.columns.str.lower()\nperpetrator.columns = perpetrator.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(people, perpetrator, on='people_id')\n\n# Group by height and calculate the sum of injured\ngrouped_df = merged_df.groupby('height')['injured'].sum().reset_index()\n\n# Sort the dataframe by sum of injured in descending order\nsorted_df = grouped_df.sort_values('injured', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['height'], sorted_df['injured'])\nplt.xlabel('Height')\nplt.ylabel('Sum of Injured')\nplt.title('Sum of Injured by Height')\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "What is the count of lessons taken by customer with first name as Rylan and last name as Goodwin that were completed, shown in a line chart?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nLessons = pd.read_sql(\"SELECT * FROM Lessons\", conn)\nCustomers = pd.read_sql(\"SELECT * FROM Customers\", conn)\nLessons.columns = Lessons.columns.str.lower()\nCustomers.columns = Customers.columns.str.lower()\n\n# Merge Lessons and Customers dataframes\nmerged_df = pd.merge(Lessons, Customers, on='customer_id')\n\n# Filter data for specific customer and lesson status\nfiltered_df = merged_df[(merged_df['first_name'] == 'Rylan') & (merged_df['last_name'] == 'Goodwin') & (merged_df['lesson_status_code'] == 'Completed')]\n\n# Group by lesson date and count the number of lessons\ngrouped_df = filtered_df.groupby('lesson_date').size().reset_index(name='count')\n\n# Plot the line chart\nplt.plot(grouped_df['lesson_date'], grouped_df['count'])\nplt.xlabel('Lesson Date')\nplt.ylabel('Number of Lessons')\nplt.title('Number of Completed Lessons per Date')\nplt.show()\n"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "How does the count of problems reported before the date of any problem reported by the staff Lysanne Turcotte change over time? Show the trend using a line chart.",
    "chart": "Line",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nproblems = pd.read_sql(\"SELECT * FROM problems\", conn)\nstaff = pd.read_sql(\"SELECT * FROM staff\", conn)\nproblems = pd.read_sql(\"SELECT * FROM problems\", conn)\nstaff = pd.read_sql(\"SELECT * FROM staff\", conn)\nproblems.columns = problems.columns.str.lower()\nstaff.columns = staff.columns.str.lower()\nproblems.columns = problems.columns.str.lower()\nstaff.columns = staff.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(problems, staff, left_on='reported_by_staff_id', right_on='staff_id')\n\n# Filter data\nfiltered_df = merged_df[merged_df['date_problem_reported'] < merged_df.loc[merged_df['staff_first_name'] == 'Lysanne'].min()['date_problem_reported']]\n\n# Group by date_problem_reported and count\ngrouped_df = filtered_df.groupby('date_problem_reported').size().reset_index(name='count')\n\n# Plot line chart\nplt.plot(grouped_df['date_problem_reported'], grouped_df['count'])\nplt.xlabel('Date Problem Reported')\nplt.ylabel('Count')\nplt.title('Number of Problems Reported by Date')\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Bar chart x axis event details y axis how many event details, rank in ascending by the bars please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the EVENTS table\nevents_df = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\n\n# Convert column names to lowercase\nevents_df.columns = events_df.columns.str.lower()\n\n# Perform the SQL query\nresult = events_df.groupby('event_details').size().reset_index(name='count').sort_values('event_details')\n\n# Generate the bar chart\nplt.bar(result['event_details'], result['count'])\nplt.xlabel('Event Details')\nplt.ylabel('Count')\nplt.title('Event Details Count')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "small_bank_1",
    "question": "Which accounts have checking balances above the average checking balance and savings balances below the average savings balance? Show the names and balances of these accounts using a line chart.",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nsavings = pd.read_sql(\"SELECT * FROM savings\", conn)\nsavings = pd.read_sql(\"SELECT * FROM savings\", conn)\naccounts.columns = accounts.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\naccounts.columns = accounts.columns.str.lower()\nsavings.columns = savings.columns.str.lower()\nsavings.columns = savings.columns.str.lower()\n\n# Joining accounts and checking tables\nmerged_df = pd.merge(accounts, checking, on='custid')\n\n# Calculating average balance in checking table\navg_balance_checking = checking['balance'].mean()\n\n# Filtering rows where balance is greater than average balance in checking table\nfiltered_df = merged_df[merged_df['balance'] > avg_balance_checking]\n\n# Joining accounts and savings tables\nmerged_df2 = pd.merge(accounts, savings, on='custid')\n\n# Calculating average balance in savings table\navg_balance_savings = savings['balance'].mean()\n\n# Filtering rows where balance is less than average balance in savings table\nfiltered_df2 = merged_df2[merged_df2['balance'] < avg_balance_savings]\n\n# Filtering rows where custid is present in filtered_df2\nfinal_df = filtered_df[filtered_df['custid'].isin(filtered_df2['custid'])]\n\n# Plotting line graph\nplt.plot(final_df['name'], final_df['balance'])\nplt.xlabel('Name')\nplt.ylabel('Balance')\nplt.title('Line Graph of Balance for Selected Customers')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Find those years for all exhibitions with ticket prices lower than 15, group by year, and count year.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the exhibition table\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\n\n# Convert column names to lowercase\nexhibition.columns = exhibition.columns.str.lower()\n\n# Filter the data based on ticket_price < 15\nfiltered_exhibition = exhibition[exhibition['ticket_price'] < 15]\n\n# Group by Year and count the occurrences\ngrouped_exhibition = filtered_exhibition.groupby('year').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_exhibition['year'], grouped_exhibition['count'])\nplt.xlabel('Year')\nplt.ylabel('Count')\nplt.title('Number of Exhibitions with Ticket Price < 15')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show different types of ships and the average tonnage of ships of each type in a bar chart , rank total number in descending order please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Group by type and calculate average tonnage\nship_avg_tonnage = ship.groupby('type')['tonnage'].mean()\n\n# Sort the average tonnage in descending order\nship_avg_tonnage = ship_avg_tonnage.sort_values(ascending=False)\n\n# Plot the bar chart\nplt.bar(ship_avg_tonnage.index, ship_avg_tonnage.values)\nplt.xlabel('Type')\nplt.ylabel('Average Tonnage')\nplt.title('Average Tonnage by Ship Type')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "what are the different software platforms for devices, and how many devices have each?, order in ascending by the the total number please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the device table\ndevice_df = pd.read_sql(\"SELECT * FROM device\", conn)\n\n# Convert column names to lowercase\ndevice_df.columns = device_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = device_df.groupby('software_platform').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result_df['software_platform'], result_df['count'])\nplt.xlabel('Software Platform')\nplt.ylabel('Count')\nplt.title('Number of Devices by Software Platform')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Give me the descriptions of the service types that cost more than 100, and count them by a pie chart",
    "chart": "Pie",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the tables\nref_service_types = pd.read_sql(\"SELECT * FROM Ref_Service_Types\", conn)\nservices = pd.read_sql(\"SELECT * FROM Services\", conn)\n\n# Convert column names to lowercase\nref_service_types.columns = ref_service_types.columns.str.lower()\nservices.columns = services.columns.str.lower()\n\n# Merge the tables based on the common column\nmerged_data = pd.merge(ref_service_types, services, on=\"service_type_code\")\n\n# Filter the data based on the condition\nfiltered_data = merged_data[merged_data[\"product_price\"] > 100]\n\n# Group the data by service type description and count the occurrences\ngrouped_data = filtered_data.groupby(\"service_type_description\").size()\n\n# Plot the pie chart\nplt.pie(grouped_data, labels=grouped_data.index, autopct=\"%1.1f%%\")\nplt.title(\"Distribution of Service Types\")\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "What is the distribution of canceled purchases for the product \"food\" among different customer groups? Show me a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\norder_items = pd.read_sql(\"SELECT * FROM order_items\", conn)\nproducts = pd.read_sql(\"SELECT * FROM products\", conn)\ncustomers.columns = customers.columns.str.lower()\norders.columns = orders.columns.str.lower()\norder_items.columns = order_items.columns.str.lower()\nproducts.columns = products.columns.str.lower()\n\n# Merge tables\nmerged_data = pd.merge(customers, orders, on='customer_id')\nmerged_data = pd.merge(merged_data, order_items, on='order_id')\nmerged_data = pd.merge(merged_data, products, on='product_id')\n\n# Filter data\nfiltered_data = merged_data[(merged_data['order_item_status'] == 'Cancel') & (merged_data['product_name'] == 'food')]\n\n# Group by customer_name and count\ngrouped_data = filtered_data.groupby('customer_name').size().reset_index(name='count')\n\n# Plot pie chart\nplt.pie(grouped_data['count'], labels=grouped_data['customer_name'], autopct='%1.1f%%')\nplt.title('Cancelled Food Orders by Customer')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Can you create a pie chart to display the distribution of trip counts starting from each station?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\ntrip.columns = trip.columns.str.lower()\nstation.columns = station.columns.str.lower()\n\n# Perform the join operation\nmerged_data = pd.merge(trip, station, left_on='start_station_id', right_on='id')\n\n# Group by station name and count the number of trips\ngrouped_data = merged_data.groupby('name').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_data['count'], labels=grouped_data['name'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "Bar chart of the number of position from each position , and list in ascending by the Position .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot.columns = pilot.columns.str.lower()\n\n# Group by position and count the number of occurrences\nposition_counts = pilot.groupby('position').size().reset_index(name='count')\n\n# Sort the positions in ascending order\nposition_counts = position_counts.sort_values('position')\n\n# Create a bar plot\nplt.bar(position_counts['position'], position_counts['count'])\nplt.xlabel('Position')\nplt.ylabel('Count')\nplt.title('Number of Pilots by Position')\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "What is the name of the stadium with the least number of injury accidents during games, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\nstadium = pd.read_sql(\"SELECT * FROM stadium\", conn)\ninjury_accident = pd.read_sql(\"SELECT * FROM injury_accident\", conn)\ngame.columns = game.columns.str.lower()\nstadium.columns = stadium.columns.str.lower()\ninjury_accident.columns = injury_accident.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(game, stadium, left_on='stadium_id', right_on='id')\nmerged_df = pd.merge(merged_df, injury_accident, left_on='id_x', right_on='game_id')\n\n# Grouping by stadium name and counting the occurrences\ngrouped_df = merged_df.groupby('name')['id_x'].count().reset_index()\ngrouped_df.columns = ['Stadium', 'Count']\n\n# Sorting by count in ascending order\nsorted_df = grouped_df.sort_values('Count')\n\n# Plotting the bar chart\nplt.bar(sorted_df['Stadium'], sorted_df['Count'])\nplt.xlabel('Stadium')\nplt.ylabel('Count')\nplt.title('Number of Injury Accidents by Stadium')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "question": "Show a bar chart about how many employees does each role have?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ROLES table\nroles_df = pd.read_sql(\"SELECT * FROM ROLES\", conn)\nroles_df.columns = map(str.lower, roles_df.columns)\n\n# Read the Employees table\nemployees_df = pd.read_sql(\"SELECT * FROM Employees\", conn)\nemployees_df.columns = map(str.lower, employees_df.columns)\n\n# Merge the two tables on role_code\nmerged_df = pd.merge(roles_df, employees_df, on=\"role_code\")\n\n# Group by role_description and count the number of occurrences\ngrouped_df = merged_df.groupby(\"role_description\").size().reset_index(name=\"count\")\n\n# Plot the bar chart\nplt.bar(grouped_df[\"role_description\"], grouped_df[\"count\"])\nplt.xlabel(\"Role Description\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Employees by Role Description\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "What are the names of all the physicians who took appointments, and count them by a bar chart",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the appointment table\nappointment = pd.read_sql(\"SELECT * FROM appointment\", conn)\n\n# Read the physician table\nphysician = pd.read_sql(\"SELECT * FROM physician\", conn)\n\n# Convert column names to lowercase\nappointment.columns = appointment.columns.str.lower()\nphysician.columns = physician.columns.str.lower()\n\n# merge the appointment and physician tables on the physician column\nmerged_data = pd.merge(appointment, physician, left_on='physician', right_on='employeeid')\n\n# group by name and count the occurrences\ngrouped_data = merged_data.groupby('name').size().reset_index(name='count')\n\n# plot the bar chart\nplt.bar(grouped_data['name'], grouped_data['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Number of Appointments by Physician')\nplt.show()\n"
  },
  {
    "db_id": "ship_mission",
    "question": "Give me a bar chart for mean tonnage of each type",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Calculate average tonnage by ship type\navg_tonnage_by_type = ship.groupby('type')['tonnage'].mean()\n\n# Create bar plot\nplt.bar(avg_tonnage_by_type.index, avg_tonnage_by_type.values)\nplt.xlabel('Ship Type')\nplt.ylabel('Average Tonnage')\nplt.title('Average Tonnage by Ship Type')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Show all distinct product categories along with the number of mailshots in each category Visualize by bar chart , and could you sort in ascending by the x-axis please ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmailshot_campaigns = pd.read_sql(\"SELECT * FROM mailshot_campaigns\", conn)\nmailshot_campaigns.columns = mailshot_campaigns.columns.str.lower()\n\n# Grouping the data by product_category and counting the occurrences\ngrouped_data = mailshot_campaigns.groupby('product_category').size().reset_index(name='count')\n\n# Sorting the data by product_category in ascending order\nsorted_data = grouped_data.sort_values('product_category')\n\n# Creating the bar plot\nplt.bar(sorted_data['product_category'], sorted_data['count'])\nplt.xlabel('Product Category')\nplt.ylabel('Count')\nplt.title('Number of Campaigns by Product Category')\nplt.show()"
  },
  {
    "db_id": "small_bank_1",
    "question": "Show me a bar chart displaying the count of checking accounts for each account name, sorted in descending order by count.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\naccounts.columns = accounts.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(accounts, checking, on='custid')\n\n# Group by name and count the number of occurrences\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['name'], sorted_df['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Number of Accounts by Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "icfp_1",
    "question": "Which country has the highest number of published papers, and what is the count of papers published by that country? Show it in a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ninst = pd.read_sql(\"SELECT * FROM inst\", conn)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\npapers = pd.read_sql(\"SELECT * FROM papers\", conn)\ninst.columns = inst.columns.str.lower()\nauthorship.columns = authorship.columns.str.lower()\npapers.columns = papers.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(inst, authorship, on='instid')\nmerged_df = pd.merge(merged_df, papers, on='paperid')\n\n# Group by country and count\ncountry_counts = merged_df.groupby('country').size().reset_index(name='count')\n\n# Sort by count in descending order and select the top 1\ntop_country = country_counts.sort_values('count', ascending=False).head(1)\n\n# Visualize as a bar chart\nplt.bar(top_country['country'], top_country['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Top Country with the Most Papers')\nplt.show()"
  },
  {
    "db_id": "sakila_1",
    "question": "What is the length of each film and how many times is each length rented, shown in a scatter chart?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nfilm = pd.read_sql(\"SELECT * FROM film\", conn)\ninventory = pd.read_sql(\"SELECT * FROM inventory\", conn)\nrental = pd.read_sql(\"SELECT * FROM rental\", conn)\nfilm.columns = film.columns.str.lower()\ninventory.columns = inventory.columns.str.lower()\nrental.columns = rental.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(film, inventory, on='film_id')\nmerged_df = pd.merge(merged_df, rental, on='inventory_id')\n\n# Group by length and count\ngrouped_df = merged_df.groupby('length').size().reset_index(name='count')\n\n# Scatter plot\nplt.scatter(grouped_df['length'], grouped_df['count'])\nplt.xlabel('Length')\nplt.ylabel('Count')\nplt.title('Film Length vs Count')\nplt.show()"
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "what are the names and id of courses having at most 2 sections?, and I want to sort in desc by the y-axis.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Courses table\ncourses = pd.read_sql(\"SELECT * FROM Courses\", conn)\ncourses.columns = courses.columns.str.lower()\n\n# Read the Sections table\nsections = pd.read_sql(\"SELECT * FROM Sections\", conn)\nsections.columns = sections.columns.str.lower()\n\n# Merge the Courses and Sections tables on course_id\nmerged_data = pd.merge(courses, sections, on=\"course_id\")\n\n# Sort the merged data by course_id in descending order\nsorted_data = merged_data.sort_values(by=\"course_id\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"course_name\"], sorted_data[\"course_id\"])\nplt.xlabel(\"Course Name\")\nplt.ylabel(\"Course ID\")\nplt.title(\"Course ID vs Course Name\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Return a bar chart showing the total number of each ship type , and I want to list total number from high to low order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Group by 'type' and count the occurrences\nship_count = ship.groupby('type').size().reset_index(name='count')\n\n# Sort by count in descending order\nship_count = ship_count.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(ship_count['type'], ship_count['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Ship Type Count')\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "What are the different role codes for users , and how many users have each Show bar chart , show from low to high by the X-axis please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nusers = pd.read_sql(\"SELECT * FROM users\", conn)\nusers.columns = users.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\nrole_counts = users.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by role_code in ascending order\nrole_counts = role_counts.sort_values('role_code')\n\n# Creating the bar plot\nplt.bar(role_counts['role_code'], role_counts['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Users by Role Code')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Return a line on what are all the calendar dates and day Numbers ? , and order from low to high by the x-axis .",
    "chart": "Line",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nRef_calendar = pd.read_sql(\"SELECT * FROM Ref_calendar\", conn)\nRef_calendar.columns = Ref_calendar.columns.str.lower()\n\n# Assuming you have already read the table data into Ref_calendar dataframe\n\n# Sort the dataframe by calendar_date\nRef_calendar = Ref_calendar.sort_values(by='calendar_date')\n\n# Plotting the line chart\nplt.plot(Ref_calendar['calendar_date'], Ref_calendar['day_number'])\nplt.xlabel('Calendar Date')\nplt.ylabel('Day Number')\nplt.title('Line Chart of Day Number')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Which customers have at least 2 mailshots with outcome code 'Order' and how many mailshots do they have? Represent the results in a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nmailshot_customers = pd.read_sql(\"SELECT * FROM mailshot_customers\", conn)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\nmailshot_customers.columns = mailshot_customers.columns.str.lower()\ncustomers.columns = customers.columns.str.lower()\n\n# Merge the two dataframes\nmerged_df = pd.merge(mailshot_customers, customers, on='customer_id')\n\n# Filter the merged dataframe based on the condition\nfiltered_df = merged_df[merged_df['outcome_code'] == 'Order']\n\n# Group by customer_name and count the number of occurrences\ngrouped_df = filtered_df.groupby('customer_name').size().reset_index(name='count')\n\n# Filter the grouped dataframe based on the count condition\nfiltered_grouped_df = grouped_df[grouped_df['count'] >= 2]\n\n# Plot the pie chart\nplt.pie(filtered_grouped_df['count'], labels=filtered_grouped_df['customer_name'], autopct='%1.1f%%')\nplt.title('Customers with at least 2 orders')\nplt.show()"
  },
  {
    "db_id": "company_office",
    "question": "List the name and assets of each company in ascending order of company name in a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nCompanies = pd.read_sql(\"SELECT * FROM Companies\", conn)\nCompanies.columns = Companies.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called Companies\n\n# Sort the data by name in ascending order\nsorted_data = Companies.sort_values(by='name')\n\n# Extract the name and assets_billion columns\nname = sorted_data['name']\nassets_billion = sorted_data['assets_billion']\n\n# Create a bar plot\nplt.bar(name, assets_billion)\n\n# Set the x-axis label\nplt.xlabel('Company Name')\n\n# Set the y-axis label\nplt.ylabel('Assets (in billions)')\n\n# Set the title\nplt.title('Company Assets')\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death , compare the number of deaths by dates active with a bar graph , order names in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm.columns = storm.columns.str.lower()\n\n# Assuming storm is a DataFrame containing the table data\n\n# Filter the data where number_deaths >= 1\nfiltered_data = storm[storm['number_deaths'] >= 1]\n\n# Sort the filtered data by dates_active in ascending order\nsorted_data = filtered_data.sort_values('dates_active')\n\n# Create a bar plot\nplt.bar(sorted_data['dates_active'], sorted_data['number_deaths'])\n\n# Add labels and title\nplt.xlabel('Dates Active')\nplt.ylabel('Number of Deaths')\nplt.title('Number of Deaths by Dates Active')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Show the number of documents for each location code in a bar chart , and I want to rank by the y axis in desc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDocument_locations = pd.read_sql(\"SELECT * FROM Document_locations\", conn)\nDocument_locations.columns = Document_locations.columns.str.lower()\n\n# Group by location_code and count the occurrences\nlocation_counts = Document_locations.groupby('location_code').size().reset_index(name='count')\n\n# Sort by count in descending order\nlocation_counts = location_counts.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(location_counts['location_code'], location_counts['count'])\nplt.xlabel('Location Code')\nplt.ylabel('Count')\nplt.title('Document Locations')\nplt.show()"
  },
  {
    "db_id": "entertainment_awards",
    "question": "Show the total number from each type , and I want to sort names from high to low order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartwork = pd.read_sql(\"SELECT * FROM artwork\", conn)\nartwork.columns = artwork.columns.str.lower()\n\n# Grouping the artwork dataframe by type and counting the number of occurrences\nartwork_grouped = artwork.groupby('type').size().reset_index(name='count')\n\n# Sorting the dataframe by type in descending order\nartwork_grouped_sorted = artwork_grouped.sort_values('type', ascending=False)\n\n# Creating a bar plot\nplt.bar(artwork_grouped_sorted['type'], artwork_grouped_sorted['count'])\n\n# Adding labels and title\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Artwork Count by Type')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "perpetrator",
    "question": "Bar chart x axis country y axis the total number , sort x-axis in descending order please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperpetrator = pd.read_sql(\"SELECT * FROM perpetrator\", conn)\nperpetrator.columns = perpetrator.columns.str.lower()\n\n# Group by country and count the number of occurrences\nperpetrator_count = perpetrator.groupby('country').size().reset_index(name='count')\n\n# Sort by country in descending order\nperpetrator_count = perpetrator_count.sort_values('country', ascending=False)\n\n# Plot the bar chart\nplt.bar(perpetrator_count['country'], perpetrator_count['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Perpetrators by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Compare the number of participants in each participant type code using a bar chart , order bars from high to low order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nParticipants = pd.read_sql(\"SELECT * FROM Participants\", conn)\nParticipants.columns = Participants.columns.str.lower()\n\n# Group by participant_type_code and count the occurrences\ngrouped = Participants.groupby('participant_type_code').size().reset_index(name='count')\n\n# Sort by participant_type_code in descending order\ngrouped = grouped.sort_values('participant_type_code', ascending=False)\n\n# Create bar plot\nplt.bar(grouped['participant_type_code'], grouped['count'])\nplt.xlabel('Participant Type Code')\nplt.ylabel('Count')\nplt.title('Count of Participants by Participant Type Code')\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "Which machines are assigned to each technician for repair, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nrepair_assignment = pd.read_sql(\"SELECT * FROM repair_assignment\", conn)\nmachine = pd.read_sql(\"SELECT * FROM machine\", conn)\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\nrepair_assignment.columns = repair_assignment.columns.str.lower()\nmachine.columns = machine.columns.str.lower()\ntechnician.columns = technician.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(pd.merge(repair_assignment, machine, on='machine_id'), technician, on='technician_id')\n\n# Group by machine_series and count the number of technicians\nresult = merged_df.groupby('machine_series')['name'].count().reset_index()\n\n# Plot the bar chart\nplt.bar(result['machine_series'], result['name'])\nplt.xlabel('Machine Series')\nplt.ylabel('Number of Technicians')\nplt.title('Number of Technicians per Machine Series')\nplt.show()"
  },
  {
    "db_id": "company_office",
    "question": "compare the number of companies from different industries using a pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nCompanies = pd.read_sql(\"SELECT * FROM Companies\", conn)\nCompanies.columns = Companies.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called Companies\n\n# Grouping the data by industry and counting the number of companies in each industry\nindustry_counts = Companies.groupby('industry').size()\n\n# Creating a pie chart\nplt.pie(industry_counts, labels=industry_counts.index, autopct='%1.1f%%')\nplt.title('Company Distribution by Industry')\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Return a pie chart to show the proportion of participant type code .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nParticipants = pd.read_sql(\"SELECT * FROM Participants\", conn)\nParticipants.columns = Participants.columns.str.lower()\n\n# Grouping the data by participant_type_code and counting the occurrences\ngrouped_data = Participants.groupby('participant_type_code').size()\n\n# Creating a pie chart\nplt.pie(grouped_data, labels=grouped_data.index, autopct='%1.1f%%')\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death , show me the dates active and the total number of deaths with a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm.columns = storm.columns.str.lower()\n\n# Assuming storm is a DataFrame containing the table data\n\n# Filter the data to include only rows where number_deaths >= 1\nfiltered_data = storm[storm['number_deaths'] >= 1]\n\n# Group the data by dates_active and calculate the sum of number_deaths for each date\ngrouped_data = filtered_data.groupby('dates_active')['number_deaths'].sum()\n\n# Convert the grouped data to a DataFrame for easier plotting\ndf = pd.DataFrame(grouped_data).reset_index()\n\n# Plot the bar chart\nplt.bar(df['dates_active'], df['number_deaths'])\nplt.xlabel('Dates Active')\nplt.ylabel('Number of Deaths')\nplt.title('Number of Deaths by Dates Active')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Show me a bar chart displaying the day number on the x-axis and the count of documents on the y-axis for each day in the database.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nAll_documents = pd.read_sql(\"SELECT * FROM All_documents\", conn)\nRef_calendar = pd.read_sql(\"SELECT * FROM Ref_calendar\", conn)\nAll_documents.columns = All_documents.columns.str.lower()\nRef_calendar.columns = Ref_calendar.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(All_documents, Ref_calendar, left_on='date_stored', right_on='calendar_date')\n\n# Group by day_number and count the number of records\ngrouped_df = merged_df.groupby('day_number').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['day_number'], sorted_df['count'])\nplt.xlabel('Day Number')\nplt.ylabel('Count')\nplt.title('Number of Documents by Day Number')\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show different citizenship of singers and the number of singers of each citizenship Plot them as bar chart , and sort total number in asc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Group by citizenship and count the number of singers\nsinger_count = singer.groupby('citizenship').size().reset_index(name='count')\n\n# Sort the dataframe by count in ascending order\nsinger_count = singer_count.sort_values('count')\n\n# Create a bar plot\nplt.bar(singer_count['citizenship'], singer_count['count'])\nplt.xlabel('Citizenship')\nplt.ylabel('Count')\nplt.title('Number of Singers by Citizenship')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "What are the number of the descriptions of the service types with product price above 100?, order by the X-axis in ascending.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Ref_Service_Types table\nref_service_types = pd.read_sql(\"SELECT * FROM Ref_Service_Types\", conn)\nref_service_types.columns = map(str.lower, ref_service_types.columns)\n\n# Read the Services table\nservices = pd.read_sql(\"SELECT * FROM Services\", conn)\nservices.columns = map(str.lower, services.columns)\n\n# Merge the two tables on Service_Type_Code\nmerged_data = pd.merge(ref_service_types, services, on=\"service_type_code\")\n\n# Filter the merged data based on Product_Price > 100\nfiltered_data = merged_data[merged_data[\"product_price\"] > 100]\n\n# Group the data by Service_Type_Description and count the occurrences\ngrouped_data = filtered_data.groupby(\"service_type_description\").size().reset_index(name=\"count\")\n\n# Sort the data by Service_Type_Description in ascending order\nsorted_data = grouped_data.sort_values(\"service_type_description\", ascending=True)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"service_type_description\"], sorted_data[\"count\"])\nplt.xlabel(\"Service Type Description\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of Service Types with Product Price > 100\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "company_1",
    "question": "Find the number of employees of each gender whose salary is lower than 50000. Visualize by bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the employee table\nemployee_df = pd.read_sql(\"SELECT * FROM employee\", conn)\n\n# Convert column names to lowercase\nemployee_df.columns = employee_df.columns.str.lower()\n\n# Filter the data based on salary condition\nfiltered_df = employee_df[employee_df['salary'] < 50000]\n\n# Group by sex and count the number of records\ngrouped_df = filtered_df.groupby('sex').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['sex'], grouped_df['count'])\nplt.xlabel('Sex')\nplt.ylabel('Count')\nplt.title('Number of Employees with Salary < 50000 by Sex')\nplt.show()"
  },
  {
    "db_id": "perpetrator",
    "question": "Visualize a bar chart for what are the countries of perpetrators ? Show each country and the corresponding number of perpetrators there , and list from low to high by the Y-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperpetrator = pd.read_sql(\"SELECT * FROM perpetrator\", conn)\nperpetrator.columns = perpetrator.columns.str.lower()\n\n# Group by country and count the occurrences\nperpetrator_count = perpetrator.groupby('country').size().reset_index(name='count')\n\n# Sort by count in ascending order\nperpetrator_count = perpetrator_count.sort_values('count')\n\n# Plot the bar chart\nplt.bar(perpetrator_count['country'], perpetrator_count['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Perpetrators by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "customer_deliveries",
    "question": "What is the name and count of the product that has been ordered the greatest number of times, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nproducts = pd.read_sql(\"SELECT * FROM products\", conn)\nregular_order_products = pd.read_sql(\"SELECT * FROM regular_order_products\", conn)\nproducts.columns = products.columns.str.lower()\nregular_order_products.columns = regular_order_products.columns.str.lower()\n\n# Merge the two dataframes\nmerged_df = pd.merge(products, regular_order_products, on='product_id')\n\n# Group by product_name and count the number of occurrences\ngrouped_df = merged_df.groupby('product_name').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['product_name'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Show me the trend about what are all the calendar dates and day Numbers ? , rank in descending by the x-axis please .",
    "chart": "Line",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nRef_calendar = pd.read_sql(\"SELECT * FROM Ref_calendar\", conn)\nRef_calendar.columns = Ref_calendar.columns.str.lower()\n\n# Assuming the table data is already loaded into a DataFrame called Ref_calendar\n\n# Sort the DataFrame by calendar_date in descending order\nRef_calendar_sorted = Ref_calendar.sort_values(by='calendar_date', ascending=False)\n\n# Extract the calendar_date and day_number columns\ncalendar_date = Ref_calendar_sorted['calendar_date']\nday_number = Ref_calendar_sorted['day_number']\n\n# Plot the line chart\nplt.plot(calendar_date, day_number)\nplt.xlabel('Calendar Date')\nplt.ylabel('Day Number')\nplt.title('Line Chart of Day Number by Calendar Date')\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "Show me the proportion on how many eliminations did each team have ?",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nelimination = pd.read_sql(\"SELECT * FROM elimination\", conn)\nelimination.columns = elimination.columns.str.lower()\n\n# Grouping the data by team and counting the occurrences\nteam_counts = elimination.groupby('team').size()\n\n# Creating a pie chart\nplt.pie(team_counts, labels=team_counts.index, autopct='%1.1f%%')\nplt.title('Team Distribution')\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "List the name for storms and the number of affected regions for each storm with a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the storm table\nstorm_df = pd.read_sql(\"SELECT * FROM storm\", conn)\n\n# Read the affected_region table\naffected_region_df = pd.read_sql(\"SELECT * FROM affected_region\", conn)\n\n# Convert column names to lowercase\nstorm_df.columns = storm_df.columns.str.lower()\naffected_region_df.columns = affected_region_df.columns.str.lower()\n\n# merge the two tables on storm_id\nmerged_df = pd.merge(storm_df, affected_region_df, on=\"storm_id\")\n\n# group by storm_id and count the occurrences\ngrouped_df = merged_df.groupby(\"storm_id\").size().reset_index(name=\"count\")\n\n# plot the bar chart\nplt.bar(grouped_df[\"storm_id\"], grouped_df[\"count\"])\nplt.xlabel(\"Storm ID\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of occurrences per storm\")\nplt.show()\n"
  },
  {
    "db_id": "hospital_1",
    "question": "Show me a bar chart displaying the count of treatments each nurse has assisted with, along with their names.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nundergoes = pd.read_sql(\"SELECT * FROM undergoes\", conn)\nnurse = pd.read_sql(\"SELECT * FROM nurse\", conn)\nundergoes.columns = undergoes.columns.str.lower()\nnurse.columns = nurse.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(undergoes, nurse, left_on='assistingnurse', right_on='employeeid')\n\n# Group by nurse name and count the number of occurrences\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['name'], sorted_df['count'])\nplt.xlabel('Nurse Name')\nplt.ylabel('Count')\nplt.title('Number of Procedures Assisted by Each Nurse')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "What are the different software platforms for devices , and how many devices have each , I want to show bar in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ndevice = pd.read_sql(\"SELECT * FROM device\", conn)\ndevice.columns = device.columns.str.lower()\n\n# Group by software_platform and count the number of occurrences\nplatform_counts = device.groupby('software_platform').size().reset_index(name='count')\n\n# Sort the platform_counts dataframe by software_platform in ascending order\nplatform_counts = platform_counts.sort_values('software_platform')\n\n# Create a bar plot\nplt.bar(platform_counts['software_platform'], platform_counts['count'])\nplt.xlabel('Software Platform')\nplt.ylabel('Count')\nplt.title('Device Count by Software Platform')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Which customers, among the top 5, have received the most mailshots? Show the results using a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmailshot_customers = pd.read_sql(\"SELECT * FROM mailshot_customers\", conn)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\nmailshot_customers.columns = mailshot_customers.columns.str.lower()\ncustomers.columns = customers.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(mailshot_customers, customers, on='customer_id')\n\n# Group by customer_name and count the number of occurrences\ngrouped_df = merged_df.groupby('customer_name').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Select the top 5 rows\ntop_5_customers = sorted_df.head(5)\n\n# Create the bar plot\nplt.bar(top_5_customers['customer_name'], top_5_customers['count'])\nplt.xlabel('Customer Name')\nplt.ylabel('Count')\nplt.title('Top 5 Customers by Count')\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "For events that have more than one participant, count the event details for a bar chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the EVENTS table\nevents = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\n\n# Read the Participants_in_Events table\nparticipants = pd.read_sql(\"SELECT * FROM Participants_in_Events\", conn)\n\n# Convert column names to lowercase\nevents.columns = events.columns.str.lower()\nparticipants.columns = participants.columns.str.lower()\n\n# merge the two tables on event_id\nmerged_data = pd.merge(events, participants, on='event_id')\n\n# group by event_details and count the occurrences\nevent_counts = merged_data.groupby('event_details').size()\n\n# plot the pie chart\nplt.pie(event_counts, labels=event_counts.index, autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()\n"
  },
  {
    "db_id": "bike_1",
    "question": "What are the ids and names of all start stations that were the beginning of at least 200 trips Show bar chart , list by the X-axis in descending .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\ntrip.columns = trip.columns.str.lower()\n\n# Sort the trip dataframe by start_station_name in descending order\nsorted_trip = trip.sort_values('start_station_name', ascending=False)\n\n# Extract the start_station_name and start_station_id columns\nstart_station_name = sorted_trip['start_station_name']\nstart_station_id = sorted_trip['start_station_id']\n\n# Create a bar plot\nplt.bar(start_station_name, start_station_id)\n\n# Set the x-axis label\nplt.xlabel('Start Station Name')\n\n# Set the y-axis label\nplt.ylabel('Start Station ID')\n\n# Rotate the x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Bar chart x axis country y axis the average of age , and I want to show by the y-axis in asc please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Calculate average age by country\navg_age_by_country = artist.groupby('country')['age'].mean().reset_index()\n\n# Sort by average age in ascending order\navg_age_by_country = avg_age_by_country.sort_values('age')\n\n# Plot bar chart\nplt.bar(avg_age_by_country['country'], avg_age_by_country['age'])\nplt.xlabel('Country')\nplt.ylabel('Average Age')\nplt.title('Average Age of Artists by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "What are the names and ages of artists ? Show the result in a bar graph .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Assuming the data is already loaded into a dataframe called 'artist'\n# Selecting the 'name' and 'age' columns\ndata = artist[['name', 'age']]\n\n# Plotting a bar chart\nplt.bar(data['name'], data['age'])\nplt.xlabel('Name')\nplt.ylabel('Age')\nplt.title('Artist Age')\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "A bar chart about how many eliminations did each team have?, sort by the X from high to low.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"elimination\" table\nelimination_data = pd.read_sql(\"SELECT * FROM elimination\", conn)\n\n# Convert column names to lowercase\nelimination_data.columns = elimination_data.columns.str.lower()\n\n# Perform the SQL query\nteam_counts = elimination_data.groupby('team').size().reset_index(name='count')\nteam_counts = team_counts.sort_values('team', ascending=False)\n\n# Generate the bar plot\nplt.bar(team_counts['team'], team_counts['count'])\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Number of Eliminations by Team')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Bar chart x axis country y axis the average of age, sort in desc by the y-axis.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the artist table\nartist_df = pd.read_sql(\"SELECT * FROM artist\", conn)\n\n# Convert column names to lowercase\nartist_df.columns = artist_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = artist_df.groupby('country')['age'].mean().reset_index().sort_values('age', ascending=False)\n\n# Create the bar plot\nplt.bar(result_df['country'], result_df['age'])\nplt.xlabel('Country')\nplt.ylabel('Average Age')\nplt.title('Average Age of Artists by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "What is the distribution and frequency of exhibitions for each theme in the year 2004, represented by a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nexhibition_record = pd.read_sql(\"SELECT * FROM exhibition_record\", conn)\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nexhibition_record.columns = exhibition_record.columns.str.lower()\nexhibition.columns = exhibition.columns.str.lower()\n\n# Merge exhibition_record and exhibition tables\nmerged_df = pd.merge(exhibition_record, exhibition, on='exhibition_id')\n\n# Filter data for year 2004\nfiltered_df = merged_df[merged_df['year'] == 2004]\n\n# Group by theme and count the number of records\ngrouped_df = filtered_df.groupby('theme').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['theme'], grouped_df['count'])\nplt.xlabel('Theme')\nplt.ylabel('Count')\nplt.title('Exhibition Themes in 2004')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show me the comparison of the total number of all ships' nationalities with a bar graph , list from high to low by the Y .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Group by nationality and count the occurrences\nnationality_count = ship.groupby('nationality').size().reset_index(name='count')\n\n# Sort by count in descending order\nnationality_count = nationality_count.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(nationality_count['nationality'], nationality_count['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Ships by Nationality')\nplt.show()"
  },
  {
    "db_id": "sakila_1",
    "question": "Which actor or actress has the highest film count, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nfilm_actor = pd.read_sql(\"SELECT * FROM film_actor\", conn)\nactor = pd.read_sql(\"SELECT * FROM actor\", conn)\nfilm_actor.columns = film_actor.columns.str.lower()\nactor.columns = actor.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(film_actor, actor, on='actor_id')\n\n# Perform the group by and count operation\ngrouped_df = merged_df.groupby('actor_id').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['actor_id'], sorted_df['count'])\nplt.xlabel('Actor ID')\nplt.ylabel('Count')\nplt.title('Number of Films per Actor')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Show the number of stations installed change over the installation date of in station table using a line chart , order by the x-axis from high to low .",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstation.columns = station.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called 'station'\n\n# Grouping the data by installation_date and counting the occurrences\ngrouped_data = station.groupby('installation_date').size().reset_index(name='count')\n\n# Sorting the data by installation_date in descending order\nsorted_data = grouped_data.sort_values('installation_date', ascending=False)\n\n# Plotting the line chart\nplt.plot(sorted_data['installation_date'], sorted_data['count'])\nplt.xlabel('Installation Date')\nplt.ylabel('Count')\nplt.title('Count of Installations by Date')\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "A bar chart shows the venue for each workshop.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the workshop table\nworkshop = pd.read_sql(\"SELECT * FROM workshop\", conn)\n\n# Convert column names to lowercase\nworkshop.columns = workshop.columns.str.lower()\n\n# Group by Venue and count the occurrences\nvenue_counts = workshop.groupby('venue').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(venue_counts['venue'], venue_counts['count'])\nplt.xlabel('Venue')\nplt.ylabel('Count')\nplt.title('Workshop Venue Counts')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Give me a bar for how many drama workshop groups are there in each city? Return both the city and the count, and order by the Y-axis in ascending please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Addresses table\naddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\naddresses.columns = map(str.lower, addresses.columns)\n\n# Read the Drama_Workshop_Groups table\ndrama_workshop_groups = pd.read_sql(\"SELECT * FROM Drama_Workshop_Groups\", conn)\ndrama_workshop_groups.columns = map(str.lower, drama_workshop_groups.columns)\n\n# Merge the two tables on Address_ID\nmerged_data = pd.merge(addresses, drama_workshop_groups, on=\"address_id\")\n\n# Perform the group by and count\ngrouped_data = merged_data.groupby(\"city_town\").size().reset_index(name=\"count\")\n\n# Sort the data by count in ascending order\nsorted_data = grouped_data.sort_values(\"count\")\n\n# Plot the bar chart\nplt.bar(sorted_data[\"city_town\"], sorted_data[\"count\"])\nplt.xlabel(\"City/Town\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Drama Workshop Groups in Each City/Town\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "What are the names of procedures that physician John Wen was trained in, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nphysician = pd.read_sql(\"SELECT * FROM physician\", conn)\ntrained_in = pd.read_sql(\"SELECT * FROM trained_in\", conn)\nprocedures = pd.read_sql(\"SELECT * FROM procedures\", conn)\n\nphysician.columns = physician.columns.str.lower()\ntrained_in.columns = trained_in.columns.str.lower()\nprocedures.columns = procedures.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(pd.merge(physician, trained_in, left_on='employeeid', right_on='physician'), procedures, left_on='treatment', right_on='code')\n\n# Filter the data for the specific physician\nfiltered_df = merged_df[merged_df['name_x'] == 'John Wen']\n\n# Group by procedure name and count the occurrences\ngrouped_df = filtered_df.groupby('name_y').size().reset_index(name='count')\n\n# Sort the data by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['name_y'], sorted_df['count'])\nplt.xlabel('Procedure Name')\nplt.ylabel('Count')\nplt.title('Number of Procedures for John Wen')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "insurance_and_eClaims",
    "question": "Can you create a bar chart displaying the names of customers with a deputy policy and the corresponding count of policies they have?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\npolicies = pd.read_sql(\"SELECT * FROM policies\", conn)\ncustomers.columns = customers.columns.str.lower()\npolicies.columns = policies.columns.str.lower()\n\n# Joining customers and policies tables\nmerged_df = pd.merge(customers, policies, on='customer_id')\n\n# Filtering for policies with policy_type_code = 'Deputy'\nfiltered_df = merged_df[merged_df['policy_type_code'] == 'Deputy']\n\n# Grouping by customer_details and counting the number of occurrences\ngrouped_df = filtered_df.groupby('customer_details').size().reset_index(name='count')\n\n# Creating the bar plot\nplt.bar(grouped_df['customer_details'], grouped_df['count'])\nplt.xlabel('Customer Details')\nplt.ylabel('Count')\nplt.title('Number of Policies with Policy Type \"Deputy\" by Customer Details')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Show all payment method codes and the number of orders for each code Show bar chart , and show from low to high by the Y-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nINVOICES = pd.read_sql(\"SELECT * FROM INVOICES\", conn)\nINVOICES.columns = INVOICES.columns.str.lower()\n\n# Grouping the data by payment_method_code and counting the occurrences\npayment_counts = INVOICES.groupby('payment_method_code').size()\n\n# Sorting the counts in ascending order\npayment_counts = payment_counts.sort_values()\n\n# Creating the bar plot\nplt.bar(payment_counts.index, payment_counts.values)\n\n# Adding labels and title\nplt.xlabel('Payment Method Code')\nplt.ylabel('Count')\nplt.title('Number of Invoices by Payment Method Code')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Bar chart x axis event details y axis how many event details , sort Y-axis in desc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEVENTS = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\nEVENTS.columns = EVENTS.columns.str.lower()\n\n# Group by event_details and count the occurrences\nevent_counts = EVENTS.groupby('event_details').size().reset_index(name='count')\n\n# Sort the counts in descending order\nevent_counts = event_counts.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(event_counts['event_details'], event_counts['count'])\nplt.xlabel('Event Details')\nplt.ylabel('Count')\nplt.title('Event Details Count')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "What is the number of locations of the wrestlers? Visualize by a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the wrestler table\nwrestler = pd.read_sql(\"SELECT * FROM wrestler\", conn)\n\n# Convert column names to lowercase\nwrestler.columns = wrestler.columns.str.lower()\n\n# Perform the SQL query\nlocation_count = wrestler.groupby('location').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(location_count['location'], location_count['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Wrestlers by Location')\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "Create a bar chart showing how many team across team , and I want to order in descending by the names .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nelimination = pd.read_sql(\"SELECT * FROM elimination\", conn)\nelimination.columns = elimination.columns.str.lower()\n\n# Group by team and count the occurrences\nteam_counts = elimination.groupby('team').size().reset_index(name='count')\n\n# Sort the teams in descending order\nteam_counts = team_counts.sort_values('team', ascending=False)\n\n# Create the bar plot\nplt.bar(team_counts['team'], team_counts['count'])\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Team Counts')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Bar chart x axis country y axis the average of age , sort in desc by the y-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Calculate average age by country\navg_age_by_country = artist.groupby('country')['age'].mean().reset_index()\n\n# Sort by average age in descending order\navg_age_by_country = avg_age_by_country.sort_values('age', ascending=False)\n\n# Plot bar chart\nplt.bar(avg_age_by_country['country'], avg_age_by_country['age'])\nplt.xlabel('Country')\nplt.ylabel('Average Age')\nplt.title('Average Age of Artists by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "Show the number of games for each away team in a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the game table\ngame_df = pd.read_sql(\"SELECT * FROM game\", conn)\n\n# Convert column names to lowercase\ngame_df.columns = game_df.columns.str.lower()\n\n# Perform the SQL query\nresult = game_df.groupby('away_team').size()\n\n# Create the bar plot\nplt.bar(result.index, result.values)\nplt.xlabel('Away Team')\nplt.ylabel('Count')\nplt.title('Number of Games by Away Team')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "gymnast",
    "question": "Draw a bar chart for what are the hometowns of gymnasts and the corresponding number of gymnasts?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the gymnast and people tables\ngymnast = pd.read_sql(\"SELECT * FROM gymnast\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\n\n# Convert column names to lowercase\ngymnast.columns = map(str.lower, gymnast.columns)\npeople.columns = map(str.lower, people.columns)\n\n# Merge the tables on the common column \"gymnast_id\"\nmerged_data = pd.merge(gymnast, people, left_on=\"gymnast_id\", right_on=\"people_id\")\n\n# Group by hometown and count the number of occurrences\ngrouped_data = merged_data.groupby(\"hometown\").size().reset_index(name=\"count\")\n\n# Plot the bar chart\nplt.bar(grouped_data[\"hometown\"], grouped_data[\"count\"])\nplt.xlabel(\"Hometown\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Gymnasts by Hometown\")\n\n# Show the bar chart\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Can you create a pie chart to display the distribution of events for each service type code?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEvents = pd.read_sql(\"SELECT * FROM Events\", conn)\nServices = pd.read_sql(\"SELECT * FROM Services\", conn)\nEvents.columns = Events.columns.str.lower()\nServices.columns = Services.columns.str.lower()\n\n# Joining the Events and Services dataframes\nmerged_df = pd.merge(Events, Services, on='service_id')\n\n# Grouping by service_type_code and counting the occurrences\ngrouped_df = merged_df.groupby('service_type_code').size().reset_index(name='count')\n\n# Creating a pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['service_type_code'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "insurance_and_eClaims",
    "question": "What is the total amount claimed for each created date in the claims_documents table, visualized in a line chart, and sorted in ascending order by the created date?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclaims_documents = pd.read_sql(\"SELECT * FROM claims_documents\", conn)\nclaim_headers = pd.read_sql(\"SELECT * FROM claim_headers\", conn)\nclaims_documents.columns = claims_documents.columns.str.lower()\nclaim_headers.columns = claim_headers.columns.str.lower()\n\n# Merge the two dataframes on claim_id and claim_header_id\nmerged_df = pd.merge(claims_documents, claim_headers, left_on='claim_id', right_on='claim_header_id')\n\n# Group by created_date and calculate the sum of amount_claimed\ngrouped_df = merged_df.groupby('created_date')['amount_claimed'].sum().reset_index()\n\n# Sort the dataframe by created_date in ascending order\nsorted_df = grouped_df.sort_values('created_date')\n\n# Plot the line chart\nplt.plot(sorted_df['created_date'], sorted_df['amount_claimed'])\nplt.xlabel('Created Date')\nplt.ylabel('Sum of Amount Claimed')\nplt.title('Line Chart of Sum of Amount Claimed by Created Date')\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "I want to know the proportion of the total number for each participant type code .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nParticipants = pd.read_sql(\"SELECT * FROM Participants\", conn)\nParticipants.columns = Participants.columns.str.lower()\n\n# Grouping the data by participant_type_code and counting the occurrences\ngrouped_data = Participants.groupby('participant_type_code').size()\n\n# Creating a pie chart\nplt.pie(grouped_data, labels=grouped_data.index, autopct='%1.1f%%')\nplt.axis('equal')\n\n# Displaying the chart\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Show the authors of their total submissions with a bar chart , and display by the x axis in asc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsubmission = pd.read_sql(\"SELECT * FROM submission\", conn)\nsubmission.columns = submission.columns.str.lower()\n\n# Group by author and count the number of submissions\nauthor_counts = submission.groupby('author').size().reset_index(name='count')\n\n# Sort the author counts by author name\nauthor_counts = author_counts.sort_values('author')\n\n# Create a bar plot\nplt.bar(author_counts['author'], author_counts['count'])\nplt.xlabel('Author')\nplt.ylabel('Count')\nplt.title('Number of Submissions by Author')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tvshow",
    "question": "List each language and the number of TV Channels using it with a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the TV_Channel table\ntv_channel = pd.read_sql(\"SELECT * FROM TV_Channel\", conn)\n\n# Convert column names to lowercase\ntv_channel.columns = tv_channel.columns.str.lower()\n\n# Perform the SQL query\nlanguage_count = tv_channel.groupby('language').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(language_count['count'], labels=language_count['language'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "icfp_1",
    "question": "How many papers are written by authors from the institution \"University of Pennsylvania\" in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npapers = pd.read_sql(\"SELECT * FROM papers\", conn)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\ninst = pd.read_sql(\"SELECT * FROM inst\", conn)\npapers.columns = papers.columns.str.lower()\nauthorship.columns = authorship.columns.str.lower()\ninst.columns = inst.columns.str.lower()\n\n# Join tables\nmerged_data = pd.merge(papers, authorship, on='paperid')\nmerged_data = pd.merge(merged_data, inst, on='instid')\n\n# Filter data for 'University of Pennsylvania'\nfiltered_data = merged_data[merged_data['name'] == 'University of Pennsylvania']\n\n# Group by institution and count number of papers\ngrouped_data = filtered_data.groupby('name').agg({'title': 'nunique'}).reset_index()\ngrouped_data.columns = ['institution', 'number_of_papers']\n\n# Sort by number of papers in ascending order\nsorted_data = grouped_data.sort_values('number_of_papers', ascending=True)\n\n# Plot bar chart\nplt.bar(sorted_data['institution'], sorted_data['number_of_papers'])\nplt.xlabel('Institution')\nplt.ylabel('Number of Papers')\nplt.title('Number of Papers by Institution')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "Show me a bar chart displaying the number of products purchased by each customer, ranked in descending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\norder_items = pd.read_sql(\"SELECT * FROM order_items\", conn)\nproducts = pd.read_sql(\"SELECT * FROM products\", conn)\ncustomers.columns = customers.columns.str.lower()\norders.columns = orders.columns.str.lower()\norder_items.columns = order_items.columns.str.lower()\nproducts.columns = products.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(customers, orders, on='customer_id')\nmerged_df = pd.merge(merged_df, order_items, on='order_id')\nmerged_df = pd.merge(merged_df, products, on='product_id')\n\n# Group by customer and count number of products\ngrouped_df = merged_df.groupby('customer_name').size().reset_index(name='num_products')\n\n# Sort by number of products in descending order\nsorted_df = grouped_df.sort_values('num_products', ascending=False)\n\n# Plot bar chart\nplt.bar(sorted_df['customer_name'], sorted_df['num_products'])\nplt.xlabel('Customer Name')\nplt.ylabel('Number of Products')\nplt.title('Number of Products per Customer')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "Which club, among all the clubs, has the highest count of female students as members? Please provide the name of the club and the corresponding count of female students. Visualize this information using a bar chart.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nstudent = pd.read_sql(\"SELECT * FROM student\", conn)\nclub.columns = club.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\nstudent.columns = student.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(club, member_of_club, on='clubid')\nmerged_df = pd.merge(merged_df, student, on='stuid')\n\n# Filter by sex = 'F'\nfiltered_df = merged_df[merged_df['sex'] == 'F']\n\n# Group by clubname and count\ngrouped_df = filtered_df.groupby('clubname').size().reset_index(name='count')\n\n# Sort by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot bar chart\nplt.bar(sorted_df['clubname'], sorted_df['count'])\nplt.xlabel('Club Name')\nplt.ylabel('Count')\nplt.title('Number of Female Students in Each Club')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "What is the scatter plot displaying the mission codes and names of the ships involved?",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmission = pd.read_sql(\"SELECT * FROM mission\", conn)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nmission.columns = mission.columns.str.lower()\nship.columns = ship.columns.str.lower()\n\n# Merge the mission and ship tables\nmerged_df = pd.merge(mission, ship, on='ship_id')\n\n# Create a scatter plot\nplt.scatter(merged_df['code'], merged_df['name'])\nplt.xlabel('Code')\nplt.ylabel('Name')\nplt.title('Scatter Plot of Code and Name')\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "Show me a bar chart displaying the count of injury accidents for each score in the game.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\ninjury_accident = pd.read_sql(\"SELECT * FROM injury_accident\", conn)\ngame.columns = game.columns.str.lower()\ninjury_accident.columns = injury_accident.columns.str.lower()\n\n# Merge the game and injury_accident dataframes\nmerged_df = pd.merge(game, injury_accident, left_on='id', right_on='game_id')\n\n# Group by score and count the number of occurrences\ngrouped_df = merged_df.groupby('score').size().reset_index(name='count')\n\n# Create scatter plot\nplt.bar(grouped_df['score'], grouped_df['count'])\nplt.xlabel('Score')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Score')\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "How many members of the club \"Hopkins Student Enterprises\" fall into each age group (0-20, 21-30, 31+), represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nstudent = pd.read_sql(\"SELECT * FROM student\", conn)\nclub.columns = club.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\nstudent.columns = student.columns.str.lower()\n\n# Perform the SQL query\nresult = pd.merge(club, member_of_club, on='clubid')\nresult = pd.merge(result, student, left_on='stuid', right_on='stuid')\nresult = result[result['clubname'] == 'hopkins student enterprises']\n\n# Group by age group and count the number of students\nresult['age_group'] = pd.cut(result['age'], bins=[0, 20, 30, float('inf')], labels=['0-20', '21-30', '31+'])\nresult = result.groupby('age_group').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(result['count'], labels=result['age_group'], autopct='%1.1f%%')\nplt.title('Age Group Distribution')\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "What are the details of the distinct customers who have orders with the status \"On Road\" displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\ncustomers.columns = customers.columns.str.lower()\norders.columns = orders.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(customers, orders, on='customer_id')\n\n# Filter the data based on order_status\nfiltered_df = merged_df[merged_df['order_status'] == 'On Road']\n\n# Group by customer_details and count the number of rows\ngrouped_df = filtered_df.groupby('customer_details').size().reset_index(name='count')\n\n# Sort the data by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['customer_details'], sorted_df['count'])\nplt.xlabel('Customer Details')\nplt.ylabel('Count')\nplt.title('Number of Orders for Customers with \"On Road\" Status')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Compare how many events by different event details using a bar chart , and list by the Y-axis in desc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEVENTS = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\nEVENTS.columns = EVENTS.columns.str.lower()\n\n# Group by event_details and count the occurrences\nevent_counts = EVENTS.groupby('event_details').size().reset_index(name='count')\n\n# Sort the counts in descending order\nevent_counts = event_counts.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(event_counts['event_details'], event_counts['count'])\nplt.xlabel('Event Details')\nplt.ylabel('Count')\nplt.title('Event Details Count')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Show the date and id of the transcript with at least 2 course results Visualize by bar chart, and could you rank by the x-axis in descending?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the data from the Transcript_Contents table\ntranscript_contents = pd.read_sql(\"SELECT * FROM Transcript_Contents\", conn)\n\n# Read the data from the Transcripts table\ntranscripts = pd.read_sql(\"SELECT * FROM Transcripts\", conn)\n\n# Convert column names to lowercase\ntranscript_contents.columns = transcript_contents.columns.str.lower()\ntranscripts.columns = transcripts.columns.str.lower()\n\n# merge the two tables on the transcript_id column\nmerged_data = pd.merge(transcript_contents, transcripts, on='transcript_id')\n\n# sort the merged data by transcript_date in descending order\nsorted_data = merged_data.sort_values(by='transcript_date', ascending=False)\n\n# extract the required columns\ntranscript_date = sorted_data['transcript_date']\ntranscript_id = sorted_data['transcript_id']\n\n# plot the bar chart\nplt.bar(transcript_date, transcript_id)\nplt.xlabel('Transcript Date')\nplt.ylabel('Transcript ID')\nplt.title('Transcript ID vs Transcript Date')\nplt.show()\n"
  },
  {
    "db_id": "customer_deliveries",
    "question": "In a bar chart, can you display the state/province/county name along with the corresponding count of customers residing in each state/province/county?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomer_addresses = pd.read_sql(\"SELECT * FROM customer_addresses\", conn)\naddresses = pd.read_sql(\"SELECT * FROM addresses\", conn)\ncustomer_addresses.columns = customer_addresses.columns.str.lower()\naddresses.columns = addresses.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(customer_addresses, addresses, on='address_id')\n\n# Group by state_province_county and count the number of occurrences\ngrouped_df = merged_df.groupby('state_province_county').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['state_province_county'], grouped_df['count'])\nplt.xlabel('State/Province/County')\nplt.ylabel('Count')\nplt.title('Number of Customers by State/Province/County')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "What are the names of all the documents , as well as the access counts of each , ordered alphabetically .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ndocuments = pd.read_sql(\"SELECT * FROM documents\", conn)\ndocuments.columns = documents.columns.str.lower()\n\n# Assuming 'documents' is the DataFrame containing the table data\n\n# Sort the DataFrame by document_name\nsorted_documents = documents.sort_values('document_name')\n\n# Extract the document_name and access_count columns\ndocument_names = sorted_documents['document_name']\naccess_counts = sorted_documents['access_count']\n\n# Create the bar plot\nplt.bar(document_names, access_counts)\n\n# Add labels and title\nplt.xlabel('Document Name')\nplt.ylabel('Access Count')\nplt.title('Access Count by Document Name')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "For each citizenship , what is the maximum net worth . Show a pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Group by citizenship and find the maximum net worth\nmax_net_worth = singer.groupby('citizenship')['net_worth_millions'].max()\n\n# Create a pie chart\nplt.pie(max_net_worth, labels=max_net_worth.index, autopct='%1.1f%%')\nplt.title('Maximum Net Worth by Citizenship')\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "List the number of games in each season with a line chart , show by the X-axis in ascending .",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\ngame.columns = game.columns.str.lower()\n\n# Grouping the data by season and counting the number of games in each season\nseason_count = game.groupby('season').size().reset_index(name='count')\n\n# Sorting the data by season in ascending order\nseason_count = season_count.sort_values('season')\n\n# Creating a line plot\nplt.plot(season_count['season'], season_count['count'])\n\n# Adding labels and title\nplt.xlabel('Season')\nplt.ylabel('Count')\nplt.title('Number of Games by Season')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Which workshop groups have the highest number of bookings with status code \"stop\" displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nBookings = pd.read_sql(\"SELECT * FROM Bookings\", conn)\nDrama_Workshop_Groups = pd.read_sql(\"SELECT * FROM Drama_Workshop_Groups\", conn)\nBookings.columns = Bookings.columns.str.lower()\nDrama_Workshop_Groups.columns = Drama_Workshop_Groups.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Bookings, Drama_Workshop_Groups, on='workshop_group_id')\n\n# Filter the data based on status_code\nfiltered_df = merged_df[merged_df['status_code'] == 'stop']\n\n# Group by store_name and count the number of bookings\ngrouped_df = filtered_df.groupby('store_name').size().reset_index(name='count')\n\n# Sort the data by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['store_name'], sorted_df['count'])\nplt.xlabel('Store Name')\nplt.ylabel('Number of Bookings')\nplt.title('Number of Bookings by Store')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Bar chart x axis country y axis the average of age",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Calculate average age by country\navg_age_by_country = artist.groupby('country')['age'].mean()\n\n# Convert the result to a DataFrame\ndf_avg_age_by_country = pd.DataFrame(avg_age_by_country).reset_index()\n\n# Plot the bar chart\nplt.bar(df_avg_age_by_country['country'], df_avg_age_by_country['age'])\nplt.xlabel('Country')\nplt.ylabel('Average Age')\nplt.title('Average Age of Artists by Country')\nplt.show()"
  },
  {
    "db_id": "battle_death",
    "question": "A bar chart listing the number of battle date.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the 'battle' table into a pandas DataFrame\nbattle_df = pd.read_sql(\"SELECT * FROM battle\", conn)\n\n# Convert column names to lowercase\nbattle_df.columns = battle_df.columns.str.lower()\n\n# Perform the SQL query\nresult = battle_df.groupby('date').size()\n\n# Create the bar plot\nplt.bar(result.index, result.values)\nplt.xlabel('Date')\nplt.ylabel('Count')\nplt.title('Number of Battles by Date')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death , compare the total number of deaths by dates_active attribute , and list in descending by the Y-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm.columns = storm.columns.str.lower()\n\n# Assuming storm is a DataFrame containing the table data\n\n# Filter the data to include only rows where number_deaths >= 1\nfiltered_data = storm[storm['number_deaths'] >= 1]\n\n# Sort the filtered data by number_deaths in descending order\nsorted_data = filtered_data.sort_values('number_deaths', ascending=False)\n\n# Extract the dates_active and number_deaths columns\ndates_active = sorted_data['dates_active']\nnumber_deaths = sorted_data['number_deaths']\n\n# Create a bar plot\nplt.bar(dates_active, number_deaths)\n\n# Add labels and title\nplt.xlabel('Dates Active')\nplt.ylabel('Number of Deaths')\nplt.title('Number of Deaths by Dates Active')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "How many services are there for each service type that offers either the photo product or the film product, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nRef_Service_Types = pd.read_sql(\"SELECT * FROM Ref_Service_Types\", conn)\nServices = pd.read_sql(\"SELECT * FROM Services\", conn)\nRef_Service_Types.columns = Ref_Service_Types.columns.str.lower()\nServices.columns = Services.columns.str.lower()\n\n# Merge the two dataframes\nmerged_df = pd.merge(Ref_Service_Types, Services, on='service_type_code')\n\n# Filter the merged dataframe based on product_name\nfiltered_df = merged_df[(merged_df['product_name'] == 'photo') | (merged_df['product_name'] == 'film')]\n\n# Group by service_type_description and count the number of occurrences\ngrouped_df = filtered_df.groupby('service_type_description').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['service_type_description'], grouped_df['count'])\nplt.xlabel('Service Type Description')\nplt.ylabel('Count')\nplt.title('Number of Services by Service Type Description')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "Show names of technicians and the number of machines they are assigned to repair with a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the repair_assignment table\nrepair_assignment = pd.read_sql(\"SELECT * FROM repair_assignment\", conn)\n\n# Read the technician table\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\n\n# Convert column names to lowercase\nrepair_assignment.columns = repair_assignment.columns.str.lower()\ntechnician.columns = technician.columns.str.lower()\n\n# merge the two tables on technician_id\nmerged_data = pd.merge(repair_assignment, technician, on=\"technician_id\")\n\n# group by technician name and count the number of assignments\ngrouped_data = merged_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# plot the pie chart\nplt.pie(grouped_data[\"count\"], labels=grouped_data[\"name\"], autopct=\"%1.1f%%\")\nplt.axis(\"equal\")\nplt.show()\n"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death , compare the number of deaths by name with a bar graph , order from low to high by the Y-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm.columns = storm.columns.str.lower()\n\n# Filter the storm dataframe\nfiltered_storm = storm[storm['number_deaths'] >= 1]\n\n# Sort the filtered dataframe by number_deaths in ascending order\nsorted_storm = filtered_storm.sort_values('number_deaths')\n\n# Create a bar plot\nplt.bar(sorted_storm['name'], sorted_storm['number_deaths'])\n\n# Set the x-axis label\nplt.xlabel('Name')\n\n# Set the y-axis label\nplt.ylabel('Number of Deaths')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Show how many country from each country",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Assuming the data is already loaded into the 'artist' dataframe\n\n# Grouping the data by country and counting the occurrences\ncountry_counts = artist.groupby('country').size().reset_index(name='count')\n\n# Creating the bar plot\nplt.bar(country_counts['country'], country_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Artists by Country')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "sakila_1",
    "question": "Show me a bar chart of the countries that have at least 3 cities, sorted by the number of cities in ascending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\ncountry = pd.read_sql(\"SELECT * FROM country\", conn)\ncity.columns = city.columns.str.lower()\ncountry.columns = country.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(city, country, on='country_id')\n\n# Group by country and count the number of cities\ngrouped_df = merged_df.groupby('country').size().reset_index(name='num_cities')\n\n# Filter countries with at least 3 cities\nfiltered_df = grouped_df[grouped_df['num_cities'] >= 3]\n\n# Sort by number of cities in ascending order\nsorted_df = filtered_df.sort_values('num_cities')\n\n# Plot the bar chart\nplt.bar(sorted_df['country'], sorted_df['num_cities'])\nplt.xlabel('Country')\nplt.ylabel('Number of Cities')\nplt.title('Countries with at least 3 cities')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Show me a bar chart of the acceptance result scores for each submission, and highlight the submission with the highest score.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nacceptance = pd.read_sql(\"SELECT * FROM acceptance\", conn)\nsubmission = pd.read_sql(\"SELECT * FROM submission\", conn)\nacceptance.columns = acceptance.columns.str.lower()\nsubmission.columns = submission.columns.str.lower()\n\n# Merge acceptance and submission tables\nmerged_df = pd.merge(acceptance, submission, on='submission_id')\n\n# Sort by scores in descending order\nsorted_df = merged_df.sort_values(by='scores', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['submission_id'], sorted_df['scores'])\nplt.xlabel('Submission ID')\nplt.ylabel('Scores')\nplt.title('Scores by Submission ID')\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "Find the number of users in each role Plot them as bar chart , and could you display bar from high to low order ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nusers = pd.read_sql(\"SELECT * FROM users\", conn)\nusers.columns = users.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\ngrouped_data = users.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by role_code in descending order\nsorted_data = grouped_data.sort_values('role_code', ascending=False)\n\n# Creating the bar plot\nplt.bar(sorted_data['role_code'], sorted_data['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Users by Role Code')\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "what are the event details of the services that have the type code 'Marriage', and count them by a bar chart, and display Y-axis in asc order.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the EVENTS table\nevents = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\nevents.columns = map(str.lower, events.columns)\n\n# Read the Services table\nservices = pd.read_sql(\"SELECT * FROM Services\", conn)\nservices.columns = map(str.lower, services.columns)\n\n# Merge the EVENTS and Services tables on Service_ID\nmerged_data = pd.merge(events, services, on=\"service_id\")\n\n# Filter the merged data for Service_Type_Code = 'Marriage'\nfiltered_data = merged_data[merged_data[\"service_type_code\"] == \"Marriage\"]\n\n# Group by Event_Details and count the occurrences\ngrouped_data = filtered_data.groupby(\"event_details\").size().reset_index(name=\"count\")\n\n# Sort the data by count in ascending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=True)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"event_details\"], sorted_data[\"count\"])\nplt.xlabel(\"Event Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Event Details vs Count\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Show all role codes and the number of employees in each role by a bar chart , display from high to low by the X-axis please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nEmployees.columns = Employees.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\nrole_counts = Employees.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by role_code in descending order\nrole_counts = role_counts.sort_values('role_code', ascending=False)\n\n# Creating a bar plot\nplt.bar(role_counts['role_code'], role_counts['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Employees by Role Code')\nplt.show()"
  },
  {
    "db_id": "gymnast",
    "question": "What is the scatter plot of the count of gymnasts from each hometown who have a total point score above 57.5?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngymnast = pd.read_sql(\"SELECT * FROM gymnast\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\ngymnast.columns = gymnast.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Merge the two dataframes\nmerged_df = pd.merge(gymnast, people, left_on='gymnast_id', right_on='people_id')\n\n# Filter the merged dataframe based on the condition\nfiltered_df = merged_df[merged_df['total_points'] > 57.5]\n\n# Group by total_points and count hometown\ngrouped_df = filtered_df.groupby('total_points')['hometown'].count().reset_index()\n\n# Plot the scatter plot\nplt.scatter(grouped_df['total_points'], grouped_df['hometown'])\nplt.xlabel('Total Points')\nplt.ylabel('Count of Hometown')\nplt.title('Scatter Plot of Total Points vs Count of Hometown')\nplt.show()"
  },
  {
    "db_id": "entertainment_awards",
    "question": "Create a pie chart showing the total number across type.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the artwork table\nartwork = pd.read_sql(\"SELECT * FROM artwork\", conn)\n\n# Convert column names to lowercase\nartwork.columns = artwork.columns.str.lower()\n\n# Perform the SQL query\ntype_counts = artwork.groupby('type').size()\n\n# Plot the pie chart\nplt.pie(type_counts, labels=type_counts.index, autopct='%1.1f%%')\nplt.title('Artwork Types')\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "Bar chart x axis customer status code y axis the total number, list total number in ascending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Customers table\ncustomers = pd.read_sql(\"SELECT * FROM Customers\", conn)\n\n# Convert column names to lowercase\ncustomers.columns = customers.columns.str.lower()\n\n# Group by customer_status_code and count the number of occurrences\ngrouped_customers = customers.groupby('customer_status_code').size().reset_index(name='count')\n\n# Sort the grouped data by count in ascending order\nsorted_customers = grouped_customers.sort_values('count')\n\n# Create a bar plot\nplt.bar(sorted_customers['customer_status_code'], sorted_customers['count'])\nplt.xlabel('Customer Status Code')\nplt.ylabel('Count')\nplt.title('Number of Customers by Status Code')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Can you give me each end station's latitude and minimum duration for trips ended there with a scatter chart?",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the 'station' table\nstation_df = pd.read_sql(\"SELECT * FROM station\", conn)\nstation_df.columns = map(str.lower, station_df.columns)\n\n# Read the 'trip' table\ntrip_df = pd.read_sql(\"SELECT * FROM trip\", conn)\ntrip_df.columns = map(str.lower, trip_df.columns)\n\n# Merge the 'station' and 'trip' tables on 'id' and 'end_station_id' columns respectively\nmerged_df = pd.merge(station_df, trip_df, left_on='id', right_on='end_station_id')\n\n# Group by 'lat' and calculate the minimum 'duration'\ngrouped_df = merged_df.groupby('lat')['duration'].min().reset_index()\n\n# Scatter plot\nplt.scatter(grouped_df['lat'], grouped_df['duration'])\nplt.xlabel('Latitude')\nplt.ylabel('Minimum Duration')\nplt.title('Scatter Plot of Latitude vs Minimum Duration')\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Show the number of venue from each venue , display by the X in desc please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nworkshop = pd.read_sql(\"SELECT * FROM workshop\", conn)\nworkshop.columns = workshop.columns.str.lower()\n\n# Grouping the data by venue and counting the occurrences\nvenue_counts = workshop.groupby('venue').size().reset_index(name='count')\n\n# Sorting the data by venue in descending order\nvenue_counts = venue_counts.sort_values('venue', ascending=False)\n\n# Creating the bar plot\nplt.bar(venue_counts['venue'], venue_counts['count'])\nplt.xlabel('Venue')\nplt.ylabel('Count')\nplt.title('Workshop Venues')\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "Bar graph to show the total number from different nationality , and show in desc by the X .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot.columns = pilot.columns.str.lower()\n\n# Grouping the data by nationality and counting the occurrences\nnationality_counts = pilot.groupby('nationality').size().reset_index(name='count')\n\n# Sorting the data by nationality in descending order\nnationality_counts = nationality_counts.sort_values('nationality', ascending=False)\n\n# Creating the bar plot\nplt.bar(nationality_counts['nationality'], nationality_counts['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Pilots by Nationality')\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show the names of singers and the total sales of their songs in a bar chart, and display by the names from high to low.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the singer table\nsinger_df = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger_df.columns = map(str.lower, singer_df.columns)\n\n# Read the song table\nsong_df = pd.read_sql(\"SELECT * FROM song\", conn)\nsong_df.columns = map(str.lower, song_df.columns)\n\n# Merge the singer and song tables on Singer_ID\nmerged_df = pd.merge(singer_df, song_df, on=\"singer_id\")\n\n# Group by singer name and calculate the sum of sales\ngrouped_df = merged_df.groupby(\"name\").sum(\"sales\")\n\n# Sort the dataframe by name in descending order\nsorted_df = grouped_df.sort_values(\"name\", ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df.index, sorted_df[\"sales\"])\nplt.xlabel(\"Singer Name\")\nplt.ylabel(\"Total Sales\")\nplt.title(\"Total Sales by Singer\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death, compare the number of deaths by name, rank by the X-axis in ascending.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the storm table into a DataFrame\nstorm_df = pd.read_sql(\"SELECT * FROM storm\", conn)\n\n# Convert column names to lowercase\nstorm_df.columns = storm_df.columns.str.lower()\n\n# Filter the DataFrame for rows where number_deaths >= 1\nfiltered_df = storm_df[storm_df['number_deaths'] >= 1]\n\n# Sort the filtered DataFrame by name in ascending order\nsorted_df = filtered_df.sort_values('name', ascending=True)\n\n# Create a bar plot of the number of deaths for each storm\nplt.bar(sorted_df['name'], sorted_df['number_deaths'])\nplt.xlabel('Storm Name')\nplt.ylabel('Number of Deaths')\nplt.title('Number of Deaths for Each Storm')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sakila_1",
    "question": "Can you create a bar chart displaying the city names and the corresponding number of addresses for each city?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naddress = pd.read_sql(\"SELECT * FROM address\", conn)\ncity = pd.read_sql(\"SELECT * FROM city\", conn)\naddress.columns = address.columns.str.lower()\ncity.columns = city.columns.str.lower()\n\n# Joining the address and city tables\nmerged_df = pd.merge(address, city, on='city_id')\n\n# Grouping by city and counting the number of occurrences\ngrouped_df = merged_df.groupby('city').size().reset_index(name='count')\n\n# Creating the bar plot\nplt.bar(grouped_df['city'], grouped_df['count'])\nplt.xlabel('City')\nplt.ylabel('Count')\nplt.title('Number of Addresses in Each City')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show me how many type by type in a bar, and I want to display x axis in descending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ship table\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\n\n# Perform the SQL query\nresult = ship_df.groupby('type').size().reset_index(name='count').sort_values('type', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['type'], result['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Number of Ships by Type')\nplt.show()"
  },
  {
    "db_id": "tvshow",
    "question": "List each language and the number of TV Channels using it Visualize by bar chart, rank y-axis in ascending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the TV_Channel table\ndf = pd.read_sql(\"SELECT * FROM TV_Channel\", conn)\n\n# Convert column names to lowercase\ndf.columns = df.columns.str.lower()\n\n# Perform the SQL query\nresult = df.groupby('language').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result['language'], result['count'])\nplt.xlabel('Language')\nplt.ylabel('Count')\nplt.title('Number of TV Channels by Language')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "e_government",
    "question": "Who is the contact individual from the Labour party organization with the highest number of contacts, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\norganizations = pd.read_sql(\"SELECT * FROM organizations\", conn)\norganization_contact_individuals = pd.read_sql(\"SELECT * FROM organization_contact_individuals\", conn)\nindividuals = pd.read_sql(\"SELECT * FROM individuals\", conn)\n\norganizations.columns = organizations.columns.str.lower()\norganization_contact_individuals.columns = organization_contact_individuals.columns.str.lower()\nindividuals.columns = individuals.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(organizations, organization_contact_individuals, on='organization_id')\nmerged_df = pd.merge(merged_df, individuals, on='individual_id')\n\n# Filter by organization name\nfiltered_df = merged_df[merged_df['organization_name'] == 'Labour Party']\n\n# Group by individual last name and count\ngrouped_df = filtered_df.groupby('individual_last_name').size().reset_index(name='count')\n\n# Sort by count in descending order and select the top 1\nsorted_df = grouped_df.sort_values('count', ascending=False).head(1)\n\n# Plot the bar chart\nplt.bar(sorted_df['individual_last_name'], sorted_df['count'])\nplt.xlabel('Individual Last Name')\nplt.ylabel('Count')\nplt.title('Top Individual Last Name in Labour Party')\nplt.show()\n"
  },
  {
    "db_id": "entertainment_awards",
    "question": "Show the total number from each type",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the artwork table\nartwork = pd.read_sql(\"SELECT * FROM artwork\", conn)\n\n# Convert column names to lowercase\nartwork.columns = artwork.columns.str.lower()\n\n# Group by type and count\ngrouped_artwork = artwork.groupby('type').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_artwork['type'], grouped_artwork['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Artwork Count by Type')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "restaurant_1",
    "question": "For those female students with age is older than 18 who are not majoring in 600, tell me how many students of different first names using a bar chart, display in descending by the x axis please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the Student table\nstudent_data = pd.read_sql(\"SELECT * FROM Student\", conn)\n\n# Convert column names to lowercase\nstudent_data.columns = student_data.columns.str.lower()\n\n# Filter the data based on the conditions\nfiltered_data = student_data[(student_data['age'] > 18) & (student_data['major'] != 600) & (student_data['sex'] == 'F')]\n\n# Group the data by Fname and count the occurrences\ngrouped_data = filtered_data.groupby('fname').size().reset_index(name='count')\n\n# Sort the data by Fname in descending order\nsorted_data = grouped_data.sort_values('fname', ascending=False)\n\n# Generate the bar plot\nplt.bar(sorted_data['fname'], sorted_data['count'])\nplt.xlabel('Fname')\nplt.ylabel('Count')\nplt.title('Number of Students by Fname')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "What are the average ages of artists by countries ? Visualize the result with a bar , and I want to display in asc by the total number .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Calculate average age by country\navg_age_by_country = artist.groupby('country')['age'].mean().reset_index()\n\n# Sort by average age in ascending order\navg_age_by_country = avg_age_by_country.sort_values('age')\n\n# Plot bar chart\nplt.bar(avg_age_by_country['country'], avg_age_by_country['age'])\nplt.xlabel('Country')\nplt.ylabel('Average Age')\nplt.title('Average Age of Artists by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "college_3",
    "question": "What is the department name and room of the course \"INTRODUCTION TO COMPUTER SCIENCE\" displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nCOURSE = pd.read_sql(\"SELECT * FROM COURSE\", conn)\nDEPARTMENT = pd.read_sql(\"SELECT * FROM DEPARTMENT\", conn)\nCOURSE.columns = COURSE.columns.str.lower()\nDEPARTMENT.columns = DEPARTMENT.columns.str.lower()\n\n# Joining the tables\ndf = pd.merge(COURSE, DEPARTMENT, left_on='dno', right_on='dno')\n\n# Filtering the data\nfiltered_df = df[df['cname'] == 'Introduction To Computer Science']\n\n# Creating the bar plot\nplt.bar(filtered_df['dname'], filtered_df['room'])\nplt.xlabel('Department Name')\nplt.ylabel('Room')\nplt.title('Room for Introduction to Computer Science by Department')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Give the proportion of what are the different product names ? What is the average product price for each of them ?",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nPRODUCTS = pd.read_sql(\"SELECT * FROM PRODUCTS\", conn)\nPRODUCTS.columns = PRODUCTS.columns.str.lower()\n\n# Assuming you have already read the table data into a DataFrame called PRODUCTS\n\n# Calculate the average product price for each product name\navg_price = PRODUCTS.groupby('product_name')['product_price'].mean()\n\n# Create a pie chart\nplt.pie(avg_price, labels=avg_price.index, autopct='%1.1f%%')\nplt.title('Average Product Price by Product Name')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Show me a line chart of how how many installation date change over the installation date , and could you list from low to high by the X-axis ?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstation.columns = station.columns.str.lower()\n\n# Group by installation_date and count the occurrences\nstation_count = station.groupby('installation_date').size().reset_index(name='count')\n\n# Sort by installation_date in ascending order\nstation_count = station_count.sort_values('installation_date')\n\n# Plot the line chart\nplt.plot(station_count['installation_date'], station_count['count'])\nplt.xlabel('Installation Date')\nplt.ylabel('Count')\nplt.title('Number of Installations by Date')\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death , compare the total number of deaths by dates_active attribute , and order in ascending by the Y .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm.columns = storm.columns.str.lower()\n\n# Assuming storm is a DataFrame containing the table data\n\n# Filter the data to include only rows where number_deaths >= 1\nfiltered_data = storm[storm['number_deaths'] >= 1]\n\n# Sort the filtered data by number_deaths in ascending order\nsorted_data = filtered_data.sort_values('number_deaths')\n\n# Extract the dates_active and number_deaths columns\ndates_active = sorted_data['dates_active']\nnumber_deaths = sorted_data['number_deaths']\n\n# Create a bar plot\nplt.bar(dates_active, number_deaths)\n\n# Add labels and title\nplt.xlabel('Dates Active')\nplt.ylabel('Number of Deaths')\nplt.title('Number of Deaths by Dates Active')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id. Visualize by scatter chart.",
    "chart": "Scatter",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the 'problems' table\nproblems = pd.read_sql(\"SELECT * FROM problems\", conn)\nproblems.columns = problems.columns.str.lower()\n\n# Read the 'product' table\nproduct = pd.read_sql(\"SELECT * FROM product\", conn)\nproduct.columns = product.columns.str.lower()\n\n# Merge the two tables on 'product_id'\nmerged_data = pd.merge(problems, product, on='product_id')\n\n# Filter the merged data based on the condition\nfiltered_data = merged_data[merged_data['date_problem_reported'] > '1986-11-13']\n\n# Group the filtered data by 'product_id' and count the number of occurrences\ngrouped_data = filtered_data.groupby('product_id').size().reset_index(name='count')\n\n# Scatter plot\nplt.scatter(grouped_data['product_id'], grouped_data['count'])\nplt.xlabel('Product ID')\nplt.ylabel('Count')\nplt.title('Scatter Plot of Problem Count by Product ID')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "What are the names and ages of artists ? Show the result in a bar graph , and show x axis in asc order .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Assuming the data is already loaded into the 'artist' dataframe\n\n# Sort the dataframe by name in ascending order\nsorted_artist = artist.sort_values(by='name')\n\n# Extract the name and age columns\nname = sorted_artist['name']\nage = sorted_artist['age']\n\n# Create a bar plot\nplt.bar(name, age)\n\n# Set the x-axis label\nplt.xlabel('Name')\n\n# Set the y-axis label\nplt.ylabel('Age')\n\n# Set the title of the plot\nplt.title('Artist Age by Name')\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Return a bar on how many exhibitions has each artist had?, list from high to low by the Name please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the exhibition and artist tables\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\n\n# Convert column names to lowercase\nexhibition.columns = exhibition.columns.str.lower()\nartist.columns = artist.columns.str.lower()\n\n# Merge the exhibition and artist tables on artist_id\nmerged_data = pd.merge(exhibition, artist, on=\"artist_id\")\n\n# Perform the SQL query and group by artist_id, count the number of exhibitions, and order by name in descending order\nresult = merged_data.groupby(\"name\").size().reset_index(name=\"count\").sort_values(\"name\", ascending=False)\n\n# Create a bar plot\nplt.bar(result[\"name\"], result[\"count\"])\nplt.xlabel(\"Artist Name\")\nplt.ylabel(\"Number of Exhibitions\")\nplt.title(\"Number of Exhibitions by Artist\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Give me a bar chart for the total number of each payment method code , and list by the y axis in ascending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nINVOICES = pd.read_sql(\"SELECT * FROM INVOICES\", conn)\nINVOICES.columns = INVOICES.columns.str.lower()\n\n# Grouping the data by payment_method_code and counting the occurrences\npayment_counts = INVOICES.groupby('payment_method_code').size()\n\n# Sorting the counts in ascending order\npayment_counts = payment_counts.sort_values()\n\n# Creating the bar plot\nplt.bar(payment_counts.index, payment_counts.values)\n\n# Adding labels and title\nplt.xlabel('Payment Method Code')\nplt.ylabel('Count')\nplt.title('Number of Invoices by Payment Method Code')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Show the authors of their total submissions with a bar chart, display from low to high by the y-axis.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the submission table\nsubmission_df = pd.read_sql(\"SELECT * FROM submission\", conn)\n\n# Convert column names to lowercase\nsubmission_df.columns = submission_df.columns.str.lower()\n\n# Perform the SQL query\nresult_df = submission_df.groupby('author').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result_df['author'], result_df['count'])\nplt.xlabel('Author')\nplt.ylabel('Count')\nplt.title('Number of Submissions by Author')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sakila_1",
    "question": "List the genre name and genre id using a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the film_category table\nfilm_category = pd.read_sql(\"SELECT * FROM film_category\", conn)\n\n# Read the category table\ncategory = pd.read_sql(\"SELECT * FROM category\", conn)\n\n# Convert column names to lowercase\nfilm_category.columns = film_category.columns.str.lower()\ncategory.columns = category.columns.str.lower()\n\n# merge the two tables on category_id\nmerged_data = pd.merge(film_category, category, on='category_id')\n\n# group by category name and count the occurrences\ncategory_counts = merged_data['name'].value_counts()\n\n# plot the bar chart\nplt.bar(category_counts.index, category_counts.values)\nplt.xlabel('Category')\nplt.ylabel('Count')\nplt.title('Film Category Counts')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Return a bar on what is the code of each role and the number of employees in each role ? , and show in ascending by the Y-axis please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nEmployees.columns = Employees.columns.str.lower()\n\n# Grouping the data by role_code and counting the occurrences\nrole_counts = Employees.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nrole_counts = role_counts.sort_values('count')\n\n# Creating the bar plot\nplt.bar(role_counts['role_code'], role_counts['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Employees by Role Code')\nplt.show()"
  },
  {
    "db_id": "soccer_1",
    "question": ", could you order by the total number in asc?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read data from the Player_Attributes table\nplayer_attributes = pd.read_sql(\"SELECT * FROM Player_Attributes\", conn)\n\n# Convert column names to lowercase\nplayer_attributes.columns = player_attributes.columns.str.lower()\n\n# Filter data where overall_rating > 80\nfiltered_data = player_attributes[player_attributes['overall_rating'] > 80]\n\n# Group data by preferred_foot and count the number of records\ngrouped_data = filtered_data.groupby('preferred_foot').size().reset_index(name='count')\n\n# Sort data by count in ascending order\nsorted_data = grouped_data.sort_values('count', ascending=True)\n\n# Plot the bar chart\nplt.bar(sorted_data['preferred_foot'], sorted_data['count'])\nplt.xlabel('Preferred Foot')\nplt.ylabel('Count')\nplt.title('Number of Players with Overall Rating > 80 by Preferred Foot')\nplt.show()"
  },
  {
    "db_id": "small_bank_1",
    "question": "Which accounts have checking balances below the maximum checking balance, and can you display the names and customer IDs in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\naccounts.columns = accounts.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\n\n# Joining accounts and checking tables\nmerged_df = pd.merge(accounts, checking, on='custid')\n\n# Filtering rows where balance is less than the maximum balance in checking table\nfiltered_df = merged_df[merged_df['balance'] < checking['balance'].max()]\n\n# Grouping by name and custid\ngrouped_df = filtered_df.groupby(['name', 'custid']).size().reset_index(name='count')\n\n# Plotting the bar chart\nplt.bar(grouped_df['name'], grouped_df['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Number of Accounts with Balance Less than Maximum Balance in Checking')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "restaurant_1",
    "question": "What is the scatter plot of the total amount spent by each student on restaurant visits based on their age?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nStudent = pd.read_sql(\"SELECT * FROM Student\", conn)\nVisits_Restaurant = pd.read_sql(\"SELECT * FROM Visits_Restaurant\", conn)\nStudent.columns = Student.columns.str.lower()\nVisits_Restaurant.columns = Visits_Restaurant.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Student, Visits_Restaurant, on='stuid')\n\n# Group by student age and calculate the total spent\ngrouped_df = merged_df.groupby('age')['spent'].sum().reset_index()\n\n# Create scatter plot\nplt.scatter(grouped_df['age'], grouped_df['spent'])\nplt.xlabel('Age')\nplt.ylabel('Total Spent')\nplt.title('Total Spent by Age')\nplt.show()"
  },
  {
    "db_id": "college_3",
    "question": "What is the trend of department names and the count of courses for each department for the course INTRODUCTION TO COMPUTER SCIENCE, shown in a line chart?",
    "chart": "Line",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nCOURSE = pd.read_sql(\"SELECT * FROM COURSE\", conn)\nDEPARTMENT = pd.read_sql(\"SELECT * FROM DEPARTMENT\", conn)\nCOURSE.columns = COURSE.columns.str.lower()\nDEPARTMENT.columns = DEPARTMENT.columns.str.lower()\n\n# Joining the tables\ndf = pd.merge(COURSE, DEPARTMENT, on='dno')\n\n# Filtering the data\nfiltered_df = df[df['cname'] == 'INTRODUCTION TO COMPUTER SCIENCE']\n\n# Grouping and counting\ngrouped_df = filtered_df.groupby('dname').size().reset_index(name='count')\n\n# Sorting the data\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plotting the data\nplt.plot(sorted_df['dname'], sorted_df['count'])\nplt.xlabel('Department Name')\nplt.ylabel('Count')\nplt.title('Number of Courses in each Department for \"Introduction to Computer Science\"')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "icfp_1",
    "question": "Can you create a bar chart displaying the number of authors with each last name for the paper titled \"Binders Unbound\"?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nauthors = pd.read_sql(\"SELECT * FROM authors\", conn)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\npapers = pd.read_sql(\"SELECT * FROM papers\", conn)\nauthors.columns = authors.columns.str.lower()\nauthorship.columns = authorship.columns.str.lower()\npapers.columns = papers.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(authors, authorship, on='authid')\nmerged_df = pd.merge(merged_df, papers, on='paperid')\n\n# Filter by title\nfiltered_df = merged_df[merged_df['title'] == 'Binders Unbound']\n\n# Group by lname and count\ngrouped_df = filtered_df.groupby('lname').size().reset_index(name='count')\n\n# Sort by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot bar chart\nplt.bar(sorted_df['lname'], sorted_df['count'])\nplt.xlabel('Last Name')\nplt.ylabel('Count')\nplt.title('Number of Authors with Last Name in \"binders unbound\"')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "List all the log entry descriptions and count them using a bar chart , order by the Y in ascending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nproblem_log = pd.read_sql(\"SELECT * FROM problem_log\", conn)\nproblem_log.columns = problem_log.columns.str.lower()\n\n# Grouping the data by log_entry_description and counting the occurrences\ngrouped_data = problem_log.groupby('log_entry_description').size().reset_index(name='count')\n\n# Sorting the data by count in ascending order\nsorted_data = grouped_data.sort_values('count')\n\n# Creating the bar plot\nplt.bar(sorted_data['log_entry_description'], sorted_data['count'])\nplt.xlabel('Log Entry Description')\nplt.ylabel('Count')\nplt.title('Occurrences of Log Entry Descriptions')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Show all artist names and ages in a bar , could you sort bar from high to low order ?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Assuming the data is already loaded into the 'artist' dataframe\n\n# Sort the dataframe by name in descending order\nsorted_artist = artist.sort_values(by='name', ascending=False)\n\n# Extract the name and age columns\nname = sorted_artist['name']\nage = sorted_artist['age']\n\n# Create a bar plot\nplt.bar(name, age)\n\n# Add labels and title\nplt.xlabel('Name')\nplt.ylabel('Age')\nplt.title('Artist Age by Name')\n\n# Rotate x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "Scatter . what are each physician's employee id and department id primarily affiliated .",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\naffiliated_with = pd.read_sql(\"SELECT * FROM affiliated_with\", conn)\naffiliated_with.columns = affiliated_with.columns.str.lower()\n\n# Filter the dataframe to include only rows where primaryaffiliation is 1\nfiltered_df = affiliated_with[affiliated_with['primaryaffiliation'] == 1]\n\n# Create a scatter plot of physician vs department\nplt.scatter(filtered_df['physician'], filtered_df['department'])\nplt.xlabel('Physician')\nplt.ylabel('Department')\nplt.title('Scatter plot of Physician vs Department')\nplt.show()"
  },
  {
    "db_id": "insurance_and_eClaims",
    "question": "Find the number of records of each policy type and its type code . Plot them as pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\npolicies = pd.read_sql(\"SELECT * FROM policies\", conn)\npolicies.columns = policies.columns.str.lower()\n\n# Group by policy_type_code and count the number of occurrences\npolicy_counts = policies.groupby('policy_type_code').size().reset_index(name='count')\n\n# Plotting a pie chart\nplt.pie(policy_counts['count'], labels=policy_counts['policy_type_code'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "company_1",
    "question": "How many departments are located in Houston, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\ndepartment = pd.read_sql(\"SELECT * FROM department\", conn)\ndept_locations = pd.read_sql(\"SELECT * FROM dept_locations\", conn)\ndepartment.columns = department.columns.str.lower()\ndept_locations.columns = dept_locations.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(department, dept_locations, on='dnumber')\n\n# Filter the data for dlocation = 'Houston'\nfiltered_df = merged_df[merged_df['dlocation'] == 'Houston']\n\n# Group by dlocation and count the number of rows\ngrouped_df = filtered_df.groupby('dlocation').size().reset_index(name='count')\n\n# Sort the data by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['dlocation'], sorted_df['count'])\nplt.xlabel('dlocation')\nplt.ylabel('count')\nplt.title('Number of departments in Houston')\nplt.show()"
  },
  {
    "db_id": "small_bank_1",
    "question": "Show me a bar chart displaying the total balance of checking and savings accounts for each customer.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\nsavings = pd.read_sql(\"SELECT * FROM savings\", conn)\nchecking.columns = checking.columns.str.lower()\nsavings.columns = savings.columns.str.lower()\n\n# Merge checking and savings tables on custid\nmerged_df = pd.merge(checking, savings, on='custid')\n\n# Calculate the sum of balances from both tables for each custid\nmerged_df['total_balance'] = merged_df['balance_x'] + merged_df['balance_y']\n\n# Group by custid and calculate the sum of total_balance\ngrouped_df = merged_df.groupby('custid')['total_balance'].sum().reset_index()\n\n# Plot the bar chart\nplt.bar(grouped_df['custid'], grouped_df['total_balance'])\nplt.xlabel('Customer ID')\nplt.ylabel('Total Balance')\nplt.title('Total Balance by Customer')\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "What are the names of technicians with the machine series that they repair? Show me how many machines for each technician's name.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the repair_assignment table\nrepair_assignment = pd.read_sql(\"SELECT * FROM repair_assignment\", conn)\n\n# Read the machine table\nmachine = pd.read_sql(\"SELECT * FROM machine\", conn)\n\n# Read the technician table\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\n\n# Convert column names to lowercase\nrepair_assignment.columns = repair_assignment.columns.str.lower()\nmachine.columns = machine.columns.str.lower()\ntechnician.columns = technician.columns.str.lower()\n\n# merge the tables\nmerged_data = pd.merge(repair_assignment, machine, on=\"machine_id\")\nmerged_data = pd.merge(merged_data, technician, on=\"technician_id\")\n\n# group by name and count occurrences\ngrouped_data = merged_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# plot the bar chart\nplt.bar(grouped_data[\"name\"], grouped_data[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Repairs by Name\")\nplt.show()\n"
  },
  {
    "db_id": "theme_gallery",
    "question": "Give me a bar chart about the number of countries in the artist table , and could you display by the bars in descending ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Group by country and count the number of artists in each country\ncountry_counts = artist.groupby('country').size().reset_index(name='count')\n\n# Sort the dataframe by country in descending order\ncountry_counts = country_counts.sort_values('country', ascending=False)\n\n# Plot the bar chart\nplt.bar(country_counts['country'], country_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Artists by Country')\nplt.show()"
  },
  {
    "db_id": "products_for_hire",
    "question": "How many bookings did each customer make? List the first name as the X-axis, and the count as the Y-axis in the bar chart, show in ascending by the X-axis please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Customers and bookings tables\ncustomers = pd.read_sql(\"SELECT * FROM Customers\", conn)\nbookings = pd.read_sql(\"SELECT * FROM bookings\", conn)\n\n# Convert column names to lowercase\ncustomers.columns = customers.columns.str.lower()\nbookings.columns = bookings.columns.str.lower()\n\n# Merge the Customers and bookings tables on customer_id\nmerged_data = pd.merge(customers, bookings, on=\"customer_id\")\n\n# Group by first_name and count the number of bookings for each customer\ngrouped_data = merged_data.groupby(\"first_name\").size().reset_index(name=\"count\")\n\n# Sort the data by first_name in ascending order\nsorted_data = grouped_data.sort_values(\"first_name\")\n\n# Create a bar plot\nplt.bar(sorted_data[\"first_name\"], sorted_data[\"count\"])\nplt.xlabel(\"First Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Bookings per Customer\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "what are the different product names ? What is the average product price for each of them ?",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nPRODUCTS = pd.read_sql(\"SELECT * FROM PRODUCTS\", conn)\nPRODUCTS.columns = PRODUCTS.columns.str.lower()\n\n# Calculate average product price\navg_product_price = PRODUCTS.groupby('product_name')['product_price'].mean()\n\n# Create pie chart\nplt.pie(avg_product_price, labels=avg_product_price.index, autopct='%1.1f%%')\nplt.title('Average Product Price by Product Name')\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "Return a bar chart showing how many shops in each location , could you rank how many location in ascending order please ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nshop = pd.read_sql(\"SELECT * FROM shop\", conn)\nshop.columns = shop.columns.str.lower()\n\n# Group by location and count the occurrences\nlocation_counts = shop.groupby('location').size().reset_index(name='count')\n\n# Sort the counts in ascending order\nlocation_counts = location_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(location_counts['location'], location_counts['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Shops by Location')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sakila_1",
    "question": "How many films are there in each category? List the genre name and the count with a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read data from the film_category table\nfilm_category = pd.read_sql(\"SELECT * FROM film_category\", conn)\n\n# Read data from the category table\ncategory = pd.read_sql(\"SELECT * FROM category\", conn)\n\n# Convert column names to lowercase\nfilm_category.columns = film_category.columns.str.lower()\ncategory.columns = category.columns.str.lower()\n\n# merge the film_category and category tables on category_id\nmerged_data = pd.merge(film_category, category, on=\"category_id\")\n\n# group the data by category_id and count the number of occurrences\ngrouped_data = merged_data.groupby(\"category_id\").size().reset_index(name=\"count\")\n\n# get the category names\ncategory_names = merged_data.groupby(\"category_id\")[\"name\"].first().values\n\n# create a bar plot\nplt.bar(category_names, grouped_data[\"count\"])\nplt.xlabel(\"Category\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Films per Category\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "bike_1",
    "question": "Tell me the trend using a line chart to show the total number of the station over the installation date , show by the x axis from high to low .",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstation.columns = station.columns.str.lower()\n\n# Assuming the data is already loaded into a DataFrame called 'station'\n\n# Grouping the data by installation_date and counting the occurrences\ngrouped_data = station.groupby('installation_date').size().reset_index(name='count')\n\n# Sorting the data by installation_date in descending order\nsorted_data = grouped_data.sort_values('installation_date', ascending=False)\n\n# Plotting the line chart\nplt.plot(sorted_data['installation_date'], sorted_data['count'])\nplt.xlabel('Installation Date')\nplt.ylabel('Count')\nplt.title('Count of Installations by Date')\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "what are the event details of the services that have the type code 'Marriage', and count them by a bar chart, I want to rank by the x axis in ascending.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the EVENTS table\nevents = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\nevents.columns = map(str.lower, events.columns)\n\n# Read the Services table\nservices = pd.read_sql(\"SELECT * FROM Services\", conn)\nservices.columns = map(str.lower, services.columns)\n\n# Merge the EVENTS and Services tables on Service_ID\nmerged_data = pd.merge(events, services, on=\"service_id\")\n\n# Filter the merged data for Service_Type_Code = 'Marriage'\nfiltered_data = merged_data[merged_data[\"service_type_code\"] == \"Marriage\"]\n\n# Group by Event_Details and count the occurrences\ngrouped_data = filtered_data.groupby(\"event_details\").size().reset_index(name=\"count\")\n\n# Sort the grouped data by Event_Details in ascending order\nsorted_data = grouped_data.sort_values(\"event_details\", ascending=True)\n\n# Plot the bar chart\nplt.bar(sorted_data[\"event_details\"], sorted_data[\"count\"])\nplt.xlabel(\"Event Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Events by Event Details\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "For each distinct product name, show its average product price, show X-axis from high to low order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the PRODUCTS table\nproducts = pd.read_sql(\"SELECT * FROM PRODUCTS\", conn)\n\n# Convert column names to lowercase\nproducts.columns = map(str.lower, products.columns)\n\n# Perform the SQL query\nresult = products.groupby('product_name')['product_price'].mean().reset_index().sort_values('product_name', ascending=False)\n\n# Create the bar plot\nplt.bar(result['product_name'], result['product_price'])\nplt.xlabel('Product Name')\nplt.ylabel('Average Product Price')\nplt.title('Average Product Price by Product Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "what are the different role codes for users , and how many users have each ? , and I want to sort in descending by the role_code .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nusers = pd.read_sql(\"SELECT * FROM users\", conn)\nusers.columns = users.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\ngrouped_data = users.groupby('role_code').size().reset_index(name='count')\n\n# Sorting the data by role_code in descending order\nsorted_data = grouped_data.sort_values('role_code', ascending=False)\n\n# Creating the bar plot\nplt.bar(sorted_data['role_code'], sorted_data['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Users by Role Code')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Show the employee ids and the number of documents destroyed by each employee . Show the correlation .",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nDocuments_to_be_destroyed = pd.read_sql(\"SELECT * FROM Documents_to_be_destroyed\", conn)\nDocuments_to_be_destroyed.columns = Documents_to_be_destroyed.columns.str.lower()\n\n# Assuming the table data is stored in a DataFrame called \"Documents_to_be_destroyed\"\n\n# Grouping the data by \"destroyed_by_employee_id\" and counting the occurrences\ndestroyed_counts = Documents_to_be_destroyed.groupby('destroyed_by_employee_id').size().reset_index(name='count')\n\n# Creating a scatter plot\nplt.scatter(destroyed_counts['destroyed_by_employee_id'], destroyed_counts['count'])\n\n# Adding labels and title\nplt.xlabel('Destroyed by Employee ID')\nplt.ylabel('Count')\nplt.title('Number of Documents Destroyed by Employee')\n\n# Displaying the scatter plot\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "Find the number of users in each role. Plot them as bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the users table\nusers = pd.read_sql(\"SELECT * FROM users\", conn)\n\n# Convert column names to lowercase\nusers.columns = users.columns.str.lower()\n\n# Perform the SQL query\nresult = users.groupby('role_code').size().reset_index(name='count')\n\n# Generate the bar chart\nplt.bar(result['role_code'], result['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Users by Role Code')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "perpetrator",
    "question": "What is the scatter plot of the height and weight of the people involved in the perpetrator table?",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\nperpetrator = pd.read_sql(\"SELECT * FROM perpetrator\", conn)\npeople.columns = people.columns.str.lower()\nperpetrator.columns = perpetrator.columns.str.lower()\n\n# Merge the two dataframes on 'people_id'\nmerged_df = pd.merge(people, perpetrator, on='people_id')\n\n# Create a scatter plot of height vs weight\nplt.scatter(merged_df['height'], merged_df['weight'])\nplt.xlabel('Height')\nplt.ylabel('Weight')\nplt.title('Scatter plot of Height vs Weight')\nplt.show()"
  },
  {
    "db_id": "twitter_1",
    "question": "List the name and number of followers for each user , and sort the results by the number of followers in descending order .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nuser_profiles = pd.read_sql(\"SELECT * FROM user_profiles\", conn)\nuser_profiles.columns = user_profiles.columns.str.lower()\n\n# Assuming user_profiles is a DataFrame containing the table data\n\n# Sort the DataFrame by followers in descending order\nsorted_profiles = user_profiles.sort_values(by='followers', ascending=False)\n\n# Extract the name and followers columns\nnames = sorted_profiles['name']\nfollowers = sorted_profiles['followers']\n\n# Create a bar plot\nplt.bar(names, followers)\n\n# Set the x-axis labels to be rotated for better readability\nplt.xticks(rotation=90)\n\n# Set the axis labels and title\nplt.xlabel('Name')\nplt.ylabel('Followers')\nplt.title('Number of Followers for Each User')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "insurance_and_eClaims",
    "question": "What is the total amount claimed in the most recently created document, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclaim_headers = pd.read_sql(\"SELECT * FROM claim_headers\", conn)\nclaims_documents = pd.read_sql(\"SELECT * FROM claims_documents\", conn)\nclaims_documents = pd.read_sql(\"SELECT * FROM claims_documents\", conn)\nclaim_headers.columns = claim_headers.columns.str.lower()\nclaims_documents.columns = claims_documents.columns.str.lower()\nclaims_documents.columns = claims_documents.columns.str.lower()\n\n# Merge claim_headers and claims_documents on claim_header_id\nmerged_data = pd.merge(claim_headers, claims_documents, left_on='claim_header_id', right_on='claim_id')\n\n# Get the latest created_date from claims_documents\nlatest_created_date = claims_documents['created_date'].max()\n\n# Filter the merged data for the latest created_date\nfiltered_data = merged_data[merged_data['created_date'] == latest_created_date]\n\n# Group by created_date and calculate the sum of amount_claimed\ngrouped_data = filtered_data.groupby('created_date')['amount_claimed'].sum().reset_index()\n\n# Plot the bar chart\nplt.bar(grouped_data['created_date'], grouped_data['amount_claimed'])\nplt.xlabel('Created Date')\nplt.ylabel('Sum of Amount Claimed')\nplt.title('Sum of Amount Claimed by Created Date')\nplt.show()"
  },
  {
    "db_id": "insurance_and_eClaims",
    "question": "Who is the customer with the highest claim amount in a single claim, and how many times have they made that claim? Show the information in a bar chart.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclaim_headers = pd.read_sql(\"SELECT * FROM claim_headers\", conn)\npolicies = pd.read_sql(\"SELECT * FROM policies\", conn)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\nclaim_headers = pd.read_sql(\"SELECT * FROM claim_headers\", conn)\nclaim_headers.columns = claim_headers.columns.str.lower()\npolicies.columns = policies.columns.str.lower()\ncustomers.columns = customers.columns.str.lower()\nclaim_headers.columns = claim_headers.columns.str.lower()\n\n# Joining tables\nmerged_data = pd.merge(pd.merge(claim_headers, policies, on='policy_id'), customers, on='customer_id')\n\n# Filtering data\nmax_claim_amount = merged_data['amount_claimed'].max()\nfiltered_data = merged_data[merged_data['amount_claimed'] == max_claim_amount]\n\n# Grouping and counting\ngrouped_data = filtered_data.groupby('customer_details').size().reset_index(name='count')\n\n# Sorting data\nsorted_data = grouped_data.sort_values(by='count', ascending=False)\n\n# Plotting bar chart\nplt.bar(sorted_data['customer_details'], sorted_data['count'])\nplt.xlabel('Customer Details')\nplt.ylabel('Count')\nplt.title('Number of Claims for Customers with Maximum Claim Amount')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "For each customer status code , how many customers are classified that way . Show the proportion .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nCustomers = pd.read_sql(\"SELECT * FROM Customers\", conn)\nCustomers.columns = Customers.columns.str.lower()\n\n# Assuming Customers is a DataFrame containing the table data\n\n# Grouping the data by customer_status_code and counting the occurrences\ngrouped_data = Customers.groupby('customer_status_code').size()\n\n# Creating a pie chart\nplt.pie(grouped_data, labels=grouped_data.index, autopct='%1.1f%%')\nplt.title('Customer Status')\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "List the name and count of each product in all orders with a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the tables from the database\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\norder_items = pd.read_sql(\"SELECT * FROM order_items\", conn)\nproducts = pd.read_sql(\"SELECT * FROM products\", conn)\n\n# Convert column names to lowercase\norders.columns = orders.columns.str.lower()\norder_items.columns = order_items.columns.str.lower()\nproducts.columns = products.columns.str.lower()\n\n# Merge the tables\nmerged_data = pd.merge(orders, order_items, on=\"order_id\")\nmerged_data = pd.merge(merged_data, products, on=\"product_id\")\n\n# Group by product_name and calculate the sum of count\ngrouped_data = merged_data.groupby(\"product_name\").size().reset_index(name=\"count\")\n\n# Plot the bar chart\nplt.bar(grouped_data[\"product_name\"], grouped_data[\"count\"])\nplt.xlabel(\"Product Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of Products\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "what are the ids and names of all start stations that were the beginning of at least 200 trips ? , and sort in desc by the bar .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\ntrip.columns = trip.columns.str.lower()\n\n# Sort the trip dataframe by start_station_name in descending order\nsorted_trip = trip.sort_values('start_station_name', ascending=False)\n\n# Extract the start_station_name and start_station_id columns\nstart_station_name = sorted_trip['start_station_name']\nstart_station_id = sorted_trip['start_station_id']\n\n# Create a bar plot\nplt.bar(start_station_name, start_station_id)\n\n# Set the x-axis label\nplt.xlabel('Start Station Name')\n\n# Set the y-axis label\nplt.ylabel('Start Station ID')\n\n# Rotate the x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship, and rank by the bars from low to high.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"singer\" table\nsinger_data = pd.read_sql(\"SELECT * FROM singer\", conn)\n\n# Convert column names to lowercase\nsinger_data.columns = singer_data.columns.str.lower()\n\n# Perform the SQL query\nresult = singer_data.groupby(\"citizenship\")[\"net_worth_millions\"].max().reset_index().sort_values(\"citizenship\")\n\n# Create the bar plot\nplt.bar(result[\"citizenship\"], result[\"net_worth_millions\"])\nplt.xlabel(\"Citizenship\")\nplt.ylabel(\"Net Worth (Millions)\")\nplt.title(\"Maximum Net Worth by Citizenship\")\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "Show the number of games for each away team in a bar chart, could you show bars in desc order?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the game table\ngame_df = pd.read_sql(\"SELECT * FROM game\", conn)\n\n# Convert column names to lowercase\ngame_df.columns = game_df.columns.str.lower()\n\n# Perform the SQL query\nresult = game_df.groupby('away_team').size().reset_index(name='count').sort_values('away_team', ascending=False)\n\n# Create the bar plot\nplt.bar(result['away_team'], result['count'])\nplt.xlabel('Away Team')\nplt.ylabel('Count')\nplt.title('Number of Games by Away Team')\nplt.show()"
  },
  {
    "db_id": "insurance_and_eClaims",
    "question": "Show me a line chart displaying the count of policies started on each start date, sorted by start date.",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npolicies = pd.read_sql(\"SELECT * FROM policies\", conn)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\npolicies.columns = policies.columns.str.lower()\ncustomers.columns = customers.columns.str.lower()\n\n# Joining policies and customers tables\nmerged_df = pd.merge(policies, customers, on='customer_id')\n\n# Grouping by start_date and counting the number of policies\ngrouped_df = merged_df.groupby('start_date').size().reset_index(name='count')\n\n# Sorting by start_date\nsorted_df = grouped_df.sort_values('start_date')\n\n# Plotting the line chart\nplt.plot(sorted_df['start_date'], sorted_df['count'])\nplt.xlabel('Start Date')\nplt.ylabel('Count')\nplt.title('Number of Policies by Start Date')\nplt.show()"
  },
  {
    "db_id": "browser_web",
    "question": "How does the count of browsers with market share between 10 and 25 change over time? Show me a line chart.",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nweb_client_accelerator = pd.read_sql(\"SELECT * FROM web_client_accelerator\", conn)\naccelerator_compatible_browser = pd.read_sql(\"SELECT * FROM accelerator_compatible_browser\", conn)\nbrowser = pd.read_sql(\"SELECT * FROM browser\", conn)\nweb_client_accelerator.columns = web_client_accelerator.columns.str.lower()\naccelerator_compatible_browser.columns = accelerator_compatible_browser.columns.str.lower()\nbrowser.columns = browser.columns.str.lower()\n\n# Merge tables\nmerged_df = pd.merge(web_client_accelerator, accelerator_compatible_browser, left_on='id', right_on='accelerator_id')\nmerged_df = pd.merge(merged_df, browser, left_on='browser_id', right_on='id')\n\n# Filter data\nfiltered_df = merged_df[(merged_df['market_share'] > 10) & (merged_df['market_share'] < 25)]\n\n# Group by market_share and count\ngrouped_df = filtered_df.groupby('market_share').size().reset_index(name='count')\n\n# Plot line chart\nplt.plot(grouped_df['market_share'], grouped_df['count'])\nplt.xlabel('Market Share')\nplt.ylabel('Count')\nplt.title('Count of Compatible Browsers by Market Share')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Create a bar chart showing the total number across premises type",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npremises = pd.read_sql(\"SELECT * FROM premises\", conn)\npremises.columns = premises.columns.str.lower()\n\n# Group by premises_type and count the number of occurrences\npremises_count = premises.groupby('premises_type').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(premises_count['premises_type'], premises_count['count'])\nplt.xlabel('Premises Type')\nplt.ylabel('Count')\nplt.title('Number of Premises by Type')\nplt.show()"
  },
  {
    "db_id": "college_3",
    "question": "How does the count of instructors for each course vary, represented by a scatter plot?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nCOURSE = pd.read_sql(\"SELECT * FROM COURSE\", conn)\nFACULTY = pd.read_sql(\"SELECT * FROM FACULTY\", conn)\nCOURSE.columns = COURSE.columns.str.lower()\nFACULTY.columns = FACULTY.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(COURSE, FACULTY, left_on='instructor', right_on='facid')\n\n# Grouping by course name and counting the number of faculty members\ngrouped_df = merged_df.groupby('cname').agg({'fname': 'count'}).reset_index()\n\n# Scatter plot\nplt.scatter(grouped_df['cname'], grouped_df['fname'])\nplt.xlabel('Course Name')\nplt.ylabel('Number of Faculty Members')\nplt.title('Number of Faculty Members per Course')\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship by a pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Group by citizenship and find the maximum net worth\nmax_net_worth = singer.groupby('citizenship')['net_worth_millions'].max()\n\n# Create a pie chart\nplt.pie(max_net_worth, labels=max_net_worth.index, autopct='%1.1f%%')\nplt.title('Maximum Net Worth by Citizenship')\nplt.show()"
  },
  {
    "db_id": "tvshow",
    "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating with a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the TV_series table into a DataFrame\ntv_series_df = pd.read_sql(\"SELECT * FROM TV_series\", conn)\n\n# Convert column names to lowercase\ntv_series_df.columns = tv_series_df.columns.str.lower()\n\n# Select the Episode and Rating columns and sort by Rating in descending order\ntop_3_df = tv_series_df[['episode', 'rating']].sort_values('rating', ascending=False).head(3)\n\n# Create a pie chart\nplt.pie(top_3_df['rating'], labels=top_3_df['episode'], autopct='%1.1f%%')\nplt.title('Top 3 TV Series by Rating')\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "What is the product id and the count of problems reported after 1986-11-13 for each product, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nproblems = pd.read_sql(\"SELECT * FROM problems\", conn)\nproduct = pd.read_sql(\"SELECT * FROM product\", conn)\nproblems.columns = problems.columns.str.lower()\nproduct.columns = product.columns.str.lower()\n\n# Merge problems and product tables\nmerged_df = pd.merge(problems, product, on='product_id')\n\n# Filter data based on date_problem_reported\nfiltered_df = merged_df[merged_df['date_problem_reported'] > '1986-11-13']\n\n# Group by product_id and count the number of occurrences\ngrouped_df = filtered_df.groupby('product_id').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['product_id'], grouped_df['count'])\nplt.xlabel('Product ID')\nplt.ylabel('Count')\nplt.title('Number of Problems Reported by Product')\nplt.show()"
  },
  {
    "db_id": "twitter_1",
    "question": "Which users have a higher number of followers than \"Tyler Swift\" in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nuser_profiles = pd.read_sql(\"SELECT * FROM user_profiles\", conn)\nfollows = pd.read_sql(\"SELECT * FROM follows\", conn)\nuser_profiles.columns = user_profiles.columns.str.lower()\nfollows.columns = follows.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(user_profiles, follows, left_on='uid', right_on='f1')\n\n# Group by name and count the number of occurrences\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['name'], sorted_df['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Number of follows by name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "club_1",
    "question": "Who are the female members of \"Bootup Baltimore\" club? Visualize their first names and last names using a scatter chart.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclub = pd.read_sql(\"SELECT * FROM club\", conn)\nmember_of_club = pd.read_sql(\"SELECT * FROM member_of_club\", conn)\nstudent = pd.read_sql(\"SELECT * FROM student\", conn)\nclub.columns = club.columns.str.lower()\nmember_of_club.columns = member_of_club.columns.str.lower()\nstudent.columns = student.columns.str.lower()\n\n# Join tables\ndf = pd.merge(club, member_of_club, on='clubid')\ndf = pd.merge(df, student, left_on='stuid', right_on='stuid')\n\n# Filter data\ndf = df[(df['clubname'] == 'Bootup Baltimore') & (df['sex'] == 'F')]\n\n# Scatter plot\nplt.scatter(df['fname'], df['lname'])\nplt.xlabel('First Name')\nplt.ylabel('Last Name')\nplt.title('Scatter plot of female students in bootup baltimore club')\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "Show how many carrriers for each shops in a bar chart, could you list y-axis in asc order?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the stock table\nstock = pd.read_sql(\"SELECT * FROM stock\", conn)\nstock.columns = map(str.lower, stock.columns)\n\n# Read the device table\ndevice = pd.read_sql(\"SELECT * FROM device\", conn)\ndevice.columns = map(str.lower, device.columns)\n\n# Read the shop table\nshop = pd.read_sql(\"SELECT * FROM shop\", conn)\nshop.columns = map(str.lower, shop.columns)\n\n# Merge the tables\nmerged_data = pd.merge(stock, device, on=\"device_id\")\nmerged_data = pd.merge(merged_data, shop, on=\"shop_id\")\n\n# Perform the query\nresult = merged_data.groupby(\"shop_name\").size().reset_index(name=\"count\").sort_values(\"count\")\n\n# Plot the bar chart\nplt.bar(result[\"shop_name\"], result[\"count\"])\nplt.xlabel(\"Shop Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Devices in Each Shop\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "icfp_1",
    "question": "Which country has the most papers affiliated with it, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ninst = pd.read_sql(\"SELECT * FROM inst\", conn)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\npapers = pd.read_sql(\"SELECT * FROM papers\", conn)\ninst.columns = inst.columns.str.lower()\nauthorship.columns = authorship.columns.str.lower()\npapers.columns = papers.columns.str.lower()\n\n# Join tables\nmerged_data = pd.merge(pd.merge(inst, authorship, on='instid'), papers, on='paperid')\n\n# Group by country and count\ncountry_counts = merged_data.groupby('country').size().reset_index(name='count')\n\n# Sort by count in descending order\ncountry_counts = country_counts.sort_values(by='count', ascending=False)\n\n# Plot bar chart\nplt.bar(country_counts['country'], country_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Papers by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "sakila_1",
    "question": "How many films are there in each category? Show the genre name, genre id, and the count using a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nfilm_category = pd.read_sql(\"SELECT * FROM film_category\", conn)\ncategory = pd.read_sql(\"SELECT * FROM category\", conn)\nfilm_category.columns = film_category.columns.str.lower()\ncategory.columns = category.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(film_category, category, on='category_id')\n\n# Group by category_id and count the number of films\ngrouped_df = merged_df.groupby('category_id').size().reset_index(name='count_of_films')\n\n# Plot the bar chart\nplt.bar(grouped_df['category_id'], grouped_df['count_of_films'])\nplt.xlabel('Genre ID')\nplt.ylabel('Count of Films')\nplt.title('Number of Films per Genre')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Show the number of documents for each location code in a bar chart , I want to order from high to low by the bars .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDocument_locations = pd.read_sql(\"SELECT * FROM Document_locations\", conn)\nDocument_locations.columns = Document_locations.columns.str.lower()\n\n# Group by location_code and count the occurrences\nlocation_counts = Document_locations.groupby('location_code').size().reset_index(name='count')\n\n# Sort by location_code in descending order\nlocation_counts = location_counts.sort_values('location_code', ascending=False)\n\n# Create bar plot\nplt.bar(location_counts['location_code'], location_counts['count'])\nplt.xlabel('Location Code')\nplt.ylabel('Count')\nplt.title('Document Locations')\nplt.show()"
  },
  {
    "db_id": "e_government",
    "question": "What is the count of individuals with each last name who were contacted from the organization with the maximum UK Vat number across all organizations, shown in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\norganizations = pd.read_sql(\"SELECT * FROM organizations\", conn)\norganization_contact_individuals = pd.read_sql(\"SELECT * FROM organization_contact_individuals\", conn)\nindividuals = pd.read_sql(\"SELECT * FROM individuals\", conn)\norganizations = pd.read_sql(\"SELECT * FROM organizations\", conn)\norganizations.columns = organizations.columns.str.lower()\norganization_contact_individuals.columns = organization_contact_individuals.columns.str.lower()\nindividuals.columns = individuals.columns.str.lower()\norganizations.columns = organizations.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(organizations, organization_contact_individuals, on='organization_id')\nmerged_df = pd.merge(merged_df, individuals, on='individual_id')\n\n# Filter by max uk_vat_number\nmax_uk_vat_number = organizations['uk_vat_number'].max()\nfiltered_df = merged_df[merged_df['uk_vat_number'] == max_uk_vat_number]\n\n# Group by individual_last_name and count\ngrouped_df = filtered_df.groupby('individual_last_name').size().reset_index(name='count')\n\n# Sort by individual_last_name\nsorted_df = grouped_df.sort_values('individual_last_name')\n\n# Plot bar chart\nplt.bar(sorted_df['individual_last_name'], sorted_df['count'])\nplt.xlabel('Individual Last Name')\nplt.ylabel('Count')\nplt.title('Count of Individuals by Last Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "For each submission, group its acceptance result and count them Visualize them in a bar chart, and could you order by the Y in desc?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the acceptance table\nacceptance = pd.read_sql(\"SELECT * FROM acceptance\", conn)\n\n# Convert column names to lowercase\nacceptance.columns = acceptance.columns.str.lower()\n\n# Perform the SQL query\nresult_count = acceptance.groupby('result').size().reset_index(name='count').sort_values('count', ascending=False)\n\n# Generate the bar chart\nplt.bar(result_count['result'], result_count['count'])\nplt.xlabel('Result')\nplt.ylabel('Count')\nplt.title('Count of Results')\nplt.show()"
  },
  {
    "db_id": "products_for_hire",
    "question": "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check, and count them by a line chart, show X from low to high order.",
    "chart": "Line",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the payments table\npayments = pd.read_sql(\"SELECT * FROM payments\", conn)\n\n# Convert column names to lowercase\npayments.columns = payments.columns.str.lower()\n\n# Filter the data\nfiltered_payments = payments[(payments['amount_paid'] > 300) | (payments['payment_type_code'] == 'Check')]\n\n# Group by payment_date and count the occurrences\ngrouped_payments = filtered_payments.groupby('payment_date').size().reset_index(name='count')\n\n# Sort by payment_date in ascending order\nsorted_payments = grouped_payments.sort_values('payment_date')\n\n# Plot the line chart\nplt.plot(sorted_payments['payment_date'], sorted_payments['count'])\nplt.xlabel('Payment Date')\nplt.ylabel('Count')\nplt.title('Number of Payments')\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "How many affected regions does each storm have, and what is the count of each storm's affected regions, displayed in a bar chart ordered in descending order by storm name?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\naffected_region = pd.read_sql(\"SELECT * FROM affected_region\", conn)\nstorm.columns = storm.columns.str.lower()\naffected_region.columns = affected_region.columns.str.lower()\n\n# Merge the storm and affected_region tables\nmerged_df = pd.merge(storm, affected_region, on='storm_id')\n\n# Group by storm name and count the occurrences\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Sort the dataframe by storm name in descending order\nsorted_df = grouped_df.sort_values('name', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['name'], sorted_df['count'])\nplt.xlabel('Storm Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Storm Name')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Group and count details for the events using a bar chart , show by the Y-axis in desc .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEVENTS = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\nEVENTS.columns = EVENTS.columns.str.lower()\n\n# Group by event_details and count the occurrences\nevent_counts = EVENTS.groupby('event_details').size().reset_index(name='count')\n\n# Sort the counts in descending order\nevent_counts = event_counts.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(event_counts['event_details'], event_counts['count'])\nplt.xlabel('Event Details')\nplt.ylabel('Count')\nplt.title('Event Details Count')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "question": "Which employees have made appearances in the circulation history documents? Scatter their names and the count of drafts and copies.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nCirculation_History = pd.read_sql(\"SELECT * FROM Circulation_History\", conn)\nEmployees.columns = Employees.columns.str.lower()\nCirculation_History.columns = Circulation_History.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Employees, Circulation_History, on='employee_id')\n\n# Group by employee name, draft number, and copy number and count the occurrences\ngrouped_df = merged_df.groupby(['employee_name', 'draft_number', 'copy_number']).size().reset_index(name='num_drafts_copies')\n\n# Create scatter plot\nplt.scatter(grouped_df['employee_name'], grouped_df['num_drafts_copies'])\nplt.xlabel('Employee Name')\nplt.ylabel('Number of Drafts Copies')\nplt.title('Scatter Plot of Number of Drafts Copies by Employee')\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "What are the number of names of patients who made an appointment?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the appointment table\nappointment = pd.read_sql(\"SELECT * FROM appointment\", conn)\n\n# Read the patient table\npatient = pd.read_sql(\"SELECT * FROM patient\", conn)\n\n# Convert column names to lowercase\nappointment.columns = appointment.columns.str.lower()\npatient.columns = patient.columns.str.lower()\n\n# merge the appointment and patient tables on the patient column\nmerged_data = pd.merge(appointment, patient, left_on='patient', right_on='ssn')\n\n# group by name and count the occurrences\ngrouped_data = merged_data.groupby('name').size().reset_index(name='count')\n\n# plot the bar chart\nplt.bar(grouped_data['name'], grouped_data['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Number of Appointments by Name')\nplt.show()\n"
  },
  {
    "db_id": "bike_1",
    "question": "Draw a bar chart for what are the different ids and names of the stations that have had more than 12 bikes available?, and show from low to high by the bar.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the station and status tables\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstatus = pd.read_sql(\"SELECT * FROM status\", conn)\n\n# Convert column names to lowercase\nstation.columns = station.columns.str.lower()\nstatus.columns = status.columns.str.lower()\n# Merge the station and status tables on id\nmerged_data = pd.merge(station, status, left_on=\"id\", right_on=\"station_id\")\n\n# Filter the data where bikes_available > 12\nfiltered_data = merged_data[merged_data[\"bikes_available\"] > 12]\n\n# Sort the data by name in ascending order\nsorted_data = filtered_data.sort_values(\"name\", ascending=True)\n\n# Create a bar plot of name and id\nplt.bar(sorted_data[\"name\"], sorted_data[\"id\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"ID\")\nplt.title(\"Stations with Bikes Available > 12\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "battle_death",
    "question": "Show a bar chart about the number of results of the battles when the bulgarian commander is not 'Boril', and I want to rank by the bars in asc.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the battle table\nbattle_df = pd.read_sql(\"SELECT * FROM battle\", conn)\n\n# Convert column names to lowercase\nbattle_df.columns = battle_df.columns.str.lower()\n\n# Filter the data where bulgarian_commander is not 'Boril'\nfiltered_df = battle_df[battle_df['bulgarian_commander'] != 'Boril']\n\n# Group by result and count the occurrences\ngrouped_df = filtered_df.groupby('result').size().reset_index(name='count')\n\n# Sort the dataframe by result in ascending order\nsorted_df = grouped_df.sort_values('result')\n\n# Generate the bar plot\nplt.bar(sorted_df['result'], sorted_df['count'])\nplt.xlabel('Result')\nplt.ylabel('Count')\nplt.title('Battle Results')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "A bar chart compares the ages of all artists .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nartist.columns = artist.columns.str.lower()\n\n# Assuming the data is already loaded into the 'artist' dataframe\n\n# Selecting the 'name' and 'age' columns from the dataframe\ndata = artist[['name', 'age']]\n\n# Creating a bar plot\nplt.bar(data['name'], data['age'])\n\n# Adding labels and title\nplt.xlabel('Name')\nplt.ylabel('Age')\nplt.title('Artist Age')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "small_bank_1",
    "question": "What are the customer id and checking balance corresponding to accounts with a checking balance less than the largest checking balance, shown in a line chart?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\nchecking = pd.read_sql(\"SELECT * FROM checking\", conn)\naccounts.columns = accounts.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\nchecking.columns = checking.columns.str.lower()\n\n# Joining the accounts and checking tables\nmerged_df = pd.merge(accounts, checking, on='custid')\n\n# Filtering the rows where balance is less than the maximum balance in checking table\nfiltered_df = merged_df[merged_df['balance'] < checking['balance'].max()]\n\n# Plotting the line chart\nplt.plot(filtered_df['custid'], filtered_df['balance'])\nplt.xlabel('Customer ID')\nplt.ylabel('Balance')\nplt.title('Balance of Customers with Balance Less than Maximum Balance in Checking')\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "I want to know the proportion for each team .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nelimination = pd.read_sql(\"SELECT * FROM elimination\", conn)\nelimination.columns = elimination.columns.str.lower()\n\n# Grouping the data by team and counting the occurrences\nteam_counts = elimination.groupby('team').size()\n\n# Creating a pie chart\nplt.pie(team_counts, labels=team_counts.index, autopct='%1.1f%%')\nplt.title('Team Distribution')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show different types of ships and the average tonnage of ships of each type Show bar chart , and show from low to high by the bar .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Group by type and calculate average tonnage\nship_avg_tonnage = ship.groupby('type')['tonnage'].mean()\n\n# Sort the data by type in ascending order\nship_avg_tonnage = ship_avg_tonnage.sort_index()\n\n# Create a bar plot\nplt.bar(ship_avg_tonnage.index, ship_avg_tonnage.values)\n\n# Set the labels and title\nplt.xlabel('Type')\nplt.ylabel('Average Tonnage')\nplt.title('Average Tonnage by Ship Type')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "Show me a bar chart displaying the count of medications prescribed for each brand, sorted in ascending order of the count.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nmedication = pd.read_sql(\"SELECT * FROM medication\", conn)\nprescribes = pd.read_sql(\"SELECT * FROM prescribes\", conn)\nmedication.columns = medication.columns.str.lower()\nprescribes.columns = prescribes.columns.str.lower()\n\n# Merge medication and prescribes tables\nmerged_df = pd.merge(medication, prescribes, left_on='code', right_on='medication')\n\n# Group by brand and count the number of occurrences\nbrand_counts = merged_df.groupby('brand').size().reset_index(name='count')\n\n# Sort by count in ascending order\nbrand_counts = brand_counts.sort_values('count')\n\n# Plot the bar chart\nplt.bar(brand_counts['brand'], brand_counts['count'])\nplt.xlabel('Brand')\nplt.ylabel('Count')\nplt.title('Number of Prescriptions by Brand')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Return a bar chart showing the total number of each ship type , order Type in asc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Grouping the data by type and counting the occurrences\nship_grouped = ship.groupby('type').size().reset_index(name='count')\n\n# Sorting the data by type in ascending order\nship_grouped = ship_grouped.sort_values('type')\n\n# Creating the bar plot\nplt.bar(ship_grouped['type'], ship_grouped['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Count of Ship Types')\nplt.show()"
  },
  {
    "db_id": "browser_web",
    "question": "What are the names of the browsers and their corresponding compatible years in the accelerator_compatible_browser table, visualized as a scatter chart, ordered by compatible year?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccelerator_compatible_browser = pd.read_sql(\"SELECT * FROM accelerator_compatible_browser\", conn)\nbrowser = pd.read_sql(\"SELECT * FROM browser\", conn)\naccelerator_compatible_browser.columns = accelerator_compatible_browser.columns.str.lower()\nbrowser.columns = browser.columns.str.lower()\n\n# Join the tables\ndf = pd.merge(accelerator_compatible_browser, browser, left_on='browser_id', right_on='id')\n\n# Sort the dataframe by compatible_since_year\ndf = df.sort_values('compatible_since_year')\n\n# Create scatter plot\nplt.scatter(df['name'], df['compatible_since_year'])\nplt.xlabel('Browser Name')\nplt.ylabel('Compatible Since Year')\nplt.title('Browser Compatibility')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "Bar graph to show the total number from different team, and list in ascending by the bar.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"elimination\" table\nelimination_data = pd.read_sql(\"SELECT * FROM elimination\", conn)\n\n# Convert column names to lowercase\nelimination_data.columns = elimination_data.columns.str.lower()\n\n# Perform the SQL query\nteam_counts = elimination_data.groupby('team').size().reset_index(name='count')\nteam_counts = team_counts.sort_values('team')\n\n# Generate the bar plot\nplt.bar(team_counts['team'], team_counts['count'])\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Number of Eliminations by Team')\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "List name and damage for all storms in a descending order of max speed with a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm.columns = storm.columns.str.lower()\n\n# Assuming the storm data is stored in a dataframe called 'storm'\n\n# Sort the storm data by max_speed in descending order\nsorted_storm = storm.sort_values(by='max_speed', ascending=False)\n\n# Select the name and damage_millions_usd columns\nselected_storm = sorted_storm[['name', 'damage_millions_usd']]\n\n# Plot the bar chart\nplt.bar(selected_storm['name'], selected_storm['damage_millions_usd'])\nplt.xlabel('Storm Name')\nplt.ylabel('Damage (Millions USD)')\nplt.title('Damage by Storm')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "gymnast",
    "question": "Show me a bar chart for how many gymnasts are from each hometown?, and rank bars from high to low order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the gymnast and people tables\ngymnast = pd.read_sql(\"SELECT * FROM gymnast\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\n\n# Convert column names to lowercase\ngymnast.columns = gymnast.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Merge the tables on the common column\nmerged_data = pd.merge(gymnast, people, left_on=\"gymnast_id\", right_on=\"people_id\")\n\n# Perform the SQL query\nresult = merged_data.groupby(\"hometown\").size().reset_index(name=\"count\").sort_values(\"hometown\", ascending=False)\n\n# Generate the bar chart\nplt.bar(result[\"hometown\"], result[\"count\"])\nplt.xlabel(\"Hometown\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Gymnasts by Hometown\")\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "List the name of physicians who took some appointment, and count them by a bar chart, could you sort from low to high by the names?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the appointment table\nappointment = pd.read_sql(\"SELECT * FROM appointment\", conn)\n\n# Read the physician table\nphysician = pd.read_sql(\"SELECT * FROM physician\", conn)\n\n# Convert column names to lowercase\nappointment.columns = appointment.columns.str.lower()\nphysician.columns = physician.columns.str.lower()\n\n# merge the appointment and physician tables on the physician column\nmerged_data = pd.merge(appointment, physician, left_on=\"physician\", right_on=\"employeeid\")\n\n# group by name and count the occurrences\ngrouped_data = merged_data.groupby(\"name\").size().reset_index(name=\"count\")\n\n# sort the data by name in ascending order\nsorted_data = grouped_data.sort_values(\"name\", ascending=True)\n\n# plot the bar chart\nplt.bar(sorted_data[\"name\"], sorted_data[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Appointments by Physician\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "perpetrator",
    "question": "Return a bar chart on what are the countries of perpetrators ? Show each country and the corresponding number of perpetrators there , sort x-axis in descending order please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperpetrator = pd.read_sql(\"SELECT * FROM perpetrator\", conn)\nperpetrator.columns = perpetrator.columns.str.lower()\n\n# Group by country and count the number of occurrences\nperpetrator_count = perpetrator.groupby('country').size().reset_index(name='count')\n\n# Sort by country in descending order\nperpetrator_count = perpetrator_count.sort_values('country', ascending=False)\n\n# Plot the bar chart\nplt.bar(perpetrator_count['country'], perpetrator_count['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Perpetrators by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Show all cities along with the number of drama workshop groups in each city Visualize by bar chart, and order total number in desc order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Addresses table\naddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\naddresses.columns = map(str.lower, addresses.columns)\n\n# Read the Drama_Workshop_Groups table\ndrama_workshop_groups = pd.read_sql(\"SELECT * FROM Drama_Workshop_Groups\", conn)\ndrama_workshop_groups.columns = map(str.lower, drama_workshop_groups.columns)\n\n# Merge the two tables on Address_ID\nmerged_data = pd.merge(addresses, drama_workshop_groups, on=\"address_id\")\n\n# Perform the group by and count\ngrouped_data = merged_data.groupby(\"city_town\").size().reset_index(name=\"count\")\ngrouped_data = grouped_data.sort_values(by=\"count\", ascending=False)\n\n# Plot the bar chart\nplt.bar(grouped_data[\"city_town\"], grouped_data[\"count\"])\nplt.xlabel(\"City/Town\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Drama Workshop Groups in Each City/Town\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "battle_death",
    "question": "Show a bar chart about the number of results of the battles when the bulgarian commander is not 'Boril', and I want to order by the the number of result from high to low.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the battle table\nbattle_df = pd.read_sql(\"SELECT * FROM battle\", conn)\n\n# Convert column names to lowercase\nbattle_df.columns = battle_df.columns.str.lower()\n\n# Filter the data where bulgarian_commander is not 'Boril'\nfiltered_df = battle_df[battle_df['bulgarian_commander'] != 'Boril']\n\n# Perform the group by and count operation\nresult_count_df = filtered_df.groupby('result').size().reset_index(name='count')\n\n# Sort the result by count in descending order\nresult_count_df = result_count_df.sort_values('count', ascending=False)\n\n# Generate the bar plot\nplt.bar(result_count_df['result'], result_count_df['count'])\nplt.xlabel('Result')\nplt.ylabel('Count')\nplt.title('Battle Results')\nplt.show()"
  },
  {
    "db_id": "document_management",
    "question": "Give me a bar for what are the names of all the documents , as well as the access counts of each , ordered alphabetically ?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ndocuments = pd.read_sql(\"SELECT * FROM documents\", conn)\ndocuments.columns = documents.columns.str.lower()\n\n# Assuming 'documents' is the dataframe containing the table data\n\n# Sort the dataframe by document_name\nsorted_documents = documents.sort_values('document_name')\n\n# Extract the document_name and access_count columns\ndocument_names = sorted_documents['document_name']\naccess_counts = sorted_documents['access_count']\n\n# Create the bar plot\nplt.bar(document_names, access_counts)\n\n# Add labels and title\nplt.xlabel('Document Name')\nplt.ylabel('Access Count')\nplt.title('Access Count by Document Name')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "gymnast",
    "question": "How many gymnasts are from each hometown Plot them as bar chart, order x axis in desc order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the gymnast and people tables\ngymnast = pd.read_sql(\"SELECT * FROM gymnast\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\n\n# Convert column names to lowercase\ngymnast.columns = gymnast.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Merge the tables on the common column\nmerged_data = pd.merge(gymnast, people, left_on=\"gymnast_id\", right_on=\"people_id\")\n\n# Perform the SQL query\nresult = merged_data.groupby(\"hometown\").size().reset_index(name=\"count\").sort_values(\"hometown\", ascending=False)\n\n# Generate the bar chart\nplt.bar(result[\"hometown\"], result[\"count\"])\nplt.xlabel(\"Hometown\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Gymnasts by Hometown\")\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "perpetrator",
    "question": "Visualize a bar chart for what are the countries of perpetrators ? Show each country and the corresponding number of perpetrators there , could you display in descending by the x axis ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nperpetrator = pd.read_sql(\"SELECT * FROM perpetrator\", conn)\nperpetrator.columns = perpetrator.columns.str.lower()\n\n# Group by country and count the number of occurrences\nperpetrator_country_counts = perpetrator.groupby('country').size().reset_index(name='count')\n\n# Sort the counts by country in descending order\nperpetrator_country_counts = perpetrator_country_counts.sort_values('country', ascending=False)\n\n# Create a bar plot\nplt.bar(perpetrator_country_counts['country'], perpetrator_country_counts['count'])\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.title('Number of Perpetrators by Country')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Show the authors of their total submissions with a pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nsubmission = pd.read_sql(\"SELECT * FROM submission\", conn)\nsubmission.columns = submission.columns.str.lower()\n\n# Group by author and count the number of submissions\nauthor_counts = submission.groupby('author').size().reset_index(name='count')\n\n# Plot pie chart\nplt.pie(author_counts['count'], labels=author_counts['author'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "Bar graph to show the total number from different nationality , list in ascending by the the total number .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot.columns = pilot.columns.str.lower()\n\n# Group by nationality and count the number of pilots\nnationality_count = pilot.groupby('nationality').size().reset_index(name='count')\n\n# Sort the dataframe by count in ascending order\nnationality_count = nationality_count.sort_values('count')\n\n# Create a bar plot\nplt.bar(nationality_count['nationality'], nationality_count['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Pilots by Nationality')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "What is the city with the highest number of customers and the corresponding number of customers in that city, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nCustomers = pd.read_sql(\"SELECT * FROM Customers\", conn)\nAddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\nCustomers.columns = Customers.columns.str.lower()\nAddresses.columns = Addresses.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Customers, Addresses, left_on='customer_address_id', right_on='address_id')\n\n# Group by city and count the number of occurrences\ncity_counts = merged_df.groupby('city').size().reset_index(name='count')\n\n# Sort the counts in descending order\ncity_counts = city_counts.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(city_counts['city'], city_counts['count'])\nplt.xlabel('City')\nplt.ylabel('Count')\nplt.title('Number of Customers by City')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "Show how many carrriers for each shops in a bar chart, and list by the X-axis from low to high.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the stock table\nstock = pd.read_sql(\"SELECT * FROM stock\", conn)\nstock.columns = map(str.lower, stock.columns)\n\n# Read the device table\ndevice = pd.read_sql(\"SELECT * FROM device\", conn)\ndevice.columns = map(str.lower, device.columns)\n\n# Read the shop table\nshop = pd.read_sql(\"SELECT * FROM shop\", conn)\nshop.columns = map(str.lower, shop.columns)\n\n# Merge the tables\nmerged_data = pd.merge(stock, device, on=\"device_id\")\nmerged_data = pd.merge(merged_data, shop, on=\"shop_id\")\n\n# Perform the aggregation\naggregated_data = merged_data.groupby(\"shop_name\").size().reset_index(name=\"count\")\naggregated_data = aggregated_data.sort_values(\"shop_name\")\n\n# Plot the bar chart\nplt.bar(aggregated_data[\"shop_name\"], aggregated_data[\"count\"])\nplt.xlabel(\"Shop Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Devices per Shop\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "Show me a bar chart displaying the count of each product id from orders placed between 1975-01-01 and 1976-01-01, sorted in descending order of count.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\norder_items = pd.read_sql(\"SELECT * FROM order_items\", conn)\norders.columns = orders.columns.str.lower()\norder_items.columns = order_items.columns.str.lower()\n\n# Merge orders and order_items dataframes\nmerged_df = pd.merge(orders, order_items, on='order_id')\n\n# Filter data for orders placed between '1975-01-01' and '1976-01-01'\nfiltered_df = merged_df[(merged_df['date_order_placed'] >= '1975-01-01') & (merged_df['date_order_placed'] <= '1976-01-01')]\n\n# Group by product_id and count the number of occurrences\ngrouped_df = filtered_df.groupby('product_id').size().reset_index(name='count')\n\n# Sort by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['product_id'], sorted_df['count'])\nplt.xlabel('Product ID')\nplt.ylabel('Count')\nplt.title('Number of Orders per Product')\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Compare the number of participants in each participant type code using a bar chart, and could you rank from low to high by the Y-axis please?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Participants table\nparticipants = pd.read_sql(\"SELECT * FROM Participants\", conn)\n\n# Convert column names to lowercase\nparticipants.columns = participants.columns.str.lower()\n\n# Perform the SQL query\nresult = participants.groupby('participant_type_code').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result['participant_type_code'], result['count'])\nplt.xlabel('Participant Type Code')\nplt.ylabel('Count')\nplt.title('Number of Participants by Participant Type Code')\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "What is the count of services for each service type that had both successful and failure event details, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\nservices = pd.read_sql(\"SELECT * FROM services\", conn)\nevents = pd.read_sql(\"SELECT * FROM events\", conn)\nservices.columns = services.columns.str.lower()\nevents.columns = events.columns.str.lower()\n\n# Joining the services and events tables\nmerged_df = pd.merge(services, events, on='service_id')\n\n# Filtering the merged dataframe for event_details 'Success' or 'Fail'\nfiltered_df = merged_df[merged_df['event_details'].isin(['Success', 'Fail'])]\n\n# Grouping by service_type_code and counting the occurrences\ngrouped_df = filtered_df.groupby('service_type_code').size().reset_index(name='count')\n\n# Sorting the dataframe by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plotting the bar chart\nplt.bar(sorted_df['service_type_code'], sorted_df['count'])\nplt.xlabel('Service Type Code')\nplt.ylabel('Count')\nplt.title('Count of Services by Service Type Code')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "entertainment_awards",
    "question": "Show the ids and names of festivals that have at least two nominations for artworks by a bar chart, rank in desc by the x-axis please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the tables from the database\nnomination = pd.read_sql(\"SELECT * FROM nomination\", conn)\nartwork = pd.read_sql(\"SELECT * FROM artwork\", conn)\nfestival_detail = pd.read_sql(\"SELECT * FROM festival_detail\", conn)\n\n# Convert column names to lowercase\nnomination.columns = nomination.columns.str.lower()\nartwork.columns = artwork.columns.str.lower()\nfestival_detail.columns = festival_detail.columns.str.lower()\n\n# Merge the tables\nmerged_data = pd.merge(nomination, artwork, on=\"artwork_id\")\nmerged_data = pd.merge(merged_data, festival_detail, on=\"festival_id\")\n\n# Sort the merged data by festival name in descending order\nsorted_data = merged_data.sort_values(by=\"festival_name\", ascending=False)\n\n# Create a bar plot\nplt.bar(sorted_data[\"festival_name\"], sorted_data[\"festival_id\"])\nplt.xlabel(\"Festival Name\")\nplt.ylabel(\"Festival ID\")\nplt.title(\"Festival ID by Festival Name\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "List the name and the number of stations for all the cities that have at least 15 stations Show bar chart , and sort in ascending by the Y-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstation.columns = station.columns.str.lower()\n\n# Group by city and count the number of rows\ncity_counts = station.groupby('city').size().reset_index(name='count')\n\n# Sort the counts in ascending order\ncity_counts = city_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(city_counts['city'], city_counts['count'])\nplt.xlabel('City')\nplt.ylabel('Count')\nplt.title('Number of Stations by City')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "Return a bar chart showing how many shops in each location, could you rank how many location in ascending order please?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"shop\" table\nshop_data = pd.read_sql(\"SELECT * FROM shop\", conn)\n\n# Convert column names to lowercase\nshop_data.columns = shop_data.columns.str.lower()\n\n# Perform the SQL query\nresult = shop_data.groupby('location').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result['location'], result['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Shops by Location')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Find those years for all exhibitions with ticket prices lower than 15, return a bar chart that groups by year and counts the total number of years, and I want to display in ascending by the total number.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the exhibition table\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\n\n# Convert column names to lowercase\nexhibition.columns = exhibition.columns.str.lower()\n\n# Filter the data based on ticket_price < 15\nfiltered_exhibition = exhibition[exhibition['ticket_price'] < 15]\n\n# Group by Year and count the occurrences\ngrouped_exhibition = filtered_exhibition.groupby('year').size().reset_index(name='count')\n\n# Sort the data by count in ascending order\nsorted_exhibition = grouped_exhibition.sort_values('count', ascending=True)\n\n# Generate the bar plot\nplt.bar(sorted_exhibition['year'], sorted_exhibition['count'])\nplt.xlabel('Year')\nplt.ylabel('Count')\nplt.title('Exhibition Count by Year (Ticket Price < 15)')\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "Show me a bar chart for how many storms occured in each region?, and order total number from high to low order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the region table\nregion = pd.read_sql(\"SELECT * FROM region\", conn)\nregion.columns = map(str.lower, region.columns)\n\n# Read the affected_region table\naffected_region = pd.read_sql(\"SELECT * FROM affected_region\", conn)\naffected_region.columns = map(str.lower, affected_region.columns)\n\n# Merge the region and affected_region tables\nmerged_data = pd.merge(region, affected_region, on=\"region_id\")\n\n# Perform the SQL query\nresult = merged_data.groupby(\"region_name\").size().reset_index(name=\"count\").sort_values(\"count\", ascending=False)\n\n# Generate the bar plot\nplt.bar(result[\"region_name\"], result[\"count\"])\nplt.xlabel(\"Region\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Affected Regions\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "products_for_hire",
    "question": "Take the first name of all the good customers as the X-axis and gender of all the good customers as Y-axis in a bar chart, and sort by the names in asc.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the customers table\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\n\n# Convert column names to lowercase\ncustomers.columns = customers.columns.str.lower()\n\n# Filter the data for good customers\ngood_customers = customers[customers[\"good_or_bad_customer\"] == \"good\"]\n\n# Sort the data by first name\ngood_customers = good_customers.sort_values(\"first_name\")\n\n# Create a bar plot of first name and gender\nplt.bar(good_customers[\"first_name\"], good_customers[\"gender_mf\"])\nplt.xlabel(\"First Name\")\nplt.ylabel(\"Gender\")\nplt.title(\"Good Customers: First Name vs Gender\")\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "How many orders with order status \"On Road\" or \"Shipped\" does each customer have, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\ncustomers.columns = customers.columns.str.lower()\norders.columns = orders.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(customers, orders, on='customer_id')\n\n# Filter the data based on order status\nfiltered_df = merged_df[merged_df['order_status'].isin(['On Road', 'Shipped'])]\n\n# Group by customer_id and count the number of orders\ngrouped_df = filtered_df.groupby('customer_id').size().reset_index(name='order_count')\n\n# Plot the bar chart\nplt.bar(grouped_df['customer_id'], grouped_df['order_count'])\nplt.xlabel('Customer ID')\nplt.ylabel('Order Count')\nplt.title('Number of Orders per Customer')\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "A bar chart about what are the ids and details of events that have more than one participants?, I want to rank in asc by the total number of event id.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the EVENTS table\nevents = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\nevents.columns = map(str.lower, events.columns)\n\n# Read the Participants_in_Events table\nparticipants = pd.read_sql(\"SELECT * FROM Participants_in_Events\", conn)\nparticipants.columns = map(str.lower, participants.columns)\n\n# Merge the EVENTS and Participants_in_Events tables on Event_ID\nmerged_data = pd.merge(events, participants, on=\"event_id\")\n\n# Group by Event_Details and count the number of Event_IDs\nevent_counts = merged_data.groupby(\"event_details\")[\"event_id\"].count().reset_index()\n\n# Sort the data by Event_ID in ascending order\nevent_counts = event_counts.sort_values(\"event_id\")\n\n# Create a bar plot\nplt.bar(event_counts[\"event_details\"], event_counts[\"event_id\"])\nplt.xlabel(\"Event Details\")\nplt.ylabel(\"Event ID Count\")\nplt.title(\"Event ID Count by Event Details\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "What is the name of every city that has at least 15 stations and how many stations does it have Visualize by bar chart , and display by the names from high to low .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstation.columns = station.columns.str.lower()\n\n# Group by city and count the number of rows\ncity_counts = station.groupby('city').size().reset_index(name='count')\n\n# Sort the cities in descending order\ncity_counts = city_counts.sort_values('city', ascending=False)\n\n# Create a bar plot\nplt.bar(city_counts['city'], city_counts['count'])\nplt.xlabel('City')\nplt.ylabel('Count')\nplt.title('Number of Stations by City')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death , show me the dates active and the total number of deaths with a bar chart , and order in ascending by the Y .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm.columns = storm.columns.str.lower()\n\n# Assuming storm is a DataFrame containing the table data\n\n# Filter the data where number_deaths >= 1\nfiltered_data = storm[storm['number_deaths'] >= 1]\n\n# Sort the filtered data by number_deaths in ascending order\nsorted_data = filtered_data.sort_values('number_deaths')\n\n# Extract the required columns\ndates_active = sorted_data['dates_active']\nnumber_deaths = sorted_data['number_deaths']\n\n# Create a bar plot\nplt.bar(dates_active, number_deaths)\n\n# Add labels and title\nplt.xlabel('Dates Active')\nplt.ylabel('Number of Deaths')\nplt.title('Number of Deaths by Dates Active')\n\n# Show the plot\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Visualize a pie chart for how many authors submit to the workshop .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nsubmission = pd.read_sql(\"SELECT * FROM submission\", conn)\nsubmission.columns = submission.columns.str.lower()\n\n# Group by author and count the number of submissions\nauthor_counts = submission.groupby('author').size().reset_index(name='count')\n\n# Plot pie chart\nplt.pie(author_counts['count'], labels=author_counts['author'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "question": "Give me a bar chart about the number of customer addresses in each premises type, and could you sort by the y-axis in descending please?",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read data from customer_addresses table\ncustomer_addresses = pd.read_sql(\"SELECT * FROM customer_addresses\", conn)\n\n# Read data from premises table\npremises = pd.read_sql(\"SELECT * FROM premises\", conn)\n\n# Convert column names to lowercase\ncustomer_addresses.columns = customer_addresses.columns.str.lower()\npremises.columns = premises.columns.str.lower()\n\n# merge the two tables on premise_id\nmerged_data = pd.merge(customer_addresses, premises, on=\"premise_id\")\n\n# group by premises_type and count the occurrences\ngrouped_data = merged_data.groupby(\"premises_type\").size().reset_index(name=\"count\")\n\n# sort the data by count in descending order\nsorted_data = grouped_data.sort_values(\"count\", ascending=False)\n\n# plot the bar chart\nplt.bar(sorted_data[\"premises_type\"], sorted_data[\"count\"])\nplt.xlabel(\"Premises Type\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of Premises Types\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "theme_gallery",
    "question": "Can you create a bar chart displaying the artist names and the corresponding number of exhibitions for each artist?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nexhibition.columns = exhibition.columns.str.lower()\nartist.columns = artist.columns.str.lower()\n\n# Perform the join operation\nresult = pd.merge(exhibition, artist, on='artist_id')\n\n# Group by artist name and count the number of exhibitions\ngrouped = result.groupby('name').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped['name'], grouped['count'])\nplt.xlabel('Artist')\nplt.ylabel('Number of Exhibitions')\nplt.title('Number of Exhibitions by Artist')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Return a bar on what is the date and id of the transcript with at least 2 courses listed?, display in desc by the X.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the data from the Transcript_Contents table\ntranscript_contents = pd.read_sql(\"SELECT * FROM Transcript_Contents\", conn)\n\n# Read the data from the Transcripts table\ntranscripts = pd.read_sql(\"SELECT * FROM Transcripts\", conn)\n\n# Convert column names to lowercase\ntranscript_contents.columns = transcript_contents.columns.str.lower()\ntranscripts.columns = transcripts.columns.str.lower()\n\n# merge the two tables on the transcript_id column\nmerged_data = pd.merge(transcript_contents, transcripts, on='transcript_id')\n\n# sort the merged data by transcript_date in descending order\nsorted_data = merged_data.sort_values(by='transcript_date', ascending=False)\n\n# extract the required columns\ntranscript_date = sorted_data['transcript_date']\ntranscript_id = sorted_data['transcript_id']\n\n# plot the bar chart\nplt.bar(transcript_date, transcript_id)\nplt.xlabel('Transcript Date')\nplt.ylabel('Transcript ID')\nplt.title('Transcript ID vs Transcript Date')\nplt.show()\n"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Compare how many events by different event details using a bar chart , rank in ascending by the Y .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEVENTS = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\nEVENTS.columns = EVENTS.columns.str.lower()\n\n# Group by event_details and count the occurrences\nevent_counts = EVENTS.groupby('event_details').size().reset_index(name='count')\n\n# Sort the event_counts dataframe by count in ascending order\nevent_counts_sorted = event_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(event_counts_sorted['event_details'], event_counts_sorted['count'])\nplt.xlabel('Event Details')\nplt.ylabel('Count')\nplt.title('Event Details Count')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "insurance_and_eClaims",
    "question": "Show me a bar chart of the total amount claimed for each created date, sorted in descending order of the total amount claimed.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nclaims_documents = pd.read_sql(\"SELECT * FROM claims_documents\", conn)\nclaim_headers = pd.read_sql(\"SELECT * FROM claim_headers\", conn)\nclaims_documents.columns = claims_documents.columns.str.lower()\nclaim_headers.columns = claim_headers.columns.str.lower()\n\n# Merge the two dataframes\nmerged_df = pd.merge(claims_documents, claim_headers, left_on='claim_id', right_on='claim_header_id')\n\n# Group by created_date and calculate the sum of amount_claimed\ngrouped_df = merged_df.groupby('created_date')['amount_claimed'].sum().reset_index()\n\n# Sort the dataframe by sum of amount_claimed in descending order\nsorted_df = grouped_df.sort_values('amount_claimed', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['created_date'], sorted_df['amount_claimed'])\nplt.xlabel('Created Date')\nplt.ylabel('Sum of Amount Claimed')\nplt.title('Sum of Amount Claimed by Created Date')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "what are the different software platforms for devices , and how many devices have each ? , order by the x-axis in ascending please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ndevice = pd.read_sql(\"SELECT * FROM device\", conn)\ndevice.columns = device.columns.str.lower()\n\n# Group by software_platform and count the number of occurrences\nplatform_counts = device.groupby('software_platform').size().reset_index(name='count')\n\n# Sort the platform_counts dataframe by software_platform in ascending order\nplatform_counts = platform_counts.sort_values('software_platform')\n\n# Create a bar plot\nplt.bar(platform_counts['software_platform'], platform_counts['count'])\nplt.xlabel('Software Platform')\nplt.ylabel('Count')\nplt.title('Device Count by Software Platform')\nplt.show()"
  },
  {
    "db_id": "gymnast",
    "question": "Show me a bar chart displaying the names of gymnasts and the corresponding count of gymnasts with each name.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngymnast = pd.read_sql(\"SELECT * FROM gymnast\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\ngymnast.columns = gymnast.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(gymnast, people, left_on='gymnast_id', right_on='people_id')\n\n# Group by name and count the number of occurrences\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Sort by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['name'], sorted_df['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Number of Gymnasts per Person')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Show me a line chart displaying the order dates and average product prices of orders with a price higher than 1000, grouped by order date.",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nCustomer_Orders = pd.read_sql(\"SELECT * FROM Customer_Orders\", conn)\nORDER_ITEMS = pd.read_sql(\"SELECT * FROM ORDER_ITEMS\", conn)\nProducts = pd.read_sql(\"SELECT * FROM Products\", conn)\nCustomer_Orders.columns = Customer_Orders.columns.str.lower()\nORDER_ITEMS.columns = ORDER_ITEMS.columns.str.lower()\nProducts.columns = Products.columns.str.lower()\n\n# Merge the tables\nmerged_df = pd.merge(Customer_Orders, ORDER_ITEMS, on='order_id')\nmerged_df = pd.merge(merged_df, Products, on='product_id')\n\n# Filter the data\nfiltered_df = merged_df[merged_df['product_price'] > 1000]\n\n# Group by order_date and calculate average product_price\ngrouped_df = filtered_df.groupby('order_date').agg({'product_price': 'mean'}).reset_index()\n\n# Plot the line chart\nplt.plot(grouped_df['order_date'], grouped_df['product_price'])\nplt.xlabel('Order Date')\nplt.ylabel('Average Product Price')\nplt.title('Average Product Price by Order Date')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "How many employees were responsible for authorizing the destruction of documents and how many employees actually carried out the destruction? Show the data using a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDocuments_to_be_destroyed = pd.read_sql(\"SELECT * FROM Documents_to_be_destroyed\", conn)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nDocuments_to_be_destroyed.columns = Documents_to_be_destroyed.columns.str.lower()\nEmployees.columns = Employees.columns.str.lower()\nEmployees.columns = Employees.columns.str.lower()\n\n# Joining tables\nmerged_df = pd.merge(Documents_to_be_destroyed, Employees, left_on='destruction_authorised_by_employee_id', right_on='employee_id')\nmerged_df = pd.merge(merged_df, Employees, left_on='destroyed_by_employee_id', right_on='employee_id')\n\n# Counting employees\ncount_df = merged_df.groupby(['employee_name_x', 'employee_name_y']).size().reset_index(name='count')\n\n# Plotting bar chart\nplt.bar(count_df['employee_name_x'] + ' - ' + count_df['employee_name_y'], count_df['count'])\nplt.xlabel('Employees')\nplt.ylabel('Count')\nplt.title('Number of Documents Destroyed by Employees')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Bar graph to show how many result from different result , sort in asc by the X .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nacceptance = pd.read_sql(\"SELECT * FROM acceptance\", conn)\nacceptance.columns = acceptance.columns.str.lower()\n\n# Group by 'result' and count the occurrences\nresult_counts = acceptance.groupby('result').size().reset_index(name='count')\n\n# Sort the result_counts by 'result' in ascending order\nresult_counts = result_counts.sort_values('result')\n\n# Create a bar plot\nplt.bar(result_counts['result'], result_counts['count'])\nplt.xlabel('Result')\nplt.ylabel('Count')\nplt.title('Result Counts')\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "Return a bar chart on how many eliminations did each team have ? , and rank by the y-axis in ascending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nelimination = pd.read_sql(\"SELECT * FROM elimination\", conn)\nelimination.columns = elimination.columns.str.lower()\n\n# Group by team and count the number of occurrences\nteam_counts = elimination.groupby('team').size().reset_index(name='count')\n\n# Sort the counts in ascending order\nteam_counts = team_counts.sort_values('count')\n\n# Create a bar plot\nplt.bar(team_counts['team'], team_counts['count'])\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Number of Occurrences by Team')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "icfp_1",
    "question": "What is the distribution of paper titles, where the first author is affiliated with an institution in Japan and has the last name \"Ohori\", based on the number of authors per paper?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nauthors = pd.read_sql(\"SELECT * FROM authors\", conn)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\npapers = pd.read_sql(\"SELECT * FROM papers\", conn)\ninst = pd.read_sql(\"SELECT * FROM inst\", conn)\nauthors.columns = authors.columns.str.lower()\nauthorship.columns = authorship.columns.str.lower()\npapers.columns = papers.columns.str.lower()\ninst.columns = inst.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(authors, authorship, on='authid')\nmerged_df = pd.merge(merged_df, papers, on='paperid')\nmerged_df = pd.merge(merged_df, inst, on='instid')\n\n# Filter data\nfiltered_df = merged_df[(merged_df['country'] == 'Japan') & (merged_df['authorder'] == 1) & (merged_df['lname'] == 'Ohori')]\n\n# Group by title and count\ngrouped_df = filtered_df.groupby('title').size().reset_index(name='count')\n\n# Plot pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['title'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.title('Number of Papers by Title')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "I want to see trend of day_number by calendar date , rank in descending by the x axis .",
    "chart": "Line",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nRef_calendar = pd.read_sql(\"SELECT * FROM Ref_calendar\", conn)\nRef_calendar.columns = Ref_calendar.columns.str.lower()\n\n# Assuming the table data is already loaded into a DataFrame called Ref_calendar\n\n# Sort the DataFrame by calendar_date in descending order\nRef_calendar_sorted = Ref_calendar.sort_values(by='calendar_date', ascending=False)\n\n# Extract the calendar_date and day_number columns\ncalendar_date = Ref_calendar_sorted['calendar_date']\nday_number = Ref_calendar_sorted['day_number']\n\n# Plot the line chart\nplt.plot(calendar_date, day_number)\nplt.xlabel('Calendar Date')\nplt.ylabel('Day Number')\nplt.title('Line Chart of Day Number by Calendar Date')\nplt.show()"
  },
  {
    "db_id": "icfp_1",
    "question": "Create a pie chart to display the distribution of authors among papers, highlighting the papers with the highest number of authors.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nauthorship = pd.read_sql(\"SELECT * FROM authorship\", conn)\npapers = pd.read_sql(\"SELECT * FROM papers\", conn)\nauthorship.columns = authorship.columns.str.lower()\npapers.columns = papers.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(authorship, papers, on='paperid')\n\n# Group by title and count the number of authors\ngrouped_df = merged_df.groupby('title').size().reset_index(name='num_authors')\n\n# Create a pie chart\nplt.pie(grouped_df['num_authors'], labels=grouped_df['title'], autopct='%1.1f%%')\nplt.title('Number of Authors per Paper')\nplt.show()"
  },
  {
    "db_id": "gymnast",
    "question": "How many gymnasts are there in each age group, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngymnast = pd.read_sql(\"SELECT * FROM gymnast\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\ngymnast.columns = gymnast.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(gymnast, people, left_on='gymnast_id', right_on='people_id')\n\n# Group by age and count the number of occurrences\nage_counts = merged_df.groupby('age').size().reset_index(name='count')\n\n# Create a pie chart\nplt.pie(age_counts['count'], labels=age_counts['age'], autopct='%1.1f%%')\nplt.title('Distribution of Gymnasts by Age')\nplt.show()"
  },
  {
    "db_id": "perpetrator",
    "question": "Who are the top 10 perpetrators, ranked by the number of incidents they were involved in, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\nperpetrator = pd.read_sql(\"SELECT * FROM perpetrator\", conn)\npeople.columns = people.columns.str.lower()\nperpetrator.columns = perpetrator.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(people, perpetrator, on='people_id')\n\n# Group by name and count the occurrences\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Sort by count in descending order and select top 10\ntop_10_df = grouped_df.sort_values('count', ascending=False).head(10)\n\n# Plot the bar chart\nplt.bar(top_10_df['name'], top_10_df['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Top 10 People with Most Occurrences as Perpetrators')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Give me a bar chart to show the number of event details of events that have more than one participant, list x axis in ascending order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the EVENTS table\nevents = pd.read_sql(\"SELECT * FROM EVENTS\", conn)\nevents.columns = map(str.lower, events.columns)\n\n# Read the Participants_in_Events table\nparticipants = pd.read_sql(\"SELECT * FROM Participants_in_Events\", conn)\nparticipants.columns = map(str.lower, participants.columns)\n\n# Merge the two tables on Event_ID\nmerged_data = pd.merge(events, participants, on=\"event_id\")\n\n# Group by Event_Details and count the occurrences\nevent_counts = merged_data.groupby(\"event_details\").size().reset_index(name=\"count\")\n\n# Sort the data by Event_Details in ascending order\nevent_counts = event_counts.sort_values(\"event_details\")\n\n# Create a bar plot\nplt.bar(event_counts[\"event_details\"], event_counts[\"count\"])\nplt.xlabel(\"Event Details\")\nplt.ylabel(\"Count\")\nplt.title(\"Event Details Count\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "Which customers have purchased the product \"food\" and what is the frequency of their purchases, represented in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\norder_items = pd.read_sql(\"SELECT * FROM order_items\", conn)\nproducts = pd.read_sql(\"SELECT * FROM products\", conn)\ncustomers.columns = customers.columns.str.lower()\norders.columns = orders.columns.str.lower()\norder_items.columns = order_items.columns.str.lower()\nproducts.columns = products.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(customers, orders, on='customer_id')\nmerged_df = pd.merge(merged_df, order_items, on='order_id')\nmerged_df = pd.merge(merged_df, products, on='product_id')\n\n# Filter by product_name\nfiltered_df = merged_df[merged_df['product_name'] == 'food']\n\n# Group by customer_name and count\ngrouped_df = filtered_df.groupby('customer_name').size().reset_index(name='count')\n\n# Filter by count >= 1\nfiltered_grouped_df = grouped_df[grouped_df['count'] >= 1]\n\n# Plot bar chart\nplt.bar(filtered_grouped_df['customer_name'], filtered_grouped_df['count'])\nplt.xlabel('Customer Name')\nplt.ylabel('Count')\nplt.title('Number of Orders for Customers who purchased \"food\"')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "Show me a bar chart displaying the count of problems for each product, ranked in descending order of the count.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nproblems = pd.read_sql(\"SELECT * FROM problems\", conn)\nproduct = pd.read_sql(\"SELECT * FROM product\", conn)\nproblems.columns = problems.columns.str.lower()\nproduct.columns = product.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(problems, product, on='product_id')\n\n# Group by product_id and count\ngrouped_df = merged_df.groupby('product_id').size().reset_index(name='count')\n\n# Sort by count in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Plot bar chart\nplt.bar(sorted_df['product_id'], sorted_df['count'])\nplt.xlabel('Product ID')\nplt.ylabel('Count')\nplt.title('Number of Problems per Product')\nplt.show()"
  },
  {
    "db_id": "gymnast",
    "question": "Can you create a pie chart to display the distribution of gymnasts across different age groups?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngymnast = pd.read_sql(\"SELECT * FROM gymnast\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\ngymnast.columns = gymnast.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(gymnast, people, left_on='gymnast_id', right_on='people_id')\n\n# Group by age and count the number of occurrences\nage_counts = merged_df.groupby('age').size().reset_index(name='count')\n\n# Create a pie chart\nplt.pie(age_counts['count'], labels=age_counts['age'], autopct='%1.1f%%')\nplt.title('Distribution of Gymnasts by Age')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Find dates and attendance for exhibitions that happened in 2004, show me the attendance by date with a bar chart, and order y axis from low to high order please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the exhibition_record table\nexhibition_record = pd.read_sql(\"SELECT * FROM exhibition_record\", conn)\nexhibition_record.columns = map(str.lower, exhibition_record.columns)\n\n# Read the exhibition table\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nexhibition.columns = map(str.lower, exhibition.columns)\n\n# Merge the two tables based on exhibition_id\nmerged_data = pd.merge(exhibition_record, exhibition, on=\"exhibition_id\")\n\n# Filter the data for year 2004\nfiltered_data = merged_data[merged_data[\"year\"] == 2004]\n\n# Sort the data by attendance in ascending order\nsorted_data = filtered_data.sort_values(\"attendance\")\n\n# Plot the bar chart\nplt.bar(sorted_data[\"date\"], sorted_data[\"attendance\"])\nplt.xlabel(\"Date\")\nplt.ylabel(\"Attendance\")\nplt.title(\"Exhibition Attendance in 2004\")\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "tvshow",
    "question": "Find the pixel aspect ratio and the nation of the tv channels that do not use English. Show the proportion of the pixel aspect ratio with a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the tv_channel table\ntv_channel = pd.read_sql(\"SELECT * FROM tv_channel\", conn)\n\n# Convert column names to lowercase\ntv_channel.columns = tv_channel.columns.str.lower()\n\n# Filter rows where language is not English\nfiltered_tv_channel = tv_channel[tv_channel['language'] != 'English']\n\n# Group by Pixel_aspect_ratio_PAR and count occurrences\ngrouped_tv_channel = filtered_tv_channel.groupby('pixel_aspect_ratio_par').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_tv_channel['count'], labels=grouped_tv_channel['pixel_aspect_ratio_par'], autopct='%1.1f%%')\nplt.title('Pixel Aspect Ratio Distribution')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Show all role codes and the number of employees in each role with a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Employees table\nemployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\n\n# Convert column names to lowercase\nemployees.columns = employees.columns.str.lower()\n\n# Perform the SQL query\nrole_counts = employees.groupby('role_code').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(role_counts['count'], labels=role_counts['role_code'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "How many documents for different location code ? Plot a bar chart to show the proportion , list x-axis in asc order please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nDocument_locations = pd.read_sql(\"SELECT * FROM Document_locations\", conn)\nDocument_locations.columns = Document_locations.columns.str.lower()\n\n# Group by location_code and count the occurrences\nlocation_counts = Document_locations.groupby('location_code').size().reset_index(name='count')\n\n# Sort by location_code in ascending order\nlocation_counts = location_counts.sort_values('location_code')\n\n# Create bar plot\nplt.bar(location_counts['location_code'], location_counts['count'])\nplt.xlabel('Location Code')\nplt.ylabel('Count')\nplt.title('Document Locations')\nplt.show()"
  },
  {
    "db_id": "battle_death",
    "question": "Show a bar chart about the number of results of the battles when the bulgarian commander is not 'Boril', and order names in descending order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the battle table\nbattle_df = pd.read_sql(\"SELECT * FROM battle\", conn)\n\n# Convert column names to lowercase\nbattle_df.columns = battle_df.columns.str.lower()\n\n# Filter the data where bulgarian_commander is not 'Boril'\nfiltered_df = battle_df[battle_df['bulgarian_commander'] != 'Boril']\n\n# Perform the group by and count operation\nresult_count = filtered_df.groupby('result').size().reset_index(name='count')\n\n# Sort the result in descending order\nresult_count = result_count.sort_values('result', ascending=False)\n\n# Generate the bar plot\nplt.bar(result_count['result'], result_count['count'])\nplt.xlabel('Result')\nplt.ylabel('Count')\nplt.title('Battle Results')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "For each station, just show its latitude and the minimum duration of trips that ended at the station using a scatter chart.",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the 'station' table\nstation_df = pd.read_sql(\"SELECT * FROM station\", conn)\nstation_df.columns = map(str.lower, station_df.columns)\n\n# Read the 'trip' table\ntrip_df = pd.read_sql(\"SELECT * FROM trip\", conn)\ntrip_df.columns = map(str.lower, trip_df.columns)\n\n# Merge the 'station' and 'trip' tables on 'id' and 'end_station_id' columns respectively\nmerged_df = pd.merge(station_df, trip_df, left_on='id', right_on='end_station_id')\n\n# Group by 'lat' and calculate the minimum 'duration'\ngrouped_df = merged_df.groupby('lat')['duration'].min().reset_index()\n\n# Scatter plot\nplt.scatter(grouped_df['lat'], grouped_df['duration'])\nplt.xlabel('Latitude')\nplt.ylabel('Minimum Duration')\nplt.title('Scatter Plot of Latitude vs Minimum Duration')\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "question": "How many employees does each role have? Plot a bar chart listing role id and number of employees.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the ROLES table\nroles_df = pd.read_sql(\"SELECT * FROM ROLES\", conn)\nroles_df.columns = map(str.lower, roles_df.columns)\n\n# Read the Employees table\nemployees_df = pd.read_sql(\"SELECT * FROM Employees\", conn)\nemployees_df.columns = map(str.lower, employees_df.columns)\n\n# Merge the two tables on role_code\nmerged_df = pd.merge(roles_df, employees_df, on='role_code')\n\n# Group by role_code and count the number of occurrences\ngrouped_df = merged_df.groupby('role_code').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['role_code'], grouped_df['count'])\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Employees per Role')\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "Show me a line chart of the count of injury accidents for each game date, sorted by date.",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\ninjury_accident = pd.read_sql(\"SELECT * FROM injury_accident\", conn)\ngame.columns = game.columns.str.lower()\ninjury_accident.columns = injury_accident.columns.str.lower()\n\n# Merge the game and injury_accident dataframes\nmerged_df = pd.merge(game, injury_accident, left_on='id', right_on='game_id')\n\n# Group by date and count the number of accidents\naccident_count = merged_df.groupby('date').size().reset_index(name='count')\n\n# Sort the dataframe by date\naccident_count = accident_count.sort_values('date')\n\n# Plot the line chart\nplt.plot(accident_count['date'], accident_count['count'])\nplt.xlabel('Date')\nplt.ylabel('Count')\nplt.title('Number of Accidents by Date')\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "What are the number of names of patients who made an appointment?, and I want to display x-axis in desc order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the appointment table\nappointment = pd.read_sql(\"SELECT * FROM appointment\", conn)\n\n# Read the patient table\npatient = pd.read_sql(\"SELECT * FROM patient\", conn)\n\n# Convert column names to lowercase\nappointment.columns = appointment.columns.str.lower()\npatient.columns = patient.columns.str.lower()\n\n# merge the appointment and patient tables on the patient column\nmerged_data = pd.merge(appointment, patient, left_on='patient', right_on='ssn')\n\n# group by name and count the occurrences\ngrouped_data = merged_data.groupby('name').size().reset_index(name='count')\n\n# sort the data by name in descending order\nsorted_data = grouped_data.sort_values('name', ascending=False)\n\n# plot the bar chart\nplt.bar(sorted_data['name'], sorted_data['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Number of Appointments by Name')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "workshop_paper",
    "question": "Draw a bar chart that counts the number of venues of each workshop , and I want to order in ascending by the X .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nworkshop = pd.read_sql(\"SELECT * FROM workshop\", conn)\nworkshop.columns = workshop.columns.str.lower()\n\n# Grouping the data by venue and counting the occurrences\nvenue_counts = workshop.groupby('venue').size().reset_index(name='count')\n\n# Sorting the data by venue in ascending order\nvenue_counts = venue_counts.sort_values('venue')\n\n# Creating the bar plot\nplt.bar(venue_counts['venue'], venue_counts['count'])\nplt.xlabel('Venue')\nplt.ylabel('Count')\nplt.title('Workshop Venues')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship in a bar chart , and order in descending by the X-axis .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Group by citizenship and calculate the maximum net worth\nmax_net_worth = singer.groupby('citizenship')['net_worth_millions'].max()\n\n# Sort the data by citizenship in descending order\nmax_net_worth = max_net_worth.sort_index(ascending=False)\n\n# Create a bar plot\nplt.bar(max_net_worth.index, max_net_worth.values)\n\n# Set the labels and title\nplt.xlabel('Citizenship')\nplt.ylabel('Max Net Worth (Millions)')\nplt.title('Max Net Worth by Citizenship')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "question": "How many employees does each role have? Plot a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ROLES table\nroles_df = pd.read_sql(\"SELECT * FROM ROLES\", conn)\nroles_df.columns = map(str.lower, roles_df.columns)\n\n# Read the Employees table\nemployees_df = pd.read_sql(\"SELECT * FROM Employees\", conn)\nemployees_df.columns = map(str.lower, employees_df.columns)\n\n# Merge the ROLES and Employees tables on role_code\nmerged_df = pd.merge(roles_df, employees_df, on=\"role_code\")\n\n# Group by role_description and count the number of occurrences\ngrouped_df = merged_df.groupby(\"role_description\").size().reset_index(name=\"count\")\n\n# Plot the pie chart\nplt.pie(grouped_df[\"count\"], labels=grouped_df[\"role_description\"], autopct=\"%1.1f%%\")\nplt.axis(\"equal\")\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "What is the line chart displaying the number of exhibitions for the artist with the most number of exhibitions?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nexhibition.columns = exhibition.columns.str.lower()\nartist.columns = artist.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(exhibition, artist, on='artist_id')\n\n# Group by artist and count the number of exhibitions\ngrouped_df = merged_df.groupby('name').size().reset_index(name='exhibitions')\n\n# Sort the dataframe by the number of exhibitions in descending order\nsorted_df = grouped_df.sort_values(by='exhibitions', ascending=False)\n\n# Plot the line chart\nplt.plot(sorted_df['name'], sorted_df['exhibitions'])\nplt.xlabel('Artist')\nplt.ylabel('Number of Exhibitions')\nplt.title('Number of Exhibitions by Artist')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Return a bar chart showing the total number of ships' nationalities , and list in desc by the total number .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Group by nationality and count the occurrences\nnationality_count = ship.groupby('nationality').size().reset_index(name='count')\n\n# Sort by count in descending order\nnationality_count = nationality_count.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(nationality_count['nationality'], nationality_count['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Ships by Nationality')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show different types of ships and the average tonnage of ships of each type in a pie chart.",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ship table\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\n\n# Group by type and calculate average tonnage\navg_tonnage_by_type = ship_df.groupby('type')['tonnage'].mean()\n\n# Create a pie chart\nplt.pie(avg_tonnage_by_type, labels=avg_tonnage_by_type.index, autopct='%1.1f%%')\nplt.title('Average Tonnage by Ship Type')\nplt.show()\n\n# Close the database connection\nconn.close()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "Which products, reported by either Lacey Bosco or Kenton Champlin, have problems? Visualize the results using a bar chart, sorted by the number of problems reported.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nproblems = pd.read_sql(\"SELECT * FROM problems\", conn)\nproduct = pd.read_sql(\"SELECT * FROM product\", conn)\nstaff = pd.read_sql(\"SELECT * FROM staff\", conn)\nproblems.columns = problems.columns.str.lower()\nproduct.columns = product.columns.str.lower()\nstaff.columns = staff.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(pd.merge(problems, product, on='product_id'), staff, left_on='reported_by_staff_id', right_on='staff_id')\n\n# Filter staff names\nfiltered_df = merged_df[(merged_df['staff_first_name'].isin(['Lacey', 'Kenton'])) & (merged_df['staff_last_name'].isin(['Bosco', 'Champlin']))]\n\n# Group by product name and count\ngrouped_df = filtered_df.groupby('product_name').size().reset_index(name='count')\n\n# Sort by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot bar chart\nplt.bar(sorted_df['product_name'], sorted_df['count'])\nplt.xlabel('Product Name')\nplt.ylabel('Count')\nplt.title('Number of Problems by Product')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Can you create a pie chart displaying the distribution of employees by role in the database, including the role name and count for each role?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nROLES = pd.read_sql(\"SELECT * FROM ROLES\", conn)\nEmployees.columns = Employees.columns.str.lower()\nROLES.columns = ROLES.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Employees, ROLES, left_on='role_code', right_on='role_code')\n\n# Group by role_name and count the number of occurrences\ngrouped_df = merged_df.groupby('role_name').size().reset_index(name='count')\n\n# Create a pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['role_name'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Show me a bar chart of the total sales for each exhibition theme, sorted in descending order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nexhibition.columns = exhibition.columns.str.lower()\nartist.columns = artist.columns.str.lower()\n\n# Perform the join operation\nmerged_data = pd.merge(exhibition, artist, on='artist_id')\n\n# Group by theme and calculate total sales\nsales_by_theme = merged_data.groupby('theme')['ticket_price'].sum().reset_index()\n\n# Sort by total sales in descending order\nsales_by_theme = sales_by_theme.sort_values('ticket_price', ascending=False)\n\n# Plot the bar chart\nplt.bar(sales_by_theme['theme'], sales_by_theme['ticket_price'])\nplt.xlabel('Theme')\nplt.ylabel('Total Sales')\nplt.title('Total Sales by Theme')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "Show me how many home team by home team in a bar , and I want to show by the bar in ascending .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\ngame.columns = game.columns.str.lower()\n\n# Grouping the data by home_team and counting the occurrences\nhome_team_counts = game.groupby('home_team').size().reset_index(name='count')\n\n# Sorting the data by home_team in ascending order\nhome_team_counts = home_team_counts.sort_values('home_team')\n\n# Creating the bar plot\nplt.bar(home_team_counts['home_team'], home_team_counts['count'])\nplt.xlabel('Home Team')\nplt.ylabel('Count')\nplt.title('Number of Games by Home Team')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "Show me a bar chart displaying the count of on-call shifts for each nurse, ordered in descending order by the count.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nnurse = pd.read_sql(\"SELECT * FROM nurse\", conn)\non_call = pd.read_sql(\"SELECT * FROM on_call\", conn)\nnurse.columns = nurse.columns.str.lower()\non_call.columns = on_call.columns.str.lower()\n\n# Merge nurse and on_call tables\nmerged_df = pd.merge(nurse, on_call, left_on='employeeid', right_on='nurse')\n\n# Group by nurse name and count the number of occurrences\ngrouped_df = merged_df.groupby('name').size().reset_index(name='count')\n\n# Sort by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['name'], sorted_df['count'])\nplt.xlabel('Nurse Name')\nplt.ylabel('Count')\nplt.title('Number of On Call Assignments by Nurse')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "What is the relationship between dock count and the count of trips for each dock count for trips that started from each station? Show me a scatter plot to visualize it.",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntrip = pd.read_sql(\"SELECT * FROM trip\", conn)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\ntrip.columns = trip.columns.str.lower()\nstation.columns = station.columns.str.lower()\n\n# Joining trip and station tables\nmerged_df = pd.merge(trip, station, left_on='start_station_id', right_on='id')\n\n# Grouping by dock_count and counting the number of rows\ngrouped_df = merged_df.groupby('dock_count').size().reset_index(name='count')\n\n# Creating scatter plot\nplt.scatter(grouped_df['dock_count'], grouped_df['count'])\nplt.xlabel('Dock Count')\nplt.ylabel('Count')\nplt.title('Number of Trips vs Dock Count')\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "How many orders with both \"On Road\" and \"Shipped\" as order status does each customer have? List the customer ids and the count of orders in a bar chart.",
    "chart": "Bar",
    "hardness": "Extra Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\ncustomers.columns = customers.columns.str.lower()\norders.columns = orders.columns.str.lower()\ncustomers.columns = customers.columns.str.lower()\norders.columns = orders.columns.str.lower()\n\n# Perform the SQL query\ndf = pd.merge(customers, orders, on='customer_id')\ndf = df[(df['order_status'] == 'On Road') | (df['order_status'] == 'Shipped')]\ndf = df.groupby('customer_id').size().reset_index(name='count')\n\n# Create the bar plot\nplt.bar(df['customer_id'], df['count'])\nplt.xlabel('Customer ID')\nplt.ylabel('Count')\nplt.title('Number of Orders for Customers with \"On Road\" and \"Shipped\" Status')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "How many services for each service type description? Use a bar chart to show it.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Ref_Service_Types table\nref_service_types = pd.read_sql(\"SELECT * FROM Ref_Service_Types\", conn)\n\n# Read the Services table\nservices = pd.read_sql(\"SELECT * FROM Services\", conn)\n\n# Convert column names to lowercase\nref_service_types.columns = ref_service_types.columns.str.lower()\nservices.columns = services.columns.str.lower()\n\n# merge the two tables on service_type_code\nmerged_data = pd.merge(ref_service_types, services, on=\"service_type_code\")\n\n# group by service_type_code and count the number of occurrences\ngrouped_data = merged_data.groupby(\"service_type_code\").size().reset_index(name=\"count\")\n\n# get the service_type_description from ref_service_types\ngrouped_data = pd.merge(grouped_data, ref_service_types, on=\"service_type_code\")\n\n# plot the bar chart\nplt.bar(grouped_data[\"service_type_description\"], grouped_data[\"count\"])\nplt.xlabel(\"Service Type Description\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Services by Service Type\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What other details can you tell me about students in reverse alphabetical order , and count them by a bar chart",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nStudents = pd.read_sql(\"SELECT * FROM Students\", conn)\nStudents.columns = Students.columns.str.lower()\n\n# Grouping and counting the other_student_details\ngrouped_data = Students.groupby('other_student_details').size().reset_index(name='count')\n\n# Sorting the data by other_student_details in descending order\nsorted_data = grouped_data.sort_values('other_student_details', ascending=False)\n\n# Creating the bar plot\nplt.bar(sorted_data['other_student_details'], sorted_data['count'])\nplt.xlabel('Other Student Details')\nplt.ylabel('Count')\nplt.title('Count of Other Student Details')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "What is the total number of each ship type? Give me a bar chart, display X in asc order.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the ship table\nship_df = pd.read_sql(\"SELECT * FROM ship\", conn)\n\n# Convert column names to lowercase\nship_df.columns = ship_df.columns.str.lower()\n\n# Perform the SQL query\nresult = ship_df.groupby('type').size().reset_index(name='count').sort_values('type')\n\n# Generate the bar chart\nplt.bar(result['type'], result['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Number of Ships by Type')\nplt.show()"
  },
  {
    "db_id": "soccer_1",
    "question": "How many players, who prefer their right foot, have a crossing score higher than 90, displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nPlayer = pd.read_sql(\"SELECT * FROM Player\", conn)\nPlayer_Attributes = pd.read_sql(\"SELECT * FROM Player_Attributes\", conn)\nPlayer.columns = Player.columns.str.lower()\nPlayer_Attributes.columns = Player_Attributes.columns.str.lower()\n\n# Merge the Player and Player_Attributes dataframes\nmerged_df = pd.merge(Player, Player_Attributes, on='player_api_id')\n\n# Filter the merged dataframe based on the conditions\nfiltered_df = merged_df[(merged_df['crossing'] > 90) & (merged_df['preferred_foot'] == 'right')]\n\n# Group the filtered dataframe by player_name and count the number of occurrences\ngrouped_df = filtered_df.groupby('player_name').size().reset_index(name='count')\n\n# Sort the grouped dataframe by count in descending order\nsorted_df = grouped_df.sort_values('count', ascending=False)\n\n# Plot the bar chart\nplt.bar(sorted_df['player_name'], sorted_df['count'])\nplt.xlabel('Player Name')\nplt.ylabel('Count')\nplt.title('Number of Players with Crossing > 90 and Preferred Foot = Right')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Show the date and id of the transcript with at least 2 course results in a bar chart.",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the data from the tables\ntranscript_contents = pd.read_sql(\"SELECT * FROM Transcript_Contents\", conn)\ntranscripts = pd.read_sql(\"SELECT * FROM Transcripts\", conn)\n\n# Convert column names to lowercase\ntranscript_contents.columns = map(str.lower, transcript_contents.columns)\ntranscripts.columns = map(str.lower, transcripts.columns)\n\n# Merge the tables on the transcript_id column\nmerged_data = pd.merge(transcript_contents, transcripts, on='transcript_id')\n\n# Plot the bar chart\nplt.bar(merged_data['transcript_date'], merged_data['transcript_id'])\nplt.xlabel('Transcript Date')\nplt.ylabel('Transcript ID')\nplt.title('Transcript ID by Date')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "how many exhibitions has each artist had?, I want to order by the bar in ascending.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the exhibition and artist tables\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\n\n# Convert column names to lowercase\nexhibition.columns = exhibition.columns.str.lower()\nartist.columns = artist.columns.str.lower()\n\n# Merge the exhibition and artist tables on artist_id\nmerged_data = pd.merge(exhibition, artist, on=\"artist_id\")\n\n# Perform the SQL query and group by artist_id, count the number of exhibitions, and order by name\nresult = merged_data.groupby(\"name\").size().reset_index(name=\"exhibition_count\").sort_values(\"name\")\n\n# Create a bar plot\nplt.bar(result[\"name\"], result[\"exhibition_count\"])\nplt.xlabel(\"Artist Name\")\nplt.ylabel(\"Exhibition Count\")\nplt.title(\"Number of Exhibitions by Artist\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show different citizenship of singers and the number of singers of each citizenship Plot them as bar chart, could you sort by the x-axis in asc please?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"singer\" table\nsinger_data = pd.read_sql(\"SELECT * FROM singer\", conn)\n\n# Convert column names to lowercase\nsinger_data.columns = singer_data.columns.str.lower()\n\n# Perform the SQL query\nresult = singer_data.groupby('citizenship').size().reset_index(name='count').sort_values('citizenship')\n\n# Generate the bar plot\nplt.bar(result['citizenship'], result['count'])\nplt.xlabel('Citizenship')\nplt.ylabel('Count')\nplt.title('Number of Singers by Citizenship')\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "Show different teams in eliminations and the number of eliminations from each team , and show me the proportion .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nelimination = pd.read_sql(\"SELECT * FROM elimination\", conn)\nelimination.columns = elimination.columns.str.lower()\n\n# Grouping the data by team and counting the occurrences\nteam_counts = elimination.groupby('team').size()\n\n# Creating a pie chart\nplt.pie(team_counts, labels=team_counts.index, autopct='%1.1f%%')\nplt.title('Team Distribution')\nplt.show()"
  },
  {
    "db_id": "soccer_1",
    "question": "Which players possess the highest dribbling ratings and what are their corresponding names? Display the results using a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nPlayer = pd.read_sql(\"SELECT * FROM Player\", conn)\nPlayer_Attributes = pd.read_sql(\"SELECT * FROM Player_Attributes\", conn)\nPlayer_Attributes = pd.read_sql(\"SELECT * FROM Player_Attributes\", conn)\nPlayer.columns = Player.columns.str.lower()\nPlayer_Attributes.columns = Player_Attributes.columns.str.lower()\nPlayer_Attributes.columns = Player_Attributes.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(Player, Player_Attributes, on='player_api_id')\n\n# Finding the maximum overall rating\nmax_rating = merged_df['overall_rating'].max()\n\n# Filtering the data for players with maximum overall rating\nfiltered_df = merged_df[merged_df['overall_rating'] == max_rating]\n\n# Selecting the player name and dribbling columns\nresult_df = filtered_df[['player_name', 'dribbling']]\n\n# Plotting the bar chart\nplt.bar(result_df['player_name'], result_df['dribbling'])\nplt.xlabel('Player Name')\nplt.ylabel('Dribbling')\nplt.title('Dribbling of Players with Maximum Overall Rating')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "twitter_1",
    "question": "Find the name and partition id for users who tweeted less than twice Show bar chart, and could you sort by the total number in ascending?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the user_profiles table\nuser_profiles = pd.read_sql(\"SELECT * FROM user_profiles\", conn)\nuser_profiles.columns = map(str.lower, user_profiles.columns)\n\n# Read the tweets table\ntweets = pd.read_sql(\"SELECT * FROM tweets\", conn)\ntweets.columns = map(str.lower, tweets.columns)\n\n# Merge the user_profiles and tweets tables on uid column\nmerged_data = pd.merge(user_profiles, tweets, on=\"uid\")\n\n# Sort the merged data by partitionid column in ascending order\nsorted_data = merged_data.sort_values(\"partitionid\")\n\n# Create a bar plot of name and partitionid\nplt.bar(sorted_data[\"name\"], sorted_data[\"partitionid\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Partition ID\")\nplt.title(\"Bar Plot of Name and Partition ID\")\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "Create a bar chart showing how many location across location , and show names from low to high order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nshop = pd.read_sql(\"SELECT * FROM shop\", conn)\nshop.columns = shop.columns.str.lower()\n\n# Group by location and count the occurrences\nlocation_counts = shop.groupby('location').size().reset_index(name='count')\n\n# Sort by location in ascending order\nlocation_counts = location_counts.sort_values('location')\n\n# Create bar plot\nplt.bar(location_counts['location'], location_counts['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Shops by Location')\nplt.show()"
  },
  {
    "db_id": "tracking_orders",
    "question": "How many customers have orders with the order status of \"On Road\" and \"Shipped\" displayed in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ncustomers = pd.read_sql(\"SELECT * FROM customers\", conn)\norders = pd.read_sql(\"SELECT * FROM orders\", conn)\ncustomers.columns = customers.columns.str.lower()\norders.columns = orders.columns.str.lower()\n\n# Merge customers and orders tables\nmerged_df = pd.merge(customers, orders, on='customer_id')\n\n# Filter orders with order_status 'on road' or 'shipped'\nfiltered_df = merged_df[merged_df['order_status'].isin(['On Road', 'Shipped'])]\n\n# Group by order_status and count the number of orders\ngrouped_df = filtered_df.groupby('order_status').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['order_status'], grouped_df['count'])\nplt.xlabel('Order Status')\nplt.ylabel('Count')\nplt.title('Number of Orders by Order Status')\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "Show all payment method codes and the number of orders for each code in a bar chart, show by the y axis from low to high please.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the INVOICES table\ninvoices = pd.read_sql(\"SELECT * FROM INVOICES\", conn)\n\n# Convert column names to lowercase\ninvoices.columns = invoices.columns.str.lower()\n\n# Perform the SQL query\nresult = invoices.groupby('payment_method_code').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result['payment_method_code'], result['count'])\nplt.xlabel('Payment Method Code')\nplt.ylabel('Count')\nplt.title('Number of Invoices by Payment Method Code')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "For each type , what is the average tonnage , and show X in desc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Group by type and calculate average tonnage\nship_avg_tonnage = ship.groupby('type')['tonnage'].mean()\n\n# Sort the data by type in descending order\nship_avg_tonnage = ship_avg_tonnage.sort_index(ascending=False)\n\n# Create a bar plot\nplt.bar(ship_avg_tonnage.index, ship_avg_tonnage.values)\n\n# Set the labels and title\nplt.xlabel('Type')\nplt.ylabel('Average Tonnage')\nplt.title('Average Tonnage by Ship Type')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "hospital_1",
    "question": "What are names of patients who made an appointment, and count them by a bar chart, and display by the X-axis in desc.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": " \n\nimport sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the appointment table\nappointment = pd.read_sql(\"SELECT * FROM appointment\", conn)\n\n# Read the patient table\npatient = pd.read_sql(\"SELECT * FROM patient\", conn)\n\n# Convert column names to lowercase\nappointment.columns = appointment.columns.str.lower()\npatient.columns = patient.columns.str.lower()\n\n# merge the appointment and patient tables on the patient column\nmerged_data = pd.merge(appointment, patient, left_on='patient', right_on='ssn')\n\n# group by name and count the occurrences\ngrouped_data = merged_data.groupby('name').size().reset_index(name='count')\n\n# sort the data by name in descending order\nsorted_data = grouped_data.sort_values('name', ascending=False)\n\n# plot the bar chart\nplt.bar(sorted_data['name'], sorted_data['count'])\nplt.xlabel('Name')\nplt.ylabel('Count')\nplt.title('Number of Appointments by Name')\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "hospital_1",
    "question": "Which physician prescribed the highest sum of doses? Show the result using a pie chart.",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nphysician = pd.read_sql(\"SELECT * FROM physician\", conn)\nprescribes = pd.read_sql(\"SELECT * FROM prescribes\", conn)\nphysician.columns = physician.columns.str.lower()\nprescribes.columns = prescribes.columns.str.lower()\n\n# Perform the join operation\ndf = pd.merge(physician, prescribes, left_on='employeeid', right_on='physician')\n\n# Group by physician name and calculate the sum of dose\ndf_grouped = df.groupby('name')['dose'].sum().reset_index()\n\n# Plot the pie chart\nplt.pie(df_grouped['dose'], labels=df_grouped['name'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "tvshow",
    "question": "List each language and the number of TV Channels using it in a bar chart, and display in descending by the total number.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the TV_Channel table\ndf = pd.read_sql(\"SELECT * FROM TV_Channel\", conn)\n\n# Convert column names to lowercase\ndf.columns = df.columns.str.lower()\n\n# Perform the SQL query\nresult = df.groupby('language').size().reset_index(name='count').sort_values(by='count', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['language'], result['count'])\nplt.xlabel('Language')\nplt.ylabel('Count')\nplt.title('Number of TV Channels by Language')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "Draw a bar chart for what is the number of entry descriptions of each problem ? , rank by the X from low to high .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nproblem_log = pd.read_sql(\"SELECT * FROM problem_log\", conn)\nproblem_log.columns = problem_log.columns.str.lower()\n\n# Grouping the data by log_entry_description and counting the occurrences\ngrouped_data = problem_log.groupby('log_entry_description').size().reset_index(name='count')\n\n# Sorting the data by log_entry_description in ascending order\nsorted_data = grouped_data.sort_values('log_entry_description')\n\n# Creating the bar plot\nplt.bar(sorted_data['log_entry_description'], sorted_data['count'])\nplt.xlabel('Log Entry Description')\nplt.ylabel('Count')\nplt.title('Occurrences of Log Entry Descriptions')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "List the number of games in each season with a line chart.",
    "chart": "Line",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the game table\ngame_df = pd.read_sql(\"SELECT * FROM game\", conn)\n\n# Convert column names to lowercase\ngame_df.columns = game_df.columns.str.lower()\n\n# Perform the SQL query\nseason_count = game_df.groupby('season').size().reset_index(name='count')\n\n# Plot the line chart\nplt.plot(season_count['season'], season_count['count'])\nplt.xlabel('Season')\nplt.ylabel('Count')\nplt.title('Number of Games per Season')\nplt.show()"
  },
  {
    "db_id": "soccer_1",
    "question": "Show me a bar chart of the top 3 players in terms of overall rating.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nPlayer = pd.read_sql(\"SELECT * FROM Player\", conn)\nPlayer_Attributes = pd.read_sql(\"SELECT * FROM Player_Attributes\", conn)\nPlayer.columns = Player.columns.str.lower()\nPlayer_Attributes.columns = Player_Attributes.columns.str.lower()\n\n# Merge the Player and Player_Attributes dataframes\nmerged_df = pd.merge(Player, Player_Attributes, on='player_api_id')\n\n# Sort the dataframe by overall_rating in descending order and select the top 3 rows\ntop_players = merged_df.sort_values('overall_rating', ascending=False).head(3)\n\n# Create a bar plot to visualize the top players and their overall ratings\nplt.bar(top_players['player_name'], top_players['overall_rating'])\nplt.xlabel('Player Name')\nplt.ylabel('Overall Rating')\nplt.title('Top 3 Players by Overall Rating')\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "How many customers with the same last name and residing in Lockmanfurt can be represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nCustomers = pd.read_sql(\"SELECT * FROM Customers\", conn)\nAddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\nCustomers.columns = Customers.columns.str.lower()\nAddresses.columns = Addresses.columns.str.lower()\n\n# Merge Customers and Addresses dataframes\nmerged_df = pd.merge(Customers, Addresses, left_on='customer_address_id', right_on='address_id')\n\n# Filter data for city 'Lockmanfurt'\nfiltered_df = merged_df[merged_df['city'] == 'Lockmanfurt']\n\n# Group by last_name and count the occurrences\ngrouped_df = filtered_df.groupby('last_name').size().reset_index(name='count')\n\n# Plotting the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['last_name'], autopct='%1.1f%%')\nplt.title('Distribution of Customers by Last Name in Lockmanfurt')\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "What are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality . Show bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot.columns = pilot.columns.str.lower()\n\n# Grouping the data by nationality and counting the occurrences\nnationality_counts = pilot.groupby('nationality').size()\n\n# Creating a bar plot\nplt.bar(nationality_counts.index, nationality_counts.values)\n\n# Adding labels and title\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Pilots by Nationality')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Show different types of ships and the average tonnage of ships of each type in a bar chart , and could you sort by the x-axis in ascending please ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Group by type and calculate average tonnage\nship_avg_tonnage = ship.groupby('type')['tonnage'].mean()\n\n# Sort the data by type in ascending order\nship_avg_tonnage = ship_avg_tonnage.sort_index()\n\n# Create a bar plot\nplt.bar(ship_avg_tonnage.index, ship_avg_tonnage.values)\n\n# Set the labels and title\nplt.xlabel('Type')\nplt.ylabel('Average Tonnage')\nplt.title('Average Tonnage by Ship Type')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "question": "Return a bar on what is the code of each role and the number of employees in each role ?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nEmployees = pd.read_sql(\"SELECT * FROM Employees\", conn)\nEmployees.columns = Employees.columns.str.lower()\n\n# Grouping the data by role_code and counting the number of occurrences\nrole_counts = Employees.groupby('role_code').size()\n\n# Creating a bar plot\nplt.bar(role_counts.index, role_counts.values)\n\n# Adding labels and title\nplt.xlabel('Role Code')\nplt.ylabel('Count')\nplt.title('Number of Employees by Role Code')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "Show me a line chart representing the count of problems reported after 1986-11-13 for each date they were reported.",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nproblems = pd.read_sql(\"SELECT * FROM problems\", conn)\nproduct = pd.read_sql(\"SELECT * FROM product\", conn)\nproblems.columns = problems.columns.str.lower()\nproduct.columns = product.columns.str.lower()\n\n# Merge problems and product tables\nmerged_df = pd.merge(problems, product, on='product_id')\n\n# Filter data based on date_problem_reported\nfiltered_df = merged_df[merged_df['date_problem_reported'] > '1986-11-13']\n\n# Group by date_problem_reported and count the number of occurrences\ngrouped_df = filtered_df.groupby('date_problem_reported').size().reset_index(name='count')\n\n# Plot the line chart\nplt.plot(grouped_df['date_problem_reported'], grouped_df['count'])\nplt.xlabel('Date Problem Reported')\nplt.ylabel('Count')\nplt.title('Number of Problems Reported over Time')\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "For each team , how many technicians are there , and list names in desc order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\ntechnician.columns = technician.columns.str.lower()\n\n# Grouping the data by 'team' and counting the number of occurrences\nteam_counts = technician.groupby('team').size()\n\n# Sorting the data by 'team' in descending order\nteam_counts = team_counts.sort_index(ascending=False)\n\n# Creating a bar plot\nplt.bar(team_counts.index, team_counts.values)\n\n# Adding labels and title\nplt.xlabel('Team')\nplt.ylabel('Count')\nplt.title('Technician Count by Team')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "question": "How many orders are there for each product price that is higher than 1000, visualized in a scatter chart?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nCustomer_Orders = pd.read_sql(\"SELECT * FROM Customer_Orders\", conn)\nORDER_ITEMS = pd.read_sql(\"SELECT * FROM ORDER_ITEMS\", conn)\nProducts = pd.read_sql(\"SELECT * FROM Products\", conn)\nCustomer_Orders.columns = Customer_Orders.columns.str.lower()\nORDER_ITEMS.columns = ORDER_ITEMS.columns.str.lower()\nProducts.columns = Products.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(Customer_Orders, ORDER_ITEMS, on='order_id')\nmerged_df = pd.merge(merged_df, Products, on='product_id')\n\n# Filtering the data\nfiltered_df = merged_df[merged_df['product_price'] > 1000]\n\n# Grouping and counting\ngrouped_df = filtered_df.groupby('product_price').size().reset_index(name='count')\n\n# Scatter plot\nplt.scatter(grouped_df['product_price'], grouped_df['count'])\nplt.xlabel('Product Price')\nplt.ylabel('Count')\nplt.title('Count of Orders by Product Price')\nplt.show()"
  },
  {
    "db_id": "e_government",
    "question": "What is the name of the organization with the highest number of contact individuals, represented in a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\norganizations = pd.read_sql(\"SELECT * FROM organizations\", conn)\norganization_contact_individuals = pd.read_sql(\"SELECT * FROM organization_contact_individuals\", conn)\norganizations.columns = organizations.columns.str.lower()\norganization_contact_individuals.columns = organization_contact_individuals.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(organizations, organization_contact_individuals, on='organization_id')\n\n# Group by organization_name and count the number of occurrences\ngrouped_df = merged_df.groupby('organization_name').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order and select the top 1 row\ntop_organization = grouped_df.sort_values('count', ascending=False).head(1)\n\n# Extract the organization name and count\norganization_name = top_organization['organization_name'].values[0]\ncount = top_organization['count'].values[0]\n\n# Create a pie chart\nplt.pie([count], labels=[organization_name], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "restaurant_1",
    "question": "For those female students with age is older than 18 who are not majoring in 600, tell me how many students of different first names using a bar chart, display in asc by the how many fname.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the Student table\nstudent_data = pd.read_sql(\"SELECT * FROM Student\", conn)\n\n# Convert column names to lowercase\nstudent_data.columns = student_data.columns.str.lower()\n\n# Filter the data based on the conditions\nfiltered_data = student_data[(student_data['age'] > 18) & (student_data['major'] != 600) & (student_data['sex'] == 'F')]\n\n# Group the data by Fname and count the occurrences\ngrouped_data = filtered_data.groupby('fname').size().reset_index(name='count')\n\n# Sort the data by count in ascending order\nsorted_data = grouped_data.sort_values('count', ascending=True)\n\n# Plot the bar chart\nplt.bar(sorted_data['fname'], sorted_data['count'])\nplt.xlabel('Fname')\nplt.ylabel('Count')\nplt.title('Number of Students by Fname')\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "Show how many carrriers for each shops in a bar chart.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the stock table\nstock = pd.read_sql(\"SELECT * FROM stock\", conn)\nstock.columns = map(str.lower, stock.columns)\n\n# Read the device table\ndevice = pd.read_sql(\"SELECT * FROM device\", conn)\ndevice.columns = map(str.lower, device.columns)\n\n# Read the shop table\nshop = pd.read_sql(\"SELECT * FROM shop\", conn)\nshop.columns = map(str.lower, shop.columns)\n\n# Merge the tables\nmerged_data = pd.merge(stock, device, on=\"device_id\")\nmerged_data = pd.merge(merged_data, shop, on=\"shop_id\")\n\n# Perform the aggregation\naggregated_data = merged_data.groupby(\"shop_name\").size().reset_index(name=\"count\")\n\n# Plot the bar chart\nplt.bar(aggregated_data[\"shop_name\"], aggregated_data[\"count\"])\nplt.xlabel(\"Shop Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Devices in Each Shop\")\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "List all customer status codes and the number of customers having each status code, order from high to low by the y-axis.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Customers table\ncustomers = pd.read_sql(\"SELECT * FROM Customers\", conn)\n\n# Convert column names to lowercase\ncustomers.columns = customers.columns.str.lower()\n\n# Perform the SQL query\nresult = customers.groupby('customer_status_code').size().reset_index(name='count').sort_values(by='count', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['customer_status_code'], result['count'])\nplt.xlabel('Customer Status Code')\nplt.ylabel('Count')\nplt.title('Number of Customers by Status Code')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Create a bar chart showing the total number across city , I want to list names from high to low order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstation.columns = station.columns.str.lower()\n\n# Group by city and count the number of rows\ncity_counts = station.groupby('city').size().reset_index(name='count')\n\n# Sort the cities in descending order\ncity_counts = city_counts.sort_values('city', ascending=False)\n\n# Create a bar plot\nplt.bar(city_counts['city'], city_counts['count'])\nplt.xlabel('City')\nplt.ylabel('Count')\nplt.title('Number of Stations by City')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "singer",
    "question": "Show me maximal net worth millions by citizenship in a bar , and show by the x-axis in ascending .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nsinger = pd.read_sql(\"SELECT * FROM singer\", conn)\nsinger.columns = singer.columns.str.lower()\n\n# Group by citizenship and calculate the maximum net worth\nmax_net_worth = singer.groupby('citizenship')['net_worth_millions'].max()\n\n# Sort the data by citizenship in ascending order\nmax_net_worth = max_net_worth.sort_index()\n\n# Create a bar plot\nplt.bar(max_net_worth.index, max_net_worth.values)\n\n# Set the labels and title\nplt.xlabel('Citizenship')\nplt.ylabel('Max Net Worth (Millions)')\nplt.title('Max Net Worth by Citizenship')\n\n# Display the plot\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "Bar graph to show the total number from different nationality",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot.columns = pilot.columns.str.lower()\n\n# Grouping the data by nationality and counting the occurrences\nnationality_counts = pilot.groupby('nationality').size()\n\n# Creating a bar plot\nplt.bar(nationality_counts.index, nationality_counts.values)\n\n# Adding labels and title\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Pilots by Nationality')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Compare the number of participants in each participant type code using a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nParticipants = pd.read_sql(\"SELECT * FROM Participants\", conn)\nParticipants.columns = Participants.columns.str.lower()\n\n# Grouping the data by participant_type_code and counting the occurrences\ngrouped_data = Participants.groupby('participant_type_code').size()\n\n# Creating a bar plot\nplt.bar(grouped_data.index, grouped_data.values)\n\n# Adding labels and title\nplt.xlabel('Participant Type Code')\nplt.ylabel('Count')\nplt.title('Number of Participants by Type')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "e_government",
    "question": "What is the scatter plot of the length of the last name and the count of individuals with that length who have been contact individuals for an organization?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nindividuals = pd.read_sql(\"SELECT * FROM individuals\", conn)\norganization_contact_individuals = pd.read_sql(\"SELECT * FROM organization_contact_individuals\", conn)\nindividuals.columns = individuals.columns.str.lower()\norganization_contact_individuals.columns = organization_contact_individuals.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(individuals, organization_contact_individuals, on='individual_id')\n\n# Calculate the length of individual_last_name and count the occurrences\nresult_df = merged_df['individual_last_name'].str.len().value_counts().reset_index()\nresult_df.columns = ['length', 'count']\n\n# Plot the scatter plot\nplt.scatter(result_df['length'], result_df['count'])\nplt.xlabel('Length of individual_last_name')\nplt.ylabel('Count')\nplt.title('Scatter plot of length of individual_last_name')\nplt.show()"
  },
  {
    "db_id": "restaurant_1",
    "question": "For those female students with age is older than 18 who are not majoring in 600, tell me how many students of different first names using a bar chart, sort bar from low to high order.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the Student table\nstudent_data = pd.read_sql(\"SELECT * FROM Student\", conn)\n\n# Convert column names to lowercase\nstudent_data.columns = student_data.columns.str.lower()\n\n# Filter the data based on the conditions\nfiltered_data = student_data[(student_data['age'] > 18) & (student_data['major'] != 600) & (student_data['sex'] == 'F')]\n\n# Group the data by Fname and count the occurrences\ngrouped_data = filtered_data.groupby('fname').size().reset_index(name='count')\n\n# Sort the data by Fname in ascending order\nsorted_data = grouped_data.sort_values('fname')\n\n# Generate the bar plot\nplt.bar(sorted_data['fname'], sorted_data['count'])\nplt.xlabel('Fname')\nplt.ylabel('Count')\nplt.title('Number of Students by Fname')\nplt.show()"
  },
  {
    "db_id": "device",
    "question": "Return a bar chart showing how many shops in each location , and order in ascending by the x-axis .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nshop = pd.read_sql(\"SELECT * FROM shop\", conn)\nshop.columns = shop.columns.str.lower()\n\n# Group by location and count the occurrences\nlocation_counts = shop.groupby('location').size().reset_index(name='count')\n\n# Sort by location in ascending order\nlocation_counts = location_counts.sort_values('location')\n\n# Create bar plot\nplt.bar(location_counts['location'], location_counts['count'])\nplt.xlabel('Location')\nplt.ylabel('Count')\nplt.title('Number of Shops by Location')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Show me a line chart of how how many installation date change over the installation date, and could you list from low to high by the X-axis?",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the station table\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\n\n# Convert column names to lowercase\nstation.columns = station.columns.str.lower()\n\n# Perform the SQL query\nresult = station.groupby('installation_date').size().reset_index(name='count').sort_values('installation_date')\n\n# Plot the line chart\nplt.plot(result['installation_date'], result['count'])\nplt.xlabel('Installation Date')\nplt.ylabel('Count')\nplt.title('Number of Installations by Date')\nplt.show()"
  },
  {
    "db_id": "local_govt_in_alabama",
    "question": "Please draw a bar to show the total number of participants in each type code, and order in desc by the Participant_Type_Code.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the Participants table\nparticipants = pd.read_sql(\"SELECT * FROM Participants\", conn)\n\n# Convert column names to lowercase\nparticipants.columns = participants.columns.str.lower()\n\n# Perform the SQL query\nresult = participants.groupby('participant_type_code').size().reset_index(name='count')\nresult = result.sort_values('participant_type_code', ascending=False)\n\n# Generate the bar chart\nplt.bar(result['participant_type_code'], result['count'])\nplt.xlabel('Participant Type Code')\nplt.ylabel('Count')\nplt.title('Number of Participants by Participant Type Code')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "For each type , how many ships are there Plot them as bar chart , list from high to low by the total number please .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Group by 'type' and count the occurrences\nship_count = ship.groupby('type').size().reset_index(name='count')\n\n# Sort the dataframe by count in descending order\nship_count = ship_count.sort_values(by='count', ascending=False)\n\n# Plot the bar chart\nplt.bar(ship_count['type'], ship_count['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Ship Count by Type')\nplt.show()"
  },
  {
    "db_id": "game_injury",
    "question": "List the number of games in each season with a line chart , and display X in asc order .",
    "chart": "Line",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\ngame = pd.read_sql(\"SELECT * FROM game\", conn)\ngame.columns = game.columns.str.lower()\n\n# Grouping the data by season and counting the number of games in each season\nseason_count = game.groupby('season').size().reset_index(name='count')\n\n# Sorting the data by season in ascending order\nseason_count = season_count.sort_values('season')\n\n# Creating a line plot\nplt.plot(season_count['season'], season_count['count'])\n\n# Adding labels and title\nplt.xlabel('Season')\nplt.ylabel('Count')\nplt.title('Number of Games by Season')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "small_bank_1",
    "question": "Show me a bar chart displaying the total savings balance for each customer with an account.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\naccounts = pd.read_sql(\"SELECT * FROM accounts\", conn)\nsavings = pd.read_sql(\"SELECT * FROM savings\", conn)\naccounts.columns = accounts.columns.str.lower()\nsavings.columns = savings.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(accounts, savings, on='custid')\n\n# Group by name and calculate the sum of balance\ngrouped_df = merged_df.groupby('name')['balance'].sum().reset_index()\n\n# Plot the bar chart\nplt.bar(grouped_df['name'], grouped_df['balance'])\nplt.xlabel('Name')\nplt.ylabel('Total Balance')\nplt.title('Total Balance by Name')\nplt.show()"
  },
  {
    "db_id": "restaurant_1",
    "question": "Show me a scatter plot of major and the total number for .",
    "chart": "Scatter",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Student table\nstudent_df = pd.read_sql(\"SELECT * FROM Student\", conn)\n\n# Convert column names to lowercase\nstudent_df.columns = student_df.columns.str.lower()\n\n# Perform the query and group by Major\ngrouped_df = student_df.groupby('major').size().reset_index(name='count')\n\n# Scatter plot\nplt.scatter(grouped_df['major'], grouped_df['count'])\nplt.xlabel('Major')\nplt.ylabel('Count')\nplt.title('Number of Students by Major')\nplt.show()"
  },
  {
    "db_id": "wrestler",
    "question": "Give the proportion of the number of locations of all wrestlers with a pie chart .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nwrestler = pd.read_sql(\"SELECT * FROM wrestler\", conn)\nwrestler.columns = wrestler.columns.str.lower()\n\n# Group by location and count the number of wrestlers in each location\nlocation_counts = wrestler.groupby('location').size().reset_index(name='count')\n\n# Plotting a pie chart\nplt.pie(location_counts['count'], labels=location_counts['location'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "twitter_1",
    "question": "Find the name of each user and number of tweets tweeted by each of them Visualize by bar chart, and order Y-axis from low to high order please.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the user_profiles table\nuser_profiles = pd.read_sql(\"SELECT * FROM user_profiles\", conn)\nuser_profiles.columns = map(str.lower, user_profiles.columns)\n\n# Read the tweets table\ntweets = pd.read_sql(\"SELECT * FROM tweets\", conn)\ntweets.columns = map(str.lower, tweets.columns)\n\n# Merge the user_profiles and tweets tables on uid column\nmerged_data = pd.merge(user_profiles, tweets, on=\"uid\")\n\n# Perform the SQL query and group by uid, count the number of tweets for each user\nresult = merged_data.groupby(\"uid\").size().reset_index(name=\"count\")\n\n# Sort the result by count in ascending order\nresult = result.sort_values(\"count\")\n\n# Plot the bar chart\nplt.bar(result[\"uid\"], result[\"count\"])\nplt.xlabel(\"User ID\")\nplt.ylabel(\"Number of Tweets\")\nplt.title(\"Number of Tweets per User\")\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "List all payment methods and number of payments using each payment methods Plot them as bar chart, sort by the Y in descending.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Customer_Payments table\ncustomer_payments = pd.read_sql(\"SELECT * FROM Customer_Payments\", conn)\n\n# Convert column names to lowercase\ncustomer_payments.columns = customer_payments.columns.str.lower()\n\n# Perform the SQL query\npayment_counts = customer_payments.groupby('payment_method_code').size().reset_index(name='count')\npayment_counts = payment_counts.sort_values('count', ascending=False)\n\n# Generate the bar plot\nplt.bar(payment_counts['payment_method_code'], payment_counts['count'])\nplt.xlabel('Payment Method Code')\nplt.ylabel('Count')\nplt.title('Payment Method Counts')\nplt.show()"
  },
  {
    "db_id": "tracking_software_problems",
    "question": "Can you create a bar chart displaying the product id and the count of problems for each product in the database?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nproblems = pd.read_sql(\"SELECT * FROM problems\", conn)\nproduct = pd.read_sql(\"SELECT * FROM product\", conn)\nproblems.columns = problems.columns.str.lower()\nproduct.columns = product.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(problems, product, on='product_id')\n\n# Group by product_id and count\ngrouped_df = merged_df.groupby('product_id').size().reset_index(name='count')\n\n# Plot bar chart\nplt.bar(grouped_df['product_id'], grouped_df['count'])\nplt.xlabel('Product ID')\nplt.ylabel('Count')\nplt.title('Number of Problems per Product')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "List the name and the number of stations for all the cities that have at least 15 stations . Show bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstation.columns = station.columns.str.lower()\n\n# Group by city and count the number of rows\ncity_counts = station.groupby('city').size().reset_index(name='count')\n\n# Create a bar plot\nplt.bar(city_counts['city'], city_counts['count'])\nplt.xlabel('City')\nplt.ylabel('Count')\nplt.title('Number of Stations in Each City')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Draw a bar chart for what is the name of every city that has at least 15 stations and how many stations does it have?, and order by the x axis in desc.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"station\" table\nstation_data = pd.read_sql(\"SELECT * FROM station\", conn)\n\n# Convert column names to lowercase\nstation_data.columns = station_data.columns.str.lower()\n\n# Perform the SQL query\nresult = station_data.groupby('city').size().reset_index(name='count').sort_values('city', ascending=False)\n\n# Create the bar plot\nplt.bar(result['city'], result['count'])\nplt.xlabel('City')\nplt.ylabel('Count')\nplt.title('Number of Stations in Each City')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "What is the scatter plot of the number of exhibitions and country for each artist?",
    "chart": "Scatter",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nartist = pd.read_sql(\"SELECT * FROM artist\", conn)\nexhibition.columns = exhibition.columns.str.lower()\nartist.columns = artist.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(exhibition, artist, on='artist_id')\n\n# Group by country and count the number of exhibitions\ngrouped_df = merged_df.groupby('country').size().reset_index(name='exhibitions')\n\n# Create scatter plot\nplt.scatter(grouped_df['country'], grouped_df['exhibitions'])\nplt.xlabel('Country')\nplt.ylabel('Exhibitions')\nplt.title('Number of Exhibitions by Country')\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "What is the total number of each ship type ? Give me a bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Group by 'type' and count the occurrences\nship_count = ship.groupby('type').size().reset_index(name='count')\n\n# Create bar plot\nplt.bar(ship_count['type'], ship_count['count'])\nplt.xlabel('Type')\nplt.ylabel('Count')\nplt.title('Ship Type Count')\nplt.show()"
  },
  {
    "db_id": "theme_gallery",
    "question": "Find dates and attendance for exhibitions that happened in 2004, show me the attendance by date with a bar chart, and rank in ascending by the X-axis.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the exhibition_record table\nexhibition_record = pd.read_sql(\"SELECT * FROM exhibition_record\", conn)\nexhibition_record.columns = map(str.lower, exhibition_record.columns)\n\n# Read the exhibition table\nexhibition = pd.read_sql(\"SELECT * FROM exhibition\", conn)\nexhibition.columns = map(str.lower, exhibition.columns)\n\n# Merge the two tables based on exhibition_id\nmerged_data = pd.merge(exhibition_record, exhibition, on=\"exhibition_id\")\n\n# Filter the data for year 2004\nfiltered_data = merged_data[merged_data[\"year\"] == 2004]\n\n# Sort the data by date\nsorted_data = filtered_data.sort_values(\"date\")\n\n# Plot the bar chart\nplt.bar(sorted_data[\"date\"], sorted_data[\"attendance\"])\nplt.xlabel(\"Date\")\nplt.ylabel(\"Attendance\")\nplt.title(\"Exhibition Attendance in 2004\")\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "For all storms with at least 1 death , compare the number of deaths by name with a bar graph , rank by the bars from low to high .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\nstorm.columns = storm.columns.str.lower()\n\n# Filter the storm dataframe\nfiltered_storm = storm[storm['number_deaths'] >= 1]\n\n# Sort the filtered dataframe by name\nsorted_storm = filtered_storm.sort_values('name')\n\n# Create the bar plot\nplt.bar(sorted_storm['name'], sorted_storm['number_deaths'])\nplt.xlabel('Name')\nplt.ylabel('Number of Deaths')\nplt.title('Storms with Number of Deaths >= 1')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "insurance_and_eClaims",
    "question": "Find the number of records of each policy type and its type code . Visualize by bar chart .",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npolicies = pd.read_sql(\"SELECT * FROM policies\", conn)\npolicies.columns = policies.columns.str.lower()\n\n# Grouping the data by policy_type_code and counting the occurrences\npolicy_counts = policies.groupby('policy_type_code').size()\n\n# Creating a bar plot\nplt.bar(policy_counts.index, policy_counts.values)\n\n# Adding labels and title\nplt.xlabel('Policy Type Code')\nplt.ylabel('Count')\nplt.title('Number of Policies by Policy Type Code')\n\n# Displaying the plot\nplt.show()"
  },
  {
    "db_id": "storm_record",
    "question": "How many storms have impacted the region \"Denmark\" and can you display their names in a bar chart?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nconn = sqlite3.connect(url)\naffected_region = pd.read_sql(\"SELECT * FROM affected_region\", conn)\nregion = pd.read_sql(\"SELECT * FROM region\", conn)\nstorm = pd.read_sql(\"SELECT * FROM storm\", conn)\n\naffected_region.columns = affected_region.columns.str.lower()\nregion.columns = region.columns.str.lower()\nstorm.columns = storm.columns.str.lower()\n\n# Join tables\nmerged_df = pd.merge(pd.merge(affected_region, region, on='region_id'), storm, on='storm_id')\n\n# Filter by region_name\nfiltered_df = merged_df[merged_df['region_name'] == 'Denmark']\n\n# Group by storm name and count occurrences\ngrouped_df = filtered_df.groupby('name').size().reset_index(name='count')\n\n# Plot bar chart\nplt.bar(grouped_df['name'], grouped_df['count'])\nplt.xlabel('Storm Name')\nplt.ylabel('Count')\nplt.title('Number of Occurrences of Storms in Denmark')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "pilot_record",
    "question": "Can you draw a bar chart to show the number of positions of the pilots?, and I want to rank by the Y from low to high.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nconn = sqlite3.connect(url)\n\n# Read the pilot table\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\n\n# Convert column names to lowercase\npilot.columns = pilot.columns.str.lower()\n\n# Perform the SQL query\nresult = pilot.groupby('position').size().reset_index(name='count').sort_values('count')\n\n# Generate the bar chart\nplt.bar(result['position'], result['count'])\nplt.xlabel('Position')\nplt.ylabel('Count')\nplt.title('Number of Pilots by Position')\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Return the number of venues of each workshop in a bar chart , and rank X-axis in ascending order .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport matplotlib.pyplot as plt\nimport pandas as pd\nconn = sqlite3.connect(url)\nworkshop = pd.read_sql(\"SELECT * FROM workshop\", conn)\nworkshop.columns = workshop.columns.str.lower()\n\n# Grouping the data by venue and counting the occurrences\nvenue_counts = workshop.groupby('venue').size().reset_index(name='count')\n\n# Sorting the data by venue in ascending order\nvenue_counts = venue_counts.sort_values('venue')\n\n# Creating the bar plot\nplt.bar(venue_counts['venue'], venue_counts['count'])\nplt.xlabel('Venue')\nplt.ylabel('Count')\nplt.title('Workshop Venues')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "workshop_paper",
    "question": "Bar graph to show how many result from different result, sort in asc by the X.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the acceptance table\nacceptance = pd.read_sql(\"SELECT * FROM acceptance\", conn)\n\n# Convert column names to lowercase\nacceptance.columns = acceptance.columns.str.lower()\n\n# Perform the SQL query\nresult_counts = acceptance.groupby('result').size().reset_index(name='count')\nresult_counts = result_counts.sort_values('result')\n\n# Generate the bar plot\nplt.bar(result_counts['result'], result_counts['count'])\nplt.xlabel('Result')\nplt.ylabel('Count')\nplt.title('Distribution of Results')\nplt.show()"
  },
  {
    "db_id": "tvshow",
    "question": "Give me a bar chart showing the comparison of the pixel aspect ratio and the nation of the tv channels that do not use English, I want to display in desc by the Pixel_aspect_ratio_PAR.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the tv_channel table\ntv_channel = pd.read_sql(\"SELECT * FROM tv_channel\", conn)\n\n# Convert column names to lowercase\ntv_channel.columns = tv_channel.columns.str.lower()\n\n# Filter rows where language is not English\nfiltered_tv_channel = tv_channel[tv_channel['language'] != 'English']\n\n# Group by Pixel_aspect_ratio_PAR and count occurrences\ngrouped_tv_channel = filtered_tv_channel.groupby('pixel_aspect_ratio_par').size().reset_index(name='count')\n\n# Sort by Pixel_aspect_ratio_PAR in descending order\nsorted_tv_channel = grouped_tv_channel.sort_values('pixel_aspect_ratio_par', ascending=False)\n\n# Generate bar plot\nplt.bar(sorted_tv_channel['pixel_aspect_ratio_par'], sorted_tv_channel['count'])\nplt.xlabel('Pixel_aspect_ratio_PAR')\nplt.ylabel('Count')\nplt.title('Count of Pixel_aspect_ratio_PAR for Non-English TV Channels')\nplt.show()"
  },
  {
    "db_id": "machine_repair",
    "question": "What are the names of technicians with the machine series that they repair? Show me how many machines for each technician's name, I want to display by the x-axis in ascending.",
    "chart": "Bar",
    "hardness": "Hard",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the repair_assignment table\nrepair_assignment = pd.read_sql(\"SELECT * FROM repair_assignment\", conn)\n\n# Read the machine table\nmachine = pd.read_sql(\"SELECT * FROM machine\", conn)\n\n# Read the technician table\ntechnician = pd.read_sql(\"SELECT * FROM technician\", conn)\n\n# Convert column names to lowercase\nrepair_assignment.columns = repair_assignment.columns.str.lower()\nmachine.columns = machine.columns.str.lower()\ntechnician.columns = technician.columns.str.lower()\n\n# merge the tables\nmerged_data = pd.merge(repair_assignment, machine, on=\"machine_id\")\nmerged_data = pd.merge(merged_data, technician, on=\"technician_id\")\n\n# perform the aggregation\naggregated_data = merged_data.groupby(\"name\").size().reset_index(name=\"count\")\naggregated_data = aggregated_data.sort_values(\"name\")\n\n# generate the bar plot\nplt.bar(aggregated_data[\"name\"], aggregated_data[\"count\"])\nplt.xlabel(\"Name\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of Repairs by Name\")\nplt.xticks(rotation=90)\nplt.show()\n"
  },
  {
    "db_id": "wrestler",
    "question": "A pie chart about the proportion of the total number for each team .",
    "chart": "Pie",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nelimination = pd.read_sql(\"SELECT * FROM elimination\", conn)\nelimination.columns = elimination.columns.str.lower()\n\n# Grouping the data by team and counting the occurrences\nteam_counts = elimination.groupby('team').size()\n\n# Creating a pie chart\nplt.pie(team_counts, labels=team_counts.index, autopct='%1.1f%%')\nplt.title('Team Distribution')\nplt.show()"
  },
  {
    "db_id": "products_for_hire",
    "question": "How many bookings did each customer make? Show the customer id as the Y-axis and the first name as the X-axis in a bar chart, and could you sort by the X-axis from low to high?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the Customers table\ncustomers = pd.read_sql(\"SELECT * FROM Customers\", conn)\n\n# Read the bookings table\nbookings = pd.read_sql(\"SELECT * FROM bookings\", conn)\n\n# Convert column names to lowercase\ncustomers.columns = customers.columns.str.lower()\nbookings.columns = bookings.columns.str.lower()\n\n# merge the two tables on customer_id\nmerged_data = pd.merge(customers, bookings, on=\"customer_id\")\n\n# sort the merged data by first_name\nsorted_data = merged_data.sort_values(by=\"first_name\")\n\n# plot the bar chart\nplt.bar(sorted_data[\"first_name\"], sorted_data[\"customer_id\"])\nplt.xlabel(\"First Name\")\nplt.ylabel(\"Customer ID\")\nplt.title(\"Customer ID by First Name\")\nplt.show()\n"
  },
  {
    "db_id": "pilot_record",
    "question": "Please compare the frequency of the position of the pilots using a bar chart , and could you sort from low to high by the bar please ?",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\npilot = pd.read_sql(\"SELECT * FROM pilot\", conn)\npilot.columns = pilot.columns.str.lower()\n\n# Grouping the data by position and counting the occurrences\nposition_counts = pilot.groupby('position').size().reset_index(name='count')\n\n# Sorting the data by position in ascending order\nposition_counts = position_counts.sort_values('position')\n\n# Creating the bar plot\nplt.bar(position_counts['position'], position_counts['count'])\nplt.xlabel('Position')\nplt.ylabel('Count')\nplt.title('Number of Pilots by Position')\nplt.show()"
  },
  {
    "db_id": "browser_web",
    "question": "Draw a bar chart of operating system versus the total number, list from low to high by the X-axis.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path/to/database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the web_client_accelerator table\ndf = pd.read_sql(\"SELECT * FROM web_client_accelerator\", conn)\n\n# Convert column names to lowercase\ndf.columns = df.columns.str.lower()\n\n# Perform the SQL query\nresult = df.groupby('operating_system').size().reset_index(name='count').sort_values('operating_system')\n\n# Create the bar plot\nplt.bar(result['operating_system'], result['count'])\nplt.xlabel('Operating System')\nplt.ylabel('Count')\nplt.title('Number of Clients by Operating System')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "Show me a bar chart displaying the count of stations with more than 12 bikes available.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nstation = pd.read_sql(\"SELECT * FROM station\", conn)\nstatus = pd.read_sql(\"SELECT * FROM status\", conn)\nstation.columns = station.columns.str.lower()\nstatus.columns = status.columns.str.lower()\n\n# Merge station and status tables\nmerged_df = pd.merge(station, status, left_on='id', right_on='station_id')\n\n# Filter rows where bikes_available > 12\nfiltered_df = merged_df[merged_df['bikes_available'] > 12]\n\n# Group by id and count the number of rows\ngrouped_df = filtered_df.groupby('id').size().reset_index(name='count')\n\n# Plot the bar chart\nplt.bar(grouped_df['id'], grouped_df['count'])\nplt.xlabel('Station ID')\nplt.ylabel('Count')\nplt.title('Number of Stations with Bikes Available > 12')\nplt.show()"
  },
  {
    "db_id": "driving_school",
    "question": "How many staff members reside in each state, province, or county, represented by a pie chart?",
    "chart": "Pie",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nAddresses = pd.read_sql(\"SELECT * FROM Addresses\", conn)\nStaff = pd.read_sql(\"SELECT * FROM Staff\", conn)\nAddresses.columns = Addresses.columns.str.lower()\nStaff.columns = Staff.columns.str.lower()\n\n# Perform the join operation\nmerged_df = pd.merge(Addresses, Staff, left_on='address_id', right_on='staff_address_id')\n\n# Group by state_province_county and count the number of occurrences\ngrouped_df = merged_df.groupby('state_province_county').size().reset_index(name='count')\n\n# Plot the pie chart\nplt.pie(grouped_df['count'], labels=grouped_df['state_province_county'], autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()"
  },
  {
    "db_id": "bike_1",
    "question": "For each city, return the highest latitude among its stations Show bar chart, and could you show X-axis in ascending order?",
    "chart": "Bar",
    "hardness": "Easy",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Connect to the SQLite database\nurl = \"path_to_your_database.db\"\nconn = sqlite3.connect(url)\n\n# Read the data from the \"station\" table\nstation_data = pd.read_sql(\"SELECT * FROM station\", conn)\n\n# Convert column names to lowercase\nstation_data.columns = station_data.columns.str.lower()\n\n# Perform the SQL query\nresult = station_data.groupby(\"city\")[\"lat\"].max().reset_index().sort_values(\"city\")\n\n# Create the bar plot\nplt.bar(result[\"city\"], result[\"lat\"])\nplt.xlabel(\"City\")\nplt.ylabel(\"Max Latitude\")\nplt.title(\"Max Latitude by City\")\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "ship_mission",
    "question": "Return a bar chart showing the total number of ships' nationalities , display from low to high by the how many nationality .",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\nship = pd.read_sql(\"SELECT * FROM ship\", conn)\nship.columns = ship.columns.str.lower()\n\n# Group by nationality and count the occurrences\nnationality_count = ship.groupby('nationality').size().reset_index(name='count')\n\n# Sort by count in ascending order\nnationality_count = nationality_count.sort_values('count')\n\n# Plot the bar chart\nplt.bar(nationality_count['nationality'], nationality_count['count'])\nplt.xlabel('Nationality')\nplt.ylabel('Count')\nplt.title('Number of Ships by Nationality')\nplt.xticks(rotation=90)\nplt.show()"
  },
  {
    "db_id": "gymnast",
    "question": "Show me a bar chart representing the age distribution of gymnasts based on their total points earned.",
    "chart": "Bar",
    "hardness": "Medium",
    "code": "import sqlite3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nconn = sqlite3.connect(url)\ngymnast = pd.read_sql(\"SELECT * FROM gymnast\", conn)\npeople = pd.read_sql(\"SELECT * FROM people\", conn)\ngymnast.columns = gymnast.columns.str.lower()\npeople.columns = people.columns.str.lower()\n\n# Joining the tables\nmerged_df = pd.merge(gymnast, people, left_on='gymnast_id', right_on='people_id')\n\n# Grouping by age and counting the number of occurrences\ngrouped_df = merged_df.groupby('age').size().reset_index(name='count')\n\n# Sorting by total_points in descending order\nsorted_df = grouped_df.sort_values(by='count', ascending=False)\n\n# Creating the bar plot\nplt.bar(sorted_df['age'], sorted_df['count'])\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.title('Number of Gymnasts by Age')\nplt.show()"
  }
]